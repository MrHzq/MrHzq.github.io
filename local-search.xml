<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>个人简历(在职中)</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86(%E5%9C%A8%E8%81%8C%E4%B8%AD)/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86(%E5%9C%A8%E8%81%8C%E4%B8%AD)/</url>
    
    <content type="html"><![CDATA[<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>姓名：黄智强，年龄：29，工作经验：前端 - 7 年</p><p>目前情况：北京-作业帮</p><p>邮箱：<a href="mailto:&#x31;&#x33;&#x34;&#48;&#x32;&#51;&#x31;&#56;&#x34;&#53;&#x37;&#64;&#x31;&#x36;&#x33;&#46;&#99;&#111;&#x6d;">&#x31;&#x33;&#x34;&#48;&#x32;&#51;&#x31;&#56;&#x34;&#53;&#x37;&#64;&#x31;&#x36;&#x33;&#46;&#99;&#111;&#x6d;</a>，手机&#x2F;微信：13402318457</p><p>教育：2013 ~ 2017，本科</p><blockquote><p>点击可下载 PDF 版简历：<a href="https://www.yuque.com/attachments/yuque/0/2024/pdf/164458/1710495946686-2d1417fb-06e2-4b4d-8988-de8928ccb8c4.pdf?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2024/pdf/164458/1710495946686-2d1417fb-06e2-4b4d-8988-de8928ccb8c4.pdf%22,%22name%22:%22%E9%BB%84%E6%99%BA%E5%BC%BA-%E5%89%8D%E7%AB%AF-7%E5%B9%B4.pdf%22,%22size%22:123196,%22ext%22:%22pdf%22,%22source%22:%22%22,%22status%22:%22done%22,%22download%22:true,%22taskId%22:%22u50f885a9-f715-4320-b9aa-e57e75a1fd8%22,%22taskType%22:%22upload%22,%22type%22:%22application/pdf%22,%22__spacing%22:%22both%22,%22mode%22:%22title%22,%22id%22:%22n4XC7%22,%22margin%22:%7B%22top%22:true,%22bottom%22:true%7D,%22card%22:%22file%22%7D">黄智强-前端-7 年.pdf</a></p></blockquote><h2 id="个人优势"><a href="#个人优势" class="headerlink" title="个人优势"></a>个人优势</h2><ul><li>熟练掌握 <strong>HTML、JavaScript(ES6+)、CSS、TypeScript</strong> 等常用前端技术</li><li>熟练使用 <strong>Vue</strong> 和 <strong>React</strong> 框架，了解其原理并具有多年开发经验</li><li>具有大型 ToB SaaS 前端开发经验，具有复杂前端技术方案落地经验</li><li>具备<strong>全栈开发</strong>经验，具备 <strong>Devops 之研发流程</strong>实践经验</li><li>具有 <strong>Nodejs、低代码、微前端</strong>的实践与经验</li><li>具备<strong>项目管理与团队管理</strong>经验，做过 <strong>B 端 SCRM 产品</strong>，涉及 <strong>PC&#x2F;H5&#x2F;小程序</strong>端</li></ul><!-- 个人主页：[https://www.yuque.com/u53094](https://www.yuque.com/u53094) --><h2 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h2><h3 id="2019-09-～-2023-06：北京尘锋信息技术有限公司成都分公司"><a href="#2019-09-～-2023-06：北京尘锋信息技术有限公司成都分公司" class="headerlink" title="2019-09 ～ 2023-06：北京尘锋信息技术有限公司成都分公司"></a>2019-09 ～ 2023-06：北京尘锋信息技术有限公司成都分公司</h3><p>主要工作：负责前端关键功能开发；负责前端业务线团队管理；负责全栈开发内部系统；<br>主要技术：Vue 全家桶、React、TypeScript、Nodejs、Element、Antd；<br>角色变化：2019&#x2F;9 前端工程师；2020&#x2F;6 前端小组长；2021&#x2F;1 业务线前端 TL；2022&#x2F;1 全栈开发者；<br>个人奖项：2019 年技术之星；2020 年优秀团队；2021&#x2F;2022 年 Q4 绩效 A；2022 年 Q4 “看见”奖；</p><h3 id="2018-06-～-2019-08：成都八进制网络科技有限公司"><a href="#2018-06-～-2019-08：成都八进制网络科技有限公司" class="headerlink" title="2018-06 ～ 2019-08：成都八进制网络科技有限公司"></a>2018-06 ～ 2019-08：成都八进制网络科技有限公司</h3><p>主要工作：负责前端关键功能开发；负责开发项目管理；带领开发项目小组；<br>主要技术：Vue 全家桶、Element；<br>角色变化：2018&#x2F;6：前端工程师；2018&#x2F;9：前端小组长；</p><h3 id="2017-03-～-2018-06：成都云玺科技有限公司"><a href="#2017-03-～-2018-06：成都云玺科技有限公司" class="headerlink" title="2017-03 ～ 2018-06：成都云玺科技有限公司"></a>2017-03 ～ 2018-06：成都云玺科技有限公司</h3><p>主要工作：负责前端关键功能开发；<br>主要技术：Vue 全家桶、Element；<br>角色变化：2017&#x2F;3：实习；2017&#x2F;6：转正；</p><h2 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h2><h3 id="DevOps-平台：研发管理平台"><a href="#DevOps-平台：研发管理平台" class="headerlink" title="DevOps 平台：研发管理平台"></a>DevOps 平台：研发管理平台</h3><h4 id="参与角色：产品经理-全栈开发，2022-01-2023-06"><a href="#参与角色：产品经理-全栈开发，2022-01-2023-06" class="headerlink" title="参与角色：产品经理 &amp; 全栈开发，2022-01 ~ 2023-06"></a>参与角色：产品经理 &amp; 全栈开发，2022-01 ~ 2023-06</h4><p><strong>项目描述</strong>：PC 项目，打通了开发到上线的整个流程，实现产研协作流程的统一。本人负责迭代、发版等核心流程的设计与开发。</p><p><strong>主要技术</strong>：React、Antd、Nodejs、Midwayjs、TypeScript、MySQL、Protobufjs</p><p><strong>工作内容</strong>：<br>1、作为产品经理，负责功能的需求分析、产品设计和原型交付，确保符合产研的实际需求。<br>2、作为全栈开发，参与研发的全流程：版本管理、<strong>全栈开发（React + Nodejs）</strong>、功能测试、上线部署等。<br>3、负责技术攻坚，实现了 Protobuf 转前端接口代码(TS 语言)，实现了研发流程引擎开发。</p><p><strong>业务难点：</strong>当时遇到了【研发流程线上化】的业务难点<br>1、背景：之前的研发流程并不规范，各团队都有内部的流程与习惯，并且差异很大，很难直接转为线上。<br>2、行动：当时我是找了各部门的各角色(TL、研发)，收集进行现有的流程；再依据角色整理流程，然后进行各角色流程的衔接；最后将流程优化、简化、细化，补充各种规范，制定了新的产研开发流程，并最终实现线上化。在此过程中沉淀了《产研开发流程规范》、《分支管理规范》等文档<br>3、收获：内部业务先跟实际的使用人员进行沟通，了解核心问题与诉求，才能做出更实际的功能</p><p><strong>技术难点：</strong>当时遇到了【Protobuf 转为 TS 代码】的技术难点<br>1、背景：Protobuf 是谷歌推出的通用接口协议写法，支持将其转为 Java、Go 等语言，但是官方不支持转为 TS，所以就需要自研一套转换规则，并且还要考虑公司内部 Protobuf 的互相引用。<br>2、行动：在 Github 上找到了 Protobufjs 的库，能将最基本的 Protobuf 转为最基本的 JS 对象，但这还不够，所以又基于转换结果，自研额外流程：PB 内容解析器、import 关系解析、远程拉取 git 仓库代码、解析方法与响应等。之后再借助 handlebars 的模板功能，进行自定义的 TS 代码生成：制定 TS 类型转化规范、补充 TS 类型等，并使用公司内部的 fetch sdk 实现接口调用，最终完成了 TS 版的前端接口代码<br>3、收获：通过这种技术攻坚与源码深入，让我以后对新技术点的畏惧感降低了，提高了自己的学习能力。</p><p><strong>项目收获</strong>：通过该项目，多次经历产品设计到全栈开发的整个流程，既学会了产品思维，又扩展了技术的深度与广度，还对产研流程有了深入了解。最终提升了学习能力、分析能力、沟通能力、技术能力等</p><p><strong>项目业绩</strong>：<br>1、制定了研发流程规范，并推广到全公司，提高了产研协作效率。<br>2、提升了研发能效：人为犯错降低 90%，迭代效率提升 10%，上线时间节省 10%。<br>3、个人荣获：2022 年 Q4 绩效 A，2022 年 Q4 “看见”奖</p><p><strong>使用情况</strong>：产研使用人数 400+，迭代数量 1000+，发版次数 500+，应用数量 500+</p><h3 id="SaaS-产品：尘锋-SCRM"><a href="#SaaS-产品：尘锋-SCRM" class="headerlink" title="SaaS 产品：尘锋 SCRM"></a>SaaS 产品：尘锋 SCRM</h3><h4 id="参与角色：增长运营业务线前端-TL-核心开发，2019-09-2022-01"><a href="#参与角色：增长运营业务线前端-TL-核心开发，2019-09-2022-01" class="headerlink" title="参与角色：增长运营业务线前端 TL &amp; 核心开发，2019-09 ~ 2022-01"></a>参与角色：增长运营业务线前端 TL &amp; 核心开发，2019-09 ~ 2022-01</h4><p><strong>项目描述</strong>：PC&#x2F;H5 项目，公司主营项目，基于企业微信的一站式客户管理平台。增长运营业务能帮助客户提升销售转化率、实现业绩增长，其核心业务为获客、内容和触达。</p><p><strong>主要技术</strong>：Vue2、VueRouter、Vuex、Elememt、qiankun、fullcalendar</p><p><strong>工作内容</strong>：<br>1、负责【营销资料、营销计划、话术库】等核心业务的功能开发<br>2、核心技术栈为 <strong>Vue 全家桶</strong>，其次主导富文本编辑器、交互型日历等技术选型与开发。<br>3、参与需求内审，做技术相关性评估，项目进度把控等<br>4、处理团队的日常事务：任务分配、版本排期、跨部门协调、招聘以及团队成员培养。</p><p><strong>协作难点：</strong>当时遇到了【营销资料的多端展示】的协作难点<br>1、背景：刚开始营销资料是只在增长运营内部使用的，但随着业务的扩张，需要将营销资料在【APP、客服侧边栏、商城】等模块内使用，并还需要以各种形式(表格、图标等)展示<br>2、行动：为支持各模块的展示，决定专门封装营销资料展示组件，用于对外提供。我先是跟产品、设计部门达成统一后，决定提供固定的几种 UI 展示与业务功能。然后开发完后提供了 npm 包和单独页面给不同需求的团队使用<br>3、收获：遇到这种协作问题，可以先考虑是否能反推提供统一的解决方案，若不行再考虑定制化的提供组件，最后再考虑单独支持</p><p><strong>技术难点：</strong>当时遇到了【自定义日历功能】的技术难点<br>1、背景：当时需要实现跨日历的任务展示，并且还需要支持任务的自定义展示、可拖动任务、点击可看详情等各种复杂功能<br>2、行动：先找了开源的日历库，对比了【 Element 的日历组件】、【fullcalendar】、【Tui calendar】，根据 Github 的 stars 数量、issue 数、最近 commit 时间、功能的符合度、文档完善度等，综合考虑选择 fullcalendar 作为基础日历，然后基于它进行二次自研：更改源码、功能补充、样式覆盖、绑定自定义事件等，实现业务的功能与特定 UI 展示，并封装成 custom-fullcalendar 的 npm 包，作为团队资产，以供其他模块使用<br>3、收获：通过这种技术攻坚与源码深入，既提高了技术与学习能力，又锻炼了复杂业务的解决能力。</p><p><strong>项目收获</strong>：作为开发人员，学到了：富文本、日历、视频等技术，并作为前端版本负责人，锻炼了协作、沟通等能力；作为团队 TL，锻炼了：团队管理、目标管理、业务理解、人才培养等能力</p><p><strong>项目业绩</strong>：<br>1、培养了数名前端骨干人员，晋升高级前端 1 人。<br>2、输出业务架构和功能模块等文档，加强了成员对业务的熟悉度，提高了开发效率。<br>3、荣获：2020 年优秀团队，2021 年 Q4 个人绩效 A</p><p><strong>使用情况</strong>：服务公司 5000+，部门多个模块使用率占据前十</p><p><strong>项目链接</strong>：<a href="https://www.dustess.com/growth-operation">https://www.dustess.com/growth-operation</a></p><h3 id="营销低代码平台"><a href="#营销低代码平台" class="headerlink" title="营销低代码平台"></a>营销低代码平台</h3><h4 id="参与角色：项目负责人，2019-10-2021-12"><a href="#参与角色：项目负责人，2019-10-2021-12" class="headerlink" title="参与角色：项目负责人，2019-10 ~ 2021-12"></a>参与角色：项目负责人，2019-10 ~ 2021-12</h4><p><strong>项目描述</strong>：PC 项目，供客户公司的市场部门使用，通过拖曳可快速产出 H5 页面，用于辅助获客</p><p><strong>主要技术</strong>：Vue2、VueRouter、Vuex、Elememt、moveable、pdfjs</p><p><strong>工作内容</strong>：<br>1、主导整个系统的技术选型、架构设计、以及交互体验，调研并制定技术可行性方案。<br>2、独立负责所有功能开发，核心技术栈为 Vue 全家桶<br>3、采用 Vuex 实现数据流转与时光回溯，基于 moveable 二次开发实现任意拖曳，使用 pdfjs 将 PDF 转为宣传册，使用 html2canvas 实现海报功能</p><p><strong>项目难点</strong>：当时遇到了【没有开发过低代码平台】的难点<br>1、背景：当时没做过低代码平台，该平台要求组件任意拖曳、组件有层级、组件可组合&#x2F;伸缩、画布大小可变等功能，对于我来说挑战难度大，复杂度很高<br>2、行动：先找市面上已有的竞品，去深度体验功能、交互，熟悉业务流程；其次去找开源的项目代码，去了解业务架构、核心技术点、数据结构、关键流程代码等；最后再收集、整理，写了一份项目的技术可行性方案，进行讨论、评估等；<br>3、收获：遇到陌生的领域，最好的方式就是去找竞品，看它的功能、交互、设计等，能更快的入门；并对学习新技术领域有了自己的一套方法，为以后的新技术攻坚打下了基础。</p><p><strong>技术难点</strong>：当时遇到了【组件的数据结构定义】的技术难点<br>1、背景：当时是从零搭建低代码平台，所以欠缺相关经验，但知道组件数据结构是很核心的，基于它才能实现组件的展示、拖动等上层功能，并且它也决定了系统的稳定性、扩展性<br>2、行动：通过找开源项目，对比了[码良、鲁班、H5-Dooring]三个，深研其中的设计思路，总结数据结构的优缺点(扩展性、稳定性、复杂度等)，最后结合实际业务，定义出了通用数据结构，基础信息有 id、name、label、type，采用 style 对象存放样式(位置、宽高)、props 对象存放属性(颜色、字体)、animate 对象存放进出场动画，最终该数据结构为后续的版本迭代提供了支撑。<br>3、收获：通过实际调研，更深入了解低代码平台的技术体系，为后面的代码开发、产品设计提供了方向</p><p><strong>技术难点</strong>：当时遇到了【复杂画布功能】的技术难点<br>1、背景：业务上画布需要提供多种尺寸选择，并支持画布整体缩放，但画布的尺寸改变，不仅会影响到画布内的组件尺寸，并且还涉及到画布的边界更改。所以画布尺寸这个功能技术上存在难度，并且影响范围又广，很容易产生交互与功能上的问题。<br>2、行动：当时先调研竞品，发现它的画布支持[50%~200%]的缩放，每次缩放间隔为 5%；发现画布尺寸改变后，会按照画布变得比例，去等比例改变其中的组件的宽高、位置、字体等，最终实现画布与组件的等比例改变，符合用户的操作感官。根据调研结果整理出了《低代码平台-画布尺寸设计方案》文档，再根据公司实际业务制定了画布的尺寸大小、缩放比例、组件变得比例、边界处理等技术实现概要。</p><p><strong>技术难点</strong>：当时遇到了【组件自定义拖动】的技术难点<br>1、背景：业务上需要支持画布组件的任意拖曳，并支持分组、对齐、辅助线等等。这个技术对我来说很陌生，并且自己实现的话需要很大精力，并且可能考虑的还不够全面。<br>2、行动：借用已开源的库，在 Github 上面找到了 vuedraggable、moveable，发现 moveable 的使用场景、功能交互很契合业务，因此将 moveable 做为基础，然后针对业务进行二次开发：更改辅助线颜色、更改选中展示、增加快捷键、动态更改拖曳边界等，最终实现业务功能与交互操作</p><p><strong>项目收获</strong>：从零到一的开发了低代码平台，对该领域有了实战经验；从中提升了自己的学习、沟通、协作、解决问题的能力</p><p><strong>项目业绩</strong>：<br>1、从零到一落地了公司的低代码平台体系，提供了技术储备<br>2、沉淀 《低代码平台开发分享》《低代码平台-数据结构设计》《低代码平台-画布尺寸设计方案》等文档<br>3、产出了平台组件、渲染引擎、画布容器等组件，发布到私有 npm 以供团队使用<br>4、个人荣获：2019 年尘锋技术之星</p><p><strong>使用情况</strong>：上线至今，模板产量 200+，H5 产量 300W+，服务公司 5000+</p><h3 id="营销资料落地页"><a href="#营销资料落地页" class="headerlink" title="营销资料落地页"></a>营销资料落地页</h3><h4 id="参与角色：项目负责人，2019-09-2021-12"><a href="#参与角色：项目负责人，2019-09-2021-12" class="headerlink" title="参与角色：项目负责人，2019-09 ~ 2021-12"></a>参与角色：项目负责人，2019-09 ~ 2021-12</h4><p><strong>项目描述</strong>：H5 端，用于在微信内展示资料，会上报用户的操作轨迹，以便筛选优质用户，提高转化率。</p><p><strong>主要技术</strong>：Vue2、Vant、mk-wx-auth、mk-wx-sdk、mk-web-report-sdk</p><p><strong>工作内容</strong>：<br>1、制定项目计划和任务分配，负责技术架构，主导技术选型与开发，核心技术栈为 Vue 全家桶。<br>2、采用 Vue2 搭建项目，使用 Vant 开发页面，基于二次封装的 Axios 获取数据<br>3、设计并开发操作轨迹上报 mk-web-report-sdk 工具包，实现了对用户操作的精确追踪与及时上报。<br>4、封装微信生态 npm：mk-wx-auth(授权)、 mk-wx-sdk(sdk 注册) ，统一流程，降低接入成本</p><p><strong>业务难点</strong>：当时遇到了【资料的多场景展示】的业务难点<br>1、背景：当时业务场景有：微信小程序、企微小程序、微信 H5、企微 H5、普通浏览器、App、iOS、安卓、移动端、windows 等各场景，不同场景下业务、交互、功能都有差别，并且资料本身还有预览、发布、删除等状态，所以资料的功能开发需要考虑到以上情况，并且还需要应对后续新的场景。<br>2、行动：针对以上情况，我先从技术侧上出发，通过制定统一的资料 url 生成规则，将各场景转化为地址参数，关键参数有：id、type、scene，并根据 scene 增删参数，这样在项目内就可以获取地址上的参数并做对应处理；然后再从产品侧出发，我在制定 url 规则时会拉上产品，一起基于资料的真实业务，归纳场景，合理扩展，达成一致，最终定义出了可扩展的资料 url 规则<br>3、收获：针对复杂业务场景，首先是从技术上实现功能，其次再通过产品侧统一规范，才能避免重复开发</p><p><strong>技术难点</strong>：<br>1、操作轨迹上报：需要深入框架生命周期和微信 SDK 回调，并考虑实际操作和时机，最终开发了操作轨迹上报 SDK，实现了各种行为的准确上报<br>2、视频渲染的兼容性问题：为了解决视频渲染偶尔黑屏问题，测试了各机型的视频渲染，然后再结合视频编码与分辨率，最终找到原因并成功解决。</p><p><strong>项目收获</strong>：通过该 C 端项目，对微信、企微等生态有了更深的了解，并提升了复杂业务的解决能力。</p><p><strong>项目业绩</strong>：<br>1、沉淀《行为轨迹上报 SDK 文档》，提高协作效率，补充团队资产<br>2、沉淀《资料 url 生成规则规范文档》，减少跨部门沟通成本<br>3、基于 2 封装了 create-h5-url 工具包，提高开发效率</p><p><strong>使用情况</strong>：服务公司 5000+，H5 日均 PV 超过 1W</p><h2 id="掌握技能"><a href="#掌握技能" class="headerlink" title="掌握技能"></a>掌握技能</h2><p><strong>基础</strong>：HTML、CSS、JavaScript(ES6+)、TypeScript 等前端技术</p><p><strong>框架</strong>：Vue2、Vue3、Vuex、VueRouter、React、UmiJS、Qiankun、Nextjs</p><p><strong>UI 库</strong>：Elememt、Vant、Antd、Mui、Tailwindcss</p><p><strong>工具库</strong>：axios、ali-oss、swiper、fullcalendar、html2canvas、wangeditor、moveable、antv&#x2F;x6、handlebars、protobufjs、xgplayer、pdfjs、animate.css</p><p><strong>后端</strong>：Nodejs、Midwayjs、Nestjs、MySQL、Typeorm、Prisma</p><p><strong>经验</strong>：全栈开发、低代码平台、ToB、SaaS、SCRM、大型前端项目、微前端、项目管理、团队管理、微信&#x2F;企微生态对接、Devops</p><h2 id="社交主页"><a href="#社交主页" class="headerlink" title="社交主页"></a>社交主页</h2><p><a href="/about/">关于我</a></p><p><a href="/links/">更多的我</a></p><h2 id="年终总结"><a href="#年终总结" class="headerlink" title="年终总结"></a>年终总结</h2><blockquote><p>可以认识更深的我~</p></blockquote><a href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/" title="2023-年总结，平仄参半">2023-年总结，平仄参半</a>]]></content>
    
    
    <categories>
      
      <category>职业上一二事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端</tag>
      
      <tag>简历</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3、从零到一免费线上博客搭建</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E5%AE%9E%E8%B7%B5/3%E3%80%81%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%85%8D%E8%B4%B9%E7%BA%BF%E4%B8%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E5%AE%9E%E8%B7%B5/3%E3%80%81%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%85%8D%E8%B4%B9%E7%BA%BF%E4%B8%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>技术：基于 hexo 搭建博客<br>计划：使用免费提供的 Pages 的平台作为博客网址，白嫖~<br>预期：使用 github 作为第一源码，推送后通过 github actions 再次将代码推送到其他平台，实现多个平台的自动同步与部署</p><h1 id="已部署成功的本人线上博客地址"><a href="#已部署成功的本人线上博客地址" class="headerlink" title="已部署成功的本人线上博客地址"></a>已部署成功的本人线上博客地址</h1><p>Gitee Pages：<a href="https://huangzq94.gitee.io/">https://huangzq94.gitee.io/</a><br>Github Pages：<a href="https://mrhzq.github.io/">https://mrhzq.github.io/</a><br>Cloundflare Pages：<a href="https://huangzq.pages.dev/">https://huangzq.pages.dev/</a><br>Vercel：<a href="https://huangzq.vercel.app/">https://huangzq.vercel.app/</a></p><h1 id="Hexo-搭建博客流程"><a href="#Hexo-搭建博客流程" class="headerlink" title="Hexo 搭建博客流程"></a>Hexo 搭建博客流程</h1><blockquote><p>完全按照官方文档来的：<a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85">安装文档</a></p></blockquote><h2 id="初始化安装"><a href="#初始化安装" class="headerlink" title="初始化安装"></a>初始化安装</h2><ol><li>全局安装工具</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">npm i hexo-cli -g<br></code></pre></td></tr></table></figure><ol start="2"><li>看是否安装成功</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">hexo<br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1710761288521-c3cd0ed0-7020-4d27-921f-d768a11ef588.png"></p><ol start="3"><li>初始化：<a href="https://hexo.io/zh-cn/docs/setup">建站</a></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">hexo init huangzq-blog <span class="hljs-comment">// 会帮我新建一个目录</span><br></code></pre></td></tr></table></figure><p>创建成功后，文件内容如下：<br><img src="/img/images/2024/1710762036511-4ae62d55-073f-49e6-965b-44279156952e.png"></p><blockquote><p><code>hexo init // 已有目录，目录内运行，亲测会失败</code><br><img src="/img/images/2024/1710761977404-d7094fb6-d7b5-4532-932c-6c1ebe04c322.png"></p></blockquote><ol start="4"><li>安装依赖，以下任选一个</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">npm i<br><span class="hljs-comment">// yarn</span><br><span class="hljs-comment">// pnpm i   // 我用的这个</span><br></code></pre></td></tr></table></figure><p>安装成功<br><img src="/img/images/2024/1710762326305-ba3eddf0-3a28-4554-bdd5-2e9d92ee39c9.png"></p><ol start="5"><li>启动项目</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">pnpm run server<br></code></pre></td></tr></table></figure><p>浏览器打开：<a href="http://localhost:4000/">http://localhost:4000/</a>，看到初始的页面<br><img src="/img/images/2024/1710762814615-e4764986-6f21-4553-932c-1a092a4f68ea.png"></p><h2 id="设置主题（可选）"><a href="#设置主题（可选）" class="headerlink" title="设置主题（可选）"></a>设置主题（可选）</h2><ol start="6"><li>更改主题：<a href="https://hexo.io/themes/">点这里</a>找一个你喜欢的主题</li></ol><blockquote><p>更改主题操作说明：只要在 themes 文件夹内，新增一个任意名称的文件夹，并修改 _config.yml 内的 theme 设定，即可切换主题</p></blockquote><p><img src="/img/images/2024/1710763532125-e024a328-3ee6-413b-bd87-aad5f39a096c.png"></p><ol start="7"><li>更改主题：去到源码，一般为 github 仓库，然后安装该主题库的使用文档操作</li><li>博客目录下创建 _config.fluid.yml 文件，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a>全部配置复制过去。</li><li>更改主题：下载主题（我选的这个主题源码<a href="https://github.com/fluid-dev/hexo-theme-fluid">在这</a>，并且支持 npm 安装）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">pnpm add hexo-theme-fluid<br></code></pre></td></tr></table></figure><ol start="10"><li>更改主题：修改 Hexo 博客目录中的 _config.yml，改以下这两处（来自<a href="https://github.com/fluid-dev/hexo-theme-fluid?tab=readme-ov-file#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">主题使用文档</a>）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">theme</span>: fluid  # 指定主题<br><br><span class="hljs-attr">language</span>: zh-<span class="hljs-variable constant_">CN</span>  # 指定语言，会影响主题显示的语言，按需修改<br></code></pre></td></tr></table></figure><ol start="11"><li>创建【关于我】页面（来自<a href="https://github.com/fluid-dev/hexo-theme-fluid?tab=readme-ov-file#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">主题使用文档</a>）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo <span class="hljs-keyword">new</span> page about<br></code></pre></td></tr></table></figure><ol start="12"><li>编辑目录下 &#x2F;source&#x2F;about&#x2F;index.md，添加如下内容</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">---<br><span class="hljs-attr">title</span>: about<br><span class="hljs-attr">layout</span>: about<br><span class="hljs-attr">date</span>: <span class="hljs-number">2024</span>-<span class="hljs-number">03</span>-<span class="hljs-number">18</span> <span class="hljs-number">20</span>:<span class="hljs-number">13</span>:<span class="hljs-number">20</span><br>---<br><br>这里写关于页的正文，支持 <span class="hljs-title class_">Markdown</span>, <span class="hljs-variable constant_">HTML</span><br></code></pre></td></tr></table></figure><ol start="13"><li>重启项目：<code>pnpm run server</code>，以下是首页和关于页面的展示</li></ol><p><img src="/img/images/2024/1710764255408-9dc00159-6290-4d6b-ac28-6b34b19f37b4.png"><br><img src="/img/images/2024/1710764262076-1fbef918-8729-4605-bce3-9b64997555c5.png"></p><h2 id="本地开发简述（可选）"><a href="#本地开发简述（可选）" class="headerlink" title="本地开发简述（可选）"></a>本地开发简述（可选）</h2><blockquote><p>hexo 项目最终是需要先打包，生成<code>public</code>文件夹，最终部署的是<code>public</code>夹内的东西。<br>就跟我们<code>vue</code>一样，开发环境启动<code>dev</code>，<code>build</code>执行打包生成<code>dist</code>然后部署它，<br>所以 hexo 也是有开发环境、生产环境的概念的</p></blockquote><h3 id="1、开发环境模式"><a href="#1、开发环境模式" class="headerlink" title="1、开发环境模式"></a>1、开发环境模式</h3><p>类似于 vue 的 dev 命令，只是没有热更新，最新内容需要手动刷新可看</p><p>开发环境操作：直接运行命令<code>pnpm run server</code>，就会启动本地服务，网站会在 <a href="http://localhost:4000/about/">http://localhost:4000/</a> 下启动，官网说：会<strong>监视文件变动并自动更新</strong>，无须重启服务器，每次刷新下页面就能看到最新的<br><strong>但如果是配置更新的话，就需要重启服务器再刷新才能生效，并且有时候还是需要刷新才能看到效果</strong></p><h2 id="全局配置（-config-yml）"><a href="#全局配置（-config-yml）" class="headerlink" title="全局配置（_config.yml）"></a>全局配置（_config.yml）</h2><p>主要更改博客网站的一些配置：<a href="https://hexo.io/zh-cn/docs/configuration#%E7%BD%91%E7%AB%99">官方文档</a><br>更改文件为<code>_config.yml</code>，我的更改项：<br><img src="/img/images/2024/1710819197829-cc7b75e7-aea4-484c-a5a9-62cccc869860.png"></p><h2 id="主题配置（-config-fluid-yml）"><a href="#主题配置（-config-fluid-yml）" class="headerlink" title="主题配置（_config.fluid.yml）"></a>主题配置（_config.fluid.yml）</h2><p>由于我们使用了主题，然后也创建了主题配置文件，这样大多数的配置就需要在这里面改<br>官方文档：<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97">Hexo Fluid 用户手册</a></p><h3 id="页脚设置-footer"><a href="#页脚设置-footer" class="headerlink" title="页脚设置 footer"></a>页脚设置 footer</h3><blockquote><p>配置关键搜索词：footer:</p></blockquote><p>默认为这个<img src="/img/images/2024/1710819844823-b8108eea-2936-45c9-811a-eea56c849030.png"><br>我更改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">content: &#x27;<br>   &lt;a href=<span class="hljs-string">&quot;/&quot;</span> rel=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;&lt;span&gt;黄智强&lt;/span&gt;&lt;/a&gt;<br>   &lt;i class=<span class="hljs-string">&quot;iconfont icon-love&quot;</span>&gt;&lt;/i&gt;<br>   &lt;a href=<span class="hljs-string">&quot;/2024/03/19/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023%20%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/2023%20%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/&quot;</span> rel=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;&lt;span&gt;<span class="hljs-number">2024</span>&lt;/span&gt;&lt;/a&gt;&#x27;<br></code></pre></td></tr></table></figure><p>效果如下：<br><img src="/img/images/2024/1710820796458-97fe828d-e505-49c5-8e1e-5fcc5c77d818.png"></p><h3 id="主页设置"><a href="#主页设置" class="headerlink" title="主页设置"></a>主页设置</h3><p>先改首页，下面是首页要改的<br><img src="/img/images/2024/1710774562757-1853aa34-20cc-4c4c-88a2-88ebcf119f59.png"><br>大标题更改：<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%8D%9A%E5%AE%A2%E6%A0%87%E9%A2%98">官方文档</a><br>中间标题更改：<a href="https://hexo.fluid-dev.com/docs/guide/#slogan-%E6%89%93%E5%AD%97%E6%9C%BA">官方文档</a><br>背景图更改：<a href="https://hexo.fluid-dev.com/docs/guide/#%E9%A1%B5%E9%9D%A2%E9%A1%B6%E9%83%A8%E5%A4%A7%E5%9B%BE">官方文档</a><br>我从 <a href="https://hexo.fluid-dev.com/">Fluid 演示博客</a> 里面拿了几张图，图片效果做的跟演示博客一样了</p><blockquote><p>具体图片链接看这：<br>首页 banner_img: <a href="https://fluid.s3.bitiful.net/bg/vdysjx.png?w=1920&fmt=webp">https://fluid.s3.bitiful.net/bg/vdysjx.png?w=1920&fmt=webp</a><br>文章 banner_img: <a href="https://fluid.s3.bitiful.net/bg/vdysjx.png?w=1920&fmt=webp">https://fluid.s3.bitiful.net/bg/vdysjx.png?w=1920&fmt=webp</a><br>归档:  banner_img: <a href="https://fluid.s3.bitiful.net/bg/1cm6iu.png?w=1920&fmt=webp">https://fluid.s3.bitiful.net/bg/1cm6iu.png?w=1920&fmt=webp</a><br>分类: banner_img: <a href="https://fluid.s3.bitiful.net/bg/sdqryn.png?w=1920&fmt=webp">https://fluid.s3.bitiful.net/bg/sdqryn.png?w=1920&fmt=webp</a><br>关于: banner_img: <a href="https://fluid.s3.bitiful.net/bg/4xvpqo.png?w=1920&fmt=webp">https://fluid.s3.bitiful.net/bg/4xvpqo.png?w=1920&fmt=webp</a><br>标签: banner_img: <a href="https://fluid.s3.bitiful.net/bg/n7a9bv.png?w=1920&fmt=webp">https://fluid.s3.bitiful.net/bg/n7a9bv.png?w=1920&fmt=webp</a></p></blockquote><p>我最终的博客内容展示会对标 <a href="https://hexo.fluid-dev.com/">Fluid 演示博客</a>，然后可以照着<a href="https://github.com/fluid-dev/hexo-fluid-blog">Fluid 演示博客的源码</a>去修改<br><img src="/img/images/2024/1710813783674-154ddb59-470a-48d9-be68-5566ce4499bc.png"></p><h3 id="开启友情链接"><a href="#开启友情链接" class="headerlink" title="开启友情链接"></a>开启友情链接</h3><p>官方文档：<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5%E9%A1%B5">友情链接页</a>，默认是不开启的<br>然后我开启了，并且更改为“更多”，里面存放我其他平台的主页，效果如下：<br><img src="/img/images/2024/1710820995000-3a30d581-9ce6-4997-93ce-0f7cacbb84a4.png"><br>配置更改看：<a href="https://github.com/MrHzq/huangzq-blog/commit/f5b08322ab2edc62c2863580ee6ea3963e0c5822">feat: 友情链接页面更改</a></p><h2 id="写文章的插件（可选）"><a href="#写文章的插件（可选）" class="headerlink" title="写文章的插件（可选）"></a>写文章的插件（可选）</h2><p>我是使用 VScode 来写 md 的，所以推荐一些好用的插件与包</p><h3 id="VSCode-插件"><a href="#VSCode-插件" class="headerlink" title="VSCode 插件"></a>VSCode 插件</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one">Markdown All in One - Visual Studio Marketplace</a>：功能强大，我用它来做默认的格式化<br><a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint">markdownlint - Visual Studio Marketplace</a>：写 md 时提醒语法错误</p><h3 id="npm-包"><a href="#npm-包" class="headerlink" title="npm 包"></a>npm 包</h3><p><a href="https://github.com/lint-md/lint-md#%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8Ccli">Lint Markdown</a>：可一键批量修复 md 语法问题，我用来批量处理其他平台导出的 md 语法问题</p><h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><p>hexo 的文章大多是 Markdown 的，它会自动读取展示出来<br>所有的文章放在<code>source</code>下面，除<code>_posts</code>文件夹之外，开头命名为 _ (下划线)的文件&#x2F;文件夹将会被忽略</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">├── source<br>|   ├── _drafts<br>|   └── _posts<br></code></pre></td></tr></table></figure><p>hexo 官方提供的文章类型有三种，分别存放在不同文件夹内</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">post source/_posts <span class="hljs-comment">// 会展示出来，作为“文章”展示，默认是 post</span><br>page source <span class="hljs-comment">// 会展示出来，作为“页面”展示</span><br>draft source/_drafts <span class="hljs-comment">// 不会展示出来，作为草稿使用</span><br></code></pre></td></tr></table></figure><p>分别演示下 post、page 的展示效果<br>以下是 post 展示效果<br><img src="/img/images/2024/1710813544570-d4214c0b-ee95-4619-bdc1-e3dbff820ed5.png"><br>以下是  page 展示效果<br><img src="/img/images/2024/1710813527111-6155efff-e14d-4b75-95fd-2a92c0963738.png"></p><h3 id="1、创建新的文章"><a href="#1、创建新的文章" class="headerlink" title="1、创建新的文章"></a>1、创建新的文章</h3><ol><li>输入命令<code>hexo new 文章标题</code>，就会自动在<code>_posts</code>内创建一个<code>文章标题.md</code>文件</li><li>里面有一些自动填充的内容，填充模板是<code>scaffolds/post.md</code>，所以你可以自行更改</li><li>我将<code>scaffolds/post.md</code>改为了</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">---<br>title: &#123;&#123; title &#125;&#125;<br>date: &#123;&#123; date &#125;&#125;<br>updated: &#123;&#123; date &#125;&#125;<br>categories: 职业<br>tags:<br>  - 技术<br>excerpt: 这是摘要，你要手动改一下<br>---<br><br>## 这是标题<br><br>这是正文，你要手动改一下<br><br></code></pre></td></tr></table></figure><ol start="4"><li>所以生成的文章默认为</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">---<br>title: 文章标题<br>categories: 职业<br>tags:<br>  - 技术<br>excerpt: 这是摘要，你要手动改一下<br>date: <span class="hljs-number">2024</span><span class="hljs-number">-03</span><span class="hljs-number">-19</span> <span class="hljs-number">11</span>:<span class="hljs-number">35</span>:<span class="hljs-number">15</span><br>updated: <span class="hljs-number">2024</span><span class="hljs-number">-03</span><span class="hljs-number">-19</span> <span class="hljs-number">11</span>:<span class="hljs-number">35</span>:<span class="hljs-number">15</span><br>---<br><br>## 这是标题<br><br>这是正文，你要手动改一下<br></code></pre></td></tr></table></figure><ol start="5"><li>然后刷新下页面，该文章就会自动展示出来</li></ol><p><img src="/img/images/2024/1710819457212-d030c9ef-6fc1-4d73-befd-6e77c28ed8e0.png"></p><h3 id="2、塞入已有文章"><a href="#2、塞入已有文章" class="headerlink" title="2、塞入已有文章"></a>2、塞入已有文章</h3><ol><li>拷贝你的 md 文件过来，放到<code>_posts</code>内，然后自己创建一些文件夹进行分类（可选）</li><li>重启服务<code>pnpm run server</code>，就直接能看到效果了，很简单与“丑陋”</li></ol><p><img src="/img/images/2024/1710813709488-b6e28695-e4d8-4fe9-9461-8868524a7c11.png"></p><ol start="3"><li>更改该 md 文件，顶部加上这一段：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">---<br>title: 个人简历(求职中) - <span class="hljs-number">7</span> 年前端<br>date: <span class="hljs-number">2023</span><span class="hljs-number">-11</span><span class="hljs-number">-09</span><br>category: 职业<br>tags:<br>  - 简历<br>  - 前端<br>excerpt: 这是我的求职简历，我的优势：熟练掌握 HTML、JavaScript(ES6+)、CSS、TypeScript 等常用前端技术，熟练使用 Vue 和 React 框架，了解其原理并具有多年开发经验，具有大型 ToB SaaS 前端开发经验，具有复杂前端技术方案落地经验，具备全栈开发经验，具备 Devops 之研发流程实践经验，具有 Nodejs、低代码、微前端的实践与经验，具备项目管理与团队管理经验，做过 B 端 SCRM 产品，涉及 PC/H5/小程序端<br>---<br><br><span class="hljs-comment">// 以下是 md 原内容，不用动</span><br></code></pre></td></tr></table></figure><p>展示效果如下：<img src="/img/images/2024/1710819518464-4124d318-322a-4a9f-a346-5688403b80d8.png"></p><ol start="4"><li>字段简单说明下：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">---<br>title: 个人简历(求职中) - <span class="hljs-number">7</span> 年前端 <span class="hljs-comment">// 用于展示的文章标题</span><br>date: <span class="hljs-number">2023</span><span class="hljs-number">-11</span><span class="hljs-number">-23</span> <span class="hljs-number">19</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> <span class="hljs-comment">// 用于展示的文章时间，可任意更改</span><br>index_img: https:xxx <span class="hljs-comment">// 用于展示的文章封面，可以是本地或线上的（可选）</span><br>category: 职业 <span class="hljs-comment">// 文章的分类</span><br>tags: <span class="hljs-comment">// 文章的标签，可以多个</span><br>  - 简历<br>  - 前端<br>excerpt: 这是我的求职简历，我的优势 <span class="hljs-comment">// 文章的摘要</span><br>---<br></code></pre></td></tr></table></figure><ol start="5"><li>其中的<code>category</code>文章的分类，写了后就能在<code>分类</code>页面下看到</li><li>其中的<code>tags</code>文章的标签，写了后就能在<code>标签</code>页面下看到</li></ol><p>至此我们的博客的基本内容、配置已 ok 了，接下来就要发到线上去了</p><h1 id="静态网站托管对比"><a href="#静态网站托管对比" class="headerlink" title="静态网站托管对比"></a>静态网站托管对比</h1><table><thead><tr><th>平台</th><th>优点</th><th>缺点</th><th>部署博客</th></tr></thead><tbody><tr><td><a href="https://github.com/">Github</a></td><td>1、部署流程简单；2、无任何限制</td><td>1、国内访问慢；2、可能被墙</td><td>肯定要部署一个的，已部署成功</td></tr><tr><td><a href="https://gitee.com/">Gitee</a></td><td>1、国内访问快</td><td>1、严格的内容审核，部署博客的话会经常遇到部署失败的情况;2、仓库的最大容量和单个文件大小有限制，对仓库内容非常敏感，需要实名认证，自定义域名和自动部署都需要收费。</td><td>尝试一下</td></tr><tr><td><a href="https://coding.net/">Coding</a></td><td>1、国内访问快</td><td>1、腾讯收购，需 COS 付费使用</td><td>不考虑</td></tr><tr><td><a href="https://gitcode.net/">CodeChina</a></td><td>1、国内访问快</td><td>1、需要认证组织才能使用 Page’s 功能</td><td>无法搞</td></tr><tr><td><a href="https://pages.cloudflare.com/">Cloudflare Pages</a></td><td>1、不限站点数、请求数和带宽，全球都拥有 CDN 节点，支持自定义域名和自动部署。</td><td>1、国内访问速度和稳定性一般，经常超时，每月构建次数、文件数量和大小都有限制。</td><td>可以搞一下，已部署成功</td></tr><tr><td><a href="https://vercel.com/">Vercel</a></td><td>1、国内访问速度比 Github Pages 和 Cloudflare Pages 要快，支持自定义域名和自动部署。</td><td>1、构建次数和构建时长有限制，每月宽限制 100G;2、可能被墙</td><td>可以搞一下，已部署成功</td></tr><tr><td><a href="https://netlify.com/">Netlify</a></td><td>1、国内访问速度比 Github Pages 和 Cloudflare Pages 要快，支持自定义域名和自动部署。</td><td>1、构建次数和构建时长有限制，每月带宽限制 100G;2、可能被墙;3、要验证身份证</td><td>不考虑</td></tr></tbody></table><h1 id="GitHub-流程（已成功）"><a href="#GitHub-流程（已成功）" class="headerlink" title="GitHub 流程（已成功）"></a>GitHub 流程（已成功）</h1><p>我们是借用 Github Pages 来部署我们的博客，但 Github 根据仓库名会提供了两种 Pages<br>1、普通仓库名：比如我之前的 <a href="https://github.com/MrHzq/random-number-system">random-number-system</a>，创建后再自己弄下 Github Pages 后，访问网址为：<a href="https://mrhzq.github.io/random-number-system/">https://mrhzq.github.io/random-number-system/</a><br>2、特殊仓库名：github 用户名.github.io，比如我创建了 MrHzq.github.io 仓库，然后就能自动通过 <a href="https://mrhzq.github.io/">https://mrhzq.github.io/</a> 来访问，这样访问网址更简短</p><blockquote><p>3、再补充一个特殊仓库：github 用户名，比如我创建了 MrHzq 仓库，它就可以作为 github 的主页展示<br><img src="/img/images/2024/1710831050901-a42dd0d6-7729-4767-89d9-aa9025895a25.png"><img src="/img/images/2024/1710831652982-d31739c1-35c2-44fc-97e4-5e93c9d6d796.png"><img src="/img/images/2024/1710831671117-bb688d31-f46f-4017-8ec0-2c4c26e926c2.png"></p></blockquote><ol><li>创建两个仓库：一个普通仓库作为源代码管理<strong>（私有的）</strong>，一个特殊仓库作为博客主页用</li></ol><p>普通仓库：我的命名为 huangzq-blog<strong>（私有的）</strong><br><img src="/img/images/2024/1710837755619-55d2abf6-74ed-4471-8ae9-0c455b6137b2.png"><br>特殊仓库：我的命名为  MrHzq.github.io<br><img src="/img/images/2024/1710830944600-d5480c39-b91d-4985-904e-7ed9c7d4ca0a.png"></p><ol start="2"><li>关联第一步创建的文件，命令行进入第一步创建的文件夹（我的是<code>huangzq-blog）</code>内：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">git init<br></code></pre></td></tr></table></figure><ol start="3"><li>暂存代码并提交代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">git add . &amp;&amp; git commit -m <span class="hljs-string">&quot;Initial commit&quot;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>关联远程仓库（普通仓库哦）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">git remote add origin git@github.<span class="hljs-property">com</span>:你的用户名/仓库名.<span class="hljs-property">git</span>  # 对于<span class="hljs-variable constant_">SSH</span><br><span class="hljs-comment">// 或者</span><br>git remote add origin <span class="hljs-attr">https</span>:<span class="hljs-comment">//github.com/你的用户名/仓库名.git  # 对于HTTPS</span><br></code></pre></td></tr></table></figure><p>我用的命令为：<code>git remote add origin https://github.com/MrHzq/huangzq-blog.git</code></p><ol start="5"><li>推送代码到远程仓库</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">git push -u origin master  # 如果是默认分支master<br><span class="hljs-comment">// 或者</span><br>git push -u origin main    # 如果<span class="hljs-title class_">GitHub</span>默认分支是main<br></code></pre></td></tr></table></figure><p>我用的命令为：<code>git push -u origin main</code></p><ol start="6"><li>我运行后报错：</li></ol><p><img src="/img/images/2024/1710764968046-a23c586b-b092-46ba-8015-209bff8d6e54.png"><br>原因是：我的远程仓库里面的是有文件的，而第一步创建的博客目录里面也有文件，所以<strong>正确：</strong>是要先拉取远程代码到本地，解决冲突，然后再暂存代码并提交代码，最后重新推送代码到远程仓库。但是我知道远程仓库的文件我不需要了，所以可以选择<strong>强制推送到远程</strong></p><ol start="7"><li>报错处理：<strong>强制推送到远程</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">git push -u origin main -f<br></code></pre></td></tr></table></figure><p>命令运行成功了，远程仓库文件也有了<br><img src="/img/images/2024/1710765218332-7ed91d8e-fe21-429d-be3c-86cc385b3fe6.png"><br><img src="/img/images/2024/1710832988659-ef2c4026-c6f5-407b-bed1-882885096e77.png"></p><ol start="8"><li>还记得我们刚刚创建了一个特殊仓库吗？我们需要将博客打包后的内容推送上去，推送后就能访问了</li><li>我们是通过在<code>huangzq-blog</code>里面直接推送到<code>MrHzq.github.io</code>上，所以要先在<code>huangzq-blog</code>内安装依赖：<code>pnpm add hexo-deployer-git</code></li><li>更改根目录的<code>_config.yml</code>内容，仅修改<code>deploy</code>配置：</li></ol><p><img src="/img/images/2024/1710833253106-1b9d8dc3-dc1b-4813-a896-2ca909128649.png"></p><ol start="11"><li>更改根目录的<code>package.json</code>内容：</li></ol><p><img src="/img/images/2024/1710833335948-0e196762-5a25-49c1-8b60-d2055a82e780.png"></p><ol start="12"><li>本地运行<code>pnpm run deploy</code>，它会执行打包，并将<code>public</code>里面的内容推送到<code>MrHzq.github.io</code>上</li></ol><p><img src="/img/images/2024/1710833516879-9fd5a371-7b75-449e-a0ce-132dd134655f.png"><br><img src="/img/images/2024/1710833539937-113bd0ec-2756-4678-882c-1ddf3dc10641.png"></p><ol start="13"><li>然后打开我们的 github 提供的主页：<a href="https://mrhzq.github.io/">https://mrhzq.github.io/</a>，就能看到有东西了</li></ol><p><img src="/img/images/2024/1710833570211-ec002077-bf09-4bd3-89a5-db4caa3bb3ee.png"><br>至此 github 的流程就手动走通了，每次写文章就在<code>huangzq-blog</code>内写，写完后运行下<code>pnpm run deploy</code>就能更新我们的博客了</p><p>但能不能更自动化一点呢？比如我在<code>huangzq-blog</code>内提交代码后(一篇文章)，然后自动帮我部署到<code>MrHzq.github.io</code>内，实现自动更新呢？</p><p>那当然是可以的，我们借助<code>huangzq-blog</code>Github Actions 来实现</p><blockquote><p>什么是 Github Actions 呢？可以看我之前实践的这篇文章：<a href="https://juejin.cn/post/7346524071185006611#heading-2">Github Actions + Github Pages 自动发布 Vue3 + Vite 项目 - 掘金</a></p></blockquote><h2 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a>Github Actions</h2><p>本次的目标是：在私有仓库<code>huangzq-blog</code>内写文章，提交代码后，自动将最新内容部署到公有仓库<code>MrHzq.github.io</code>内，最终达到线上博客主页的自动更新</p><ol><li>进入本地的<code>huangzq-blog</code>内，创建对应文件</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">mkdir .github/workflows &amp;&amp; touch .github/workflows/deployBlog.yml<br></code></pre></td></tr></table></figure><ol start="2"><li>去 github 创建 PAT（Personal access tokens），因为我们是在 Actions 内推送代码，所以 github 需要验证你是否有推送权限，因此我们需要创建 PAT，然后 Actions 时告知给 github 我有权限</li></ol><p><img src="/img/images/2024/1710838557187-980d4762-1657-4629-a3d7-2158f58f06c7.png"><br>PS：权限一定要正确，否则无法推送的<br><img src="/img/images/2024/1710850303601-919a5d6e-5be4-4544-bc95-7c07dc9bb81e.png" alt="FireShot Capture 002 - New Fine-grained Personal Access Token - github.com.png"><br><img src="/img/images/2024/1710838749773-fa61e1d0-015a-4013-87d6-dff444f6c258.png"></p><ol start="3"><li>然后去私有仓库<code>huangzq-blog</code>创建对应的 secrets</li></ol><p><img src="/img/images/2024/1710838825557-8f3efdce-7f37-463a-94fa-a0b656463a2a.png"><br><img src="/img/images/2024/1710838932410-54ac68ba-f4ac-4c67-9213-2660da58c460.png"><br><img src="/img/images/2024/1710839229924-14a1458e-50c0-40d3-bfb2-95e77f822591.png"></p><ol start="4"><li>进入<code>.github/workflows/deployBlog.yml</code>内，填入下代码（不用改，直接可用）：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"># Simple workflow <span class="hljs-keyword">for</span> deploying <span class="hljs-type">static</span> content to GitHub Pages<br>name: Deploy blog<br><br>on:<br>  # Runs on pushes targeting the <span class="hljs-keyword">default</span> branch<br>  push:<br>    branches: [<span class="hljs-string">&quot;main&quot;</span>]<br><br>  # Allows you to run this workflow manually from the Actions tab<br>  workflow_dispatch:<br><br># Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages<br>permissions:<br>  contents: read<br>  pages: write<br>  id-token: write<br><br># Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.<br># However, <span class="hljs-keyword">do</span> NOT cancel in-progress runs as we want to allow these production deployments to complete.<br>concurrency:<br>  group: <span class="hljs-string">&quot;pages&quot;</span><br>  cancel-in-progress: <span class="hljs-literal">false</span><br><br>jobs:<br>  # Single deploy job since we<span class="hljs-number">&#x27;</span>re just deploying<br>  deploy:<br>    runs-on: ubuntu-latest<br>    steps:<br>      - name: Checkout<br>        uses: actions/checkout@v4<br>      - uses: pnpm/action-setup@v2<br>        with:<br>          version: <span class="hljs-number">8</span><br><br>      - name: Setup Node<br>        uses: actions/setup-node@v3<br>        with:<br>          node-version: <span class="hljs-number">20</span><br>          cache: <span class="hljs-string">&quot;pnpm&quot;</span><br><br>      - name: Install dependencies<br>        run: pnpm install<br><br>      - name: Deploy<br>        env:<br>          DEPLOYBLOG: $&#123;&#123; secrets.DEPLOYBLOG &#125;&#125;<br>        run: |<br>          git config --global init.defaultBranch main<br>          pnpm run deploy<br></code></pre></td></tr></table></figure><ol start="5"><li>进入<code>_config.yml</code>，将<code>deploy</code>改为如下代码：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">deploy:<br>  type: git<br>  repo:<br>    url: https:<span class="hljs-comment">//github.com/MrHzq/MrHzq.github.io.git // 改为你的 userName.github.io 完整地址</span><br>    branch: main<br>    token: $DEPLOYBLOG<br>  name: githubUserName <span class="hljs-comment">// 改为你的 github 用户名，我的是 MrHzq</span><br>  email: githubUserEmail <span class="hljs-comment">// 改为你的 github 注册邮箱</span><br></code></pre></td></tr></table></figure><ol start="6"><li>然后提交代码，就会在<code>huangzq-blog</code>仓库内，自动跑 GitHub Actions 了，失败了会有邮件通知，但成功了没有，如果需要成功的通知可以这样开启：<code>Settings -&gt; Notifications</code>内</li></ol><p><img src="/img/images/2024/1710850949420-b8fc115e-625b-44fa-bc34-50d0eb4b7e6c.png"><br><img src="/img/images/2024/1710855295841-b322ef26-0ae8-48e5-becf-76230f691e1a.png"></p><ol start="7"><li>之后每次更改后，提交代码就会自动部署到博客仓库，并且实现自动更新</li></ol><h1 id="Gitee-流程"><a href="#Gitee-流程" class="headerlink" title="Gitee 流程"></a>Gitee 流程</h1><p>官网：<a href="https://gitee.com/">https://gitee.com/</a></p><blockquote><p>存在的缺点：严格的内容审核，部署博客的话会经常遇到部署失败的情况</p></blockquote><p>由于我们之前已经在 github 上面创建了私有仓库<code>huangzq-blog</code>，所以我们在<code>gitee</code>只创建公版仓库，作用跟<code>MrHzq.github.io</code>仓库一样，存放打包后的博客代码</p><ol><li>登录注册不多说</li><li>创建个人空间地址，记住这个名称，后面会<code>https://huangzq94.gitee.io</code>访问</li></ol><p><img src="/img/images/2024/1710856351774-655e98d3-60d5-4ef5-8158-cce57bbf7302.png"></p><ol start="3"><li>创建同名仓库，<a href="https://gitee.com/help/articles/4136#article-header0">官方文档</a>，PS：要勾选【设置模板-Readme 文件】</li></ol><p><img src="/img/images/2024/1710856563762-29e17460-e427-486f-98fe-8b86cd84abd6.png"><br>由于我创建时，啥都没选，所以没找到 Gitee Pages，后来发现必须要有文件才能开启……，后来我手动创建了 README 文件</p><ol start="4"><li>仓库创建完成后，这里找到并开启 Gitee Pages</li></ol><p><img src="/img/images/2024/1710856966460-cd8eda48-e2ef-46a9-8c8b-51415928d3f2.png"><br><img src="/img/images/2024/1710856981668-6b299248-76e7-4c1a-a957-26e597a2eee8.png"></p><ol start="5"><li><p>完成个人实名认证，审核要 3~4 天，这就不多说了……</p></li><li><p>完成后，重新找到并开启 Gitee Pages<br><img src="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E5%AE%9E%E8%B7%B5/3%E3%80%81%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%85%8D%E8%B4%B9%E7%BA%BF%E4%B8%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/iShot_2024-03-23_14.48.57.png"><br><img src="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E5%AE%9E%E8%B7%B5/3%E3%80%81%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%85%8D%E8%B4%B9%E7%BA%BF%E4%B8%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/iShot_2024-03-23_14.53.06.png" alt="iShot_2024-03-23_14.53.06.png"><br><img src="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E5%AE%9E%E8%B7%B5/3%E3%80%81%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%85%8D%E8%B4%B9%E7%BA%BF%E4%B8%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/iShot_2024-03-23_14.png"></p></li><li><p>点击生成的连接，进去看看，发现已经部署成功了，访问地址为 <a href="https://huangzq94.gitee.io/">https://huangzq94.gitee.io/</a><br><img src="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E5%AE%9E%E8%B7%B5/3%E3%80%81%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%85%8D%E8%B4%B9%E7%BA%BF%E4%B8%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/iShot_2024-03-23_14_.png"></p></li></ol><h2 id="Gitee-Actions（放弃）"><a href="#Gitee-Actions（放弃）" class="headerlink" title="Gitee Actions（放弃）"></a>Gitee Actions（放弃）</h2><p>我们已经成功部署到 Gitee Pages 了，但是每次更改后，我们都需要手动去仓库内点击<code>Settings -&gt; Pages</code>，然后重新部署一次，所以我们可以基于 Github 的 Actions 实现自动部署，这样每次在 github 更改后，我们只需要提交代码，就会自动将打包后的 public 代码同步到 Gitee 仓库上，并且再自动刷新 Gitee Pages</p><ol><li>放弃了，因为我处理了后，发现在<strong>同步到 Gitee</strong>的步骤一直报错，又看不到日志，我起先以为是私钥、公钥配置的问题，结果我本地手动将 public 同步到 gitee 仓库，发现仓库体积这么大，但本地的 public 只有 150MB 左右</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Total</span> <span class="hljs-number">3718</span> (delta <span class="hljs-number">934</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>), pack-reused <span class="hljs-number">0</span><br><span class="hljs-attr">remote</span>: <span class="hljs-title class_">Resolving</span> <span class="hljs-attr">deltas</span>: <span class="hljs-number">100</span>% (<span class="hljs-number">934</span>/<span class="hljs-number">934</span>), done.<br><span class="hljs-attr">remote</span>: <span class="hljs-title class_">Powered</span> by <span class="hljs-variable constant_">GITEE</span>.<span class="hljs-property">COM</span> [<span class="hljs-number">1.1</span><span class="hljs-number">.0</span>]<br><span class="hljs-attr">remote</span>: <span class="hljs-title class_">Set</span> trace flag af4037aa<br><span class="hljs-attr">remote</span>: <span class="hljs-title class_">Repo</span> <span class="hljs-attr">size</span>: <span class="hljs-number">1142.</span>469MB, exceeds quota 1024MB<br><span class="hljs-attr">remote</span>: <span class="hljs-title class_">You</span> only have <span class="hljs-number">3</span> push opportunities<br></code></pre></td></tr></table></figure><ol start="2"><li>所以我怀疑同步的时候，就是因为体积太大的原因导致的，所以就放弃了 Gitee 的自动同步与刷新 pages 的功能</li><li>所以就需要本地进行手动同步，然后去 Gitee 仓库内，点击<code>更新</code><br><img src="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E5%AE%9E%E8%B7%B5/3%E3%80%81%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%85%8D%E8%B4%B9%E7%BA%BF%E4%B8%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%89%8B%E5%8A%A8%E6%9B%B4%E6%96%B0giteePages.png"></li></ol><h2 id="但我还是写一下核心用的东西，万一你们成功了呢"><a href="#但我还是写一下核心用的东西，万一你们成功了呢" class="headerlink" title="但我还是写一下核心用的东西，万一你们成功了呢"></a>但我还是写一下核心用的东西，万一你们成功了呢</h2><p>使用的开源 Actions 为：</p><ol><li>同步到 Gitee：<a href="https://github.com/wearerequired/git-mirror-action">wearerequired&#x2F;git-mirror-action@master</a></li><li>更新 Gitee Pages：<a href="https://github.com/yanglbme/gitee-pages-action">yanglbme&#x2F;gitee-pages-action@main</a></li></ol><p>具体的使用方法，去对应的 github 项目里面找，这里就不贴了</p><h1 id="Coding-流程（放弃）"><a href="#Coding-流程（放弃）" class="headerlink" title="Coding 流程（放弃）"></a>Coding 流程（放弃）</h1><p>官网：<a href="https://coding.net/">https://coding.net/</a></p><ol><li>登录注册不多说，注册后会默认创建一个团队，团队名称为随机的，我的是<code>G-OPNC0413</code></li><li>完成团队的实名认证，很快，这就不多说了……</li><li>放弃，它的静态网站需要配合腾讯云 COS 使用，COS 是需要按量付费的，所以无法白嫖，放弃了</li><li>并且弄一个仓库太复杂了，它有团队、项目、仓库、应用等概念，不适合个人</li></ol><h1 id="CodeChina（放弃）"><a href="#CodeChina（放弃）" class="headerlink" title="CodeChina（放弃）"></a>CodeChina（放弃）</h1><p>官网：<a href="https://gitcode.net/dashboard/projects/home">https://gitcode.net</a>&#x2F;<br>需要认证组织才能使用 Page’s 功能<br><img src="/img/images/2024/1710901584873-62aa9f21-7dfc-4080-a897-2e0d0a9dd13e.png"></p><h1 id="Cloudflare-Pages（已成功）"><a href="#Cloudflare-Pages（已成功）" class="headerlink" title="Cloudflare Pages（已成功）"></a>Cloudflare Pages（已成功）</h1><p>官网：<a href="https://pages.cloudflare.com/">https://pages.cloudflare.com/</a></p><ol><li>登录注册不多说</li><li>导入 github 的仓库开启 Pages，我选择的是 github 上那个公开的博客仓库<code>MrHzq.github.io</code></li></ol><p><img src="/img/images/2024/1710902932479-57a8c298-0026-4051-a5a4-86e5feb34bc6.png"><img src="/img/images/2024/1710902963095-9cbfb854-161f-4034-9359-cdbcb8cfbb0a.png"><br><img src="/img/images/2024/1710903038069-2163d099-8ad3-4e54-90ba-ed93d5577295.png"></p><ol start="3"><li>导入后进行下一步</li></ol><p><img src="/img/images/2024/1710903098963-30db9a66-76c9-4dee-9a77-34780e1ed7d0.png"></p><ol start="4"><li>设置域名</li></ol><p><img src="/img/images/2024/1710903240082-08d26f07-3d5c-462d-895b-5c1fbe5a3aa1.png"></p><ol start="5"><li>开始构建</li></ol><p><img src="/img/images/2024/1710903274849-bb4febbd-b5bd-47ab-91ec-5a1d23e34de0.png"><br><img src="/img/images/2024/1710903298139-d2be12a6-07ca-4d77-8869-fc1e366de191.png"><img src="/img/images/2024/1710903451471-ed859bb2-2306-4360-81a6-7a1dbaab3bc2.png"><br>这是我的访问地址：<a href="https://huangzq.pages.dev/">https://huangzq.pages.dev/</a>，博客内容访问到了</p><h1 id="Vercel-流程"><a href="#Vercel-流程" class="headerlink" title="Vercel 流程"></a>Vercel 流程</h1><p>官网：<a href="https://pages.cloudflare.com/">https://pages.cloudflare.com/</a></p><ol><li>可以使用 github 一键登录，因为我们本来就要用到 github 的博客仓库，所以直接一键登录</li></ol><p><img src="/img/images/2024/1710903907276-a70dd3f4-549f-463b-9df6-117e5188fb90.png"><br><img src="/img/images/2024/1710903914792-dd1604d0-7951-4d91-833a-6581d249c887.png"></p><ol start="2"><li>添加博客仓库</li></ol><p><img src="/img/images/2024/1710904061043-99bdd228-df12-4546-a58a-520f93500d63.png"><br><img src="/img/images/2024/1710904098392-cb0c88a7-ead2-4446-ab98-20d098c135c0.png"></p><ol start="3"><li>部署</li></ol><p><img src="/img/images/2024/1710904156650-a92be8be-1328-4d1e-8f55-55c7f20ad4a6.png"><br><img src="/img/images/2024/1710904184467-c9da5b10-94f0-4a22-b9bb-1c2fa3e6647b.png"></p><ol start="4"><li>找到访问网址</li></ol><p><img src="/img/images/2024/1710904241044-39b2e2d2-2a08-4ccb-b3bd-1d27f9439d30.png"><br><img src="/img/images/2024/1710904261518-1ab1ca0f-d170-4c16-a94e-c7e9f08abe46.png"></p><ol start="5"><li>我的访问地址为：<a href="https://huangzq.vercel.app/">https://huangzq.vercel.app/</a>，博客内容一切正常可以看</li></ol><h1 id="Netlify-流程（放弃）"><a href="#Netlify-流程（放弃）" class="headerlink" title="Netlify 流程（放弃）"></a>Netlify 流程（放弃）</h1><p>官网：<a href="https://www.netlify.com/">https://www.netlify.com/</a></p><ol><li>跟 Vercel，可以使用 github 一键登录</li></ol><p><img src="/img/images/2024/1710904551333-efb7d132-c7a3-4145-bb5c-648ee9cbf3e6.png"><br><img src="/img/images/2024/1710904562134-38fc0786-71db-4406-abe3-370e277cead4.png"><br>会跳转到这个页面，先不用管，因为它会发一个验证邮件，需要点邮箱里面的去验证<br><img src="/img/images/2024/1710904651650-317212de-d2d4-4ddd-882e-b4ed16a3af84.png"></p><ol start="2"><li>验证手机信息，选择 CN，输入手机号、姓拼音、名拼音</li></ol><p><img src="/img/images/2024/1710904811982-97d1ac9a-5d6c-4f1d-a8e0-9db20da66b9a.png"></p><ol start="3"><li>验证身份证信息，需要上传身份证，放弃了</li></ol><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>上面我们部署了几个平台，但我们发布文章的流程还是很简单的：github 私人仓库提交代码，自动推送打包好的代码到 github 公共仓库、gitee 公共仓库，然后其他基于 github 登录的平台(Cloudfare&#x2F;Vercel)则会自动更新；而 gitee 则需要手动去刷新下<br><img src="/img/images/2024/1710924962033-65c2df38-0ae8-4919-bc88-30ff7f0154dc.jpeg"></p>]]></content>
    
    
    <categories>
      
      <category>前端实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端实践</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5、观察者模式</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/JS%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5%E3%80%81%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/JS%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5%E3%80%81%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>观察者模式：允许一个对象在发生某个变化时自动通知其他关联模式<br>白话：存在两个角色：观察者、被观察者；观察者保持对被观察者的监视，当发现被观察者在做某件事时，就做出某些反应</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 观察者类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>  <span class="hljs-title function_">update</span>(<span class="hljs-params">subjectState</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;该方法主要给子类重写&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 观察者子类 A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">createObserverA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Observer</span> &#123;<br>  <span class="hljs-title function_">update</span>(<span class="hljs-params">subjectState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;createObserverA subjectState&quot;</span>, subjectState);<br>    <span class="hljs-comment">// 其他逻辑....</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 观察者子类 B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">createObserverB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Observer</span> &#123;<br>  <span class="hljs-title function_">update</span>(<span class="hljs-params">subjectState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;createObserverB subjectState&quot;</span>, subjectState);<br>    <span class="hljs-comment">// 其他逻辑....</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 被观察者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">state</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span> = [];<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = state;<br>  &#125;<br><br>  <span class="hljs-comment">// 注册观察者</span><br>  <span class="hljs-title function_">addObserver</span>(<span class="hljs-params">observer</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>.<span class="hljs-title function_">push</span>(observer);<br>  &#125;<br><br>  <span class="hljs-comment">// 被观察者的数据更新操作</span><br>  <span class="hljs-title function_">updateState</span>(<span class="hljs-params">state</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = state;<br><br>    <span class="hljs-comment">// 通知所有观察者</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">ob</span>) =&gt;</span> ob.<span class="hljs-title function_">update</span>(state));<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> subject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>(<span class="hljs-number">1</span>);<br>subject.<span class="hljs-title function_">addObserver</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">createObserverA</span>());<br>subject.<span class="hljs-title function_">addObserver</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">createObserverB</span>());<br><br>subject.<span class="hljs-title function_">updateState</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// 将会自动通知观察者</span><br></code></pre></td></tr></table></figure><p>实际案例：<br>Vue 的响应式就采用了代理模式 + 观察者模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 省略其他...</span><br><br><span class="hljs-comment">// reactive 函数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reactive</span> = (<span class="hljs-params">obj</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(obj, &#123; <span class="hljs-comment">// Proxy 代理模式</span><br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, prop, receiver</span>) &#123;<br>      <span class="hljs-title function_">track</span>(target, key, receiver) <span class="hljs-comment">// 依赖收集</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, prop)<br>    &#125;<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, prop, value, receiver</span>) &#123;<br>      <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, prop, value, receiver)<br><br>      <span class="hljs-title function_">trigger</span>(target, prop, receiver) <span class="hljs-comment">// 依赖触发</span><br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结</strong>：一个‘做’，一个‘看’，‘看者’发现‘做者’做了某事，那就做出对应反应。<br>比如：妈妈在拖地，当你看到要拖到你面前时，你自然就抬脚了。</p>]]></content>
    
    
    <categories>
      
      <category>JS 设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>JS 设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4、迭代器模式</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/JS%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/JS%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>迭代器模式：提供统一的方法来顺序访问集合对象(数组、对象、树等)的元素，而无需暴露该集合的内部表示。</p><p>普通迭代器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> each = <span class="hljs-keyword">function</span>(<span class="hljs-params">arr, cb</span>) &#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, l = arr.<span class="hljs-property">lenght</span>; i &lt; l; i++) &#123;<br>    <span class="hljs-title function_">cb</span>(i, arr[i], arr)<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">each</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params">index, item</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index) <span class="hljs-comment">// 0 1 2</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item) <span class="hljs-comment">// 1 2 3</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>ES6 中，引入了<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols">迭代协议</a>，用于创建迭代器对象，使用迭代器对象可以让其他对象可迭代<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AE">可迭代协议</a>用来定义迭代行为，要求对象必须有<code>[Symbol.Iterator]</code>方法<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8D%8F%E8%AE%AE">迭代器协议</a>用来定义具体的迭代操作，要求对象必须有<code>next()</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 迭代器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIterable</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = data;<br>  &#125;<br>  <span class="hljs-comment">// 可迭代协议</span><br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;<br>    <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-comment">// 迭代器协议</span><br>      <span class="hljs-attr">next</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">length</span>) &#123;<br>          <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">value</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>[index++], <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;;<br>      &#125;,<br>    &#125;;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 可迭代的数据</span><br><span class="hljs-keyword">const</span> myArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyIterable</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><br><span class="hljs-comment">// for...of 会自动调用迭代器协议来遍历可迭代对象。</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> myArray) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item); <span class="hljs-comment">// 输出：1, 2, 3</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结</strong>：就是专门创建一个方法，支持循环访问集合</p>]]></content>
    
    
    <categories>
      
      <category>JS 设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>JS 设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3、代理模式</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/JS%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3%E3%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/JS%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3%E3%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>代理模式：为对象的操作提供一个替代或代理接口。<br>代理模式允许我们在访问目标对象之前、之后或者代替目标对象执行额外的操作，从而对原始对象的行为进行增强、控制、限制或者扩展。</p><p><strong>动态代理</strong>：在运行时动态生成代理类及其实例<br>ES6 的 Proxy 就是一个代理，它对对象的增删改查进行拦截代理，可自定义执行操作</p><p><strong>虚拟代理</strong>：在运行时去执行操作，节省开销<br>场景：实现图片的懒加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">createImage</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> imgEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>)<br><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(imgEl)<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">setUrl</span>(<span class="hljs-params">src</span>) &#123;<br>      imgEl.<span class="hljs-property">src</span> = src<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> &#123; setUrl &#125; = <span class="hljs-title function_">createImage</span>()<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">createImageProxy</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>()<br><br>  img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 设置已加载好的图</span><br>    <span class="hljs-title function_">setUrl</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">src</span>)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">setUrl</span>(<span class="hljs-params">src</span>) &#123;<br>      <span class="hljs-comment">// 先设置 loading 占位图</span><br>      <span class="hljs-title function_">setUrl</span>(<span class="hljs-string">&#x27;http://imgcache.qq.com/loading.jpg&#x27;</span>)<br><br>      img.<span class="hljs-property">src</span> = src<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">createImageProxy</span>().<span class="hljs-title function_">setUrl</span>(<span class="hljs-string">&#x27;http://imgcache.qq.com/Kdhwbas.jpg&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>保护代理</strong>：用于控制对目标对象的访问，比如限制对某些敏感信息或方法的访问权限。</p><p><strong>总结</strong>：本质就是套一层过滤壳，壳里面再去调用真正的方法</p>]]></content>
    
    
    <categories>
      
      <category>JS 设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>JS 设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2、策略模式</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/JS%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2%E3%80%81%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/JS%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2%E3%80%81%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>核心：<strong>定义一系列算法，并将每个算法封装在具有共同接口的单独对象中，并可替换。</strong><br>场景：处理一系统相同但有细微差别的逻辑</p><p>代码实现：根据绩效计算奖金<br>未使用策略模式：代码写死了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getMoney</span>(<span class="hljs-params">jixiao, baseMoney</span>) &#123;<br>  <span class="hljs-keyword">if</span>(jixiao === <span class="hljs-string">&#x27;s&#x27;</span>) <span class="hljs-keyword">return</span> baseMoney * <span class="hljs-number">2</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(jixiao === <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">return</span> baseMoney * <span class="hljs-number">1.5</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(jixiao === <span class="hljs-string">&#x27;b&#x27;</span>) <span class="hljs-keyword">return</span> baseMoney * <span class="hljs-number">1</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(jixiao === <span class="hljs-string">&#x27;c&#x27;</span>) <span class="hljs-keyword">return</span> baseMoney * <span class="hljs-number">0.8</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(jixiao === <span class="hljs-string">&#x27;d&#x27;</span>) <span class="hljs-keyword">return</span> baseMoney * <span class="hljs-number">0.5</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> baseMoney * <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-title function_">getMoney</span>(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-number">1000</span>) <span class="hljs-comment">// 2000</span><br><span class="hljs-title function_">getMoney</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1000</span>) <span class="hljs-comment">// 1500</span><br><span class="hljs-title function_">getMoney</span>(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">1000</span>) <span class="hljs-comment">// 800</span><br></code></pre></td></tr></table></figure><p>使用了策略模式：策略可随时替换</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 奖金策略 1</span><br><span class="hljs-keyword">const</span> moneyStrategie1 = &#123;<br>  <span class="hljs-title function_">s</span>(<span class="hljs-params">baseMoney</span>) &#123;<br>    <span class="hljs-keyword">return</span> baseMoney * <span class="hljs-number">2</span><br>  &#125;,<br>  <span class="hljs-title function_">a</span>(<span class="hljs-params">baseMoney</span>) &#123;<br>    <span class="hljs-keyword">return</span> baseMoney * <span class="hljs-number">1.5</span><br>  &#125;,<br>  <span class="hljs-title function_">b</span>(<span class="hljs-params">baseMoney</span>) &#123;<br>    <span class="hljs-keyword">return</span> baseMoney * <span class="hljs-number">0.8</span><br>  &#125;,<br>  <span class="hljs-title function_">c</span>(<span class="hljs-params">baseMoney</span>) &#123;<br>    <span class="hljs-keyword">return</span> baseMoney * <span class="hljs-number">0.5</span><br>  &#125;,<br>  <span class="hljs-title function_">d</span>(<span class="hljs-params">baseMoney</span>) &#123;<br>    <span class="hljs-keyword">return</span> baseMoney * <span class="hljs-number">0</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 奖金策略 2</span><br><span class="hljs-keyword">const</span> moneyStrategie2 = &#123;<br>  <span class="hljs-title function_">s</span>(<span class="hljs-params">baseMoney</span>) &#123;<br>    <span class="hljs-keyword">return</span> baseMoney * <span class="hljs-number">20</span><br>  &#125;,<br>  <span class="hljs-title function_">a</span>(<span class="hljs-params">baseMoney</span>) &#123;<br>    <span class="hljs-keyword">return</span> baseMoney * <span class="hljs-number">15</span><br>  &#125;,<br>  <span class="hljs-title function_">b</span>(<span class="hljs-params">baseMoney</span>) &#123;<br>    <span class="hljs-keyword">return</span> baseMoney * <span class="hljs-number">8</span><br>  &#125;,<br>  <span class="hljs-title function_">c</span>(<span class="hljs-params">baseMoney</span>) &#123;<br>    <span class="hljs-keyword">return</span> baseMoney * <span class="hljs-number">5</span><br>  &#125;,<br>  <span class="hljs-title function_">d</span>(<span class="hljs-params">baseMoney</span>) &#123;<br>    <span class="hljs-keyword">return</span> baseMoney * <span class="hljs-number">0</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getMoney</span>(<span class="hljs-params">strategy</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">calcMoney</span> = <span class="hljs-function">(<span class="hljs-params">jixiao, baseMoney</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> strategy[jixiao](baseMoney)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用奖金策略 1</span><br><span class="hljs-keyword">const</span> getMoney1 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">getMoney</span>(moneyStrategie1)<br><br><span class="hljs-title function_">getMoney1</span>(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-number">1000</span>) <span class="hljs-comment">// 2000</span><br><span class="hljs-title function_">getMoney1</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1000</span>) <span class="hljs-comment">// 1500</span><br><span class="hljs-title function_">getMoney1</span>(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">1000</span>) <span class="hljs-comment">// 800</span><br><br><span class="hljs-comment">// 使用奖金策略 2</span><br><span class="hljs-keyword">const</span> getMoney2 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">getMoney</span>(moneyStrategie2)<br><br><span class="hljs-title function_">getMoney1</span>(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-number">1000</span>) <span class="hljs-comment">// 20000</span><br><span class="hljs-title function_">getMoney1</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1000</span>) <span class="hljs-comment">// 15000</span><br><span class="hljs-title function_">getMoney1</span>(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">1000</span>) <span class="hljs-comment">// 8000</span><br></code></pre></td></tr></table></figure><p>总结：就是将零散的判断逻辑，封装在单独的对象中，并提供一个策略切换函数。</p>]]></content>
    
    
    <categories>
      
      <category>JS 设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>JS 设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1、单例模式</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/JS%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1%E3%80%81%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/JS%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1%E3%80%81%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>核心：<strong>确保一个类只有一个实例，并提供一个全局访问点</strong>。<br>场景：状态管理、路由对象都是只有一个实例的</p><p>代码实现：<br><strong>普通版本</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Father</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Father</span>.<span class="hljs-property">instance</span>) <span class="hljs-keyword">return</span> <span class="hljs-title class_">Father</span>.<span class="hljs-property">instance</span><br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br><br>  <span class="hljs-title class_">Father</span>.<span class="hljs-property">instance</span> = <span class="hljs-variable language_">this</span><br>&#125;<br><br><span class="hljs-keyword">const</span> f1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>(<span class="hljs-string">&#x27;xx&#x27;</span>)<br><span class="hljs-keyword">const</span> f2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>(<span class="hljs-string">&#x27;yy&#x27;</span>)<br><br>f1 === f2 <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><strong>友好版本</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> createSingle = <span class="hljs-keyword">function</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-keyword">let</span> instance;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-keyword">return</span> instance || (instance = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fn</span>(...args))<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Father</span>(<span class="hljs-params">name, age</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><br><span class="hljs-keyword">const</span> createSingleFather = <span class="hljs-title function_">createSingle</span>(<span class="hljs-title class_">Father</span>)<br><br><span class="hljs-keyword">const</span> f1 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">createSingleFather</span>(<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-number">45</span>)<br><span class="hljs-keyword">const</span> f2 = <span class="hljs-title function_">createSingleFather</span>(<span class="hljs-string">&#x27;yy&#x27;</span>, <span class="hljs-number">49</span>)<br><br>f1 === f2 <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>总结：多次调用函数，想办法永远只产生一个实例就行</p>]]></content>
    
    
    <categories>
      
      <category>JS 设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>JS 设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0、JS 设计模式</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/JS%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/0%E3%80%81JS%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/JS%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/0%E3%80%81JS%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>阅读地址：<a href="https://juejin.cn/post/6844903751870840839">《JavaScript 设计模式与开发实践》最全知识点汇总大全 - 掘金</a></p>]]></content>
    
    
    <categories>
      
      <category>JS 设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>JS 设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9、JS 的变量有哪些？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/9%E3%80%81JS%20%E7%9A%84%E5%8F%98%E9%87%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/9%E3%80%81JS%20%E7%9A%84%E5%8F%98%E9%87%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%8E%9F%E5%A7%8B%E5%80%BC"><strong>原始类型</strong></a>：Number、String、Boolean、Undefined、Null、Symbol、BigInt<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a>：用于生成唯一值，可作为对象标识符(创造它的目的)<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt">BigInt</a>：表示大于 2^53 - 1 的<strong>整数</strong>(Number 的最大数字)</p><p><strong>对应的 typeof 值为</strong>：’number’、’string’、’boolean’、’undefined’、’object’、’symbol’、’bigint’</p><p><strong>特点 1</strong>：<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Immutable">不可变</a>。一旦创建了原始值，它就不能被改变，除非创建一个新值替换它</p><p><strong>特点 2</strong>：除 Undefined、Null 以外，其他原始值有对象类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseInt</span>()<br><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">slice</span>()<br><span class="hljs-title class_">Boolean</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">toString</span>()<br><span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>()<br><span class="hljs-title class_">BigInt</span>.<span class="hljs-title function_">asIntN</span>()<br></code></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#object"><strong>复杂类型</strong></a>：对象<br><strong>常见的有</strong>：Object、Array、Map、Set、WeakMap、WeakSet、Date、Error、JSON、Math、Promise 等</p><p><strong>对应的 typeof 值为</strong>：’object’</p><p><strong>特点 1</strong>：<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Mutable">可变</a>。即使没有创建一个全新的值，也可以更改它。</p><p><strong>总结</strong>：<br>JS 是弱类型语言，允许类型的转换</p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8、JS 的变量声明符</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/8%E3%80%81JS%20%E7%9A%84%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E7%AC%A6/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/8%E3%80%81JS%20%E7%9A%84%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p>声明符：var、const、let<br><strong>结论：能用 const 就别用其他的，能用其他的就不用 var</strong></p><p>var：作用域范围为全局、函数内。存在变量提升。声明时可不赋值，之后可改变量的值。可重复用它声明相同变量。</p><p>const：作用域范围为全局、函数内、块内。不存在变量提升，所以有暂时性死区。声明时必须赋值，之后不可改变量的值。不可重复用它声明相同变量。</p><p>let：作用域范围为全局、函数内、块内。不存在变量提升，所以有暂时性死区。声明时可不赋值，之后可改变量的值。不可重复用它声明相同变量。</p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7、this 指向</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/7%E3%80%81this%20%E6%8C%87%E5%90%91/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/7%E3%80%81this%20%E6%8C%87%E5%90%91/</url>
    
    <content type="html"><![CDATA[<p>前置知识：<a href="https://juejin.cn/post/7325272309001650176">7、上下文是个啥？ - 掘金</a></p><p>定义：一般指向调用函数的上下文对象，运行时确定。</p><p>this 指向：<br>function 定义的普通函数，在全局内调用，指向全局上下文(window&#x2F;global)<br>function 定义的普通函数，在对象内调用，指向该对象<br>function 定义的普通函数，在 new 调用，指向创建的实例<br>function 定义的普通函数，在事件中调用，指向那个元素<br>箭头函数，在调用时，指向定义时的上下文。定义时确定</p><p>改变 this 指向：call、apply、bind</p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6、JS 的上下文是个啥？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/6%E3%80%81JS%20%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E6%98%AF%E4%B8%AA%E5%95%A5%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/6%E3%80%81JS%20%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E6%98%AF%E4%B8%AA%E5%95%A5%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>前置知识：<a href="https://juejin.cn/post/7323271686034325514">如何理解 JS 的单线程？ - 掘金</a></p><p>定义：用于描述代码执行时的环境与状态，用于管理作用域链、变量对象、this 等<br>分类：全局上下文、函数上下文、块级上下文</p><p>白话：只管自己桌上的东西，比如：碗筷、杯子、纸巾等。</p><p>特征：<br>1、优先用自己桌的，没得后再向上找 - 作用域链查找<br>2、每一桌都是独立的，客人来了上新的，客人走了收拾掉 - 函数、块级上下文执行情况<br>3、在说“拿下纸巾”时，都晓得是指自己桌上的纸巾 - this 指向</p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5、JS 的垃圾回收机制是啥？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/5%E3%80%81JS%20%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E6%98%AF%E5%95%A5%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/5%E3%80%81JS%20%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E6%98%AF%E5%95%A5%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>前置知识：<a href="https://juejin.cn/post/7323271686034325514">如何理解 JS 的单线程？ - 掘金</a></p><p>作用：管理内存的</p><p>分为主动和被动，每隔一段时间主动触发，当内存不够了被动触发。<br>策略：标记清理(常用)，引用清理(不常用)</p><p>白话：就是清理餐桌上的垃圾，避免占用空间。<br>主动：每隔一段时候来清理一遍。<br>被动：时间没到，但垃圾满了，则马上来清理一遍。</p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4、JS 的作用域</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/4%E3%80%81JS%20%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/4%E3%80%81JS%20%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<p>作用域：描述变量的可见性与生命周期<br>白话：定义变量的访问范围与过期时间</p><p>常见作用域：全局、函数、块级</p><p>作用域可嵌套，即形成作用域链。</p><p>结合这篇<a href="https://juejin.cn/post/7323271686034325514">如何理解 JS 的单线程？ - 掘金</a>，通俗的讲下作用域链：<br>就是找东西的过程。<br>比如客人需要筷子，那先在自己坐的桌子上面找，没找到再去餐柜那里找，最后再找服务员。</p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3、如何理解 JS 的单线程？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/3%E3%80%81%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%20JS%20%E7%9A%84%E5%8D%95%E7%BA%BF%E7%A8%8B%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/3%E3%80%81%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%20JS%20%E7%9A%84%E5%8D%95%E7%BA%BF%E7%A8%8B%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>前置知识：<a href="https://juejin.cn/post/7322789648601301043">JS 为什么是单线程？ - 掘金</a></p><p><strong>用比喻的方式来理解单线程</strong>：<br>假设将网页的渲染与交互比喻为一家餐馆的运转，那 JS 就是餐馆唯一的服务员。</p><p>为了实现餐馆的运转，该服务员需要做的事：迎客、点餐、上菜、收钱、送客、擦桌等。</p><p>单线程限制该服务员只能一件件做事：迎客&#x3D;&gt;点餐&#x3D;&gt;上菜&#x3D;&gt;收钱&#x3D;&gt;送客&#x3D;&gt;擦桌，做完后再开始下一桌。</p><p><strong>单线程的问题</strong><br>通过比喻方式描述了单线程，那其中的问题一眼也能看到，存在不必要的等待。<br>比如客人选座很慢、客人点餐磨叽、餐馆上菜很慢、客人全给零钱等等，这些情况会非常耽误服务员的时间。</p><p><strong>异步的诞生</strong><br>为了解决上述问题，可以将客人选座、客人点餐、餐馆上菜等一些事情弄成不需要等待的，让服务员先干别的事，只需要完成后叫一声服务员，然后服务员再做完手头的事情后立马来处理。<br>这就是异步</p><p>来个完整版的栗子：<br>来了一波客人 A，服务员热情接待，让客人 A 先选座，客人 A 选座期间，来了一波客人 B 服务员去接待，然后客人 A 大喊一声：“我选好了座位了”，服务员听到后说：“稍等，马上就来”，引导完客人 B 选座后，来到客人 A 再引导点餐，客人 A 点餐时，再迎接下一波客人或回应客人 B，然后……<br>这样服务员的等待时间减少了，变得勤快且能干~</p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2、JS 为什么是单线程？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/2%E3%80%81JS%20%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E7%BA%BF%E7%A8%8B%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/2%E3%80%81JS%20%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E7%BA%BF%E7%A8%8B%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>结论：<strong>故意将 JS 设计成单线程并阻塞渲染。</strong></p><p>当时为了增强网页交互，所以才创造了 JS，最初提供一些简单动画 + 基本的表格提交功能。</p><p>既然涉及网页交互，那就不得不考虑它与页面渲染的关系。</p><p><strong>那为什么不能是多线程呢？</strong><br>假设 JS 被设计为多线程，那如果存在多段代码更改同一个 DOM，这就没法确定先用哪段代码</p><p><strong>那什么要阻塞渲染呢？</strong><br>因为 JS 具有操作 DOM 的能力，如果在执行 JS 时，页面也同时进行渲染，这就没法确定先用 JS 的还是 HTML&#x2F;CSS 的</p><p><strong>所以故意将 JS 设计成单线程并阻塞渲染。</strong></p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>24、什么是函数式编程</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/24%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/24%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>定义：将纯函数作为第一公民，实现功能的开发</p><p>纯函数：无状态 &amp;&amp; 无副作用的函数<br>无状态：函数不依赖或修改外部状态<br>无副作用：函数运行不对外部产生影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> x = <span class="hljs-number">9</span><br><span class="hljs-keyword">let</span> y = <span class="hljs-number">10</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y <span class="hljs-comment">// 依赖了外部变量，这就是有状态的</span><br>&#125;<br><br><span class="hljs-title function_">add</span>()<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reset</span>(<span class="hljs-params"></span>) &#123;<br>  x = <span class="hljs-number">0</span> <span class="hljs-comment">// 改变了外部变量，这就是副作用</span><br>  y = <span class="hljs-number">0</span> <span class="hljs-comment">// 改变了外部变量，这就是副作用</span><br>&#125;<br><br><span class="hljs-title function_">reset</span>()<br></code></pre></td></tr></table></figure><p>所以函数式编程就是尽可能多的用纯函数去编程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> x = <span class="hljs-number">9</span><br><span class="hljs-keyword">let</span> y = <span class="hljs-number">10</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">_x, _y</span>) &#123;<br>  <span class="hljs-keyword">return</span> _x + _y <span class="hljs-comment">// 不依赖外部变量，只依赖参数</span><br>&#125;<br><br><span class="hljs-title function_">add</span>(x, y)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reset</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br>x = <span class="hljs-title function_">reset</span>()<br>y = <span class="hljs-title function_">reset</span>()<br></code></pre></td></tr></table></figure><p>高阶函数：【参数为函数，返回为函数】的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">compose</span> = (<span class="hljs-params">f, g</span>) =&gt; <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> <span class="hljs-title function_">f</span>(<span class="hljs-title function_">g</span>(x))<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">sum1</span> = x =&gt; x + <span class="hljs-number">1</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">sum2</span> = x =&gt; x + <span class="hljs-number">2</span><br><br><span class="hljs-keyword">const</span> sum = <span class="hljs-title function_">compose</span>(sum1, sum2)<br><br><span class="hljs-title function_">sum</span>(<span class="hljs-number">5</span>) <span class="hljs-comment">// 8</span><br></code></pre></td></tr></table></figure><p>应用场景：<br>防抖：t 时间后执行一次（每次操作重置 t）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">debounce</span> = (<span class="hljs-params">cb, time</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">clearTimeout</span>(timer)<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>    &#125;, delay)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>节流：t 时间内只执行一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">throttle</span> = (<span class="hljs-params">cb, time</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span>(!timer) &#123;<br>      timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>        timer = <span class="hljs-literal">null</span><br>      &#125;, time)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>23、浏览器缓存</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/23%E3%80%81%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/23%E3%80%81%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h1><p>浏览器缓存主要指的是 HTTP 缓存，浏览器本质是将资源缓存到本地内存和磁盘中的<br>HTTP 缓存只支持 <strong>GET</strong> 响应，其他类型的响应无法缓存</p><p>简单理解缓存：<br><img src="/img/images/2024/1708581890865-723221a2-8dee-4818-af79-0a9f27106d0a.png"></p><p>优点：下次资源加载时，可以直接从缓存里面拿，这样节省请求时间<br>缺点：未及时更新缓存，容易导致资源过老</p><h1 id="缓存分类"><a href="#缓存分类" class="headerlink" title="缓存分类"></a>缓存分类</h1><p>强缓存 - 简单理解：<br><img src="/img/images/2024/1708581937034-08c9a944-a7d3-4452-87c9-a20ec866ebf6.png"><br>协商(对比)缓存 - 简单理解：<br><img src="/img/images/2024/1708581998858-78434352-b4bc-46ba-be18-4bfabbe4829d.png"></p><p>强制缓存优先级高于协商(对比)缓存，当执行强制缓存的规则时，如果缓存生效，直接使用缓存，不再执行对比缓存规则。</p><p>浏览器的缓存规则是服务器通过响应头返回的</p><h2 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h2><p>特点：满足强制缓存后，无需发起 http 请求</p><p>强制缓存用到的响应头为：Expires 和 Cache-Control<br>Expires：缓存到期时间，若下次请求时间小于该值，则直接使用缓存数据，无需发起 http 请求<br>Cache-Control：控制缓存策略<br>private: 客户端可以缓存（默认）<br>public：客户端和服务器等都可以缓存<br>max-age&#x3D;xxx：缓存内容过期时间(秒)<br>no-cache：使用对比缓存策略<br>no-store：禁止缓存</p><p>举例：<img src="/img/images/2024/1708583425216-42efee49-766e-40f5-8932-4ea0342a14af.png"><br>Cache-Control 仅使用了 max-age&#x3D;31536000，则默认为 private（仅客户端可以缓存），并且 31536000 秒(365 天)后过期，再次期间直接用缓存数据</p><h2 id="协商（对比）缓存"><a href="#协商（对比）缓存" class="headerlink" title="协商（对比）缓存"></a>协商（对比）缓存</h2><p>特点：始终都会发起 http 请求<br>协商缓存例子：<br><img src="/img/images/2024/1708583699844-29de5b97-c365-4d72-975d-0c1655078fe6.png"><br>第一次正常访问，第二次协商缓存生效，则状态为 304，对应的 size、time 也大大减小<br>原因是：协商缓存生效后，只会返回 header 部分，通过状态码告知客户端可使用缓存数据</p><p>协商缓存规则是在客户端与服务端传递的<br>规则一：Etag &#x2F; If-None-Match<br>服务器返回响应头：Etag，值为当前资源在服务器的唯一标志<br>客户端请求响应头：If-None-Match，值为 Etag 的值，服务器发现有这个请求头后，则与该资源最新标志对比<br>若一样，则资源无修改，返回 304，客户端继续使用缓存数据<br>若不一样，则资源有修改，返回最新资源，状态码为 200，客户端使用返回的数据</p><p>规则二：Last-Modified &#x2F; If-Modified-Since<br>服务器返回响应头：Last-Modified，值为当前资源最后修改时间<br>客户端请求响应头：If-Modified-Since，值为 Last-Modified 的值，服务器发现有这个请求头后，则与该资源最新修改时间对比<br>若小于等于 If-Modified-Since，则资源无修改，返回 304，客户端继续使用缓存数据<br>若大于 If-Modified-Since，则资源有修改，返回最新资源，状态码为 200，客户端使用返回的数据</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/img/images/2024/1708585714367-1d133cd3-07cc-40b3-8032-9bd048753aae.jpeg"></p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>22、Vue 渲染流程</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/22%E3%80%81Vue%20%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/22%E3%80%81Vue%20%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>以初始化为例：<br>1、模板编译<br>根据引入路径，将<code>&lt;template&gt;</code>里面的代码编译成<code>模板 AST 树(描述模板的)</code><br>再根据<code>模板 AST 树</code>生成<code>JS AST 树(用来描述渲染函数的)</code>，在这期间会做 diff 后续可用的优化：静态标记、动态节点等<br>2、渲染函数<br>基于<code>JS AST 树</code> 生成 render 函数<br>3、虚拟 DOM<br>在渲染时，调用 render 函数生成对应的虚拟 DOM<br>每次数据更新时，都会调用 render 函数生成新的虚拟 DOM<br>5、渲染器<br>将虚拟 DOM 生成真实 DOM 的方法<br>在生成期间会进行新旧虚拟 DOM 的 Diff 算法，优化生成速度<br>6、真实 DOM<br>真实可渲染到页面的 DOM 树</p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>21、类数组转数组</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/21%E3%80%81%E7%B1%BB%E6%95%B0%E7%BB%84%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/21%E3%80%81%E7%B1%BB%E6%95%B0%E7%BB%84%E8%BD%AC%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是类数组？"><a href="#什么是类数组？" class="headerlink" title="什么是类数组？"></a>什么是类数组？</h1><p>一种具备数组结构，但不支持数组方法的数据结构<br><strong>核心是支持数字索引与</strong><code>**length**</code><strong>属性</strong>，但不是通过<code>Array</code>创建的，所以不具备数组方法</p><h1 id="常见的类数组有哪些？"><a href="#常见的类数组有哪些？" class="headerlink" title="常见的类数组有哪些？"></a>常见的类数组有哪些？</h1><h2 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h2><p>function 定义的函数内部的关键词，包含所有的参数。<br>原型链：myArguments  –&gt;  Arguments.prototype –&gt; Object.prototype –&gt; null<br><img src="/img/images/2024/1708406052361-9dd284c7-44b8-4cfb-a97d-948fbd28bb1d.png"><br><code>callee</code>指向函数本身<br><code>length</code>调用函数时传参数量<br>支持使用<code>for、for...of、for...in、Object.keys、对象方法</code>来循环<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments">Arguments 对象 - JavaScript | MDN</a></p><h2 id="NodeList"><a href="#NodeList" class="headerlink" title="NodeList"></a>NodeList</h2><p>通过<code>ducment.querySelectorAll</code>获取到的 DOM 列表<br>原型链：myNodeList –&gt; NodeList.prototype –&gt; Object.prototype –&gt; null<br><img src="/img/images/2024/1708407173602-66227a73-a773-4fd6-87c6-368c42cf42bb.png"><br><code>length</code>子节点数量<br>支持使用<code>for、for...of、~~for...in~~、Object.keys、对象方法、forEach</code>来循环<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList">NodeList - Web API 接口参考 | MDN</a></p><h2 id="HTMLCollection"><a href="#HTMLCollection" class="headerlink" title="HTMLCollection"></a>HTMLCollection</h2><p>通过<code>ducment.getElementsByTagName</code>获取到的 DOM 列表<br>原型链：myHTMLCollection –&gt; HTMLCollection.prototype –&gt; Object.prototype –&gt; null<br><img src="/img/images/2024/1708420141223-7e2d08dd-95ac-4b0a-ba86-35d1ac0cba5f.png"><br><code>length</code>子节点数量<br>支持使用<code>for、for...of、~~for...in~~、Object.keys、对象方法</code>来循环<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCollection">HTMLCollection - Web API 接口参考 | MDN</a></p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>有 length，可通过下标取值，不支持数组方法，这完全跟类数组的特点一致</p><h1 id="类数组如何转为数组呢？"><a href="#类数组如何转为数组呢？" class="headerlink" title="类数组如何转为数组呢？"></a>类数组如何转为数组呢？</h1><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h2><p>作用：从<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AE">可迭代</a>或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#%E4%BD%BF%E7%94%A8%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1">类数组</a>对象创建一个新的浅拷贝的数组实例。<br>原理：是基于传入数据的 length 属性以及通过索引访问元素的能力，将元素添加到新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr1 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">arguments</span>)<br><span class="hljs-keyword">const</span> arr2 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-title class_">NodeList</span>)<br><span class="hljs-keyword">const</span> arr3 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-title class_">HTMLCollection</span>)<br></code></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from">Array.from() - JavaScript | MDN</a></p><h2 id="…-解构"><a href="#…-解构" class="headerlink" title="… 解构"></a>… 解构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr1 = [...<span class="hljs-variable language_">arguments</span>]<br><span class="hljs-keyword">const</span> arr2 = [...<span class="hljs-title class_">NodeList</span>]<br><span class="hljs-keyword">const</span> arr3 = [...<span class="hljs-title class_">HTMLCollection</span>]<br></code></pre></td></tr></table></figure><h2 id="Array-prototype-slice-call"><a href="#Array-prototype-slice-call" class="headerlink" title="Array.prototype.slice.call"></a>Array.prototype.slice.call</h2><p>slice：是基于传入对象的 length 属性以及通过索引访问元素的能力，实现复制元素并返回新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr1 = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>)<br><span class="hljs-keyword">const</span> arr2 = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-title class_">NodeList</span>)<br><span class="hljs-keyword">const</span> arr3 = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-title class_">HTMLCollection</span>)<br></code></pre></td></tr></table></figure><h3 id="slice-call"><a href="#slice-call" class="headerlink" title="[].slice.call"></a>[].slice.call</h3><p>本质还是借用 slice 实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr1 = [].<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>)<br><span class="hljs-keyword">const</span> arr2 = [].<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-title class_">NodeList</span>)<br><span class="hljs-keyword">const</span> arr3 = [].<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-title class_">HTMLCollection</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20、JS 的依赖管理</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/20%E3%80%81JS%20%E7%9A%84%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/20%E3%80%81JS%20%E7%9A%84%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="依赖文件：package-json"><a href="#依赖文件：package-json" class="headerlink" title="依赖文件：package.json"></a>依赖文件：package.json</h1><p>依赖版本：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;antd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.1.2&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;react&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~16.0.1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;redux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.7.2&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lodash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>&quot;react&quot;: &quot;~16.0.1&quot;</code>版本格式：[范围符号]主版本.次版本.修订版本</p><ul><li>主版本：不兼容的更改；平时不建议升级</li><li>次版本：兼容的功能性新增；平时可以升级</li><li>修订版本：兼容的问题修复；平时可以升级</li></ul><p>范围符号：</p><ul><li>*：升级到最新版本</li><li>^：升级次版本和修订版本</li><li>~：只升级修订版本</li></ul><p>因此上述的版本范围为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;antd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.1.2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// === 3.1.2</span><br>  <span class="hljs-attr">&quot;react&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~16.0.1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// [16.0.1, 16.1.0)</span><br>  <span class="hljs-attr">&quot;redux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.7.2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// [3.7.2, 4.0.0)</span><br>  <span class="hljs-attr">&quot;lodash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-comment">// 永远最新</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="依赖管理工具：npm、yarn、cnpm、pnpm-等"><a href="#依赖管理工具：npm、yarn、cnpm、pnpm-等" class="headerlink" title="依赖管理工具：npm、yarn、cnpm、pnpm 等"></a>依赖管理工具：npm、yarn、cnpm、pnpm 等</h1><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><ul><li>v1：依赖嵌套，依赖的依赖放在各依赖下面，比如下面这样</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">node_modules<br>├── A@<span class="hljs-number">1.0</span><span class="hljs-number">.0</span><br>│   └── node_modules<br>│       └── B@<span class="hljs-number">1.0</span><span class="hljs-number">.0</span><br>├── C@<span class="hljs-number">1.0</span><span class="hljs-number">.0</span><br>│   └── node_modules<br>│       └── B@<span class="hljs-number">2.0</span><span class="hljs-number">.0</span><br>└── D@<span class="hljs-number">1.0</span><span class="hljs-number">.0</span><br>    └── node_modules<br>        └── B@<span class="hljs-number">1.0</span><span class="hljs-number">.0</span><br><br>优点：简单明了<br>缺点：嵌套太深，重复依赖；<br>B@<span class="hljs-number">1.0</span><span class="hljs-number">.0</span> 存了两份<br></code></pre></td></tr></table></figure><ul><li>v3：扁平模式，相同的放在根层，冲突的还是放在依赖下面。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">node_modules<br>├── A@<span class="hljs-number">1.0</span><span class="hljs-number">.0</span><br>├── B@<span class="hljs-number">1.0</span><span class="hljs-number">.0</span><br>└── C@<span class="hljs-number">1.0</span><span class="hljs-number">.0</span><br>    └── node_modules<br>        └── B@<span class="hljs-number">2.0</span><span class="hljs-number">.0</span><br>├── D@<span class="hljs-number">1.0</span><span class="hljs-number">.0</span><br><br>require(&#x27;A&#x27;) 时，首先会在当前路径下搜索 node_modules 目录中是否存在该依赖，<br>如果不存在则往上查找，也就是继续查找该路径的上一层目录下的 node_modules<br><br>优点：避免嵌套太深，消除重复依赖<br>缺点：该版本还缺少 lock 文件，不确定性<br>什么是确定性？始终得到相同的 node_modules 目录结构<br></code></pre></td></tr></table></figure><ul><li>v5：node_modules 目录结构跟 v3 一样，但新增了<code>package-lock.json</code>文件，保证依赖的确定性</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;redux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.7.2&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>对应的<code>package-lock.json</code>，记录了每一个依赖的确定版本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;redux&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lockfileVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;requires&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;packages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;redux&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;license&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ISC&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;redux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.7.2&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;node_modules/js-tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4.0.0&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;resolved&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;integrity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;node_modules/lodash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4.17.21&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;resolved&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;integrity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;node_modules/lodash-es&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4.17.21&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;resolved&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://registry.npmjs.org/lodash-es/-/lodash-es-4.17.21.tgz&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;integrity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sha512-mKnC+QJ9pWVzv+C4/U3rRsHapFfHvQFoFB92e52xeyGMcX6/OlIl78je1u8vePzYZSkkogMPJ2yjxxsb89cxyw==&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;node_modules/loose-envify&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.4.0&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;resolved&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;integrity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;js-tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.0 || ^4.0.0&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;bin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;loose-envify&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cli.js&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;node_modules/redux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.7.2&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;resolved&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://registry.npmjs.org/redux/-/redux-3.7.2.tgz&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;integrity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sha512-pNqnf9q1hI5HHZRBkj3bAngGZW/JMCmexDlOxw4XagXY2o1327nHH54LoTjiPJ0gizoqPDRqWyX/00g0hD6w+A==&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;lodash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.2.1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lodash-es&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.2.1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;loose-envify&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.1.0&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;symbol-observable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.0.3&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;node_modules/symbol-observable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.2.0&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;resolved&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://registry.npmjs.org/symbol-observable/-/symbol-observable-1.2.0.tgz&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;integrity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sha512-e900nM8RRtGhlV36KGEU9k65K3mPb1WV70OdjfxlG2EAuM1noi/E/BaW/uMhL7bPEssK8QV57vN3esixjUvcXQ==&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;engines&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;node&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&gt;=0.10.0&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1708326900266-e5945ce6-6ccd-46af-bd96-2184f2d324fd.png"></p><h2 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h2><p>yarn 发布时是为了解决 npm v3 的问题<br>yarn 生成的 node_modules 目录结构和 npm v5 是相同的，同时默认生成一个 yarn.lock 文件。<br>特点：yarn.lock 文件里仍然会出现语义化版本范围符号(~^*)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs json"># THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.<br># yarn lockfile v1<br><br><br><span class="hljs-attr">&quot;js-tokens@^3.0.0 || ^4.0.0&quot;</span><span class="hljs-punctuation">:</span><br>  version <span class="hljs-string">&quot;4.0.0&quot;</span><br>  resolved <span class="hljs-string">&quot;https://registry.yarnpkg.com/js-tokens/-/js-tokens-4.0.0.tgz#19203fb59991df98e3a287050d4647cdeaf32499&quot;</span><br>  integrity sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==<br><br>lodash-es@^<span class="hljs-number">4.2</span><span class="hljs-number">.1</span><span class="hljs-punctuation">:</span><br>  version <span class="hljs-string">&quot;4.17.21&quot;</span><br>  resolved <span class="hljs-string">&quot;https://registry.yarnpkg.com/lodash-es/-/lodash-es-4.17.21.tgz#43e626c46e6591b7750beb2b50117390c609e3ee&quot;</span><br>  integrity sha512-mKnC+QJ9pWVzv+C4/U3rRsHapFfHvQFoFB92e52xeyGMcX6/OlIl78je1u8vePzYZSkkogMPJ2yjxxsb89cxyw==<br><br>lodash@^<span class="hljs-number">4.2</span><span class="hljs-number">.1</span><span class="hljs-punctuation">:</span><br>  version <span class="hljs-string">&quot;4.17.21&quot;</span><br>  resolved <span class="hljs-string">&quot;https://registry.yarnpkg.com/lodash/-/lodash-4.17.21.tgz#679591c564c3bffaae8454cf0b3df370c3d6911c&quot;</span><br>  integrity sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==<br><br>loose-envify@^<span class="hljs-number">1.1</span><span class="hljs-number">.0</span><span class="hljs-punctuation">:</span><br>  version <span class="hljs-string">&quot;1.4.0&quot;</span><br>  resolved <span class="hljs-string">&quot;https://registry.yarnpkg.com/loose-envify/-/loose-envify-1.4.0.tgz#71ee51fa7be4caec1a63839f7e682d8132d30caf&quot;</span><br>  integrity sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==<br>  dependencies<span class="hljs-punctuation">:</span><br>    js-tokens <span class="hljs-string">&quot;^3.0.0 || ^4.0.0&quot;</span><br><br>redux@^<span class="hljs-number">3.7</span><span class="hljs-number">.2</span><span class="hljs-punctuation">:</span><br>  version <span class="hljs-string">&quot;3.7.2&quot;</span><br>  resolved <span class="hljs-string">&quot;https://registry.yarnpkg.com/redux/-/redux-3.7.2.tgz#06b73123215901d25d065be342eb026bc1c8537b&quot;</span><br>  integrity sha512-pNqnf9q1hI5HHZRBkj3bAngGZW/JMCmexDlOxw4XagXY2o1327nHH54LoTjiPJ0gizoqPDRqWyX/<span class="hljs-number">00</span>g0hD6w+A==<br>  dependencies<span class="hljs-punctuation">:</span><br>    lodash <span class="hljs-string">&quot;^4.2.1&quot;</span><br>    lodash-es <span class="hljs-string">&quot;^4.2.1&quot;</span><br>    loose-envify <span class="hljs-string">&quot;^1.1.0&quot;</span><br>    symbol-observable <span class="hljs-string">&quot;^1.0.3&quot;</span><br><br>symbol-observable@^<span class="hljs-number">1.0</span><span class="hljs-number">.3</span><span class="hljs-punctuation">:</span><br>  version <span class="hljs-string">&quot;1.2.0&quot;</span><br>  resolved <span class="hljs-string">&quot;https://registry.yarnpkg.com/symbol-observable/-/symbol-observable-1.2.0.tgz#c22688aed4eab3cdc2dfeacbb561660560a00804&quot;</span><br>  integrity sha512-e900nM8RRtGhlV36KGEU9k65K3mPb1WV70OdjfxlG2EAuM1noi/E/BaW/uMhL7bPEssK8QV57vN3esixjUvcXQ==<br><br></code></pre></td></tr></table></figure><h2 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h2><p>它使用链接 link 的安装方式，提高了安装速度。<br>它生成的 node_modules 目录采用的是以 版本号 @包名 命名，然后再做软链接到只以包名命名的文件夹上。<br><img src="/img/images/2024/1708327666447-f4262553-4bc5-4160-81df-51c05eedc98a.png"></p><p>优点：按照速度快<br>缺点：不会生成 lock 文件；生成的 node_modules 目录不一致</p><h2 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h2><p>使用内容寻址存储来存储依赖包，相同的包(不论被多少个项目所使用)只会在存储中存储一次<br>它生成的 node_modules 目录如下：直接依赖放在根目录，依赖的依赖放在 .pnpm 文件夹内<br><img src="/img/images/2024/1708328628344-e1dbd3b5-f312-4138-a728-13e5ffb6fa4a.png"><br>默认生成一个 pnpm-lock.yaml 文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">lockfileVersion:</span> <span class="hljs-number">5.4</span><br><br><span class="hljs-attr">specifiers:</span><br>  <span class="hljs-attr">redux:</span> <span class="hljs-string">^3.7.2</span><br><br><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-attr">redux:</span> <span class="hljs-number">3.7</span><span class="hljs-number">.2</span><br><br><span class="hljs-attr">packages:</span><br><br>  <span class="hljs-string">/js-tokens/4.0.0:</span><br>    <span class="hljs-attr">resolution:</span> &#123;<span class="hljs-attr">integrity:</span> <span class="hljs-string">sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==</span>&#125;<br>    <span class="hljs-attr">dev:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-string">/lodash-es/4.17.21:</span><br>    <span class="hljs-attr">resolution:</span> &#123;<span class="hljs-attr">integrity:</span> <span class="hljs-string">sha512-mKnC+QJ9pWVzv+C4/U3rRsHapFfHvQFoFB92e52xeyGMcX6/OlIl78je1u8vePzYZSkkogMPJ2yjxxsb89cxyw==</span>&#125;<br>    <span class="hljs-attr">dev:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-string">/lodash/4.17.21:</span><br>    <span class="hljs-attr">resolution:</span> &#123;<span class="hljs-attr">integrity:</span> <span class="hljs-string">sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==</span>&#125;<br>    <span class="hljs-attr">dev:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-string">/loose-envify/1.4.0:</span><br>    <span class="hljs-attr">resolution:</span> &#123;<span class="hljs-attr">integrity:</span> <span class="hljs-string">sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==</span>&#125;<br>    <span class="hljs-attr">hasBin:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">dependencies:</span><br>      <span class="hljs-attr">js-tokens:</span> <span class="hljs-number">4.0</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">dev:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-string">/redux/3.7.2:</span><br>    <span class="hljs-attr">resolution:</span> &#123;<span class="hljs-attr">integrity:</span> <span class="hljs-string">sha512-pNqnf9q1hI5HHZRBkj3bAngGZW/JMCmexDlOxw4XagXY2o1327nHH54LoTjiPJ0gizoqPDRqWyX/00g0hD6w+A==</span>&#125;<br>    <span class="hljs-attr">dependencies:</span><br>      <span class="hljs-attr">lodash:</span> <span class="hljs-number">4.17</span><span class="hljs-number">.21</span><br>      <span class="hljs-attr">lodash-es:</span> <span class="hljs-number">4.17</span><span class="hljs-number">.21</span><br>      <span class="hljs-attr">loose-envify:</span> <span class="hljs-number">1.4</span><span class="hljs-number">.0</span><br>      <span class="hljs-attr">symbol-observable:</span> <span class="hljs-number">1.2</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">dev:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-string">/symbol-observable/1.2.0:</span><br>    <span class="hljs-attr">resolution:</span> &#123;<span class="hljs-attr">integrity:</span> <span class="hljs-string">sha512-e900nM8RRtGhlV36KGEU9k65K3mPb1WV70OdjfxlG2EAuM1noi/E/BaW/uMhL7bPEssK8QV57vN3esixjUvcXQ==</span>&#125;<br>    <span class="hljs-attr">engines:</span> &#123;<span class="hljs-attr">node:</span> <span class="hljs-string">&#x27;&gt;=0.10.0&#x27;</span>&#125;<br>    <span class="hljs-attr">dev:</span> <span class="hljs-literal">false</span><br><br></code></pre></td></tr></table></figure><p><strong>循环依赖：</strong><br>A 依赖 B，B 依赖 A</p><p><strong>幽灵依赖：</strong><br>项目中用了的包，但未在 package.json 中定义。<br>这是因为依赖提升造成的副作用</p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1、浏览器进_线程有哪些？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/1%E3%80%81%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B_%E7%BA%BF%E7%A8%8B%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/1%E3%80%81%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B_%E7%BA%BF%E7%A8%8B%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p><strong>bower 进程</strong><br>浏览器的主进程，负责地址栏、导航条等，还会协调管理其他进程</p><p><strong>网络进程</strong><br>负责网络相关，处理请求、响应、DNS、TCP 等</p><p><strong>GPU 进程</strong><br>负责图形的渲染：动画、过渡、3D、WebGL 等</p><p><strong>插件进程</strong><br>负责处理浏览器各种插件</p><p><strong>渲染进程</strong><br>负责页面的渲染，前端关注的重点</p><p>它包含以下线程：<br><strong>GUI 线程</strong>：生成 DOM 树、CSS 树、Render 树，最终渲染成页面<br><strong>JS 线程：</strong>负责 JS 的解析与执行，与 <strong>GUI 线程</strong>互斥<br><strong>异步请求线程</strong>：处理页面的请求，会跟<strong>网络进程</strong>通信<br><strong>事件触发线程</strong>：负责事件的循环<br><strong>定时器线程</strong>：专门处理 JS 里面的定时任务<br><strong>存储线程</strong>：处理 Storage、cookie 的</p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19、Promise 是什么？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/19%E3%80%81Promise%20%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/19%E3%80%81Promise%20%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>Promise 是 JS 中的一种异步处理方式，用于表示异步的结果</p><p>状态：pending(进行中)、fulfilled(已完成)、rejected(已拒绝)<br>状态流转：pending &#x3D;&gt; fulfilled；pending &#x3D;&gt; rejected；</p><p>使用方式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 基本使用 1</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// ....</span><br>  <span class="hljs-title function_">resolve</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;成功了&#x27;</span>, res)<br>&#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;失败了&#x27;</span>, err)<br>&#125;).<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;结束了&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 基本使用 2</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// ....</span><br>  <span class="hljs-title function_">resolve</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;成功了&#x27;</span>, res)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;失败了&#x27;</span>, err)<br>&#125;).<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;结束了&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;成功了&#x27;</span>, res) <span class="hljs-comment">// 1</span><br>&#125;)<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">rejected</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;失败了&#x27;</span>, err) <span class="hljs-comment">// 1</span><br>&#125;)<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>), <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">2</span>)]).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;都成功了&#x27;</span>, res) <span class="hljs-comment">// [1, 2]</span><br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;有一个失败了&quot;</span>, err);<br>&#125;);<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([<span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>), <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">2</span>)]).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;有成功的&#x27;</span>, res) <span class="hljs-comment">// 1 或 2</span><br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;有一个失败了&quot;</span>, err);<br>&#125;);<br></code></pre></td></tr></table></figure><p>补充知识：<a href="https://juejin.cn/post/7327353616380526619">7、简单手写 Promise - 掘金</a></p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>18、什么是事件模型？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/18%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/18%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>定义：浏览器处理事件的方式。<br>分为三个阶段：捕获 -&gt; 目标 -&gt; 冒泡</p><p><strong>事件绑定：</strong><br><code>ele.onclick = () =&gt; &#123;&#125;</code>只支持冒泡<br><code>ele.addEventListerner(&#39;click&#39;, fn, boolean)</code>第三个参数默认为 false(冒泡)，为 true(捕获)</p><p><strong>事件解绑：</strong><br><code>ele.onclick = null</code><br><code>ele.removeEventListerner(&#39;click&#39;, fn)</code></p><p><strong>作用：</strong>针对列表，可将点击事件绑到父元素，然后通过冒泡机制实现事件委托</p><p><strong>阻止事件传播：</strong><br><code>event.stopPropagation()</code>只是阻止相同事件的传播，不阻止事件的执行。白话：我执行时无法传播，后续事件(若有)可以执行，但也无法传播<br><code>event.stopImmediatePropagation()</code>阻止相同事件的传播与执行。白话：我执行时无法传播，后续事件(若有)也不能执行</p><p><strong>阻止默认事件：</strong><br><code>event.preventDefault()</code>阻止标签的默认事件，比如 a 标签的跳转</p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>17、常用的 BOM</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/17%E3%80%81%E5%B8%B8%E7%94%A8%E7%9A%84%20BOM/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/17%E3%80%81%E5%B8%B8%E7%94%A8%E7%9A%84%20BOM/</url>
    
    <content type="html"><![CDATA[<p><strong>location</strong><br><code>location.assgin(url)</code>跳转页面，创建新的浏览器历史，等价于<code>location.href = url</code><br><code>location.replace(url)</code>跳转页面， 替换当前的浏览器历史<br><code>location.reload()</code>刷新当前页面</p><p><strong>history</strong><br><code>history.pushState(state, title, url)</code>跳转页面，创建新的浏览器历史，但<strong>不刷新页面</strong><br><code>history.replaceState(state, title, url)</code>跳转页面，替换当前的浏览器历史，但<strong>不刷新页面</strong><br><code>history.back()</code>后退一步<br><code>history.forward()</code>前进一步<br><code>history.go(number)</code>跳到 n 步</p><p><strong>navigator</strong><br><code>navigator.useAgent</code>获取当前浏览器的信息<br><code>navigator.useAgentData</code>获取当前浏览器的信息，更详细</p><p><strong>screen</strong><br><code>screen.width/height</code>浏览器所属设备的宽高<br><code>screen.availWidth/availHeight</code>浏览器所属设备的可用高度(减掉系统的上下任务栏宽高)</p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>16、什么是模块化</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/16%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/16%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>一种管理代码的方式，核心是将相关的代码弄成独立的单元(模块)。</p><p>发展历程<br><strong>script 标签</strong>：最开始通过在 HTML 里面引入不同的 script 标签，强行“模块化”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">htlm</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&#x27;zh&#x27;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charse</span>=<span class="hljs-string">&quot;utf=-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>xx<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://xxxx/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./tool.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;script src=&quot;./*.js&quot;&gt;&lt;/script&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">htlm</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>缺点</strong>：变量会产生冲突</p><p><strong>IIFE</strong>：立即执行函数，借助于函数作用域，使用“模块化”<br>也可以看做闭包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> moduleA = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">addCount</span> = (<span class="hljs-params"></span>) =&gt; ++count<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getCount</span> = (<span class="hljs-params"></span>) =&gt; count<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    getCount,<br>    addCount<br>  &#125;<br>&#125;)()<br><br>moduleA.<span class="hljs-title function_">addCount</span>()<br>moduleA.<span class="hljs-title function_">getCount</span>() <span class="hljs-comment">// 1</span><br><br><span class="hljs-keyword">const</span> moduleB = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">addCount</span> = (<span class="hljs-params"></span>) =&gt; count + <span class="hljs-number">2</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getCount</span> = (<span class="hljs-params"></span>) =&gt; count<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    getCount,<br>    addCount<br>  &#125;<br>&#125;)()<br><br>moduleB.<span class="hljs-title function_">addCount</span>()<br>moduleB.<span class="hljs-title function_">getCount</span>() <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p><strong>CJS（CommonJS）</strong>：支持<code>node</code>端的模块<strong>同步</strong>加载规范，通过<code>require</code>、<code>exports</code>实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// moduleA.js</span><br><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">addCount</span> = (<span class="hljs-params"></span>) =&gt; count + <span class="hljs-number">1</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getCount</span> = (<span class="hljs-params"></span>) =&gt; count<br><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">addCount</span> = addCount<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">getCount</span> = getCount<br><br><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">const</span> moduleA = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./moduleA.js&#x27;</span>)<br>moduleA.<span class="hljs-title function_">addCount</span>()<br>moduleA.<span class="hljs-title function_">getCount</span>() <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p><strong>缺点</strong>：只支持同步，容易阻塞</p><p><strong>AMD（Async Module Define）</strong>：支持<code>浏览器端</code>的模块<strong>异步</strong>加载规范，著名产物<code>require.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义模块</span><br><span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;moduleA&#x27;</span>, [<span class="hljs-string">&#x27;deps1&#x27;</span>, <span class="hljs-string">&#x27;deps2&#x27;</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params">deps1, deps2</span>) &#123;<br>  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">addCount</span> = (<span class="hljs-params"></span>) =&gt; count + <span class="hljs-number">1</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getCount</span> = (<span class="hljs-params"></span>) =&gt; count<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    getCount,<br>    addCount<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// 使用模块</span><br><span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;moduleA&#x27;</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params">moduleA</span>) &#123;<br>  moduleA.<span class="hljs-title function_">addCount</span>()<br>  moduleA.<span class="hljs-title function_">getCount</span>() <span class="hljs-comment">// 1</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>缺点</strong>：语法繁琐</p><p><strong>UMD（Universal Module Define）</strong>：一种兼容前面模块的加载规范<br>本质是利用 <strong>IIFE</strong>做兼容，类似下面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params">root, factory</span>) &#123;<br>  <span class="hljs-keyword">const</span> moduleName= factory.<span class="hljs-property">name</span><br>  <span class="hljs-keyword">if</span>(define &amp;&amp; <span class="hljs-keyword">typeof</span> define === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 兼容 AMD</span><br>    <span class="hljs-title function_">define</span>(moduleName, [], factory)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">exports</span> === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 兼容 CJS</span><br>    <span class="hljs-built_in">exports</span>[moduleName] = <span class="hljs-title function_">factory</span>()<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 挂载到全局</span><br>    root[moduleName] = <span class="hljs-title function_">factory</span>()<br>  &#125;<br>&#125;)(<span class="hljs-variable language_">this</span>, <span class="hljs-keyword">function</span> <span class="hljs-title function_">moduleA</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">addCount</span> = (<span class="hljs-params"></span>) =&gt; count + <span class="hljs-number">1</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getCount</span> = (<span class="hljs-params"></span>) =&gt; count<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    getCount,<br>    addCount<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>ESM（ES6 Module）</strong>：ECMA 支持的模块加载机制，通过<code>import</code>、<code>export</code>实现<br>这也是我们目前最常用的方式，支持异步</p><p>模块化的目的：1、隔离代码逻辑；2、扩展协同方便性；<br>最终实现了一切皆模块，是前端工程化的基石。</p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15、new 干了什么事情？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/15%E3%80%81new%20%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88%E4%BA%8B%E6%83%85%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/15%E3%80%81new%20%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88%E4%BA%8B%E6%83%85%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>前置知识：<a href="https://juejin.cn/post/7327353573935562802">14、原型与原型链 - 掘金</a></p><p>在 JS 中，可以通过<code>new</code>创建实例<br><code>new</code>做的事情：<br>1、创建一个空对象<br>2、将该空对象的<code>__proto__</code>指向构造函数的<code>prototype</code><br>3、将 this 指向该空对象<br>4、执行构造函数</p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14、原型与原型链</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/14%E3%80%81%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/14%E3%80%81%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<p>在 JS 中，每个用<code>function</code>定义的函数，都有<code>prototype</code>属性，指向一个普通对象，该对象存储的数据可供其<code>实例</code>使用。<br>在 JS 中，每个对象都有<code>__proto__</code>属性，指向一个普通对象，该对象存储的数据可供其使用。<br>结合上面两句话，得出的结果为：<code>实例.__proto__ === 构造函数.prototype</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><br>person.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>总结：对象有一个原型(<code>__proto__</code>)，函数有两个原型(<code>__proto__、prototype</code>)</p><p>而原型链就是用来找属性&#x2F;方法的一种规则，当在对象自身没有属性&#x2F;方法时，则会去找其原型(<code>__proto__</code>)对象上，若没有则再从原型(<code>__proto__</code>)对象上的原型(<code>__proto__</code>)对象找</p><p>完整版的原型链</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><br><span class="hljs-comment">// person(实例)与其构造函数 Person</span><br>person.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 原型对象(实例)与其构造函数 Object</span><br>person.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 原型对象(实例)的原型对象(实例)与其构造函数 null，为了避免无限循环，所以等于 null</span><br>person.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-literal">null</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>所有关系的原型链<br><img src="/img/images/2024/1706064051573-1761d71a-b186-4367-96b5-bf394effaec5.jpeg"><br>如何判断实例：<code>实例.__proto__ === 构造函数.prototype</code>，也就是<code>instanceof</code>的核心判断，可以继承的哦<br>上述图中的关系为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">person.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br><br>person.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 所以得出的实例关系为：</span><br>person <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span> <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Person</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span> <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Function</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span> <span class="hljs-comment">// true</span><br><br>person <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Person</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Function</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Object</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 其中比较有意思的是：Function、Object 它们互生，并且自生</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13、事件循环是什么？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/13%E3%80%81%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/13%E3%80%81%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>用来处理事件队列任务的一种机制，当主线程空闲时，就轮询的方式去事件队列里面找任务，然后执行。</p><p>前置知识：<a href="https://juejin.cn/post/7327121518549843978">12、事件队列是什么？ - 掘金</a></p><p>循环逻辑为：先执行宏任务小队列里面的所有任务，再执行微任务小队列里面的所有任务。</p><p>面试题检测：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0</span>)</span><br><span class="language-javascript">  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>)=&gt;</span>&#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)</span><br><span class="language-javascript">      <span class="hljs-title function_">resolve</span>()</span><br><span class="language-javascript">    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  &#125;,<span class="hljs-number">0</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>)=&gt;</span>&#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>)</span><br><span class="language-javascript">      <span class="hljs-title function_">resolve</span>()</span><br><span class="language-javascript">    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">6</span>)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  &#125;,<span class="hljs-number">0</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>)=&gt;</span>&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">7</span>)</span><br><span class="language-javascript">    <span class="hljs-title function_">resolve</span>()</span><br><span class="language-javascript">  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">8</span>)</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>// 打印结果：<br>// 0,7,8,1,2,3,4,5,6<br><br>// 解析：<br>// <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> 为第一个宏任务</span><br><span class="language-javascript"><span class="hljs-comment">// console.log(0)，立即执行，所以【打印 0】</span></span><br><span class="language-javascript"><span class="hljs-comment">// setTimeout(...) 为第二个宏任务，等时间到生成新的宏任务小队列 1</span></span><br><span class="language-javascript"><span class="hljs-comment">// setTimeout(...) 为第三个宏任务，等时间到生成新的宏任务小队列 2</span></span><br><span class="language-javascript"><span class="hljs-comment">// new Promise(fn) 其中的 fn 是属于立即执行的哦，，所以【打印 7】</span></span><br><span class="language-javascript"><span class="hljs-comment">// 其中调用了 resolve，则 .then 的回调推到微任务队列中，作为任务1</span></span><br><span class="language-javascript"><span class="hljs-comment">// </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> 中的代码执行完毕(宏任务)，则清理微任务队列，则调用任务1，所以【打印 8】<br><br>// 开启第二个宏任务，即宏任务小队列 1，所以【打印 1】<br>// 其中又是 new Promise(fn) 其中的 fn 是属于立即执行的哦，，所以【打印 2】<br>// 其中又调用了 resolve，则 .then 的回调推到微任务队列中，作为新的任务1<br>// 第二个宏任务中的代码执行完毕(宏任务)，则清理微任务队列，则调用新任务1，所以【打印 3】<br><br>// 开启第三个宏任务，即宏任务小队列 2，所以【打印 4】<br>// 其中又是 new Promise(fn) 其中的 fn 是属于立即执行的哦，，所以【打印 5】<br>// 其中又调用了 resolve，则 .then 的回调推到微任务队列中，作为新的任务1<br>// 第二个宏任务中的代码执行完毕(宏任务)，则清理微任务队列，则调用新任务1，所以【打印 6】<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12、事件队列是什么？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/12%E3%80%81%E4%BA%8B%E4%BB%B6%E9%98%9F%E5%88%97%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/12%E3%80%81%E4%BA%8B%E4%BB%B6%E9%98%9F%E5%88%97%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>前置知识：<a href="https://juejin.cn/post/7327137518822457354">11、异步任务是什么？ - 掘金</a></p><p>用来存储异步任务回调的，先进先出策略，形成一个队列。</p><p>分为：宏任务队列、微任务队列<br>宏任务队列会有多个，每个宏任务队列里面其实只有一个任务，即一个宏任务自成一个小队<br>微任务队列有且只有一个，该队列里面有多个任务</p><p>事件队列大致图：<br><img src="/img/images/2024/1706024343767-6cd74b3c-c373-4806-a637-8a3b1e5b6796.jpeg"></p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11、异步任务是什么？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/11%E3%80%81%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/11%E3%80%81%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>前置知识：<a href="https://juejin.cn/post/7323271686034325514">如何理解 JS 的单线程？ - 掘金</a></p><p>定义：不会阻塞主线程的任务，完成后通过回调函数来通知主线程。<br>分类：宏任务、微任务</p><p>常见宏任务：<script>、setTimeout<br>常见微任务：Promise、async/await（await 行下面的所有代码可以看做是微任务的回调函数要执行的）</p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10、如何理解闭包？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/10%E3%80%81%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E9%97%AD%E5%8C%85%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E7%9F%A5%E8%AF%86%E5%8D%A1%E7%89%87/10%E3%80%81%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E9%97%AD%E5%8C%85%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>定义：使用了父函数变量的子函数，在父函数外被使用，则形成了闭包。</p><p>问题：内存泄漏，因为函数内的变量是跟着函数调用时创建，调用完销毁。但闭包导致函数内部变量在外面使用中，那函数就不能销毁，也就让该变量一直存在内存中了，无法被<a href="https://www.yuque.com/u53094/vd58kv/ikng3hfdgm640igg?singleDoc#">垃圾回收</a>，久了后会占用大量内存。</p><p>前置知识：<a href="https://juejin.cn/post/7323271686034325514">如何理解 JS 的单线程？ - 掘金</a><br>白话：桌 A 的客人 a 跑到桌 B 去吃饭了，那导致桌 A 的人吃完后还要在那等着客人 a 回来然后一起走(关系好)，那如果客人 a 在桌 B 吃的慢玩的嗨(E 人)，那桌 A 就一直等到，一直占着桌子，也没法去清理(客人都没走)，如果这种事情多了，那餐馆的桌子就不够了。</p>]]></content>
    
    
    <categories>
      
      <category>每日知识卡片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日知识卡片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>现在的事：前端面试</title>
    <link href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E7%8E%B0%E5%9C%A8%E7%9A%84%E4%BA%8B%EF%BC%9A%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    <url>/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E7%8E%B0%E5%9C%A8%E7%9A%84%E4%BA%8B%EF%BC%9A%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>放下了玩心，拿起了前情(前端之情)。</p><p>虽然心态变好了，但只是让自己对事更从容些，并不是要抛弃斗志，还是会用心去对待自己的工作之路。</p><p>之后就开始进行前端面试的各种准备：简历更改、基础知识补充、啃八股文、啃 Vue 源码、啃 React 源码等等</p><p>不停的弥补之前缺失的“原理”级别的知识，只为了能找到更好的工作。</p><p>目前已来到 24 年 1 月了，自己的前端面试准备之八股文，已蓄能 62.5%，再蓄一些应该就能重拳出击了。也同步啃垂直领域&#x2F;个人优势相关的知识的了：可视化、nodejs 等</p><p>这次啃八股文时，发现以前的自己真的疏忽了很多“原理”级别的知识，都是单纯的用，用的时候还似是而非。</p><p>而现在对前端基础有了更深的认识：浏览器原理、this、面向对象、原型链、Promise、作用域、ES6、TS、BOM、Performance、网络请求、函数式、模块化等</p><p>对 Vue 背后的逻辑更深一层：源码、响应式、DIFF、虚拟 DOM、编译、渲染、依赖收集、依赖触发、状态管理、路由实现等</p><p>也即将对 React 背后的逻辑、可视化、nodejs 等进行学习</p><p>这些学习的结果我已经整理发布到掘金了，有想了解的可以去瞅瞅哦</p><p><a href="https://juejin.cn/column/7291654461659316275">前端面试八股文 - 掘金</a><br><img src="/img/images/2024/1704947335709-7dc905f0-4cc6-4a0b-bbf4-d3e6902a3be1.png"></p>]]></content>
    
    
    <categories>
      
      <category>2023-年总结，平仄参半</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我是谁在干啥</tag>
      
      <tag>年总结</tag>
      
      <tag>2023-年总结，平仄参半</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些数据</title>
    <link href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE/"/>
    <url>/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>本篇将逻辑实际的数据，用来对 23 年的硬核总结</p><h1 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h1><p>旅行次数：3 次<br>出行次数：1 次<br>电影次数：30 次<br>回家次数：5 次<br>同学聚餐：2 次</p><h1 id="输出上"><a href="#输出上" class="headerlink" title="输出上"></a>输出上</h1><h2 id="语雀：43-W-字"><a href="#语雀：43-W-字" class="headerlink" title="语雀：43 W 字"></a>语雀：43 W 字</h2><p><img src="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE/yuque.png"></p><h2 id="知乎：17-W-阅读量"><a href="#知乎：17-W-阅读量" class="headerlink" title="知乎：17 W 阅读量"></a>知乎：17 W 阅读量</h2><p><img src="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE/zhihu.png"></p><h2 id="掘金：92-篇文章"><a href="#掘金：92-篇文章" class="headerlink" title="掘金：92 篇文章"></a>掘金：92 篇文章</h2><p><img src="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE/juejin.png"></p><h1 id="阅读上"><a href="#阅读上" class="headerlink" title="阅读上"></a>阅读上</h1><p><a href="https://www.yuque.com/u53094/se9rk9?view=doc_embed">我与阅读有约</a></p><p>阅读书籍：</p><ul><li>《纳瓦尔宝典》</li><li>《如何提出一个好问题》</li><li>《左耳听风：传奇程序员练级攻略》</li></ul>]]></content>
    
    
    <categories>
      
      <category>2023-年总结，平仄参半</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我是谁在干啥</tag>
      
      <tag>年总结</tag>
      
      <tag>2023-年总结，平仄参半</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-年总结，平仄参半</title>
    <link href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/"/>
    <url>/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/</url>
    
    <content type="html"><![CDATA[<p>开头就不废话与客气了，就祝大家 24 年各自龙飞或凤舞。<br>23 年我是两种生活状态：离职前、离职后。<br>平：平平淡淡的生活<br>仄(平的反义词)：花里胡哨的生活<br>具体情况，请听我娓娓道来</p><!-- more --><h2 id="离职前"><a href="#离职前" class="headerlink" title="离职前"></a>离职前</h2><a href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E7%A6%BB%E8%81%8C%E5%89%8D%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%8A%B6%E6%80%81/" title="离职前的工作状态">离职前的工作状态</a><h2 id="离职后"><a href="#离职后" class="headerlink" title="离职后"></a>离职后</h2><p>我是在 23 年 6 月下旬离职的。<br>下半年主要是失业人的生活状态：花里胡哨。</p><a href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E5%81%A5%E5%BA%B7%E9%A5%AE%E9%A3%9F/" title="花里胡哨之健康饮食">花里胡哨之健康饮食</a><br><a href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2/" title="花里胡哨之投资理财">花里胡哨之投资理财</a><br><a href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8BAI%E6%B5%AA%E6%BD%AE/" title="花里胡哨之AI浪潮">花里胡哨之AI浪潮</a><br><a href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E9%A6%99%E6%B8%AF%E6%97%85%E6%B8%B8/" title="花里胡哨之香港旅游">花里胡哨之香港旅游</a><br><a href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E5%85%BB%E7%94%9F%E5%81%A5%E5%BA%B7/" title="花里胡哨之养生健康">花里胡哨之养生健康</a><br><a href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E9%A3%8E%E6%B0%B4%E7%AE%97%E5%91%BD/" title="花里胡哨之风水算命">花里胡哨之风水算命</a><br><a href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E5%87%BA%E5%8E%BB%E7%9E%8E%E8%80%8D/" title="花里胡哨之出去瞎耍">花里胡哨之出去瞎耍</a><h2 id="目前的心态"><a href="#目前的心态" class="headerlink" title="目前的心态"></a>目前的心态</h2><a href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E7%9B%AE%E5%89%8D%E7%9A%84%E5%BF%83%E6%80%81/" title="目前的心态">目前的心态</a><h2 id="现在的事"><a href="#现在的事" class="headerlink" title="现在的事"></a>现在的事</h2><a href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E7%8E%B0%E5%9C%A8%E7%9A%84%E4%BA%8B%EF%BC%9A%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/" title="现在的事：前端面试">现在的事：前端面试</a><br><a href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E7%8E%B0%E5%9C%A8%E7%9A%84%E4%BA%8B%EF%BC%9A%E8%AF%BB%E4%B9%A6%E4%B8%8E%E5%86%99%E4%BD%9C/" title="现在的事：读书与写作">现在的事：读书与写作</a><br><a href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE/" title="一些数据">一些数据</a><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>不知不觉写了这么多字了，刚开始只是不想断了写年终总结的习俗，属于着头皮开头的，但写着写着就止不住了。</p><p>我能写这么多，在此感谢大自然的馈赠~</p><p>感谢能看到这里的，希望我的经历能给你带来一些些勇气，能勇敢的放下 2023，勇闯美好的 2024！</p>]]></content>
    
    
    <categories>
      
      <category>2023-年总结，平仄参半</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我是谁在干啥</tag>
      
      <tag>年总结</tag>
      
      <tag>2023-年总结，平仄参半</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花里胡哨之香港旅游</title>
    <link href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E9%A6%99%E6%B8%AF%E6%97%85%E6%B8%B8/"/>
    <url>/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E9%A6%99%E6%B8%AF%E6%97%85%E6%B8%B8/</url>
    
    <content type="html"><![CDATA[<p>突然萌生了去香港的念头，既能当做旅游，去看看并放松放松，又能办银行卡，借用香港的繁华金融撬动世界的财富(消费自己的存款…)</p><p>刚开始认为去香港，会跟国内其他地方一样，只需要带上身份证与手机，就能随意畅玩。</p><p>结果网上一搜攻略，发现有那么亿点点复杂：需要港澳通行证，需要过关，需要香港流量卡，需要换港币，最后还需要承受高昂物价的暴击</p><p>然后搜了下办香港银行卡的攻略，发现还是有亿点点复杂：需要身份证明，需要提前网上填资料预约，需要准备合适的开户理由与对应的资料，最后还需要准好现场被拒的准备。或者花钱找人协助办卡(100%开卡的)，还会花费 3000+ 人民币的手续费哦</p><p>搜索到的内容至此，还没算上我搜索的旅游景点攻略呢，我内心就有点“不堪重负”的，我就是想去旅游+办卡而已，为何感觉打开了一个潘多拉之盒。</p><p>但去旅游的渴望与舍不得的 3000 元，让我下定决心我就是要去一趟，并且相信自己能做好相关的攻略。</p><p>7 月份，就开始做香港旅游+办卡的全流程攻略</p><p>从结果上来说：这趟旅程很顺畅，8 月 9 号 ~ 8 月 13 号，这是一段难忘的香港五天之旅。期间体验了香港各种著名美食，浏览了香港各种知名景点，感受了香港独特的包容性，吹过太平山顶的风，看过维多利亚的海，吃过珍妮曲奇的饼干，做过叮叮响的叮叮车，花过最贵的旅行费，并且和我老婆一起办下了香港银行的卡。</p><p>从过程上来说：多的不说，说多都是泪。在此期间的我找了无数的攻略，从中穿插印证，自行扩散，实战验证，最终还是花了一个多月才感觉准备的齐全了，才开始了这场对我一个人来说密谋已久的旅游(PS：我老婆平时在上班)。最后从香港回来后，又重新梳理，归纳做出了完整的《香港旅游+办卡攻略》，发布到了知乎上面让其自寻有缘人，现目前知乎我的攻略总阅读量为 12W+，帮我涨粉 180+ 人，也是多次体会到了知乎消息的 99+ 是那么的好看~</p>]]></content>
    
    
    <categories>
      
      <category>花里胡哨</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我是谁在干啥</tag>
      
      <tag>年总结</tag>
      
      <tag>2023-年总结，平仄参半</tag>
      
      <tag>花里胡哨</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花里胡哨之风水算命</title>
    <link href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E9%A3%8E%E6%B0%B4%E7%AE%97%E5%91%BD/"/>
    <url>/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E9%A3%8E%E6%B0%B4%E7%AE%97%E5%91%BD/</url>
    
    <content type="html"><![CDATA[<p>这次的了解之路是另一种了。</p><p>以前是家里人在我不同阶段都帮我算过命：小学阶段算命结果说能上大学，结果灵验了(好像是废话，不灵验了的话我可能也不会用语雀码字了)；大学阶段算命结果说能找个好工作，财运好，结果也灵验了，前端其他的不说，工资涨的还是挺那啥的；工作阶段算命结果说有“官运”(领导也算)，结果也灵验了，在上一家公司当了业务线前端 TL；至此我对算命是没那么抵触的。</p><p>后来离职后，晚上出去遛弯的时候逛到了一个算命摊，然后心血来潮的想让他给我算一下。</p><p>算的结果是：今年(23 年)不太好，财运(事业)不太好，并且 27~37 岁这 10 年都是不太好，之后 37 岁开始会变好，之后越来越好，即老来得富。</p><p>听到算的结果，感觉有那么点准 [今年(23 年)不太好，财运(事业)不太好]，那是因为离职了嘛</p><p>但也没深究如何算的。</p><p>后面一次去某个购物广场时，又看到算命的，让其帮我老婆算了一下，说了下性格上的，财运上的等</p><p>发现性格上说的有点准，财运上说的我们不打算信……</p><p>至此我自身也开始与算命结缘了，直到某天使用 YouTube 时，给我推了一个算命的系列视频，至此打开了我的算命之路。</p><p>从结果上来说：只学会了基本的算命，风水啥的没接着学。学会了八字摆盘，学会了看八字断命、运，学会了五行相克，学会了看事业、财运等</p><p>从过程上来说：那就是一个系列视频，从算命开始能学到风水、奇门遁甲等等。学的时候还真的挺投入的，算是找到了新的兴趣点，等算命的快学完了，发现没法去挣钱。我又不可能去摆摊给人算命(年轻口才不好)，并且又不敢断定自己的准确率，最后又背的不熟，不可能照着文档念给别人吧，所以也就暂停了。</p><p>掌握的奇怪技能 +1</p>]]></content>
    
    
    <categories>
      
      <category>花里胡哨</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我是谁在干啥</tag>
      
      <tag>年总结</tag>
      
      <tag>2023-年总结，平仄参半</tag>
      
      <tag>花里胡哨</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花里胡哨之投资理财</title>
    <link href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2/"/>
    <url>/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2/</url>
    
    <content type="html"><![CDATA[<p>这还是我在微信公众号上偶然看到的，是针对投资理财的体验营，讲述如何进行理财，如何改善自己的投资观念等</p><p>参加了后，又觉得讲的挺有道理，就按照课上的内容去实践了下。</p><p>从结果上来说：我并不适合这种理财……，最终没赚到什么钱，因为有看到其他人挣了钱，所以更加确认自己不太适合这种理财。</p><p>从过程上来说：学会了常用的理财种类，了解了如何进行投资，如何管理闲钱，能听懂银行业务员的理财推销了(没听懂的记住别买就是了)</p><p>掌握的奇怪技能 +1</p>]]></content>
    
    
    <categories>
      
      <category>花里胡哨</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我是谁在干啥</tag>
      
      <tag>年总结</tag>
      
      <tag>2023-年总结，平仄参半</tag>
      
      <tag>花里胡哨</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花里胡哨之出去瞎耍</title>
    <link href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E5%87%BA%E5%8E%BB%E7%9E%8E%E8%80%8D/"/>
    <url>/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E5%87%BA%E5%8E%BB%E7%9E%8E%E8%80%8D/</url>
    
    <content type="html"><![CDATA[<p>那段时间，我老婆也被裁员了，然后本着难得夫妻双双在家休的情况，就开始跟老婆计划出去玩玩，但也没怎么去具体规划。</p><p>开始的时候想了想成都周边哪里美食多，然后找来找去最终找到了乐山。</p><p>然后就赶着国庆之前去乐山来了个一日游，体验了乐山的钵钵鸡、甜皮鸭、泡凤爪等，发现是真的好吃，然后逛了下乐山大佛景区，最最安逸的是乐山有共享电动车，那是我第一次骑共享电动车，在悠闲的下午，骑着我心爱的共享电动车，和老婆嘻嘻哈哈的在乐山的林荫小道内骑行，奔向心心念念的美食店，那感觉巴适得板。</p><p>因为成都离乐山近，就直接一日游，晚上坐动车就回来了，我们对这次的乐山之旅都能满意。东西太好吃的了，果然我做的攻略是无敌的。</p><p>之后我俩在家“躺平”：躺着过平淡的生活，我说的实际意义上的那种躺哦。</p><p>她偶然刷到了“许昌胖东来”超市的视频，觉得很赞，超市体验很好。然后抖音又很懂，后续就给她推很多胖东来超市的视频，她就渐渐萌生了去那里的想法。</p><p>我一搜，好家伙，许昌竟然在河南省。这和我们之前想过的“铁路旅行”有关联。但翻了翻钱包，还是打消了“铁路旅行”，决定只去“许昌胖东来”，来个闲里折腾许昌 3 日游。</p><p>我在做攻略的时候，发现许昌还是个三国文化城市，那里有浓烈三国文化，有个“曹魏古城”，因此我就做了一个完备的攻略，包含了：路线、美食、胖东来、景点、住宿。</p><p>之后就专门错开国庆，开始了“许昌胖东来”之三日游。</p><p>去体验了“胖东来”给予的难忘的超市服务、吃了河南的胡辣汤、逛了“曹魏古城”体验三国之旅，留下了各种美好的照片。</p>]]></content>
    
    
    <categories>
      
      <category>花里胡哨</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我是谁在干啥</tag>
      
      <tag>年总结</tag>
      
      <tag>2023-年总结，平仄参半</tag>
      
      <tag>花里胡哨</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花里胡哨之养生健康</title>
    <link href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E5%85%BB%E7%94%9F%E5%81%A5%E5%BA%B7/"/>
    <url>/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E5%85%BB%E7%94%9F%E5%81%A5%E5%BA%B7/</url>
    
    <content type="html"><![CDATA[<p>这还是我在微信公众号上偶然看到的，是针对养生健康的体验营，讲述如何进行养生，如何辨识自己的舌象，如何改善自己的体质等</p><p>参加了后，又觉得讲的挺有道理，就按照课上的内容去实践了下。</p><p>从结果上来说：我没太坚持下去，感觉说的东西真的挺有理的，但涉及到吃中药、艾灸等操作，就那啥了</p><p>从过程上来说：了解了一些常见问题的按穴治疗法，学会了如何看舌象，也通过舌知道了自己的体质，了解了不同体质自带的问题等</p><p>平时有些小头痛的问题，自己会通过按穴去缓解下，反正比我之前的硬熬与瞎试要好，而且有时是真的有效果。</p><p>掌握的奇怪技能 +1</p>]]></content>
    
    
    <categories>
      
      <category>花里胡哨</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我是谁在干啥</tag>
      
      <tag>年总结</tag>
      
      <tag>2023-年总结，平仄参半</tag>
      
      <tag>花里胡哨</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花里胡哨之健康饮食</title>
    <link href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E5%81%A5%E5%BA%B7%E9%A5%AE%E9%A3%9F/"/>
    <url>/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8B%E5%81%A5%E5%BA%B7%E9%A5%AE%E9%A3%9F/</url>
    
    <content type="html"><![CDATA[<p>这是我在微信公众号上偶然看到的，是针对健康饮食的体验营，讲述如何进行健康的饮食与搭配，并改善自己的身体状况。</p><p>参加了后，觉得讲的挺有道理，就按照课上的内容去改善了下自己的饮食。</p><p>从结果上来说：很有用！那段时间我自己减肥 10+斤，主要是肚子上的赘肉；我老婆减肥 10+斤，主要是肚子和腿上的赘肉。每天保持早睡早起，身体消化非常顺畅(从未体会过的顺畅)，精神也倍棒。</p><p>从过程上来说：我学会了如何识别食物的健康度，学会了如何搭配合理的三餐，学会了如何健康的减肥，学会了如何做更多的菜，等等其他小知识。</p><p>虽然现在已经懈怠了，但那种状态自己能随时切换回去。</p><p>掌握的奇怪技能 +1</p>]]></content>
    
    
    <categories>
      
      <category>花里胡哨</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我是谁在干啥</tag>
      
      <tag>年总结</tag>
      
      <tag>2023-年总结，平仄参半</tag>
      
      <tag>花里胡哨</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花里胡哨之AI浪潮</title>
    <link href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8BAI%E6%B5%AA%E6%BD%AE/"/>
    <url>/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%E4%B9%8BAI%E6%B5%AA%E6%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>最近几年，人工智能很火，涌出各种新东西，并且感觉啥事都可以 AI+<br>所以按耐不住的我，也去跟随了一波。</p><p>我做的是：AI + 视频。我先通过 ChatGPT 生成科普类的文字稿，然后使用剪映的文字转视频功能，生成 2 分钟左右的视频，最后再上传到抖音、西瓜视频上。<br>那时候我视频制作的频率为一天三个，每个最多 10 分钟，当时搞得热火朝天，发上去的视频也有一些反响，就开始幻想~</p><p>后来遇到了一些事，慢慢就放弃了。<br>1、由于是借用剪映的文字转视频功能，相关素材是剪映自己找的，所以有几个视频，在我上传西瓜后，被判为抄袭。我其实很纳闷，我的文字是完全是原创的(虽然不是我)，然后素材自动生成的，为啥被判抄袭。等我去看了原视频后，发现剪映找的素材跟原视频高度相似，所以我的是抄袭。刚开始我以为是“同行”类，后面发现原视频发的比我早，就怀疑是剪映找的别人素材……，经过几次的抄袭打击，觉得这样不长久</p><p>2、上传视频后，头天数据不错，之后数据就下滑，我怀疑是我没去解锁平台的付费推荐功能。并且后面上传的视频，头天数据也慢慢降低，打击了我的热情</p><p>3、上传视频后，会有各种评论，有些说的很专业，我都看不懂，因为我的科普知识是 AI 生成的，跟我没半毛关系，也不是说我发了这个视频就能掌握了。但机智的我继续借用 AI，把这些专业的评论发给它，让 AI 生成更专业的，然后我再去回复，这样还真的和评论者对话了几轮，最后我略微得胜。有些评论就是负能量，我也不惯着，让 AI 生成幽默中带点讽刺话，然后去回复。刚开始时还有评论，后面的视频就没评论了</p><p>4、发了几天视频后，了解到想通过发视频变现的话，要么接广告，要么挂商品，要么参与平台活动。然后我再仔细一盘，我的视频流量一般偏下，那广告是不可能的有，挂的商品估计也没啥销量，最后平台的活动都有参与要求，会要求账户的粉丝数、播放量到一定标准，但那标准是那么的遥远。</p><p>综合以上的事情，发现我这种纯 AI，没啥创意的视频，路子走不远，票子赚不到，所以就放弃了。</p><p>掌握的奇怪技能 +1</p><p><img src="/img/images/2024/1704945315932-8c7f69a2-70c0-4d48-8921-c3bd7a5be61b.png" alt="iShot_2024-01-11_11.55.01.png"></p>]]></content>
    
    
    <categories>
      
      <category>花里胡哨</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我是谁在干啥</tag>
      
      <tag>年总结</tag>
      
      <tag>2023-年总结，平仄参半</tag>
      
      <tag>花里胡哨</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离职前的工作状态</title>
    <link href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E7%A6%BB%E8%81%8C%E5%89%8D%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%8A%B6%E6%80%81/"/>
    <url>/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E7%A6%BB%E8%81%8C%E5%89%8D%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%8A%B6%E6%80%81/</url>
    
    <content type="html"><![CDATA[<p>我是在 23 年 6 月下旬离职的。<br>上半年主要是打工人的生活状态：平平淡淡。</p><p>23 年是我在公司呆的第 4 个年头了，工作上还是继续做公司内部自研的 Devops 平台，自己作为“全栈”进行开发，这里的“全栈”特指：从产品原型到上线的全流程。</p><p>刚开始时，这种“全栈”还是很痛苦，但现在就习惯了。即因为自己通过不停学习挺过了其中的最难时段，也因为发现了自己其实是挺喜欢这种的，所以现在的工作难度已被我强行纳入了我的舒适后宫圈中。</p><p>但工作上也并没有什么偷懒哈，还是在尽职的完成工作，也做了一些具有挑战性的功能，再次拓宽了自己的技术栈，比如：深入学习使用了 SQL，从不熟悉基础语法到能写 50+行的嵌套+外连接的复杂统计；深度了解了公司的小程序发版流程，最终通过页面操作实现发版。</p><p>但总的来说还是平平淡淡的，这样说的依据是：没有产出创造性的想法&#x2F;功能。</p><p>因为这是公司内部自研的 Devops 平台，如果没有持续性的创造性功能，那它的价值会慢慢“折旧”的，顺带着“折旧”维护它的开发人员。</p><p>就这样，时间来到了 6 月份，公司业绩下滑了，公司也面临着收支平衡，所以“折旧”提现，整个维护它的前端部门人员最终都离开了，拿着公司发的足额的大礼包，开启了不需要“平衡工作与生活”的生活。</p><p>呆了快四年，首先是没想到自己能呆四年，其次是没想到没能呆到四年。</p><p>离职的是六月份，距我四年就只差三个月，我那时候还想过炫耀自己收到的公司四周年邮件呢。</p><p>但既需离开，则不会难堪。</p><p>我内心里是真的很感激上家公司的经历，让我收获了很多很多。</p><p>让我经历了公司的从零到 B 轮的过程，见识了前端人数从 10+ 到 60+ 的人发展，自己的角色也从普通开发到前端业务线部门 TL 到全栈开发，自己的收入也随着蹭蹭上涨。</p><p>这些收获将是我人生与职业上的支撑点，撑起了我现在的生活与能力，撑开了我以后的发展之路。</p>]]></content>
    
    
    <categories>
      
      <category>2023-年总结，平仄参半</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我是谁在干啥</tag>
      
      <tag>年总结</tag>
      
      <tag>2023-年总结，平仄参半</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>目前的心态</title>
    <link href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E7%9B%AE%E5%89%8D%E7%9A%84%E5%BF%83%E6%80%81/"/>
    <url>/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E7%9B%AE%E5%89%8D%E7%9A%84%E5%BF%83%E6%80%81/</url>
    
    <content type="html"><![CDATA[<p>在经过下半年的花里胡哨后，自己的心态也慢慢变好。</p><p>甚至可以取个：《卧槽！离职半年后我心态竟然越来越好？》</p><p>因为脱离了以前单一的生活状态，以前是白天工作，晚上躺家，不停循环，其中就算放松过：看电影，去旅游都是感觉“急匆匆”的，始终无法忽视星期一的到来。</p><p>但离职后的花里胡哨期间，不再有星期一的到来提醒，去旅游、去看电影都是游刃有余的从非常空闲的工作日里面随机临幸一位。</p><p>看完电影后，会和老婆一起走着回家，大多是下午，天气好还能晒晒明媚的太阳，一起讨论刚刚看的电影里面的触动点，诉说各自的感悟。</p><p>有时是当时的感想，有时是自己人生的思考。</p><p>在离职初期，虽然叫嚣着放松，但内心最深处还是没有放下，总是想起之前的工作以及工作经历的事。</p><p>但后面慢慢的，开始去思考“自己”，仅仅从自己出发去思考。</p><p>产生了一些杂想：</p><p><strong>人存在的意义是找到让自己存在的意义。</strong><br>可以是去做一些有意义的事，让自己感到有意义；也可是想成为某某人，从而让自己有意义；<br>但如果没有，那每过一天，你内心就会累积空虚、无聊等，可能在之后的某天你：会觉得咋活着没啥意义呢？会认为今天又是空虚无聊的一天！等等<br>一些有意义的事可以是低物质的，比如种花、养鱼等，也可以是高物质的，比如全球旅行、住大别墅等；<br>但这都需要自己去寻找，寻找到后你的人生目标、动力等都可能因此发生变化</p><p><strong>对某些人来说：你活着的意义之一就是活着</strong><br>我是突然想到了一个场景，如果我某天一觉不起了，睡在我旁边的老婆起床后怎么也叫我也起不来，最后发现人没了，那她在确认我没了的那一刻会是多么的绝望，后续的她将会是多么的崩溃，该如何告知我的父母？如何接受这个事实？等等<br>想到这我就认为：活着的意义之一就是活着</p><p><strong>人活着活的是自己</strong><br>我觉得自己的感受是最重要的。因为不管你的喜怒哀乐，最终也没人能切身体会。<br>那些莫名其妙的自卑、微小无关的烦躁等，都不重要，都要抛掉，让自己活的舒服点。</p><p>比如因为一些些青春痘，开始自卑，搞得自己难受(嗯，就是以前的我)，但本质上没啥用，又不能帮你祛痘。还不如放 宽自己的内心，不理哪些嘲笑你的人，去找真心的朋友(我有幸有一位)，开开心心的过每一天。可能在未来的某个时候，青春痘就会自己消失的(嗯真的)，但我不希望痘消失了，心却千疮百孔了。</p><p>比如路上遇到不文明的人了，把自己搞得烦烦躁躁，这其实也很没必要。因为你没法在你遇到之前阻止这件事，你不幸遭遇了然后烦躁了，那那个人会感受到吗？甚至都没注意到你吧？所以尽量平复自己的烦躁心情，将开心留给自己。</p><p><strong>所以人活着最终活的还是自己</strong></p><p>这些杂想是这段时间内慢慢在思考的，也是让我心态慢慢变好的，对自己更好了。</p>]]></content>
    
    
    <categories>
      
      <category>2023-年总结，平仄参半</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我是谁在干啥</tag>
      
      <tag>年总结</tag>
      
      <tag>2023-年总结，平仄参半</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>现在的事：读书与写作</title>
    <link href="/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E7%8E%B0%E5%9C%A8%E7%9A%84%E4%BA%8B%EF%BC%9A%E8%AF%BB%E4%B9%A6%E4%B8%8E%E5%86%99%E4%BD%9C/"/>
    <url>/%E6%88%91%E6%98%AF%E8%B0%81%E5%9C%A8%E5%B9%B2%E5%95%A5/%E5%B9%B4%E6%80%BB%E7%BB%93/2023-%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%B9%B3%E4%BB%84%E5%8F%82%E5%8D%8A/%E7%8E%B0%E5%9C%A8%E7%9A%84%E4%BA%8B%EF%BC%9A%E8%AF%BB%E4%B9%A6%E4%B8%8E%E5%86%99%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>最近两天分别参与了【古典写作体验营】、【左耳听风共读打卡】，让我收获很大。</p><p><strong>【古典写作体验营】</strong><br>两天的课程，主要讲了《为什么要读书？》《如何读透一本书？》，让我对读书与写作产生了很大的动力。</p><p>《为什么要读书？》让我明白了读书是一件低成本高回报的事情，特别是处于迷茫阶段，更应该从书中找到答案或灵感。</p><p>《如何读透一本书？》让我明白“读书在于写”，通过写卡来汲取知识，让自己得到了切实的成长。</p><p>所以就开始认可读书，并尝试着写。</p><p>刚开始，下笔完全跟随感悟，顺畅且字数很多，那时觉得很有成就，迷恋上“虚假的写作。”</p><p>为什么我认为是“虚假”呢？由于跟随感悟书写的，所以内容缺少思考，文字未提炼，观点不聚集，根本不算写作，更像文字堆砌的“口水文”，因此是“虚假的写作”。</p><p>等想到这点后，再翻之前写的，发现“口水文”居多。</p><p>自己尝试改变，但发现自己缺乏“写作”知识，不知正解，思索一番决定先提炼文字。<br>但在提炼文字时，发现思考也会变多，更加深记忆与理解，最后配合写文格式，就让知识留在了脑中。</p><p>这样思考并提炼着写文，给自己带来了愉悦感，并得到了切实的成长，所以更认可了读书，也愿意下笔去写。</p><p><strong>【左耳听风共读打卡】</strong><br>这本书是参与共读的，所以每天有打卡要求。</p><p>【古典写作体验营】让我喜欢上了下笔；【左耳听风共读打卡】填补了读书素材，并且定时的打卡要求，反而成为我下笔的宣泄口。</p><p>经过【左耳听风】两天的打卡，回顾自己所写的内容，感受到自己的“写作”进步与知识扩充，内心极有成就感，甚至产生了“自律写作”的快感。</p><p>“自律写作”是我随便造的，指：每天自发规律“写作”。</p><p>我之前听过“自律是很产生快感的”、“低级快感来源于放纵，高级快感来源于自律”等，以前完全不懂，现在略有体会。</p><p>现阶段的我能及时醒悟，明白读书有用，得到了正反馈，那我就更应坚持下去。</p><p>送给自己一句：“种一棵树最好的时间是十年前，其次是现在”</p>]]></content>
    
    
    <categories>
      
      <category>2023-年总结，平仄参半</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我是谁在干啥</tag>
      
      <tag>年总结</tag>
      
      <tag>2023-年总结，平仄参半</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9、对象的继承有哪些？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/9%E3%80%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%BB%A7%E6%89%BF%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/9%E3%80%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%BB%A7%E6%89%BF%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>前置知识：<a href="https://juejin.cn/post/7327353573935562802">14、原型与原型链 - 掘金</a></p><p>继承：<strong>子</strong>可以访问<strong>父</strong>的<strong>属性&#x2F;方法</strong></p><p><strong>普通继承</strong><br>原理：将父实例赋值到子构造函数的原型上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 父类</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">args = &#123;&#125;</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">like</span> = args.<span class="hljs-property">like</span> || [<span class="hljs-string">&quot;游泳&quot;</span>, <span class="hljs-string">&quot;足球&quot;</span>];<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayHello</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;你好呀~&quot;</span>);<br>  &#125;;<br>&#125;<br><br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>);<br>&#125;;<br><br><span class="hljs-comment">// 子类</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">name, address</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">address</span> = address;<br>&#125;<br><br><span class="hljs-comment">// ⭐️ 继承实现 - start：</span><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>();<br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Child</span>; <span class="hljs-comment">// constructor 修正</span><br><span class="hljs-comment">// ⭐️ 继承实现 - end：</span><br><br><span class="hljs-keyword">const</span> c1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;四川&quot;</span>, &#123; <span class="hljs-attr">like</span>: [<span class="hljs-string">&quot;吃饭&quot;</span>, <span class="hljs-string">&quot;睡觉&quot;</span>] &#125;);<br><span class="hljs-keyword">const</span> c2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(c1)); <span class="hljs-comment">// &#123;&quot;name&quot;:&quot;张三&quot;,&quot;address&quot;:&quot;四川&quot;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(c2)); <span class="hljs-comment">// &#123;&quot;name&quot;:&quot;李四&quot;,&quot;address&quot;:&quot;深圳&quot;&#125;</span><br><br><span class="hljs-comment">// ❗️ 缺点：父类是共享的</span><br>c1.<span class="hljs-property">like</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;喝酒&quot;</span>);<br>c2.<span class="hljs-property">like</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;跑步&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(c1.<span class="hljs-property">like</span>)); <span class="hljs-comment">// [&quot;游泳&quot;,&quot;足球&quot;,&quot;喝酒&quot;,&quot;跑步&quot;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(c2.<span class="hljs-property">like</span>)); <span class="hljs-comment">// [&quot;游泳&quot;,&quot;足球&quot;,&quot;喝酒&quot;,&quot;跑步&quot;]</span><br><br>c1.<span class="hljs-title function_">sayHello</span>(); <span class="hljs-comment">// &#x27;你好呀~&#x27;</span><br>c2.<span class="hljs-title function_">sayHello</span>(); <span class="hljs-comment">// &#x27;你好呀~&#x27;</span><br><br>c1.<span class="hljs-title function_">sayName</span>(); <span class="hljs-comment">// my name is 张三</span><br>c2.<span class="hljs-title function_">sayName</span>(); <span class="hljs-comment">// my name is 李四</span><br><br></code></pre></td></tr></table></figure><p>优点：没啥优点，最基本的继承而已<br>缺点：父类是共享的；父类实例创建没法传参</p><p><strong>经典继承</strong><br>原理：在子构造函数内调用父构造函数，将值绑到子实例上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 父类</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">args = &#123;&#125;</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">like</span> = args.<span class="hljs-property">like</span> || [<span class="hljs-string">&quot;游泳&quot;</span>, <span class="hljs-string">&quot;足球&quot;</span>];<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayHello</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;你好呀~&quot;</span>);<br>  &#125;;<br>&#125;<br><br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>);<br>&#125;;<br><br><span class="hljs-comment">// 子类</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">name, address, parentArgs</span>) &#123;<br>  <span class="hljs-comment">// ⭐️ 继承实现 - start：</span><br>  <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, parentArgs);<br>  <span class="hljs-comment">// ⭐️ 继承实现 - end：</span><br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">address</span> = address;<br>&#125;<br><br><span class="hljs-keyword">const</span> c1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;四川&quot;</span>, &#123; <span class="hljs-attr">like</span>: [<span class="hljs-string">&quot;吃饭&quot;</span>, <span class="hljs-string">&quot;睡觉&quot;</span>] &#125;);<br><span class="hljs-keyword">const</span> c2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>);<br><br>c1.<span class="hljs-property">like</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;喝酒&quot;</span>);<br>c2.<span class="hljs-property">like</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;跑步&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(c1)); <span class="hljs-comment">// &#123;&quot;like&quot;:[&quot;吃饭&quot;,&quot;睡觉&quot;,&quot;喝酒&quot;],&quot;name&quot;:&quot;张三&quot;,&quot;address&quot;:&quot;四川&quot;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(c2)); <span class="hljs-comment">// &#123;&quot;like&quot;:[&quot;游泳&quot;,&quot;足球&quot;,&quot;跑步&quot;],&quot;name&quot;:&quot;李四&quot;,&quot;address&quot;:&quot;深圳&quot;&#125;</span><br><br>c1.<span class="hljs-title function_">sayHello</span>(); <span class="hljs-comment">// &#x27;你好呀~&#x27;</span><br>c2.<span class="hljs-title function_">sayHello</span>(); <span class="hljs-comment">// &#x27;你好呀~&#x27;</span><br><br><span class="hljs-comment">// ❗️ 缺点：没法继承父构造函数原型链上的</span><br>c1.<span class="hljs-title function_">sayName</span>(); <span class="hljs-comment">// 报错: c1.sayName is not a function</span><br>c2.<span class="hljs-title function_">sayName</span>(); <span class="hljs-comment">// 报错: c2.sayName is not a function</span><br><br></code></pre></td></tr></table></figure><p>优点：父的属性&#x2F;方法将直属于子实例，并且支持父构造函数的传参<br>缺点：没法继承父构造函数原型链上的属性<code>Parent.prototype.*</code></p><p><strong>组合继承</strong><br>结合普通继承，补齐经典继承的缺点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 父类</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">args = &#123;&#125;</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">like</span> = args.<span class="hljs-property">like</span> || [<span class="hljs-string">&quot;游泳&quot;</span>, <span class="hljs-string">&quot;足球&quot;</span>];<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayHello</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;你好呀~&quot;</span>);<br>  &#125;;<br>&#125;<br><br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>);<br>&#125;;<br><br><span class="hljs-comment">// 子类</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">name, address, parentArgs</span>) &#123;<br>  <span class="hljs-comment">// ⭐️ 继承实现(1) - start：</span><br>  <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, parentArgs);<br>  <span class="hljs-comment">// ⭐️ 继承实现(1) - end：</span><br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">address</span> = address;<br>&#125;<br><br><span class="hljs-comment">// ⭐️ 继承实现(2) - start：</span><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>();<br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Child</span>; <span class="hljs-comment">// constructor 修正</span><br><span class="hljs-comment">// ⭐️ 继承实现(2) - end：</span><br><br><span class="hljs-keyword">const</span> c1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;四川&quot;</span>, &#123; <span class="hljs-attr">like</span>: [<span class="hljs-string">&quot;吃饭&quot;</span>, <span class="hljs-string">&quot;睡觉&quot;</span>] &#125;);<br><span class="hljs-keyword">const</span> c2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>);<br><br>c1.<span class="hljs-property">like</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;喝酒&quot;</span>);<br>c2.<span class="hljs-property">like</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;跑步&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(c1)); <span class="hljs-comment">// &#123;&quot;like&quot;:[&quot;吃饭&quot;,&quot;睡觉&quot;,&quot;喝酒&quot;],&quot;name&quot;:&quot;张三&quot;,&quot;address&quot;:&quot;四川&quot;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(c2)); <span class="hljs-comment">// &#123;&quot;like&quot;:[&quot;游泳&quot;,&quot;足球&quot;,&quot;跑步&quot;],&quot;name&quot;:&quot;李四&quot;,&quot;address&quot;:&quot;深圳&quot;&#125;</span><br><br>c1.<span class="hljs-title function_">sayHello</span>(); <span class="hljs-comment">// &#x27;你好呀~&#x27;</span><br>c2.<span class="hljs-title function_">sayHello</span>(); <span class="hljs-comment">// &#x27;你好呀~&#x27;</span><br><br>c1.<span class="hljs-title function_">sayName</span>(); <span class="hljs-comment">// my name is 张三</span><br>c2.<span class="hljs-title function_">sayName</span>(); <span class="hljs-comment">// my name is 李四</span><br><br><span class="hljs-comment">// ❗️ 缺点：父构造函数调用了两次，导致出现重复属性，直属子实例与子实例原型链上都有该属性</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(c1))); <span class="hljs-comment">// &#123;&quot;like&quot;:[&quot;游泳&quot;,&quot;足球&quot;]&#125;</span><br></code></pre></td></tr></table></figure><p>优点：补齐了普通、经典继承的缺点<br>缺点：父构造函数调用了两次</p><p><strong>寄生组合继承</strong><br>原理：解决组合继承的第二次父构造函数的调用，不让它调用呗</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 父类</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">args = &#123;&#125;</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">like</span> = args.<span class="hljs-property">like</span> || [<span class="hljs-string">&quot;游泳&quot;</span>, <span class="hljs-string">&quot;足球&quot;</span>];<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayHello</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;你好呀~&quot;</span>);<br>  &#125;;<br>&#125;<br><br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>);<br>&#125;;<br><br><span class="hljs-comment">// 子类</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">name, address, parentArgs</span>) &#123;<br>  <span class="hljs-comment">// ⭐️ 继承实现(1) - start：</span><br>  <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, parentArgs);<br>  <span class="hljs-comment">// ⭐️ 继承实现(1) - end：</span><br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">address</span> = address;<br>&#125;<br><br><span class="hljs-comment">// ⭐️ 继承实现(2) - start：</span><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">// ⭐️ 再多一层原型链</span><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Child</span>; <span class="hljs-comment">// constructor 修正</span><br><span class="hljs-comment">// ⭐️ 继承实现(2) - end：</span><br><br><span class="hljs-keyword">const</span> c1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;四川&quot;</span>, &#123; <span class="hljs-attr">like</span>: [<span class="hljs-string">&quot;吃饭&quot;</span>, <span class="hljs-string">&quot;睡觉&quot;</span>] &#125;);<br><span class="hljs-keyword">const</span> c2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>);<br><br>c1.<span class="hljs-property">like</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;喝酒&quot;</span>);<br>c2.<span class="hljs-property">like</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;跑步&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(c1)); <span class="hljs-comment">// &#123;&quot;like&quot;:[&quot;吃饭&quot;,&quot;睡觉&quot;,&quot;喝酒&quot;],&quot;name&quot;:&quot;张三&quot;,&quot;address&quot;:&quot;四川&quot;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(c2)); <span class="hljs-comment">// &#123;&quot;like&quot;:[&quot;游泳&quot;,&quot;足球&quot;,&quot;跑步&quot;],&quot;name&quot;:&quot;李四&quot;,&quot;address&quot;:&quot;深圳&quot;&#125;</span><br><br>c1.<span class="hljs-title function_">sayHello</span>(); <span class="hljs-comment">// &#x27;你好呀~&#x27;</span><br>c2.<span class="hljs-title function_">sayHello</span>(); <span class="hljs-comment">// &#x27;你好呀~&#x27;</span><br><br>c1.<span class="hljs-title function_">sayName</span>(); <span class="hljs-comment">// my name is 张三</span><br>c2.<span class="hljs-title function_">sayName</span>(); <span class="hljs-comment">// my name is 李四</span><br><br><span class="hljs-comment">// ❗️ 缺点：父构造函数调用了两次，导致出现重复属性，直属子实例与子实例原型链上都有该属性</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(c1))); <span class="hljs-comment">// &#123;&quot;like&quot;:[&quot;游泳&quot;,&quot;足球&quot;]&#125;</span><br><br></code></pre></td></tr></table></figure><p>特殊说明：<code>Parent.call(this, parentArgs)</code>这段代码其实就是 ES6 里面，子类继承时调用的<code>super(args)</code>的实现逻辑</p><p>额外补充：现在有了 ES6 的<code>class</code>后，继承就很简单了，一个关键词<code>extends</code>就解决了</p><p><strong>多重继承</strong><br>功能：<strong>一子</strong>可以访问<strong>多父</strong>的<strong>属性&#x2F;方法</strong><br>原理：基于寄生组件继承，多次调用父构造函数即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 只写关键代码：</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">Parent1</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>  <span class="hljs-title class_">Parent2</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assgin</span>(&#123;&#125;, <span class="hljs-title class_">Parent1</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-title class_">Parent2</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>))<br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Child</span>; <span class="hljs-comment">// constructor 修正</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8、手写 new</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/8%E3%80%81%E6%89%8B%E5%86%99%20new/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/8%E3%80%81%E6%89%8B%E5%86%99%20new/</url>
    
    <content type="html"><![CDATA[<p>前置知识：<a href="https://juejin.cn/post/7327725061161517106">15、new 干了什么事情？ - 掘金</a><br>由于<code>new</code>是关键词，所以我们手写时将其绑到<code>Function.prototype</code>上，方便使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">New</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>  <span class="hljs-comment">// 构造函数</span><br>  <span class="hljs-keyword">const</span> constructorFn = <span class="hljs-variable language_">this</span><br><br>  <span class="hljs-comment">// 1、创建一个空对象</span><br>  <span class="hljs-keyword">const</span> obj = &#123;&#125;<br><br>  <span class="hljs-comment">// 2、将该空对象的__proto__指向构造函数的 prototype</span><br>  obj.<span class="hljs-property">__proto__</span> = constructorFn.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><br>  <span class="hljs-comment">// 3、将 this 指向该空对象</span><br>  <span class="hljs-keyword">const</span> bindFn = constructorFn.<span class="hljs-title function_">bind</span>(obj)<br><br>  <span class="hljs-comment">// 4、执行构造函数</span><br>  <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">bindFn</span>(...args)<br><br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> result === <span class="hljs-string">&#x27;obj&#x27;</span>) <span class="hljs-keyword">return</span> result<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> obj<br>&#125;<br><br><span class="hljs-comment">// 具体使用：</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-title class_">Person</span>.<span class="hljs-title class_">New</span>(<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">35</span>) <span class="hljs-comment">// &#123; name: &#x27;张三&#x27;, age: 35 &#125;</span><br><br><span class="hljs-comment">// p1 instanceof Person 为 true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7、简单手写 Promise</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/7%E3%80%81%E7%AE%80%E5%8D%95%E6%89%8B%E5%86%99%20Promise/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/7%E3%80%81%E7%AE%80%E5%8D%95%E6%89%8B%E5%86%99%20Promise/</url>
    
    <content type="html"><![CDATA[<p>手写代码的思路为：先从使用开始进行分析。<br>Promise 的基本使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>  &#125;, <span class="hljs-number">2000</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res) <span class="hljs-comment">// &#x27;ok&#x27;</span><br>&#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;)<br></code></pre></td></tr></table></figure><p>根据基本使用，再写出注释：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1、Promise 为构造函数</span><br><span class="hljs-comment">// 2、入参为函数，该函数接受两个参数 resolve, reject，该函数是同步运行的</span><br><span class="hljs-comment">// 3、调用 resolve，则走向成功</span><br><span class="hljs-comment">// 4、调用 reject，则走向失败</span><br><span class="hljs-comment">// 5、.then 表明 new Promise 后会返回对象，并且该 then 接受两个参数</span><br><span class="hljs-comment">// 6、其他情况，它的状态有三个：pending、fulfilled、rejected</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyPromise</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-comment">// 默认状态</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = <span class="hljs-string">&#x27;pending&#x27;</span><br><br>  <span class="hljs-comment">// Promise 的值，通过 resolve、reject 传入的</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span><br><br>  <span class="hljs-comment">// 保存下 then 方法收到的函数</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">thenSuccessFun</span> = []<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">thenFailFunFun</span> = []<br><br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">resolve</span> = (<span class="hljs-params">res</span>) =&gt; &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = <span class="hljs-string">&#x27;fulfilled&#x27;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = res<br><br>    <span class="hljs-comment">// 当 thenSuccessFun 有长度时，则需要执行里面的方法</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">thenSuccessFun</span>.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">thenSuccessFun</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> <span class="hljs-title function_">fn</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>))<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">reject</span> = (<span class="hljs-params">err</span>) =&gt; &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = <span class="hljs-string">&#x27;rejected&#x27;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = err<br><br>    <span class="hljs-comment">// 当 thenFailFunFun 有长度时，则需要执行里面的方法</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">thenFailFunFun</span>.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">thenFailFunFun</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> <span class="hljs-title function_">fn</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>))<br>    &#125;<br>  &#125;<br><br><br>  <span class="hljs-comment">// 执行传入的函数</span><br>  <span class="hljs-title function_">fn</span>(resolve, reject)<br><br>  <span class="hljs-comment">// then 方法</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">then</span> = <span class="hljs-function">(<span class="hljs-params">successFun, failFun</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === <span class="hljs-string">&#x27;pending&#x27;</span>) &#123;<br>      <span class="hljs-comment">// 调用 then 时，状态为 pending，表面 fn 里面还未调用 resolve/reject</span><br>      <span class="hljs-comment">// 则说明 fn 里面有异步操作，就不能直接调用 successFun/failFun</span><br>      <span class="hljs-comment">// 所以需要先存一下</span><br>     <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> successFun === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">thenSuccessFun</span>.<span class="hljs-title function_">push</span>(successFun)<br>      &#125;<br><br>      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> failFun === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">thenFailFunFun</span>.<span class="hljs-title function_">push</span>(failFun)<br>      &#125;<br><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === <span class="hljs-string">&#x27;fulfilled&#x27;</span>) &#123;<br>   <span class="hljs-comment">// 调用 then 时，状态为 fulfilled，表面 fn 里面已调用 resolve</span><br>      <span class="hljs-comment">// 则可以直接调用 successFun</span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> successFun === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-title function_">successFun</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>      &#125;<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-comment">// 调用 then 时，状态为 rejected，表面 fn 里面已调用 reject</span><br>   <span class="hljs-comment">// 则可以直接调用 failFun</span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> failFun === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-title function_">failFun</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 调试：</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPromise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>  &#125;, <span class="hljs-number">2000</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res) <span class="hljs-comment">// &#x27;ok&#x27;</span><br>&#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;)<br><br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// ok</span><br></code></pre></td></tr></table></figure><p>上述展示了最基本的使用的实现，<strong>但是该实现与源码差的很远，只是让大家入个门，还要考虑各种边界与能力。</strong></p><p>其他静态方法的实现原理：<br><code>**Promise.resolve(anyValue):Promise**</code><strong>：</strong>成功的返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Promise</span>.<span class="hljs-property">resolve</span> = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 当传入值为 Promise 时，直接返回</span><br> <span class="hljs-keyword">if</span>(value <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Promise</span>) <span class="hljs-keyword">return</span> value<br><br>  <span class="hljs-comment">// 返回的还是个 Promise</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>   <span class="hljs-title function_">resolve</span>(value)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>**Promise.reject(anyValue):Promise**</code><strong>：</strong>失败的返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Promise</span>.<span class="hljs-property">reject</span> = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 当传入值为 Promise 时，直接返回</span><br> <span class="hljs-keyword">if</span>(value <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Promise</span>) <span class="hljs-keyword">return</span> value<br><br>  <span class="hljs-comment">// 返回的还是个 Promise</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>   <span class="hljs-title function_">reject</span>(value)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>**Promise.all(Array&lt;Promise&gt;):Promise**</code><strong>：</strong>当所有的 Promise 成功时，则返回成功值的数组，否则返回第一个失败的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Promise</span>.<span class="hljs-property">all</span> = <span class="hljs-function">(<span class="hljs-params">PromiseArray</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 返回的还是个 Promise</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>   <span class="hljs-keyword">const</span> result = [] <span class="hljs-comment">// 存储成功值的数组</span><br><br>   <span class="hljs-comment">// 循环执行 promise，当错误时，直接 reject，当成功时，存储值</span><br>   <span class="hljs-title class_">PromiseArray</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">promise, index</span>) =&gt;</span> &#123;<br>     <span class="hljs-comment">// 最好改为 for 循环，这样可以中断</span><br><br>     <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(promise).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>       result.<span class="hljs-title function_">push</span>(res)<br><br>       <span class="hljs-comment">// 循环执行完毕时，则 resolve(result)</span><br>       <span class="hljs-keyword">if</span>(result.<span class="hljs-property">length</span> - <span class="hljs-number">1</span> === index) <span class="hljs-title function_">resolve</span>(result)<br>     &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>       <span class="hljs-title function_">reject</span>(err)<br>     &#125;)<br>   &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>**Promise.allSettled(Array&lt;Promise&gt;):Promise**</code><strong>：</strong>当所有的 Promise  执行完时，返回所有结果的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Promise</span>.<span class="hljs-property">allSettled</span> = <span class="hljs-function">(<span class="hljs-params">PromiseArray</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 返回的还是个 Promise</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>   <span class="hljs-keyword">const</span> result = [] <span class="hljs-comment">// 存储所有值的数组</span><br><br>   <span class="hljs-comment">// 循环执行 promise</span><br>   <span class="hljs-title class_">PromiseArray</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">promise, index</span>) =&gt;</span> &#123;<br>     <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(promise).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>       result.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">state</span>: <span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-attr">value</span>: res&#125;)<br><br>       <span class="hljs-comment">// 循环执行完毕时，则 resolve(result)</span><br>       <span class="hljs-keyword">if</span>(result.<span class="hljs-property">length</span> - <span class="hljs-number">1</span> === index) <span class="hljs-title function_">resolve</span>(result)<br>     &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>       result.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">state</span>: <span class="hljs-string">&#x27;fali&#x27;</span>, <span class="hljs-attr">value</span>: err&#125;)<br><br>       <span class="hljs-comment">// 循环执行完毕时，则 resolve(result)</span><br>       <span class="hljs-keyword">if</span>(result.<span class="hljs-property">length</span> - <span class="hljs-number">1</span> === index) <span class="hljs-title function_">resolve</span>(result)<br>     &#125;)<br>   &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>**Promise.race(Array&lt;Promise&gt;):Promise**</code><strong>：</strong>返回最先执行成功的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Promise</span>.<span class="hljs-property">allSettled</span> = <span class="hljs-function">(<span class="hljs-params">PromiseArray</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 返回的还是个 Promise</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>   <span class="hljs-comment">// 循环执行 promise</span><br>   <span class="hljs-title class_">PromiseArray</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">promise, index</span>) =&gt;</span> &#123;<br>     <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(promise).<span class="hljs-title function_">then</span>(resolve).<span class="hljs-title function_">catch</span>(reject)<br>   &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6、异步任务打印顺序</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/6%E3%80%81%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%89%93%E5%8D%B0%E9%A1%BA%E5%BA%8F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/6%E3%80%81%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%89%93%E5%8D%B0%E9%A1%BA%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">async1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;async1 start&#x27;</span>)<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">async2</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;async1 end&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">async2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;async2&#x27;</span>)<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;script start&#x27;</span>)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setTimeout&#x27;</span>)<br>&#125;)<br><br><span class="hljs-title function_">async1</span>()<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise1&#x27;</span>)<br>  <span class="hljs-title function_">resolve</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise2&#x27;</span>)<br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;script end&#x27;</span>)<br><br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// script start</span><br><span class="hljs-comment">// async1 start</span><br><span class="hljs-comment">// async2</span><br><span class="hljs-comment">// promise1</span><br><span class="hljs-comment">// script end</span><br><span class="hljs-comment">// async1 end</span><br><span class="hljs-comment">// promise2</span><br><span class="hljs-comment">// setTimeout</span><br><br><span class="hljs-comment">// 解析：</span><br><span class="hljs-comment">// await async2()</span><br><span class="hljs-comment">// console.log(&#x27;async1 end&#x27;) 这一行是 await 后面的，相当于回调，所以会放到微任务里面</span><br></code></pre></td></tr></table></figure><p>参考资料：<a href="https://juejin.cn/post/7327135609109168179">13、事件循环是什么？ - 掘金</a></p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5、手写 call、apply、bind</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/5%E3%80%81%E6%89%8B%E5%86%99%20call%E3%80%81apply%E3%80%81bind/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/5%E3%80%81%E6%89%8B%E5%86%99%20call%E3%80%81apply%E3%80%81bind/</url>
    
    <content type="html"><![CDATA[<p>它们的作用都是改变 this 指向</p><p>call：<code>fn.call(obj, args1, args2, args3...)</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">newCall</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context, ...args</span>) &#123;<br>  <span class="hljs-comment">// 处理参数：this 指向的新对象，兜底为 window</span><br>  context = context || <span class="hljs-variable language_">window</span><br><br>  <span class="hljs-comment">// 当前 this 指向调用该方法的函数，即函数本身</span><br>  <span class="hljs-keyword">const</span> fn = <span class="hljs-variable language_">this</span><br><br> <span class="hljs-comment">// 声明唯一值，作为 新对象 的 key</span><br>  <span class="hljs-keyword">const</span> key = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;context-key&#x27;</span>)<br>  <span class="hljs-comment">// 将函数本身赋值到新对象上</span><br>  context[key] = fn<br>  <span class="hljs-comment">// 在新对象上调用函数，传入后续的参数，则实现了 this 指向的改变</span><br>  <span class="hljs-comment">// 因为函数是在对象上调用的，所以函数内的 this 将指向该对象</span><br>  <span class="hljs-keyword">const</span> result = context[key](...args)<br><br>  <span class="hljs-comment">// 删除刚刚赋值的 key，解绑</span><br>  <span class="hljs-keyword">delete</span> context[key]<br><br>  <span class="hljs-comment">// 返回函数执行的结果</span><br>  <span class="hljs-keyword">return</span> result<br><br>&#125;<br><br><span class="hljs-comment">// 示例函数：</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">callName, callFnName</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(callName)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(callFnName)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><br><span class="hljs-comment">// 示例调用：</span><br>fn.<span class="hljs-title function_">newCall</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span> &#125;, <span class="hljs-string">&#x27;张三 call 的&#x27;</span>, <span class="hljs-string">&#x27;newCall&#x27;</span>)<br><br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// &#x27;张三 call 的&#x27;</span><br><span class="hljs-comment">// &#x27;newCall&#x27;</span><br><span class="hljs-comment">// &#x27;张三&#x27;</span><br></code></pre></td></tr></table></figure><p>那对应的  apply，只需要更改下函数定义参数的写法<br><code>fn.apply(obj, [args1, args2, args3...])</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">newApply</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context, args</span>) &#123;<br>  <span class="hljs-comment">// 里面的内容完全不变</span><br>&#125;<br><br><span class="hljs-comment">// 示例调用：第二个参数改为数组</span><br>fn.<span class="hljs-title function_">newApply</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span> &#125;, [<span class="hljs-string">&#x27;张三 apply 的&#x27;</span>, <span class="hljs-string">&#x27;newApply&#x27;</span>])<br><br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// &#x27;张三 apply 的&#x27;</span><br><span class="hljs-comment">// &#x27;newApply&#x27;</span><br><span class="hljs-comment">// &#x27;张三&#x27;</span><br></code></pre></td></tr></table></figure><p>那对应的  bind 本质可以借助上面的<code>call/apply</code>实现<br><code>fn.bind(obj, args1, args2, args3...)()</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">newBind</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context, ...args</span>) &#123;<br>  <span class="hljs-comment">// 处理参数：this 指向的新对象，兜底为 window</span><br>  context = context || <span class="hljs-variable language_">window</span><br><br>  <span class="hljs-comment">// 当前 this 指向调用该方法的函数，即函数本身</span><br>  <span class="hljs-keyword">const</span> fn = <span class="hljs-variable language_">this</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">..._args</span>) &#123;<br>    <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">newApply</span>(context, args.<span class="hljs-title function_">concat</span>(_args))<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 示例函数：</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">callName, callFnName</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(callName)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(callFnName)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><br><span class="hljs-comment">// 示例调用：</span><br><span class="hljs-keyword">const</span> bindFn = fn.<span class="hljs-title function_">newBind</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span> &#125;, <span class="hljs-string">&#x27;张三 bind 的&#x27;</span>, <span class="hljs-string">&#x27;newBind&#x27;</span>)<br><span class="hljs-title function_">bindFn</span>()<br><br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// &#x27;张三 bind 的&#x27;</span><br><span class="hljs-comment">// &#x27;newBind&#x27;</span><br><span class="hljs-comment">// &#x27;张三&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4、 this 问题</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/4%E3%80%81%20this%20%E9%97%AE%E9%A2%98/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/4%E3%80%81%20this%20%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">12</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-property">name</span>, person1.<span class="hljs-property">age</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">name</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">age</span>);<br><br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// &#123; name: &#x27;张三&#x27;, age: 18 &#125;</span><br><span class="hljs-comment">// undefined</span><br><span class="hljs-comment">// 张三</span><br><span class="hljs-comment">// 18</span><br><span class="hljs-comment">// 李四</span><br><span class="hljs-comment">// 12</span><br><br><span class="hljs-comment">// 解析：</span><br><span class="hljs-comment">// new Person 时，this 指向实例，所以 person1 = &#123; name: &#x27;张三&#x27;, age: 18 &#125;</span><br><span class="hljs-comment">// 直接调用 Person 时，等价于 window.Person 调用，所以 this 指向 window</span><br><span class="hljs-comment">// 由于函数无返回值，所以 person2 = undefined</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">arg</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = arg;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> x = <span class="hljs-title function_">test</span>(<span class="hljs-number">5</span>);<br><span class="hljs-keyword">var</span> y = <span class="hljs-title function_">test</span>(<span class="hljs-number">6</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x.<span class="hljs-property">x</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(y.<span class="hljs-property">x</span>);<br><br><span class="hljs-comment">// 打印结果为：</span><br><span class="hljs-comment">// undefined</span><br><span class="hljs-comment">// 6</span><br><br><span class="hljs-comment">// 解析：</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-title function_">test</span>(<span class="hljs-number">5</span>); =&gt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">x</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">test</span>(<span class="hljs-number">5</span>)<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">x</span> = <span class="hljs-number">5</span>; x = <span class="hljs-variable language_">window</span>; =&gt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">x</span> == x == <span class="hljs-variable language_">window</span><br><br><span class="hljs-keyword">var</span> y = <span class="hljs-title function_">test</span>(<span class="hljs-number">6</span>); =&gt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">y</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">test</span>(<span class="hljs-number">6</span>)<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">x</span> = <span class="hljs-number">6</span>; y = <span class="hljs-variable language_">window</span>; =&gt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">x</span> == x == <span class="hljs-number">6</span><br><br>x.<span class="hljs-property">x</span> =&gt; <span class="hljs-number">6.</span>x =&gt; <span class="hljs-literal">undefined</span><br>y.<span class="hljs-property">x</span> =&gt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">x</span> =&gt; <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">data</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>],<br>  <span class="hljs-attr">data2</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>],<br>  <span class="hljs-attr">fn</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;--test--&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>      <span class="hljs-keyword">return</span> item * <span class="hljs-number">2</span>;<br>    &#125;);<br>  &#125;,<br>  <span class="hljs-attr">fn2</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;---test2---&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">data2</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>      <span class="hljs-keyword">return</span> item * <span class="hljs-number">2</span>;<br>    &#125;);<br>  &#125;,<br>&#125;;<br>obj.<span class="hljs-title function_">fn</span>();<br>obj.<span class="hljs-title function_">fn2</span>();<br><br><span class="hljs-comment">// 打印结果为：</span><br><span class="hljs-comment">// --test--</span><br><span class="hljs-comment">// obj</span><br><span class="hljs-comment">// window</span><br><span class="hljs-comment">// window</span><br><span class="hljs-comment">// window</span><br><span class="hljs-comment">// window</span><br><span class="hljs-comment">// window</span><br><br><span class="hljs-comment">// --test2--</span><br><span class="hljs-comment">// obj</span><br><span class="hljs-comment">// obj</span><br><span class="hljs-comment">// obj</span><br><span class="hljs-comment">// obj</span><br><span class="hljs-comment">// obj</span><br><span class="hljs-comment">// obj</span><br><br><span class="hljs-comment">// 解析：</span><br><span class="hljs-comment">// obj.fn() 调用，this 指向 obj</span><br><span class="hljs-comment">// 执行 map 时，其回调函数是个普通的函数表达式</span><br><span class="hljs-comment">// 它不会自动绑定到对象上，因此它的this值将默认为全局对象，通常是window</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3、JS 数组的常用方法有哪些？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/3%E3%80%81JS%20%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/3%E3%80%81JS%20%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p><strong>数据操作</strong>：<br>fill：填充数据，改变原数组<br>unshift：从首部添加数据，返回数组长度，改变原数组<br>shift：从首部删除数据，返回被删除项，改变原数组<br>push：从末尾添加数据，返回数组长度，改变原数组<br>pop：从末尾删除数据，返回被删除项，改变原数组<br>concat：在原数组后面连接新数组，返回新的数组，不改变原数组<br>slice：在原数组上截取元素，返回新的数组，不改变原数组<br>splice：删除、插入、替换数组元素，返回新的数组，改变原数组</p><p><strong>查找</strong>：不改变原数组<br>find：any | undefined，返回第一个找到的值 || undefined<br>findIndex：number，返回第一个找到的下标 || -1<br>includes：boolean，是否包含<br>indexOf：number，返回找到的下标 || -1</p><p><strong>循环</strong>：不改变原数组<br>forEach：没有返回值<br>map：根据返回值，组成新数组<br>filter：根据条件 true，组成新数组<br>every：满足所有时返回 true<br>some：满足一项时返回 true</p><p><strong>归并</strong>：不改变原数组<br>reduce：循环，然后构建一个最终返回值，从前往后<br>reduceRight：循环，然后构建一个最终返回值，从后往前</p><p><strong>排序</strong>：改变原数组<br>reverse：将数组元素反向排列<br>sort：按规则给数组元素排序，默认为升序</p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2、阐述 Vue 中 computed 和 methods 的区别 ？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2%E3%80%81%E9%98%90%E8%BF%B0%20Vue%20%E4%B8%AD%20computed%20%E5%92%8C%20methods%20%E7%9A%84%E5%8C%BA%E5%88%AB%20%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2%E3%80%81%E9%98%90%E8%BF%B0%20Vue%20%E4%B8%AD%20computed%20%E5%92%8C%20methods%20%E7%9A%84%E5%8C%BA%E5%88%AB%20%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p><strong>写法上</strong>：<br>computed：vue2 为有返回值的函数，vue3 引入函数调用并返回值<br>methods：vue2 为对象，vue3 直接写</p><p><strong>功能上</strong>：<br>computed：当内部的响应值发生变化时它会执行，当成变量来使用，会被缓存<br>methods：定义一个方法，当成函数来使用，每次调用重新执行</p><p><strong>场景上</strong>：<br>computed：用于动态的计算<br>methods：定义函数，接受参数，用于逻辑处理</p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1、简述 JS rem 基本设置</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/1%E3%80%81%E7%AE%80%E8%BF%B0%20JS%20rem%20%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/1%E3%80%81%E7%AE%80%E8%BF%B0%20JS%20rem%20%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p><strong>rem</strong>：root em<br>设置 em 后，将以父级的 font-size 为基准，等比例渲染：<code>1em = 父 fs</code><br>举例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br><br>  <span class="hljs-selector-class">.child</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">2em</span>; // <span class="hljs-number">2</span> * <span class="hljs-number">20px</span> = <span class="hljs-number">40px</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>rem 的区别为父元素固定为 root 节点，即 html 元素。<br>所以可以通过动态设置 html 元素的 font-size 来实现等比例缩放。</p><p><strong>预期效果</strong>：<br>1、<strong>假如设计稿给的标准宽度为 750px</strong>，其中有个元素为宽 100px，高 345px<br>2、若在宽为 750px 的设备下，元素显示效果要为：宽 100px，高 345px<br>3、若在宽为 375px 的设备下，元素显示效果要为：宽 50px，高 172.5px<br>4、若在宽为 Xpx 的设备下，元素显示效果要为：宽 100<em>X&#x2F;750px，高 345</em>X&#x2F;750px<br>这样就是等比例缩放的</p><p><strong>实现逻辑</strong>：<br>1、<strong>假如设计稿给的标准宽度为 750px</strong>，其中有个元素为宽 100px，高 345px<br>2、制定基准：<code>100rem = 750px</code>，其中的 100 可随意制定，20、50 都行看个人喜好<br>3、根据 2 定的基准，动态设置 html 元素的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-comment">/* 100vw 为页面宽度 */</span><br>  <span class="hljs-comment">/* 100 为定的基准 */</span><br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100vw</span> / <span class="hljs-number">100</span>) <span class="hljs-comment">/* 等价于 font-size: 1vw */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>4、根据 2 定的基准可得新基准：1rem &#x3D; 7.5px<br>5、根据 4 得的基准，将所有 CSS 的 px 改为 rem<br>6、假如设计稿内有个元素为宽 100px，高 345px</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">13.3rem</span>; <span class="hljs-comment">/* 13.3 = 100 / 7.5 */</span><br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">46rem</span>; <span class="hljs-comment">/* 46 = 345 / 7.5 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>详细解释</strong>：<br>1、<strong>当页面宽度为 750px 时</strong><br>2、对应的 html 元素的<code>font-size</code>为<code>750px / 100 = 7.5px</code><br>3、<code>width: 13.3rem</code>计算出来的结果为：<code>13.3 * 7.5 ≈ 100</code><br>4、<code>height: 46rem</code>计算出来的结果为：<code>46 * 7.5 = 345</code><br>5、再串一下计算逻辑得出终极写法：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-attr">width</span>: <span class="hljs-number">13.</span>3rem<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-attr">width</span>: (100px / <span class="hljs-number">7.5</span>) * 1rem<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-attr">width</span>: (100px / <span class="hljs-number">7.5</span>) * (页面宽度 / <span class="hljs-number">100</span>)<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-attr">width</span>: (100px / <span class="hljs-number">7.5</span>) * (100vw / <span class="hljs-number">100</span>)<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-attr">width</span>: (100px * 100vw) / (<span class="hljs-number">7.5</span> * <span class="hljs-number">100</span>)<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-attr">width</span>: 100vw / <span class="hljs-number">7.5</span><br><span class="hljs-comment">// 最终可写为</span><br><span class="hljs-attr">width</span>: <span class="hljs-title function_">calc</span>(100vw / <span class="hljs-number">7.5</span>) <span class="hljs-comment">// 其中的 100vw 等价于 100</span><br></code></pre></td></tr></table></figure><p>终极写法：假设页面有 Xpx 的，则 CSS 写为<code>calc(Xvw / 7.5)</code></p><p><strong>以上是使用纯手写 CSS 实现的 rem，无任何 JS 代码。</strong></p><p>但可以发现需要去记这个写法<code>calc(Xvw / 7.5)</code>，所以若为 MVVM 框架，可借助<code>postcss-px2rem</code>等库实现自动<code>px</code>转<code>rem</code>，就不用去记写法。</p><p><strong>补充说明下</strong>：<br>若使用 100 来制定基准：<code>100rem = 原始设计稿宽度宽度</code><br>则可以直接用 vw 单位也能实现等比缩放，可以不设置 html 的 font-size 了<br>因为<code>原始设计稿宽度宽度 = 100vw</code><br><strong>假如设计稿给的标准宽度为 750px</strong>，其中有个元素为宽 100px，高 345px，写法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100vw</span> / <span class="hljs-number">7.5</span>);<br>  <span class="hljs-attribute">height</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100vw</span> / <span class="hljs-number">7.5</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19、详细说明下 Event Loop</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/19%E3%80%81%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E%E4%B8%8B%20Event%20Loop/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/19%E3%80%81%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E%E4%B8%8B%20Event%20Loop/</url>
    
    <content type="html"><![CDATA[<h1 id="Web-环境"><a href="#Web-环境" class="headerlink" title="Web 环境"></a>Web 环境</h1><p>事件循环：是实现单线程环境下异步编程的关键机制</p><p>首先 JS 是单线程的，所以只能一行行处理代码。</p><blockquote><p>为什么是单线程？因为是故意如此，为了阻塞页面的渲染，这样就不与 html、css 的解析产生冲突，所以是单线程阻塞的</p></blockquote><p>遇到阻塞代码(接口请求)时，如果一直等待则会平白浪费时间，所以产生了异步任务。<br>遇到异步任务时，将其放到异步任务处理器中执行，执行完毕后将回调函数放到事件队列中，主线程继续处理同步代码。</p><p>事件队列是专门存放异步任务的回调函数的</p><p>当主线程将本次的同步代码执行完毕后，就去事件队列中拿回调函数来执行。</p><p>这个拿回调函数来执行的机制是事件循环。<br>所以事件循环就是从任务队列拿任务的机制。<br>任务队列里面又分为：宏任务、微任务<br>第一次整个 script 里面的代码作为宏任务被执行<br>执行时遇到异步任务：setTimeout、Promise 等，将 setTimeout 的回调放入宏任务，将 Promise 的回调放入微任务<br>等当前宏任务(即 script 里面的同步代码执行完毕后)，去清理掉所有的微任务<br>当微任务清理掉后，拿一个宏任务来执行，在执行期间若又遇到了异步任务，则分别放入对应的宏、微任务队列中</p><p>当本次宏任务结束后，又清楚所有的微任务，然后拿下一个宏任务继续执行。</p><p>所以宏任务每次都只会执行一个，微任务每次都会清掉所有的。</p><p>浏览器整个任务的流程是：宏任务 -&gt; 微任务 -&gt; requestAnmimateFrame -&gt; UI 渲染 -&gt; requestIdleCallback</p><p>所以：Event Loop 是 JS 中执行异步任务的机制</p><h1 id="Node-环境"><a href="#Node-环境" class="headerlink" title="Node 环境"></a>Node 环境</h1>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>18、在 JavaScript 中请阐述原因并给出_解决⽅案</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/18%E3%80%81%E5%9C%A8%20JavaScript%20%E4%B8%AD%E8%AF%B7%E9%98%90%E8%BF%B0%E5%8E%9F%E5%9B%A0%E5%B9%B6%E7%BB%99%E5%87%BA_%E8%A7%A3%E5%86%B3%E2%BD%85%E6%A1%88/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/18%E3%80%81%E5%9C%A8%20JavaScript%20%E4%B8%AD%E8%AF%B7%E9%98%90%E8%BF%B0%E5%8E%9F%E5%9B%A0%E5%B9%B6%E7%BB%99%E5%87%BA_%E8%A7%A3%E5%86%B3%E2%BD%85%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>不等于，<code>0.1 + 0.2 = 0.30000000000000004</code><br>原因：ECMA 使用 IEEE 754 标准来表示 64 位浮点型(JS 中所有数字都是浮点数)，取的是近似值<br>0.1、0.2 从十进制小数转为二进制后会产生舍入误差，所以二进制再相加后转为十进制就变为：<code>0.30000000000000004</code><br>解决：<code>parseFloat((0.1+0.2).toFixed(10))</code></p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>17、requestAnimationFrame 和requestIdleCallback 的执行时机</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/17%E3%80%81requestAnimationFrame%20%E5%92%8CrequestIdleCallback%20%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/17%E3%80%81requestAnimationFrame%20%E5%92%8CrequestIdleCallback%20%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>浏览器执行情况：<br>宏任务 –&gt; 微任务 –&gt; requestAnimationFrame –&gt; 渲染 –&gt; requestIdleCallback –&gt; 下一个宏任务 –&gt; ……</p><p>requestAnimationFrame：在下一次浏览器重绘之前一定会执行，常用于动画处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> divEle = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>)<br><br><span class="hljs-keyword">let</span> x = <span class="hljs-number">0</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">moveAnimation</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">20</span>) <span class="hljs-keyword">return</span><br><br>  divEle.<span class="hljs-property">style</span>.<span class="hljs-property">marginLeft</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;x&#125;</span>px`</span>;<br><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(moveAnimation)<br><br>  x++<br>&#125;<br><br> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(moveAnimation)<br></code></pre></td></tr></table></figure><p>requestIdleCallback：浏览器空闲时去执行，常用于低优先级的长任务，但执行时机不确定哦</p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>16、forEach 如何终止循环</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/16%E3%80%81forEach%20%E5%A6%82%E4%BD%95%E7%BB%88%E6%AD%A2%E5%BE%AA%E7%8E%AF/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/16%E3%80%81forEach%20%E5%A6%82%E4%BD%95%E7%BB%88%E6%AD%A2%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<p>结论：正常情况下是无法终止的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ item ] &gt;&quot;</span>, item);<br>  <span class="hljs-keyword">if</span> (item === <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>&#125;);<br><br><span class="hljs-comment">// [ item ] &gt; 1</span><br><span class="hljs-comment">// [ item ] &gt; 2</span><br><span class="hljs-comment">// [ item ] &gt; 3</span><br><span class="hljs-comment">// [ item ] &gt; 4</span><br></code></pre></td></tr></table></figure><p>forEach 的实现原理如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">forEach2</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">callback</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(callback + <span class="hljs-string">&quot; is not a function&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> len = <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">while</span> (i &lt; len) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">hasOwnProperty</span>(i)) &#123;<br>      <span class="hljs-title function_">callback</span>(<span class="hljs-variable language_">this</span>[i], i, <span class="hljs-variable language_">this</span>);<br>    &#125;<br>    i++;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>所以正常情况下是无法终止 forEach 的</strong></p><p>特殊处理可实现终止<br>1、抛出错误：try…catch + throw</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">try</span> &#123;<br>  arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ item ] &gt;&quot;</span>, item);<br>    <span class="hljs-keyword">if</span> (item === <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br>  &#125;);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;&#125;<br></code></pre></td></tr></table></figure><p>2、数组长度置为 0</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ item ] &gt;&quot;</span>, item);<br>  <span class="hljs-keyword">if</span> (item === <span class="hljs-number">2</span>) &#123;<br>    arr.<span class="hljs-property">length</span> = <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>结论：当需要终止循环时，不建议使用 forEach 了，可以使用 for、for…of 等处理终止，也可使用 find、some 等提前结束</p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15、React 调用 setState 后的更新流程</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/15%E3%80%81React%20%E8%B0%83%E7%94%A8%20setState%20%E5%90%8E%E7%9A%84%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/15%E3%80%81React%20%E8%B0%83%E7%94%A8%20setState%20%E5%90%8E%E7%9A%84%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>在 React 的 Hooks 里面，通过 useState 可以创建一个 setState 函数。<br>调用它后，最终会触发页面的更新。<br>具体更新流程为：</p><ol><li><strong>调用 useState 的 setState 函数</strong>：当你调用<code>setState(newState)</code>时，React 将新的状态变更放入一个队列中。</li><li><strong>调度与批处理</strong>：更新被延迟处理，并通过内部机制进行批处理（batching），确保多个状态变更可以在一次重渲染中完成，从而减少不必要的更新。</li><li><strong>Fiber 结构调度</strong>：会经过一系列的调度过程，最终调用<code>scheduleUpdateOnFiber</code>函数来安排 Fiber 树上的工作。</li><li><strong>生成新的 Fiber 结构</strong>：从根元素开始遍历，创建一个新的<code>workInProgress Fiber</code>树结构，在这个过程中涉及虚拟 DOM 的生成、使用高效的 DIFF 算法比较新旧状态，并标记需要更新或添加副作用（Side Effects）的 Fiber 节点。</li><li><strong>workInProgress Fiber 的创建</strong>： 在 beginWork 阶段，会根据新的状态创建 workInProgress Fiber，并在此阶段执行 shouldComponentUpdate 或者 hooks 中的 useEffect、useLayoutEffect 等钩子函数的调度。</li><li><strong>Commit 阶段</strong>： 最后在 commitWork 阶段，会将 workInProgress Fiber 树上标记为需要更新的部分同步到真实的 DOM 上，并执行副作用，如 DOM 节点插入、删除或属性更改。同时这也是 React 实现其双缓存策略（current Fiber tree 和 workInProgress Fiber tree）切换的地方。</li><li><strong>页面重新渲染</strong>：当所有的变更提交完成后，浏览器会根据实际的 DOM 变化重新渲染页面，用户界面得到更新。</li></ol><p><del>1、调用</del><code>~~setState(obj, [callback])~~</code><del>函数后，则放到队列中延迟处理，后面批量处理，可以减少不必要的更新</del><br><del>2、一层层的调用到</del><code>~~scheduleUpdateOnFiber~~</code><del>函数，用它来调度更新</del><br><del>3、从根元素开始，一层层遍历生成新的 Fiber 结构，其中涉及虚拟 DOM 的生成、DIFF 算法、打上 EffectTag 等等操作(Fiber 是一种包含虚拟 DOM、链表、EffectList 的数据结构)</del><br><del>4、在</del><code>~~beginWork~~</code><del>里面生成</del><code>~~workInProgressFiber~~</code><br><del>5、调用</del><code>~~completeWork~~</code><del>创建真实的 DOM</del><br><del>6、最后调用</del><code>~~commitWork~~</code><del>实现双缓存的切换</del><br><del>7、最终实现页面的重新渲染</del></p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14、手写模拟实现 Promise</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/14%E3%80%81%E6%89%8B%E5%86%99%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0%20Promise.finally/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/14%E3%80%81%E6%89%8B%E5%86%99%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0%20Promise.finally/</url>
    
    <content type="html"><![CDATA[<p>首先 Promise.finally 的作用是：无论 Promise 的状态成功与否，都会进入 finally 中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>)<br>  &#125;, <span class="hljs-number">5000</span>)<br>&#125;)<br><br>p1.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res) <span class="hljs-comment">// 1</span><br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;).<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">// 不接受参数</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;无论Promise的结果如何，这段代码总会被执行&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>手写 Promise.finally：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">Promise</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">finally</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">cb</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-title function_">cb</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> res)<br>  &#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-title function_">cb</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">throw</span> err<br>    &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13、简述输出以下代码的执行结果并解释为什么 ？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/13%E3%80%81%E7%AE%80%E8%BF%B0%E8%BE%93%E5%87%BA%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%B9%B6%E8%A7%A3%E9%87%8A%E4%B8%BA%E4%BB%80%E4%B9%88%20%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/13%E3%80%81%E7%AE%80%E8%BF%B0%E8%BE%93%E5%87%BA%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%B9%B6%E8%A7%A3%E9%87%8A%E4%B8%BA%E4%BB%80%E4%B9%88%20%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>问题：简述输出以下代码的执行结果并解释为什么 ？</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> a = &#123; <span class="hljs-attr">n</span>: <span class="hljs-number">1</span> &#125;;<br><span class="hljs-keyword">var</span> b = a;<br>a.<span class="hljs-property">x</span> = a = &#123; <span class="hljs-attr">n</span>: <span class="hljs-number">2</span> &#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">x</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">x</span>)<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript">答案：<br><span class="hljs-literal">undefined</span><br>&#123; <span class="hljs-attr">n</span>: <span class="hljs-number">2</span> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript">解析：<br>核心点为：a.<span class="hljs-property">x</span> = a = &#123; <span class="hljs-attr">n</span>: <span class="hljs-number">2</span> &#125;;<br>这是一个复合赋值操作，执行顺序为从右到左<br>a = &#123; <span class="hljs-attr">n</span>: <span class="hljs-number">2</span> &#125;;<br>⭐️ a.<span class="hljs-property">x</span> = a 这其中的 a.<span class="hljs-property">x</span> 中的 a 还是旧值，即跟 b 指向的对象<br>所以 a.<span class="hljs-property">x</span> = b.<span class="hljs-property">x</span> = a<br><br>所以最后 a = &#123; <span class="hljs-attr">n</span>: <span class="hljs-number">2</span> &#125;; b = &#123; <span class="hljs-attr">n</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">x</span>: &#123; <span class="hljs-attr">n</span>: <span class="hljs-number">2</span> &#125; &#125;<br><br>可以将 a.<span class="hljs-property">x</span> = a = &#123; <span class="hljs-attr">n</span>: <span class="hljs-number">2</span> &#125;; 分成如下代码：<br>a.<span class="hljs-property">x</span> = &#123; <span class="hljs-attr">n</span>: <span class="hljs-number">2</span> &#125;<br>a = &#123; <span class="hljs-attr">n</span>: <span class="hljs-number">2</span> &#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12、讲一讲 CSS 的 flex 与 grid</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/12%E3%80%81%E8%AE%B2%E4%B8%80%E8%AE%B2%20CSS%20%E7%9A%84%20flex%20%E4%B8%8E%20grid/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/12%E3%80%81%E8%AE%B2%E4%B8%80%E8%AE%B2%20CSS%20%E7%9A%84%20flex%20%E4%B8%8E%20grid/</url>
    
    <content type="html"><![CDATA[<h1 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h1><p>核心是：一维布局</p><p>父元素设置 display：flex；可实现子元素的弹性布局</p><p>父元素称为‘容器’，子元素称为‘项目’</p><p>‘容器’有两根轴：x、y，默认沿着 x 轴排列</p><p>‘容器’常用属性设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-comment">/* 设置项目沿主轴排列的方向 */</span><br>  <span class="hljs-attribute">flex</span>-deriction: <span class="hljs-built_in">row</span>(默认 x 轴) | <span class="hljs-built_in">column</span>(y 轴) | ...<br><br>  <span class="hljs-comment">/* 是否换行 */</span><br>  flex-wrap: <span class="hljs-built_in">npwarp</span>(默认不换行) | warp<br><br>  <span class="hljs-comment">/* 主轴对齐方式 */</span><br>  justify-content: <span class="hljs-built_in">flex-start</span>(默认值) | flex-end | center | <span class="hljs-built_in">space-between</span>(两端对齐) | <span class="hljs-built_in">space-around</span>(项目两侧对齐)<br><br>  <span class="hljs-comment">/* 交叉轴对齐方式  */</span><br>  align-items: flex-start | flex-end | center | baseline | <span class="hljs-built_in">stretch</span>(默认占满)<br>&#125;<br></code></pre></td></tr></table></figure><p>‘项目’常用属性设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span> // 是 flex-grow: <span class="hljs-number">1</span>, flex-shrink: <span class="hljs-number">1</span> 和 flex-basis: <span class="hljs-number">0%</span> 的简写<br><br>  <span class="hljs-comment">/* 放大比例 */</span><br>  flex-grow: &lt;number&gt;; <span class="hljs-comment">/* default 0 */</span><br><br>  <span class="hljs-comment">/* 缩小比例 */</span><br>  <span class="hljs-attribute">flex-shrink</span>: &lt;number&gt;; <span class="hljs-comment">/* default 1 */</span><br><br>  <span class="hljs-comment">/* 项目占据的主轴空间 */</span><br>  <span class="hljs-attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="hljs-comment">/* default auto 即项目的本来大小 */</span><br><br>  <span class="hljs-comment">/*  项目自身在交叉轴上的对齐方式 */</span><br>  <span class="hljs-attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch; <span class="hljs-comment">/* default auto */</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>参考文档：<a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex 布局教程：语法篇 - 阮一峰的网络日志</a></p><h1 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h1><p>核心是：二维布局</p><p>父元素设置 display：grid；可实现子元素的网格布局</p><p>父元素称为‘容器’，子元素称为‘项目’</p><p>‘容器’内有行和列，行列的交叉为‘单元格’</p><p>‘容器’常用属性设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: grid;<br><br>  <span class="hljs-comment">/* 定义每一列的列宽，数量代表列数，可以使用 repeat(数量, 数值) 来简写 */</span><br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">100px</span> <span class="hljs-number">100px</span> <span class="hljs-number">100px</span>; <span class="hljs-comment">/* 等价于 repeat(3, 100px) */</span><br><br>  <span class="hljs-comment">/* 定义每一行的行高，数量代表行数，可以使用 repeat(数量, 数值) 来简写 */</span><br>  <span class="hljs-attribute">grid-template-rows</span>: <span class="hljs-number">100px</span> <span class="hljs-number">100px</span> <span class="hljs-number">100px</span>; <span class="hljs-comment">/* 等价于 repeat(3, 100px) */</span><br><br>  <span class="hljs-comment">/* repeat(auto-fill, 数值) 表示单元格数量自动填充父容器 */</span><br><br>  <span class="hljs-comment">/* fr 单位，表示比例关系 */</span><br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">2</span>fr <span class="hljs-number">3</span>fr; <span class="hljs-comment">/* === 第一列宽度:第二列宽度:第三列宽度 */</span><br><br>  <span class="hljs-comment">/* minmax 函数产生一个范围 */</span><br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">minmax</span>(<span class="hljs-number">100px</span>, <span class="hljs-number">1</span>fr); <span class="hljs-comment">/* 值为[100px, 1fr] */</span><br><br>  <span class="hljs-comment">/* --------- */</span><br><br>  <span class="hljs-comment">/* 行间距(上下间隔) */</span><br>  <span class="hljs-attribute">row-gap</span>: <span class="hljs-number">20px</span>;<br><br>  <span class="hljs-comment">/* 列间距(左右间隔) */</span><br>  <span class="hljs-attribute">column-gap</span>: <span class="hljs-number">20px</span>;<br><br>  <span class="hljs-comment">/* 行间距与列间距的合并简写，上述等价于 */</span><br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">20px</span> <span class="hljs-number">20px</span>; <span class="hljs-comment">/* 等价于 20px; */</span><br><br><br>  <span class="hljs-comment">/* --------- */</span><br>  <span class="hljs-comment">/* 子元素排列顺序 */</span><br>  <span class="hljs-attribute">grid-auto-flow</span>: <span class="hljs-built_in">row</span>(默认‘先行后列’) | <span class="hljs-built_in">column</span>(‘先列后行’);<br><br>  <span class="hljs-comment">/* 设置单元格内容的水平位置（左中右） */</span><br>  justify-items: start | end | center | <span class="hljs-built_in">stretch</span>(默认占满);<br>  <span class="hljs-comment">/* 设置单元格内容的垂直位置（上中下） */</span><br>  <span class="hljs-attribute">align-items</span>: start | end | center | <span class="hljs-built_in">stretch</span>(默认占满);<br>&#125;<br></code></pre></td></tr></table></figure><p>参考文档：<a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">CSS Grid 网格布局教程 - 阮一峰的网络日志</a></p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11、写一个兼容的事件模型</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/11%E3%80%81%E5%86%99%E4%B8%80%E4%B8%AA%E5%85%BC%E5%AE%B9%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/11%E3%80%81%E5%86%99%E4%B8%80%E4%B8%AA%E5%85%BC%E5%AE%B9%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>兼容点：谷歌浏览器、IE 浏览器</p><p>使用方式：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 绑定事件：</span><br>eventModel.<span class="hljs-title function_">addEventListener</span>(ele, <span class="hljs-string">&#x27;click&#x27;</span>, fn, <span class="hljs-built_in">boolean</span>)<br><br><span class="hljs-comment">// 解绑事件：</span><br>eventModel.<span class="hljs-title function_">removeEventListener</span>(ele, <span class="hljs-string">&#x27;click&#x27;</span>, fn)<br><br><span class="hljs-comment">// 阻止传播：</span><br>eventModel.<span class="hljs-title function_">stopPropagation</span>()<br><br><span class="hljs-comment">// 阻止默认事件：</span><br>eventModel. <span class="hljs-title function_">preventDefault</span>()<br></code></pre></td></tr></table></figure><p>代码实现：就是在里面写不同浏览器支持的 API 而已</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> eventModel = &#123;<br>  <span class="hljs-comment">// 绑定事件：</span><br>  <span class="hljs-title function_">addEventListener</span>(<span class="hljs-params">ele, eventName, fn, flag</span>) &#123;<br>    <span class="hljs-keyword">if</span>(ele.<span class="hljs-property">addEventListener</span>) &#123;<br>      <span class="hljs-comment">// 非 IE 浏览器</span><br>      ele.<span class="hljs-title function_">addEventListener</span>(eventName, fn, flag)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ele.<span class="hljs-property">addtachEvent</span>) &#123;<br>      <span class="hljs-comment">// IE 浏览器</span><br>      ele.<span class="hljs-title function_">addtachEvent</span>(<span class="hljs-string">`on<span class="hljs-subst">$&#123;eventName&#125;</span>`</span>, fn)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 兜底</span><br>      ele[<span class="hljs-string">`on<span class="hljs-subst">$&#123;eventName&#125;</span>`</span>] = fn<br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-comment">// 解绑事件：</span><br>  <span class="hljs-title function_">removeEventListener</span>(<span class="hljs-params">ele, eventName, fn</span>) &#123;<br>    <span class="hljs-keyword">if</span>(ele.<span class="hljs-property">removeEventListener</span>) &#123;<br>      <span class="hljs-comment">// 非 IE 浏览器</span><br>      ele.<span class="hljs-title function_">removeEventListener</span>(eventName, fn)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ele.<span class="hljs-property">detachEvent</span>) &#123;<br>      <span class="hljs-comment">// IE 浏览器</span><br>      ele.<span class="hljs-title function_">addtachEvent</span>(<span class="hljs-string">`on<span class="hljs-subst">$&#123;eventName&#125;</span>`</span>, fn)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 兜底</span><br>      ele[<span class="hljs-string">`on<span class="hljs-subst">$&#123;eventName&#125;</span>`</span>] = <span class="hljs-literal">null</span><br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-comment">// 阻止传播：</span><br>  <span class="hljs-title function_">stopPropagation</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-keyword">if</span>(event.<span class="hljs-property">stopPropagation</span>) &#123;<br>      <span class="hljs-comment">// 非 IE 浏览器</span><br>      event.<span class="hljs-title function_">stopProgamation</span>()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>     <span class="hljs-comment">// IE 浏览器</span><br>      ele.<span class="hljs-property">cancelBubble</span> = <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 阻止默认：</span><br>   <span class="hljs-title function_">preventDefault</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-keyword">if</span>(event.<span class="hljs-property">preventDefault</span>) &#123;<br>      <span class="hljs-comment">// 非 IE 浏览器</span><br>      event.<span class="hljs-title function_">preventDefault</span>()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// IE 浏览器</span><br>      ele.<span class="hljs-property">returnValue</span> = <span class="hljs-literal">false</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10、JS 获取各种距离的方法有哪些？</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/10%E3%80%81JS%20%E8%8E%B7%E5%8F%96%E5%90%84%E7%A7%8D%E8%B7%9D%E7%A6%BB%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/10%E3%80%81JS%20%E8%8E%B7%E5%8F%96%E5%90%84%E7%A7%8D%E8%B7%9D%E7%A6%BB%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p><strong>屏幕相关</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// macOS 全屏模式下 的 window.screen</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span> = &#123;<br>  <span class="hljs-attr">availHeight</span>: <span class="hljs-number">950</span>, <span class="hljs-comment">// 可用高度，屏幕高度 - 系统上/下任务栏高度(若有)</span><br>  <span class="hljs-attr">availLeft</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 系统左/右任务栏宽度</span><br>  <span class="hljs-attr">availTop</span>: <span class="hljs-number">32</span>, <span class="hljs-comment">// 系统上/下任务栏高度</span><br>  <span class="hljs-attr">availWidth</span>: <span class="hljs-number">1512</span>, <span class="hljs-comment">// 可用宽度，屏幕宽度 - 系统左/右任务栏宽度(若有)</span><br>  <span class="hljs-attr">height</span>: <span class="hljs-number">982</span>, <span class="hljs-comment">// ⭐️ 屏幕高度：availHeight + availTop</span><br>  <span class="hljs-attr">width</span>: <span class="hljs-number">1512</span>, <span class="hljs-comment">// ⭐️ 屏幕宽度：availWidth + availLeft</span><br>&#125;;<br><br><span class="hljs-comment">// 浏览器窗口左上角 与 屏幕左边 的距离，macOS 全屏模式下为 0</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">screenLeft</span> === <span class="hljs-variable language_">window</span>.<span class="hljs-property">screenX</span>;<br><br><span class="hljs-comment">// 浏览器窗口左上角 与 屏幕顶部 的距离，macOS 全屏模式下为 37</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">screenTop</span> === <span class="hljs-variable language_">window</span>.<span class="hljs-property">screenY</span>;<br></code></pre></td></tr></table></figure><p><strong>浏览器相关</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">outerWidth</span>; <span class="hljs-comment">// 浏览器的宽度</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">outerHeight</span>; <span class="hljs-comment">// 浏览器的高度</span><br><br><span class="hljs-comment">// ⭐️ 浏览器的可视区域的宽度(仅由视口大小决定)，包含滚动条，等同于 100vh</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>;<br><br><span class="hljs-comment">// ⭐️ 浏览器的可视区域的高度(仅由视口大小决定)，包含滚动条，等同于 100vw</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>;<br></code></pre></td></tr></table></figure><p><strong>网页相关</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ⭐️ 浏览器可视区域的宽度(仅由视口大小决定)，不包含滚动条</span><br><span class="hljs-comment">// 始终等于 window.innerWidth - 竖向滚动条宽度(若有)</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span><br><br><span class="hljs-comment">// ⭐️ 浏览器可视区域的高度(仅由视口大小决定)，不包含滚动条</span><br><span class="hljs-comment">// 始终等于 window.innerHeight - 横向滚动条高度(若有)</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span><br><br><span class="hljs-comment">// html 元素的实际宽度(由自身样式或内容宽度决定)，不包含滚动条</span><br><span class="hljs-comment">// 未设置样式时，默认为 100%，并等于 document.documentElement.clientWidth</span><br><span class="hljs-comment">//  若内容宽度大于 100%，则为内容宽度(即横向滚动条长度)</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollWidth</span><br><br><span class="hljs-comment">// html 元素的实际高度(由自身样式或内容高度决定)，不包含滚动条</span><br><span class="hljs-comment">// 未设置样式时，默认为 100%，并等于 document.documentElement.clientHeight</span><br><span class="hljs-comment">//  若内容高度大于 100%，则为内容高度(即竖向滚动条高度)</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollHeight</span><br><br><span class="hljs-comment">// html 元素的竖向滚动条，已滚动的距离</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span><br><br><span class="hljs-comment">// html 元素的横向滚动条，已滚动的距离</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollLeft</span><br></code></pre></td></tr></table></figure><p><strong>元素相关</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 某个元素可视区域的宽度(仅由自身样式决定)，不包含滚动条、padding、border</span><br><span class="hljs-comment">// 未设置样式时，默认为 100%，小于等于 父元素.clientWidth</span><br><span class="hljs-comment">// 若有自身样式，则为样式宽度</span><br><span class="hljs-variable language_">document</span>.某个元素.<span class="hljs-property">clientWidth</span><br><br><span class="hljs-comment">// 某个元素的实际高度(由自身样式或内容高度决定)，不包含滚动条</span><br><span class="hljs-comment">// 未设置样式时，默认为 0px</span><br><span class="hljs-comment">//  若内容高度大于 0，则为内容高度</span><br><span class="hljs-comment">// 若有自身样式，则为样式高度</span><br><span class="hljs-variable language_">document</span>.某个元素.<span class="hljs-property">clientHeight</span><br><br><span class="hljs-comment">// 某个元素的实际宽度(由自身样式或内容宽度决定)，不包含滚动条</span><br><span class="hljs-comment">// 未设置样式时，默认为 100%，并等于 该元素.clientWidth</span><br><span class="hljs-comment">//  若内容宽度大于 100%，则为内容宽度(即横向滚动条长度)</span><br><span class="hljs-comment">// 若有自身样式，则为 Max(内容宽度, 样式宽度)</span><br><span class="hljs-variable language_">document</span>.某个元素.<span class="hljs-property">scrollWidth</span><br><br><span class="hljs-comment">// 某个元素的实际高度(由自身样式或内容高度决定)，不包含滚动条</span><br><span class="hljs-comment">// 未设置样式时，默认为 0px</span><br><span class="hljs-comment">//  若内容高度大于 0，则为内容高度(即竖向滚动条高度)</span><br><span class="hljs-comment">// 若有自身样式，则为 Max(内容高度, 样式高度)</span><br><span class="hljs-variable language_">document</span>.某个元素.<span class="hljs-property">scrollHeight</span><br><br><span class="hljs-comment">// 某个元素的竖向滚动条，已滚动的距离</span><br><span class="hljs-variable language_">document</span>.某个元素.<span class="hljs-property">scrollTop</span><br><br><span class="hljs-comment">// 某个元素的横向滚动条，已滚动的距离</span><br><span class="hljs-variable language_">document</span>.某个元素.<span class="hljs-property">scrollLeft</span><br><br><span class="hljs-variable language_">document</span>.某个元素.<span class="hljs-property">offsetWidth</span> <span class="hljs-comment">// 等价于 某个元素.clientWidth + padding + border</span><br><span class="hljs-variable language_">document</span>.某个元素.<span class="hljs-property">offsetHeight</span> <span class="hljs-comment">// 等价于 某个元素.clientHeight + padding + border</span><br><span class="hljs-variable language_">document</span>.某个元素.<span class="hljs-property">offsetLeft</span> <span class="hljs-comment">// 自身左边 与最近的 offsetParent(默认为 body)的左边距离</span><br><span class="hljs-variable language_">document</span>.某个元素.<span class="hljs-property">offsetTop</span> <span class="hljs-comment">// 自身上边 与最近的 offsetParent(默认为 body)的上边距离</span><br></code></pre></td></tr></table></figure><p>举个🌰</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;example&quot;</span>&gt;<br>  ...<span class="hljs-title class_">Text</span>...<br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-id">#example</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">border</span>: <span class="hljs-number">25px</span> solid <span class="hljs-number">#E8C48F</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">overflow</span>: auto;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1706371242869-ecb45b4c-cd62-491b-99de-0211930ee130.png"><img src="/img/images/2024/1706371254633-bfa205eb-b52d-43f9-8b42-7d506a91132b.png"><br><img src="/img/images/2024/1706371297941-53726372-ea6a-4dd8-a4b2-5c8bf3af6469.png"><br>对应的值为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// width</span><br>clientWidth = <span class="hljs-number">323</span> = content <span class="hljs-title function_">width</span>(<span class="hljs-number">283.2</span>) + 左右 <span class="hljs-title function_">padding</span>(<span class="hljs-number">20</span> * <span class="hljs-number">2</span>) =<br> <span class="hljs-title function_">width</span>(<span class="hljs-number">300</span>) + 左右 <span class="hljs-title function_">padding</span>(<span class="hljs-number">20</span> * <span class="hljs-number">2</span>) - 竖向滚动条宽度 <span class="hljs-number">17</span>(若有)<br><br>scrollWidth = <span class="hljs-number">323</span> = clientWidth<br><br>offsetWidth = <span class="hljs-number">390</span> = <span class="hljs-title function_">width</span>(<span class="hljs-number">300</span>) + 左右 <span class="hljs-title function_">padding</span>(<span class="hljs-number">20</span> * <span class="hljs-number">2</span>) + 左右 <span class="hljs-title function_">border</span>(<span class="hljs-number">25</span> * <span class="hljs-number">2</span>)<br><br><span class="hljs-comment">// hieght</span><br>clientHeight = <span class="hljs-number">240</span> = content <span class="hljs-title function_">height</span>(<span class="hljs-number">200</span>) + 左右 <span class="hljs-title function_">padding</span>(<span class="hljs-number">20</span> * <span class="hljs-number">2</span>) =<br> <span class="hljs-title function_">height</span>(<span class="hljs-number">200</span>) + 左右 <span class="hljs-title function_">padding</span>(<span class="hljs-number">20</span> * <span class="hljs-number">2</span>) - 横向滚动条高度 <span class="hljs-number">17</span>(若有，本次无，为 <span class="hljs-number">0</span>)<br><br>scrollHeight  = <span class="hljs-number">435</span><br><br>offsetHeight  = <span class="hljs-number">290</span> = <span class="hljs-title function_">height</span>(<span class="hljs-number">200</span>) + 左右 <span class="hljs-title function_">padding</span>(<span class="hljs-number">20</span> * <span class="hljs-number">2</span>) + 左右 <span class="hljs-title function_">border</span>(<span class="hljs-number">25</span> * <span class="hljs-number">2</span>)<br><br><span class="hljs-comment">// left、top</span><br>offsetTop = 看实际情况<br>offsetLeft = 看实际情况<br>clientTop = <span class="hljs-number">25</span> = border-top<br>clientLeft = <span class="hljs-number">25</span> = border-left<br></code></pre></td></tr></table></figure><p>快速获取这些值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.某个元素.<span class="hljs-title function_">getBoundingClientRect</span>(<span class="hljs-params"></span>)<br>&#123;<br>  <span class="hljs-attr">bottom</span>: <span class="hljs-number">456</span>, <span class="hljs-comment">// 等价于 top + offsetHeight</span><br>  <span class="hljs-attr">height</span>: <span class="hljs-number">290</span>, <span class="hljs-comment">// 等价于 offsetHeight</span><br>  <span class="hljs-attr">left</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 元素左边与可视窗口的左边距离，有滚动时则实时变化</span><br>  <span class="hljs-attr">right</span>: <span class="hljs-number">390</span>, <span class="hljs-comment">// 等价于 left + offsetWidth</span><br>  <span class="hljs-attr">top</span>: <span class="hljs-number">166</span>, <span class="hljs-comment">// 元素上边与可视窗口的上边距离，有滚动时则实时变化</span><br>  <span class="hljs-attr">width</span>: <span class="hljs-number">390</span>, <span class="hljs-comment">// 等价于 offsetWidth</span><br>  <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 等价于 left</span><br>  <span class="hljs-attr">y</span>: <span class="hljs-number">166</span> <span class="hljs-comment">// 等价于 top</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实际场景</strong><br>1、判断元素是否在可视区域内</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 方案 1：手动计算</span><br><span class="hljs-comment">// 先获取可视区域</span><br><span class="hljs-keyword">const</span> &#123; clientWidth, clientHeight &#125; = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span><br><br><span class="hljs-comment">// 再获取元素信息</span><br><span class="hljs-keyword">const</span> &#123; top, left, right, bottom &#125; = <span class="hljs-variable language_">document</span>.某个元素.<span class="hljs-title function_">getBoundingClientRect</span>()<br><br><span class="hljs-comment">// 计算逻辑 1：完全在其中，则需满足四个</span><br><span class="hljs-comment">// 1. 元素.left &gt;= 0</span><br><span class="hljs-comment">// 2. 元素.top &gt;= 0</span><br><span class="hljs-comment">// 3. 元素.right &lt;= 窗口宽度(clientWidth)</span><br><span class="hljs-comment">// 4. 元素.bottom &lt;= 窗口高度(clientHeight)</span><br><br><span class="hljs-comment">// 计算逻辑 2：产生交集，则需满足</span><br><span class="hljs-comment">// 1. 元素.left &gt;= 0</span><br><span class="hljs-comment">// 2. 元素.top &gt;= 0</span><br><span class="hljs-comment">// 3. 元素.left &lt;= 窗口宽度(clientWidth)</span><br><span class="hljs-comment">// 4. 元素.top &lt;= 窗口高度(clientHeight)</span><br><br><span class="hljs-comment">// 方案 2：调用 IntersectionObserver API</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8-1、性能优化</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/8-1%E3%80%81%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/8-1%E3%80%81%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h1><blockquote><p>1、业务优化；2、流程优化；3、技术优化；</p></blockquote><p>1、先通过业务指标，考量哪些模块值得被优化，就算要优化也要找有价值的业务 模块<br>2、流程优化：主要指开发流程、设计流程；<br>开发时：“代码设计”文档优化，多写注释，避免代码集中；<br>设计时：统一样式风格<br>3、技术优化：采用前端技术进行优化</p><h1 id="技术优化"><a href="#技术优化" class="headerlink" title="技术优化"></a>技术优化</h1><h2 id="1、加载优化"><a href="#1、加载优化" class="headerlink" title="1、加载优化"></a>1、加载优化</h2><blockquote><p>少请求；多缓存；预加载</p></blockquote><h3 id="优先使用-http2"><a href="#优先使用-http2" class="headerlink" title="优先使用 http2"></a>优先使用 http2</h3><p>可借用 http2 的“流”来提高加载速度</p><h3 id="加载时间优化"><a href="#加载时间优化" class="headerlink" title="加载时间优化"></a>加载时间优化</h3><p>压缩文件、使用 CDN 存储静态资源，减少资源下载时间</p><h3 id="减少-http-请求"><a href="#减少-http-请求" class="headerlink" title="减少 http 请求"></a>减少 http 请求</h3><p>减少 http 请求数量：【10 个连接请求 1 k】耗时是大于【1 个连接请求 10 k】</p><blockquote><p>因为发起 http 请求：需要先进行 DNS 寻址，然后 TCP 连接，组装请求报文并发送，等待服务器响应，关闭 TCP 连接<br>Http1 默认最大并发 6 个 TCP 连接</p></blockquote><p>合并文件、减少不必要的请求。</p><ul><li>采用打包工具合并 CSS、JS，需要根据实际文件大小来决定是否合并</li><li>使用 CSS Sprite，将背景图片合为一个文件</li><li>使用 Base64 图片来代替一些小图片的请求</li></ul><h3 id="减少-DNS-查询"><a href="#减少-DNS-查询" class="headerlink" title="减少 DNS 查询"></a>减少 DNS 查询</h3><p>浏览器发起请求后，首先要进行 DNS 查询，找到对应的 IP，才能接着干事。<br>DNS 查询一般耗费 20-120 毫秒。<br>可以通过<strong>减少不同的域名</strong>来减少 DNS 查询。<br>但因为<strong>减少了不同的域名</strong>，则也会减少资源下载的并发量，所以要合理控制域名数量。<br>比如：组件分在 2~4 个域名下</p><h3 id="使用多个域名"><a href="#使用多个域名" class="headerlink" title="使用多个域名"></a>使用多个域名</h3><p>因为浏览器对每个域名有最大并发连接数的限制</p><blockquote><p>Chrome 34&#x2F;32：6 个<br>IE 10：8 个<br>IE 11：13 个<br>Firefox 27&#x2F;26：6 个<br>Safari 7.0.1：6 个</p></blockquote><h3 id="文件放置"><a href="#文件放置" class="headerlink" title="文件放置"></a>文件放置</h3><p>CSS 放在 head 中：会更优先加载 CSS，页面就会有一种“逐步渲染的效果”<br>JS 放在 body 底部：因为 JS 会执行时阻塞渲染，所以放到底部，让渲染更友好，避免长时间白屏。</p><h3 id="懒加载、预加载"><a href="#懒加载、预加载" class="headerlink" title="懒加载、预加载"></a>懒加载、预加载</h3><p>把不需要的延后加载：适用于图片、模块<br>把需要的提前加载</p><h3 id="避免-301、302"><a href="#避免-301、302" class="headerlink" title="避免 301、302"></a>避免 301、302</h3><p>重定向会浪费资源，针对前端来说容易忽略末尾的<code>/</code>，比如：<a href="https://xxxx.xx.com/xx">https://xxxx.xx.com/xx</a> 是会重定向到 <a href="https://xxxx.xx.com/xx/">https://xxxx.xx.com/xx/</a> 的。<br>这种服务器也可以处理，但前端要知道~</p><h2 id="2、打包优化"><a href="#2、打包优化" class="headerlink" title="2、打包优化"></a>2、打包优化</h2><p>代码压缩：使用打包工具提供的压缩工具（如 terser、uglify）减小体积<br>代码分割：使用打包工具提供的 Chunks 功能，减少首屏加载数量<br>Tree-Shaking：开启该模式，可剔除无用代码<br>优化循环和递归：代码里面少用递归，它比较耗性能；可改用单循环，但少用嵌套循环</p><h2 id="3、渲染优化"><a href="#3、渲染优化" class="headerlink" title="3、渲染优化"></a>3、渲染优化</h2><h3 id="减少重绘和重排"><a href="#减少重绘和重排" class="headerlink" title="减少重绘和重排"></a>减少重绘和重排</h3><blockquote><p>可使用 CSS 合并、动画优化、减少 DOM 操作次数。重排必定触发重绘</p></blockquote><p>具体注意事项：<br>1、缓存已访问过的元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 不建议的写法：函数执行完毕后 EL 就会被释放，再次执行时就又会查询 DOM</span><br>function <span class="hljs-title function_">updateElement</span><span class="hljs-params">(textContent)</span> &#123;<br>  cosnt EL = document.getElementById(<span class="hljs-string">&#x27;myElement&#x27;</span>);<br>  <span class="hljs-comment">// 修改或读取缓存的元素属性</span><br>  EL.textContent = textContent<br>&#125;<br><br><br><span class="hljs-comment">// 避免多次查询 DOM：外面声明个变量，存储 DOM</span><br>let elementCache;<br>function <span class="hljs-title function_">updateElement</span><span class="hljs-params">(textContent)</span> &#123;<br>  <span class="hljs-keyword">if</span> (!elementCache) &#123;<br>    elementCache = document.getElementById(<span class="hljs-string">&#x27;myElement&#x27;</span>);<br>  &#125;<br>  <span class="hljs-comment">// 修改或读取缓存的元素属性</span><br>  elementCache.textContent = textContent<br>&#125;<br></code></pre></td></tr></table></figure><p>2、使用 DocumentFragment 暂存 DOM，编辑好后再统一插入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 创建一个文档片段</span><br><span class="hljs-type">const</span> fragment = document.createDocumentFragment();<br><br><span class="hljs-comment">// 在文档片段中构建新的DOM结构</span><br><span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>  <span class="hljs-type">const</span> newElement = document.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>  newElement.textContent = `Item $&#123;i&#125;`;<br>  fragment.appendChild(newElement);<br>&#125;<br><br><span class="hljs-comment">// 将整个文档片段一次性添加到DOM树中，只触发一次重绘和重排</span><br>document.getElementById(<span class="hljs-string">&#x27;container&#x27;</span>).appendChild(fragment);<br></code></pre></td></tr></table></figure><p>3、使用 className 来操作元素的样式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 定义类名样式在CSS文件中</span><br>.active &#123;<br>  color: red;<br>&#125;<br><br><span class="hljs-comment">// JavaScript 中切换类名而非直接修改style属性</span><br>function <span class="hljs-title function_">toggleActive</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">const</span> element = document.getElementById(<span class="hljs-string">&#x27;targetElement&#x27;</span>);<br>  element.classList.toggle(<span class="hljs-string">&#x27;active&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>4、避免使用 JS 操作布局： 减少动态设置与布局相关的样式（如 offsetWidth, offsetHeight, clientWidth 等），因为获取这些值时可能触发重排。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 避免这样做，因为它会触发重排</span><br>function <span class="hljs-title function_">setWidthBasedOnOtherElement</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">const</span> source = document.getElementById(<span class="hljs-string">&#x27;source&#x27;</span>);<br>  <span class="hljs-type">const</span> target = document.getElementById(<span class="hljs-string">&#x27;target&#x27;</span>);<br>  target.style.width = source.offsetWidth + <span class="hljs-string">&#x27;px&#x27;</span>; <span class="hljs-comment">// 这将导致浏览器重排</span><br>&#125;<br><br><span class="hljs-comment">// 更好的做法是提前在 CSS 中通过 flex 布局或其他方式关联两个元素的宽度</span><br></code></pre></td></tr></table></figure><p>5、框架内合理使用 v-if、v-show</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">v-<span class="hljs-keyword">if</span>：会触发重排<br>v-show：只会触发重绘<br></code></pre></td></tr></table></figure><p>6、使用 RAF：requestAnimationFrame（按帧执行） 来优化动画效果<br>若我们采用定时器来实现复杂动画时，它不会考虑到浏览器的渲染时机，所以各干各的，然后频繁重排与重绘<br>但使用了 RAF 后，它会跟浏览器渲染打好配合，在每次重绘前调一下，跟着渲染节奏执行，这样性能与流畅更好</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">function <span class="hljs-title function_">moveAnimate</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 动画效果</span><br>    <span class="hljs-comment">// 获取元素，计算大小，改变位置等等</span><br><br>    requestAnimationFrame(moveAnimate) <span class="hljs-comment">// 请求下一帧动画</span><br>&#125;<br><br>requestAnimationFrame(moveAnimate) <span class="hljs-comment">// 启动动画</span><br></code></pre></td></tr></table></figure><h3 id="前端路由懒加载"><a href="#前端路由懒加载" class="headerlink" title="前端路由懒加载"></a>前端路由懒加载</h3><p>使用异步加载写法，等需要用时才会触发对应页面的加载</p><h3 id="使用-WebWorkers-处理密集或耗时的任务"><a href="#使用-WebWorkers-处理密集或耗时的任务" class="headerlink" title="使用 WebWorkers 处理密集或耗时的任务"></a>使用 WebWorkers 处理密集或耗时的任务</h3><blockquote><p>简单理解为 JS 的限制性分身们，互相独立并可通信，但不可访问 DOM。<br>可以开多个 WebWorkers，实现 JS 的多线程</p></blockquote><p>场景：数据处理、图像处理、大量计算、网络请求等<br>使用 postmessage() 进行通信</p><blockquote><p>ServiceWorkers：一种特殊的 WebWorkers，专注于网络代理与离线缓存</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-2、nodejs 之 Koa2 + MongoDB 简单开发</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/7-2%E3%80%81nodejs%20%E4%B9%8B%20Koa2%20+%20MongoDB%20%E7%AE%80%E5%8D%95%E5%BC%80%E5%8F%91/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/7-2%E3%80%81nodejs%20%E4%B9%8B%20Koa2%20+%20MongoDB%20%E7%AE%80%E5%8D%95%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>开发一个 Web Server 需要考虑的点有：<br>1、接受请求，解析参数，解析方法类型<br>2、处理静态资源：缓存、存储等<br>3、连接、操作数据库<br>4、登录处理：session、cookie、token 等<br>5、api 的分层、参数过滤<br>6、拦截器的开发<br>7、mq(消息队列)处理、分布式架构<br>8、websocket、webrtc(音视频通话或 P2P 通信) 实时性<br>9、并发处理、事务处理(nodejs 弱项)<br>10、SSR 渲染前端页面</p><blockquote><p>事务处理：白话来说就是一大堆有关联的操作的集合，若里面的任一操作有问题，则该事务就失败了，其中做了操作的还需要进行回滚。而 nodejs 本身对这块的实现很难，它是借助数据库来支持事务处理。</p></blockquote><h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><p>官网文档：<a href="https://www.expressjs.com.cn/starter/installing.html">Express 中文文档</a><br>核心是：异步串行流程控制<br><img src="/img/images/2024/1710339385779-5138f40f-e4fe-43af-80ff-85c73ceda11b.jpeg"><br>伪代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> tasks = [<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">A</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// .....</span><br>    <span class="hljs-title function_">next</span>()<br>  &#125;,<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">B</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// .....</span><br>    <span class="hljs-title function_">next</span>()<br>  &#125;,<br><br>  <span class="hljs-comment">// .....</span><br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">X</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// .....</span><br>    <span class="hljs-title function_">next</span>()<br>  &#125;<br>]<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">err, result</span>) &#123;<br>  <span class="hljs-keyword">if</span>(err)  <span class="hljs-keyword">throw</span> err<br><br>  <span class="hljs-keyword">var</span> currentTask = tasks.<span class="hljs-title function_">shift</span>()<br>  <span class="hljs-keyword">if</span>(currentTask) <span class="hljs-title function_">currentTask</span>(result)<br><br>  <span class="hljs-title function_">next</span>() <span class="hljs-comment">// 串行调用</span><br>&#125;<br><br><span class="hljs-comment">// 首次调用</span><br><span class="hljs-title function_">next</span>()<br></code></pre></td></tr></table></figure><h1 id="Koa2-使用"><a href="#Koa2-使用" class="headerlink" title="Koa2 使用"></a>Koa2 使用</h1><p>官网：<a href="https://www.koajs.net/">Koa | Koa 中文文档 | Koa 中文网</a></p><blockquote><p>Koa 是一个很简洁的库，所以很多功能需要自己去找，在这里可以找：<a href="https://github.com/koajs/koa/wiki">Koa 中间件</a></p></blockquote><h2 id="初始准备"><a href="#初始准备" class="headerlink" title="初始准备"></a>初始准备</h2><ol><li>新建个文件夹，然后初始化项目</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir koa2-actual-combat &amp;&amp; cd koa2-actual-combat &amp;&amp; pnpm init<br></code></pre></td></tr></table></figure><ol start="2"><li>安装 koa 依赖</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add koa<br></code></pre></td></tr></table></figure><ol start="3"><li>新建 src 文件夹与入口文件 &amp;&amp; 安装 ip 依赖(可选)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir src &amp;&amp; touch src/server.<span class="hljs-property">js</span> &amp;&amp; pnpm add ip<br></code></pre></td></tr></table></figure><ol start="4"><li><code>src/server.js</code>编码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa&quot;</span>);<br><span class="hljs-keyword">const</span> ip = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;ip&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br><br><span class="hljs-comment">// 响应 - 中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">ctx</span>) =&gt;</span> &#123;<br>  ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&quot;Hello Koa&quot;</span>;<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>    <span class="hljs-string">`server is running: http://<span class="hljs-subst">$&#123;ip.address()&#125;</span>:3000 or http://localhost:3000`</span><br>  );<br>&#125;);<br><br></code></pre></td></tr></table></figure><ol start="6"><li>命令行运行<code>nodemon src/server.js</code>，然后浏览器打开 <a href="http://localhost:3000/">http://localhost:3000</a> 看效果</li></ol><p><img src="/img/images/2024/1710404142375-0215bbe2-1bd2-4141-ab0d-b5d85e08403c.png"><br><img src="/img/images/2024/1710403298558-fe3c8a6f-875b-4181-9e44-76631ca36a4f.png"></p><h2 id="简单开发"><a href="#简单开发" class="headerlink" title="简单开发"></a>简单开发</h2><blockquote><p>完整线上项目代码：<a href="https://github.com/MrHzq/koa2-actual-combat">https://github.com/MrHzq/koa2-actual-combat</a></p></blockquote><h3 id="body-参数处理"><a href="#body-参数处理" class="headerlink" title="body 参数处理"></a>body 参数处理</h3><ol start="7"><li>安装 <a href="https://github.com/koajs/body-parser">koa-bodyparser</a>，用于将 string 类型的 body 参数转为 json 格式</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add @koa/bodyparser<br></code></pre></td></tr></table></figure><ol start="8"><li>使用 @koa&#x2F;bodyparser</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa&quot;</span>);<br><span class="hljs-keyword">const</span> ip = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;ip&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; bodyParser &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@koa/bodyparser&quot;</span>); <span class="hljs-comment">// ++++++</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br><br><span class="hljs-comment">// koaBodyParser: 将 string 类型的 body 参数转为 json 格式 - 中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">bodyParser</span>()); <span class="hljs-comment">// ++++++</span><br><br><span class="hljs-comment">// 响应 - 中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">ctx</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// ++++++ body 是放在 ctx.request.body 内的</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ ctx.request.body ] &gt;&quot;</span>, ctx.<span class="hljs-property">request</span>.<span class="hljs-property">body</span>);<br>  ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&quot;Hello Koa&quot;</span>;<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>    <span class="hljs-string">`server is running: http://<span class="hljs-subst">$&#123;ip.address()&#125;</span>:3000 or http://localhost:3000`</span><br>  );<br>&#125;);<br><br></code></pre></td></tr></table></figure><h3 id="路由处理"><a href="#路由处理" class="headerlink" title="路由处理"></a>路由处理</h3><ol><li>安装依赖<code>[@koa/router](https://github.com/koajs/router)</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add @koa/router<br></code></pre></td></tr></table></figure><ol start="2"><li>使用路由</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa&quot;</span>);<br><span class="hljs-keyword">const</span> ip = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;ip&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; bodyParser &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@koa/bodyparser&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Router</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@koa/router&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123; <span class="hljs-attr">prefix</span>: <span class="hljs-string">&quot;/api&quot;</span> &#125;);<br><br><span class="hljs-comment">// koaBodyParser: 将 string 类型的 body 参数转为 json 格式 - 中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">bodyParser</span>());<br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">ctx</span>) =&gt;</span> &#123;<br>  ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&quot;helloworld&quot;</span>;<br>&#125;);<br><br>app.<span class="hljs-title function_">use</span>(router.<span class="hljs-title function_">routes</span>()).<span class="hljs-title function_">use</span>(router.<span class="hljs-title function_">allowedMethods</span>());<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>    <span class="hljs-string">`server is running: http://<span class="hljs-subst">$&#123;ip.address()&#125;</span>:3000 or http://localhost:3000`</span><br>  );<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="3"><li>路由封装</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir<br></code></pre></td></tr></table></figure><h3 id="连接-Mongodb"><a href="#连接-Mongodb" class="headerlink" title="连接 Mongodb"></a>连接 Mongodb</h3><ol><li>安装<code>mongoose</code>依赖</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add mongoose<br></code></pre></td></tr></table></figure><ol start="2"><li>创建文件，写连接代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch db.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 写如下代码：</span><br><span class="hljs-comment">// 1. 引入 mongodb 驱动包</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Connect</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// MongoDB 服务器的连接地址，其中可包含用户名、密码、域名、端口、数据库名等信息</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DB_URL</span> = <span class="hljs-string">&quot;mongodb://127.0.0.1:27017/my-test&quot;</span>;<br><br>  <span class="hljs-comment">// 2. 建立连接</span><br>  mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-variable constant_">DB_URL</span>);<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 连接成功 connected 数据库连接成功</span><br><span class="hljs-comment">   */</span><br>  mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;connected&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Mongoose connection open to &quot;</span> + <span class="hljs-variable constant_">DB_URL</span>);<br>  &#125;);<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 连接异常 error 数据库连接错误</span><br><span class="hljs-comment">   */</span><br>  mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Mongoose connection error: &quot;</span> + err);<br>  &#125;);<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 连接断开 disconnected 连接异常断开</span><br><span class="hljs-comment">   */</span><br>  mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;disconnected&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Mongoose connection disconnected&quot;</span>);<br>  &#125;);<br>&#125;;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Connect</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>创建数据文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir models &amp;&amp; touch models/other.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ol start="4"><li><code>models/other.js</code>写入代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义一个模式(相当于传统意义的表结构)</span><br><span class="hljs-comment"> * 每个模式映射mongoDB的一个集合，</span><br><span class="hljs-comment"> * 它定义（只是定义，不是实现）这个集合里面文档的结构，就是定义这个文档有什么字段，字段类型是什么，字段默认值是什么等。</span><br><span class="hljs-comment"> * 除了定义结构外，还定义文档的实例方法，静态模型方法，复合索引，中间件等</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">mongoose</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">OtherSchema</span> = <span class="hljs-keyword">new</span> mongoose.<span class="hljs-title class_">Schema</span>(<br>  <span class="hljs-comment">//数据为表头数据列</span><br>  &#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">password</span>: <span class="hljs-title class_">String</span>,<br>  &#125;<br>);<br><br><span class="hljs-keyword">const</span> collationName = <span class="hljs-string">&quot;Other&quot;</span>; <span class="hljs-comment">// 集合名，相当于表名，一定要大写</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Other</span> = mongoose.<span class="hljs-title function_">model</span>(collationName, <span class="hljs-title class_">OtherSchema</span>); <span class="hljs-comment">// 当没有该集合时，自动创建该集合</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Other</span><br></code></pre></td></tr></table></figure><p>5、<code>server.js</code>引入数据库相关</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa&quot;</span>);<br><span class="hljs-keyword">const</span> ip = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;ip&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; bodyParser &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@koa/bodyparser&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Router</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@koa/router&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MongooseConnect</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./db&quot;</span>); <span class="hljs-comment">// ++++++</span><br><span class="hljs-title class_">MongooseConnect</span>(); <span class="hljs-comment">// ++++++</span><br><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Other</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./models/other&quot;</span>); <span class="hljs-comment">// ++++++</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123; <span class="hljs-attr">prefix</span>: <span class="hljs-string">&quot;/api&quot;</span> &#125;);<br><br><span class="hljs-comment">// koaBodyParser: 将 string 类型的 body 参数转为 json 格式 - 中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">bodyParser</span>());<br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">ctx</span>) =&gt;</span> &#123;<br>  ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&quot;helloworld&quot;</span>;<br>&#125;);<br><br><span class="hljs-comment">// ++++++</span><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/other/create&quot;</span>, <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; username, password &#125; = ctx.<span class="hljs-property">request</span>.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Other</span>.<span class="hljs-title function_">create</span>(&#123; username, password &#125;);<br>  ctx.<span class="hljs-property">body</span> = &#123;<br>    <span class="hljs-attr">status</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>    <span class="hljs-attr">data</span>: res,<br>  &#125;;<br>&#125;);<br><br><span class="hljs-comment">// ++++++</span><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/other/list&quot;</span>, <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Other</span>.<span class="hljs-title function_">findOne</span>();<br>  ctx.<span class="hljs-property">body</span> = &#123;<br>    <span class="hljs-attr">status</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>    <span class="hljs-attr">data</span>: res || [<span class="hljs-string">&quot;default&quot;</span>],<br>  &#125;;<br>&#125;);<br><br>app.<span class="hljs-title function_">use</span>(router.<span class="hljs-title function_">routes</span>()).<span class="hljs-title function_">use</span>(router.<span class="hljs-title function_">allowedMethods</span>());<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>    <span class="hljs-string">`server is running: http://<span class="hljs-subst">$&#123;ip.address()&#125;</span>:3000 or http://localhost:3000`</span><br>  );<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="5"><li>浏览器打开：<a href="http://localhost:3000/api/other/list">http://localhost:3000/api/other/list</a></li></ol><p><img src="/img/images/2024/1710418720304-50a38228-8ce2-4e0a-8c50-dde23540ca1c.png"></p><ol start="6"><li>调用接口，插入数据</li></ol><p><img src="/img/images/2024/1710418683823-8c1de85f-f76d-447b-92ad-82076efe35e7.png"></p><h1 id="mac-M1-电脑安装-mongodb"><a href="#mac-M1-电脑安装-mongodb" class="headerlink" title="mac M1 电脑安装 mongodb"></a>mac M1 电脑安装 mongodb</h1><blockquote><p>mongod 是用来连接到 mongodb 数据库服务器的，即服务器端。<br>mongo 是用来启动 MongoDB shell 的，是 mongodb 的命令行客户端</p></blockquote><h2 id="brew-安装流程（首推方式）"><a href="#brew-安装流程（首推方式）" class="headerlink" title="brew 安装流程（首推方式）"></a>brew 安装流程（首推方式）</h2><p>（可选）1、查看 xcode-select 版本，没有的话就需要安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xcode-select -v<br><br>xcode-select --install <span class="hljs-comment">// 安装命令</span><br></code></pre></td></tr></table></figure><p>（可选）2、查看 brew 版本，没有的话就需要安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">brew -v<br><br>/bin/bash -c <span class="hljs-string">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span> <span class="hljs-comment">// 安装命令</span><br></code></pre></td></tr></table></figure><p>3、安装为 MongoDB 定制的 Homebrew tap</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> brew tap mongodb/brew<br><br><span class="hljs-comment">// 安装完后，查看情况：</span><br>brew tap<br><br><span class="hljs-comment">// caskroom/cask</span><br><span class="hljs-comment">// homebrew/cask</span><br><span class="hljs-comment">// homebrew/core</span><br><span class="hljs-comment">// homebrew/services</span><br><span class="hljs-comment">// mongodb/brew</span><br></code></pre></td></tr></table></figure><p>4、更新 brew</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">brew update<br></code></pre></td></tr></table></figure><p>5、安装 MongoDB 5.0 社区版</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">brew install mongodb-community@<span class="hljs-number">5.0</span><br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1710383524017-73ae5914-6292-4549-8982-200cd2a4040a.png"><br><code>/opt/homebrew</code>下：<code>/var/mongodb</code>内存放了相关的数据；<code>/var/log/mongodb</code>内存放了相关的日志<br>运行<code>echo &#39;export PATH=&quot;/opt/homebrew/opt/mongodb-community@5.0/bin:$PATH&quot;&#39; &gt;&gt; ~/.zshrc</code>将其注入环境变量，然后再<code>source ~/.zshrc</code>一下，就可以使用<code>mongo、mongod</code>命令了<br>6、启动 mongodb</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">brew services start mongodb-community@<span class="hljs-number">5.0</span><br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1710383615891-7c180c6f-14c8-4865-9a8a-5a93ccc6e43e.png"><br>7、查看启动情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">brew services list<br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1710383643357-25325188-733f-4c55-a6dd-af15756d6d0f.png"><br>并且浏览器可打开：<a href="http://127.0.0.1:27017/">http://127.0.0.1:27017</a> 查看<br><img src="/img/images/2024/1710397876770-9f07edd1-8bd9-4ebc-837e-a80ce982da80.png"><br>8、停止 mongodb</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">brew services stop mongodb-community@<span class="hljs-number">5.0</span><br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1710383724208-eb29cae4-4916-4148-a3a6-a4e00ce5d3ba.png"></p><h2 id="压缩包安装流程（次推方式）"><a href="#压缩包安装流程（次推方式）" class="headerlink" title="压缩包安装流程（次推方式）"></a>压缩包安装流程（次推方式）</h2><blockquote><p><strong>流程比较麻烦，brew 安装不成功时可以用这种方式</strong></p></blockquote><p>1、去官网下载压缩包：<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a><br><img src="/img/images/2024/1710377473943-6efe5c69-9d4f-469d-bf0d-426e127f5517.png"><br>2、解压下载的压缩包，解压后如下<br><img src="/img/images/2024/1710377527823-9fd8fc31-8c7b-43a2-aa90-fb50113ab984.png"><br>3、进入<code>/usr/local</code>，打开在“访达”，快捷键：<code>cmd+shift+g</code>，输入<code>/usr/local</code><br><img src="/img/images/2024/1710377700572-b1e5e087-90a1-4d47-ad14-28d685ae0725.png"><br>4、新建文件夹<code>mongodb</code>，然后将解压后里面的所有文件拷贝过来<br><img src="/img/images/2024/1710377727780-e8624112-c258-49f7-9d7e-01425637f2b7.png"><br>5、配置环境变量，打开你的<code>.bash_profile or .zshrc</code>等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">open -e ~/.<span class="hljs-property">bash_profile</span><br><span class="hljs-comment">// or</span><br>open -e ~/.<span class="hljs-property">zshrc</span><br></code></pre></td></tr></table></figure><p>5.1、最末尾输入下面配置，我的是<code>.zshrc</code>，然后保存并关闭</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-variable constant_">PATH</span>=<span class="hljs-string">&quot;$PATH:/usr/local/mongodb/bin&quot;</span><br></code></pre></td></tr></table></figure><p>6、然后任意打开终端，输入<code>source ~/.bash_profile</code>or<code>source ~/.zshrc</code><br>7、终端内继续输入<code>mongod -version</code>，正常情况可以看到有打印<br><img src="/img/images/2024/1710377926930-a8ffd968-9c1e-470c-b4b6-c81893ceabe9.png"><br>8、若出现异常情况，比如提示<code>xxx不安全</code>，则“访达”进入<code>/usr/local/mongodb/bin</code>文件夹，找到<code>mongod</code>，然后右键 -&gt; 打开，之后一路都点<code>ok</code><br><img src="/img/images/2024/1710378121064-446abe55-9840-4691-9005-261a0d88901d.png"><br>9、第 8 步完成后，再次进行第 7 步<br>10、找个目录，新建存放数据与日志的文件夹<br><img src="/img/images/2024/1710378280765-c3c00ea2-c6be-402d-b16a-e885fa771895.png"><br>11、更改文件读写权限，打开任意终端，直接输入下面的命令，需要输入你的电脑密码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">sudo chown -R $(whoami) /<span class="hljs-title class_">Users</span>/hzq/sqldata/mongodb/data<br>sudo chown -R $(whoami) /<span class="hljs-title class_">Users</span>/hzq/sqldata/mongodb/log<br></code></pre></td></tr></table></figure><p>12、启动 mongodb，打开任意终端，输入下面的命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mongod --dbpath /<span class="hljs-title class_">Users</span>/hzq/sqldata/mongodb/data --logpath /<span class="hljs-title class_">Users</span>/hzq/sqldata/mongodb/log/mongo.<span class="hljs-property">log</span><br><br><span class="hljs-comment">// --dbpath 设置数据存放目录</span><br><span class="hljs-comment">// --logpath 设置日志存放目录</span><br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1710378728168-650a37dd-7669-4e01-973a-033099f495fc.png"><br>13、查看启动情况：打开任意终端，输入下面的命令，看到启动的进程 ID 是 34030</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ps aux | grep -v grep | grep mongod<br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1710378967002-f1f6084c-2846-46e8-9b1c-d75280e6a4d7.png"><br>14、查看启动情况：浏览器打开 <a href="http://127.0.0.1:27017/">http://127.0.0.1:27017</a>，看到这个说明启动成功<br><img src="/img/images/2024/1710397882578-6dbe25c3-48a3-4346-9cce-704200b79dcd.png"><br>15、停止服务，直接终端内<code>conrtol + c</code>可终止<br>16、若无法终止，可终端输入下面的命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 简单高效</span><br>kill mongod_PID <span class="hljs-comment">// 我的是 kill 34030</span><br></code></pre></td></tr></table></figure><h2 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h2><h3 id="官方工具（推荐安装）"><a href="#官方工具（推荐安装）" class="headerlink" title="官方工具（推荐安装）"></a>官方工具（推荐安装）</h3><p><strong>不支持 SQL 查询</strong><br>1、下载官方工具：<a href="https://www.mongodb.com/try/download/compass">官网下载地址</a>，然后安装、打开，进入主页面<br>2、连接（先命令行启动 mongodb 哦）<br><img src="/img/images/2024/1710398039512-f4e40321-c34a-4809-b88c-50d708d45800.png"><br><img src="/img/images/2024/1710382437504-9b3b0954-266e-4b37-ad9e-0bf0682794be.png"><br>3、连接后长这个样子<br><img src="/img/images/2024/1710399252438-bb1749c4-9fa5-448e-9808-97d1d9e0de02.png"></p><h3 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h3><h4 id="NoSQLBooster（推荐安装）"><a href="#NoSQLBooster（推荐安装）" class="headerlink" title="NoSQLBooster（推荐安装）"></a>NoSQLBooster（推荐安装）</h4><p>支持 SQL 查询<br>1、NoSQLBooster 下载地址：<a href="https://nosqlbooster.com/downloads">官网下载地址</a>，然后安装、打开，进入主页面<br>2、连接<br><img src="/img/images/2024/1710400621986-51cc8155-4bce-4ef4-a538-ec74b835c148.png"><br><img src="/img/images/2024/1710400640794-407ed8f0-87e1-4252-b1de-6298c9b70e12.png"><br><img src="/img/images/2024/1710400662922-ac9a8bb5-d863-4b7a-94a9-bf13c76e8e19.png"><br><img src="/img/images/2024/1710400883394-0a638d6b-9622-4b55-ad35-8ba0b158078a.png"></p><h4 id="MongoDB-for-VS-Code"><a href="#MongoDB-for-VS-Code" class="headerlink" title="MongoDB for VS Code"></a>MongoDB for VS Code</h4><p>VScode 插件<br>1、安装插件，创建连接，效果如下：<br><img src="/img/images/2024/1710401550131-c1037525-0cc7-4882-a88a-8eef66b9898d.png"></p><h3 id="mongodb-增删改查（TODO）"><a href="#mongodb-增删改查（TODO）" class="headerlink" title="mongodb 增删改查（TODO）"></a>mongodb 增删改查（TODO）</h3>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-1、nodejs 基础</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/7-1%E3%80%81nodejs%20%E5%9F%BA%E7%A1%80/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/7-1%E3%80%81nodejs%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>服务器主要处理的是 I&#x2F;O(输入&#x2F;输出) 请求</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="基础模块"><a href="#基础模块" class="headerlink" title="基础模块"></a>基础模块</h2><p>1、fs：File System，操作文件的<strong>（常用）</strong><br>2、path：操作路径的（不常用）<br>3、http：创建 http 服务器的，处理客户端请求<strong>（常用）</strong><br>4、net：底层网络通信模块（不常用）<br>5、process：进程管理<strong>（常用）</strong></p><p><strong>V8 核心</strong>：事件循环、内存原理</p><blockquote><p>Node 版本管理工具：<a href="https://github.com/nvm-sh/nvm">nvm</a>（必装的）</p></blockquote><h2 id="使用-http-起一个简单的-server"><a href="#使用-http-起一个简单的-server" class="headerlink" title="使用 http 起一个简单的 server"></a>使用 http 起一个简单的 server</h2><ol><li>创建文件夹</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir base &amp;&amp; cd base &amp;&amp; touch index.<span class="hljs-property">js</span> &amp;&amp; pnpm init<br></code></pre></td></tr></table></figure><ol start="2"><li>写入代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入 http 模块</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><br><span class="hljs-comment">// 创建一个 HTTP 服务器</span><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, resp</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 从请求对象中获取请求方法和请求 URL</span><br>  <span class="hljs-keyword">const</span> &#123; method, url &#125; = req;<br><br>  <span class="hljs-comment">// 设置响应头的 Content-Type 为 &quot;text/html; charset=utf-8&quot;</span><br>  resp.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>);<br>  <span class="hljs-comment">// 设置响应状态码为 200</span><br>  resp.<span class="hljs-property">statusCode</span> = <span class="hljs-number">200</span>;<br>  <span class="hljs-comment">// 发送响应内容，并结束响应</span><br>  resp.<span class="hljs-title function_">end</span>(<br>    <span class="hljs-string">`&lt;h1&gt;hello，我是使用 http 创建的服务器，你是一个：<span class="hljs-subst">$&#123;method&#125;</span> | <span class="hljs-subst">$&#123;url&#125;</span>&lt;/h1&gt;`</span><br>  );<br>&#125;);<br><br><span class="hljs-comment">// 从环境变量中获取端口号，如果没有则使用默认值 3001</span><br><span class="hljs-keyword">const</span> port = process.<span class="hljs-property">env</span>.<span class="hljs-property">PROT</span> || <span class="hljs-number">3001</span>;<br><br><span class="hljs-comment">// 启动服务器并监听指定端口</span><br>server.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 打印服务器运行信息</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`HTTP Server running on http://localhost:<span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="3"><li>运行<code>node index.js</code>or<code>nodemon index.js</code></li></ol><p><img src="/img/images/2024/1710316643942-26197944-9f27-4c5c-b943-ab327529d855.png"><br><code>nodemon</code>：一个 Node.js 开发工具，用于监视项目文件的变化，并在检测到变化时自动重启 Node.js 应用。<br>安装<code>npm install -g nodemon</code></p><h1 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h1><p>字符集：它定义了一组符号和编码规则，用于表示文本中的字符。</p><h2 id="写一个读取文件的-js"><a href="#写一个读取文件的-js" class="headerlink" title="写一个读取文件的 js"></a>写一个读取文件的 js</h2><ol><li>创建文件：fs.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch fs.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ol start="2"><li>写入代码：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFile</span>(<span class="hljs-params">filePath</span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> fileContent = fs.<span class="hljs-title function_">readFileSync</span>(path.<span class="hljs-title function_">resolve</span>(__dirname, filePath));<br>    <span class="hljs-keyword">const</span> fileContentUtf8 = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(fileContent).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&quot;utf8&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ fileContent ] &gt;&quot;</span>, fileContent);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ fileContentUtf8 ] &gt;&quot;</span>, fileContentUtf8);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ getFile error ] &gt;&quot;</span>, error);<br>  &#125;<br>&#125;<br><span class="hljs-title function_">getFile</span>(<span class="hljs-string">&quot;./package.json&quot;</span>);<br><br></code></pre></td></tr></table></figure><ol start="3"><li>运行<code>node fs.js</code></li></ol><p><img src="/img/images/2024/1710317630133-df886f4d-8568-4b85-bbfb-f5ad9e897b3e.png"></p><p><code>readFileSync</code>默认读取到的文件会以<code>Buffer</code>展示<br><code>Buffer</code>是 nodejs 中处理二进制数据的类，可将其转为不同字符编码(utf8&#x2F;base64&#x2F;ascii 等)的数据。<code>Buffer.from(&#39;原内容&#39;).toString(&#39;编码&#39;)</code></p><p><img src="/img/images/2024/1710318521732-3a6bbcb3-7511-4269-afc4-4dc3cf52dedb.png"></p><h2 id="Buffer-类"><a href="#Buffer-类" class="headerlink" title="Buffer 类"></a>Buffer 类</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Buffer</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;buffer&#x27;</span>)<br><br><span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">alloc</span>(size[, fill[, encoding]]) <span class="hljs-comment">// 指定容量创建空 Buffer（已初始化的）</span><br><span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">allocUnsafe</span>(size[, fill, ]) <span class="hljs-comment">// 指定容量创建空 Buffer（未初始化的），所以不安全</span><br><br><span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(str[, encoding]) <span class="hljs-comment">// 从已有数据创建 Buffer</span><br><br></code></pre></td></tr></table></figure><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p>base64 组成：小写 a-z，大写 A-Z，数字 0-9，符号 “+”“&#x2F;”共 64 个字符（额外还有个“&#x3D;”符号）<br>将字符串(图片等)转为二进制序列(010101…)，然后每 6 个为一组进行分组，不足 6 个的低位补 0。分完组后，每 6 个组成新的字节，高位补<code>00</code>，构成新的二进制序列，然后转为十进制，最后在 base64 索引表中找该十进制对应的字符<br><img src="/img/images/2024/1710320364353-c753af96-1a66-4706-a936-44d2d08b41b8.png"></p><blockquote><ol><li>一个字节 &#x3D; 8 比特（bit），是由 8 个二进制位组成的，其范围是从二进制的 00000000 到 11111111，转换为十进制就是 0 到 255。</li><li>ASCII 字符集中的英文字符及其他一些符号可以用一个字节表示，因为 ASCII 字符集总共只有 128 个字符（0 到 127），小于一个字节所能表示的最大范围。</li><li>对于中文字符，以及其他许多非 ASCII 字符，由于字符数量众多，通常需要使用两个字节来表示。</li></ol></blockquote><h1 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h1><p>提供当前 nodejs 进程相关的信息<br><code>process.env</code>当前用户环境信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-attr">USER</span>: <span class="hljs-string">&#x27;hzq&#x27;</span>,<br>    <span class="hljs-attr">PATH</span>: <span class="hljs-string">&#x27;/Users/hzq/xxxx&#x27;</span>,<br>    <span class="hljs-attr">PWD</span>: <span class="hljs-string">&#x27;/Users/hzq/code/mianshi/7-1 nodejs 基础/nodejs-base&#x27;</span>,<br>    <span class="hljs-attr">HOME</span>: <span class="hljs-string">&#x27;/Users/hzq&#x27;</span>,<br>    <span class="hljs-attr">_</span>: <span class="hljs-string">&#x27;/Users/hzq/.nvm/versions/node/v16.14.0/bin/node&#x27;</span><br>    <span class="hljs-comment">// .....</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>process.cwd()</code>返回当前 nodejs 进程的工作目录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">process.<span class="hljs-title function_">cwd</span>() <span class="hljs-comment">// /Users/hzq/code/7-1 nodejs 基础/nodejs-base</span><br></code></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><p>在 Node.js 中，<code>crypto</code> 模块是内置的加密和解密库，提供了丰富的密码学相关的功能，包括哈希（Hashing）、消息认证码（MACs）、加密（Encryption）、解密（Decryption）、签名（Signing）和验证（Verification）等。以下是 <code>crypto</code> 模块中一些常见用法：</p><ol><li><strong>哈希（Hashes）</strong>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><span class="hljs-keyword">const</span> hash = crypto.<span class="hljs-title function_">createHash</span>(<span class="hljs-string">&#x27;sha256&#x27;</span>);<br>hash.<span class="hljs-title function_">update</span>(<span class="hljs-string">&#x27;some data to hash&#x27;</span>);<br><span class="hljs-keyword">const</span> digest = hash.<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;hex&#x27;</span>); <span class="hljs-comment">// 得到哈希摘要</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>HMAC（哈希消息认证码）</strong>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> hmac = crypto.<span class="hljs-title function_">createHmac</span>(<span class="hljs-string">&#x27;sha256&#x27;</span>, <span class="hljs-string">&#x27;secret key&#x27;</span>);<br>hmac.<span class="hljs-title function_">update</span>(<span class="hljs-string">&#x27;message&#x27;</span>);<br><span class="hljs-keyword">const</span> hmacDigest = hmac.<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br></code></pre></td></tr></table></figure><ol start="3"><li><strong>对称加密（Symmetric Encryption）</strong>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> algorithm = <span class="hljs-string">&#x27;aes-256-cbc&#x27;</span>;<br><span class="hljs-keyword">const</span> key = crypto.<span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">32</span>); <span class="hljs-comment">// 生成一个密钥</span><br><span class="hljs-keyword">const</span> iv = crypto.<span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>); <span class="hljs-comment">// 生成一个初始化向量（IV）</span><br><br><span class="hljs-comment">// 加密</span><br><span class="hljs-keyword">const</span> cipher = crypto.<span class="hljs-title function_">createCipheriv</span>(algorithm, key, iv);<br><span class="hljs-keyword">let</span> encrypted = cipher.<span class="hljs-title function_">update</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-string">&#x27;hex&#x27;</span>);<br>encrypted += cipher.<span class="hljs-title function_">final</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br><br><span class="hljs-comment">// 解密</span><br><span class="hljs-keyword">const</span> decipher = crypto.<span class="hljs-title function_">createDecipheriv</span>(algorithm, key, iv);<br><span class="hljs-keyword">let</span> decrypted = decipher.<span class="hljs-title function_">update</span>(encrypted, <span class="hljs-string">&#x27;hex&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>decrypted += decipher.<span class="hljs-title function_">final</span>(<span class="hljs-string">&#x27;utf8&#x27;</span>);<br></code></pre></td></tr></table></figure><ol start="4"><li><strong>非对称加密（Asymmetric Encryption）</strong>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; generateKeyPairSync &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; publicKey, privateKey &#125; = <span class="hljs-title function_">generateKeyPairSync</span>(<span class="hljs-string">&#x27;rsa&#x27;</span>, &#123;<br>  <span class="hljs-attr">modulusLength</span>: <span class="hljs-number">2048</span>,<br>&#125;);<br><br><span class="hljs-comment">// 加密</span><br><span class="hljs-keyword">const</span> encrypted = crypto.<span class="hljs-title function_">publicEncrypt</span>(publicKey, <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;message&#x27;</span>));<br><br><span class="hljs-comment">// 解密</span><br><span class="hljs-keyword">const</span> decrypted = crypto.<span class="hljs-title function_">privateDecrypt</span>(privateKey, encrypted);<br></code></pre></td></tr></table></figure><ol start="5"><li><strong>签名（Signatures）</strong>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sign = crypto.<span class="hljs-title function_">createSign</span>(<span class="hljs-string">&#x27;SHA256&#x27;</span>);<br>sign.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;some data to sign&#x27;</span>);<br>sign.<span class="hljs-title function_">end</span>();<br><span class="hljs-keyword">const</span> signature = sign.<span class="hljs-title function_">sign</span>(privateKey, <span class="hljs-string">&#x27;hex&#x27;</span>);<br><br><span class="hljs-comment">// 验证签名</span><br><span class="hljs-keyword">const</span> verify = crypto.<span class="hljs-title function_">createVerify</span>(<span class="hljs-string">&#x27;SHA256&#x27;</span>);<br>verify.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;some data to sign&#x27;</span>);<br>verify.<span class="hljs-title function_">end</span>();<br><span class="hljs-keyword">const</span> isVerified = verify.<span class="hljs-title function_">verify</span>(publicKey, signature, <span class="hljs-string">&#x27;hex&#x27;</span>);<br></code></pre></td></tr></table></figure><h1 id="Http1-x-VS-Http-2"><a href="#Http1-x-VS-Http-2" class="headerlink" title="Http1.x VS Http 2"></a>Http1.x VS Http 2</h1><p>1、传输格式：1.x 使用文本格式；2 使用二进制格式（更高效）<br>2、多路复用：1.x 一次 TCP 连接只能发送一次请求；2 可一次 TCP 连接发送多次请求（耗时更少），<br>3、服务器推送：1.x 不支持服务器主动推送内容给客户端；2 就支持</p><h1 id="V8"><a href="#V8" class="headerlink" title="V8"></a>V8</h1><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><p>nodejs 端的事件循环跟浏览器端的有点不一样。<br>浏览器端的事件循环主要服务于 UI 渲染和网络请求<br>nodejs 端的事件循环主要服务于 IO 处理、定时器、异步任务等</p><h3 id="node-的宏任务、微任务"><a href="#node-的宏任务、微任务" class="headerlink" title="node 的宏任务、微任务"></a>node 的宏任务、微任务</h3><p>常见宏任务：I&#x2F;O callbacks、timer（settimeout、setInterval）、setImmediate<br>常见微任务：Promise 回调、process.nextTick 等<br>循环流程：<br>1、入口进入，作为第一个宏任务被执行<br>2、执行同步代码直到结束<br>3、清空微任务列表，若有新的微任务产生，则继续清空<br>4、检查是否进行 I&#x2F;O Poll 阶段<br>5、执行下一个宏任务</p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>在服务端内存是比较珍贵的，nodejs 限制了 64 位机器最大为 1.4 GB，限制了 32 位机器最大为 0.7GB</p><h3 id="管理过程"><a href="#管理过程" class="headerlink" title="管理过程"></a>管理过程</h3><p>采用 GC：Garbage Collection - 垃圾回收 来管理内存<br>1、<strong>标记</strong>：通过遍历<code>GC Root</code>来标记活动或非活动对象，遍历到的就是活动的，不能遍历到的就是非活动的<br>2、<strong>清除</strong>：将非活动对象清除</p><h3 id="内存划分"><a href="#内存划分" class="headerlink" title="内存划分"></a>内存划分</h3><p>堆：复杂类型；栈：基本类型；</p><h4 id="分代垃圾回收"><a href="#分代垃圾回收" class="headerlink" title="分代垃圾回收"></a>分代垃圾回收</h4><p>针对“堆”，划分了两个区域：新生代、老生代</p><h5 id="新生代-存放短、容量小"><a href="#新生代-存放短、容量小" class="headerlink" title="新生代(存放短、容量小)"></a>新生代(存放短、容量小)</h5><p>新创建的先放这里面。<br>采用 Scavenge 算法，又分为 <strong>From</strong>、<strong>To</strong> 区域<br>新创建先放 <strong>From 区域</strong>，当 <strong>From 区域</strong>满时，进行<strong>垃圾回收(标记清除)<strong>，然后把存活的复制到 <strong>To 区域</strong>，之后翻转一下，即 <strong>From</strong> 变为 <strong>To</strong>，</strong>To</strong> 变成 <strong>From</strong>，之后重复直到两次<strong>垃圾回收-标记清除</strong>后还存在的就移动到老生代中</p><h5 id="老生代-存放久，容量大"><a href="#老生代-存放久，容量大" class="headerlink" title="老生代(存放久，容量大)"></a>老生代(存放久，容量大)</h5><p>多次在新生代里面存活的就晋升为老生代。<br>垃圾回收采用的是<strong>标记-清除</strong>或<strong>标记-整理</strong><br><strong>标记-整理：</strong>基于标记清除，然后再整理了下内存碎片</p>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-2、工程化实战之模块化+Webpack</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/6-2%E3%80%81%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98%E4%B9%8B%E6%A8%A1%E5%9D%97%E5%8C%96+Webpack/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/6-2%E3%80%81%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98%E4%B9%8B%E6%A8%A1%E5%9D%97%E5%8C%96+Webpack/</url>
    
    <content type="html"><![CDATA[<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><p>定义：将代码按照功能划分为独立、可复用的单元，每个单元称为一个模块。</p><h2 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h2><h3 id="无模块"><a href="#无模块" class="headerlink" title="无模块"></a>无模块</h3><p>将 JS 代码直接在 html 里面按顺序引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// calc.js 计算方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">subtract</span>(<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x - y<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">multiply</span>(<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x * y<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">divide</span>(<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x / y<br>&#125;<br><br><span class="hljs-comment">// log.js 方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">msg</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;[ info msg ] &gt;&quot;</span>, msg);<br>&#125;<br><br><br><br><span class="hljs-comment">// index.html</span><br>&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">  // ...</span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./calc.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./log.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>缺点：</p><ul><li>变量名全局污染，如<code>calc.js</code>里面定义了<code>function add()</code>，则其他地方就不能再使用<code>add</code>了，否则就会被覆盖</li><li>代码只能通过 html 里面关联，如想在<code>log.js</code>里面使用<code>add</code>函数，就只有在 html 将<code>calc.js</code>引入代码放在<code>log.js</code>前面，然后才能用<code>add</code>函数，JS 多了则难以维护</li></ul><h3 id="模块化雏形-IIFE"><a href="#模块化雏形-IIFE" class="headerlink" title="模块化雏形 - IIFE"></a>模块化雏形 - IIFE</h3><p>基于立即执行函数，形成函数作用域，可解决<code>变量名全局污染</code>的问题，但还是只能放在 html 里面关联</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// calc.js 计算方法</span><br><span class="hljs-keyword">var</span> calc = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">subtract</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">return</span> x - y;<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">multiply</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">return</span> x * y;<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">divide</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">return</span> x / y;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> &#123; add, subtract, multiply, divide &#125;;<br>&#125;)();<br><br><span class="hljs-comment">// xxx.js 方法</span><br><span class="hljs-keyword">var</span> log = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">info</span>(<span class="hljs-params">msg</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;[ info msg ] &gt;&quot;</span>, msg);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">msg</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;[ error msg ] &gt;&quot;</span>, msg);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">msg</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&quot;[ add msg ] &gt;&quot;</span>, msg);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> &#123; info, error, add &#125;;<br>&#125;)();<br><br><br><br><span class="hljs-comment">// index.html</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">  // ...</span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./calc.js&quot;</span> /&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./xxx.js&quot;</span> /&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span></span></span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ calc ] &gt;&quot;</span>, calc);</span></span></span></span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ log ] &gt;&quot;</span>, log);</span></span></span></span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    </span></span></span></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><br><span class="hljs-comment">// [ calc ] &gt; &#123;add: ƒ, subtract: ƒ, multiply: ƒ, divide: ƒ&#125;</span><br><span class="hljs-comment">// [ log ] &gt; &#123;info: ƒ, error: ƒ, add: ƒ&#125;</span><br></code></pre></td></tr></table></figure><h3 id="高速发展：CJS、AMD、UMD"><a href="#高速发展：CJS、AMD、UMD" class="headerlink" title="高速发展：CJS、AMD、UMD"></a>高速发展：CJS、AMD、UMD</h3><p>CJS：node 端的模块加载规范，仅支持同步的，语法为<code>module.exports = &#123;&#125;、reqiure(&#39;./xx/xx.js&#39;)</code><br>AMD：浏览器端的模块加载规范，可支持异步，语法为如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义一个简单的模块，无依赖</span><br><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;simpleModule&#x27;</span>,<br>    <span class="hljs-attr">doSomething</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Doing something...&#x27;</span>);<br>    &#125;<br>  &#125;;<br>&#125;);<br><br><span class="hljs-comment">// 定义一个有依赖的模块</span><br><span class="hljs-title function_">define</span>([<span class="hljs-string">&#x27;dependency1&#x27;</span>, <span class="hljs-string">&#x27;dependency2&#x27;</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params">dep1, dep2</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 使用依赖模块的功能</span><br>      dep1.<span class="hljs-title function_">someFunction</span>();<br>      dep2.<span class="hljs-title function_">anotherFunction</span>();<br>    &#125;<br>  &#125;;<br>&#125;);<br><br><span class="hljs-comment">// 异步加载模块并使用</span><br><span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;myModule&#x27;</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params">myModule</span>) &#123;<br>  <span class="hljs-comment">// myModule已经被加载完成</span><br>  myModule.<span class="hljs-title function_">doSomething</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p>UMD：将内容输出支持：IIFE、CJS、AMD 三种格式的语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params">root, factory</span>) &#123;<br>  <span class="hljs-comment">// 判断环境</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> define === <span class="hljs-string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="hljs-property">amd</span>) &#123;<br>    <span class="hljs-comment">// AMD环境，使用define方法注册模块</span><br>    <span class="hljs-title function_">define</span>([<span class="hljs-string">&#x27;dependency1&#x27;</span>, <span class="hljs-string">&#x27;dependency2&#x27;</span>], factory);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">module</span> === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>) &#123;<br>    <span class="hljs-comment">// CommonJS环境（如Node.js），使用exports导出模块</span><br>    <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">factory</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;dependency1&#x27;</span>), <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;dependency2&#x27;</span>));<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 浏览器全局环境（非模块化环境），挂载到全局变量（如window）</span><br>    root.<span class="hljs-property">MyModule</span> = <span class="hljs-title function_">factory</span>(root.<span class="hljs-property">dependency1</span>, root.<span class="hljs-property">dependency2</span>);<br>  &#125;<br>&#125;(<span class="hljs-variable language_">this</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">dependency1, dependency2</span>) &#123;<br>  <span class="hljs-comment">// 模块的具体实现</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyModule</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br><br>  <span class="hljs-comment">// 返回模块的公共API</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">MyModule</span>;<br>&#125;));<br></code></pre></td></tr></table></figure><p>虽然是高速发展了，但编码复杂性、全局污染、浏览器支持性等上都存在问题</p><h3 id="新时代：官方下场-ESM"><a href="#新时代：官方下场-ESM" class="headerlink" title="新时代：官方下场 - ESM"></a>新时代：官方下场 - ESM</h3><p>最终官方下场，从语法层给出模块加载方式规范，即 ECMAScript Modules，关键词为<code>import、export</code>，终结了混乱的模块加载规范</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导出单个函数或变量</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PI</span> = <span class="hljs-number">3.14</span>;<br><br><span class="hljs-comment">// 导出默认值</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">myDefaultExport</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// 导出多个命名出口</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-comment">// 原生 html 里面这样引入</span><br>&lt;script type=<span class="hljs-string">&quot;module&quot;</span>&gt;<br>  <span class="hljs-keyword">import</span> log <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./js/log.js&quot;</span>;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ log ] &gt;&quot;</span>, log);<br>&lt;/script&gt;<br><span class="hljs-comment">// or</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/log.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>解决了以下问题：</p><ul><li>每个模块有独立的作用域，不会再污染全局</li><li>支持同步、异步</li><li>解决模块循环引用问题</li></ul><p>缺点：<strong>对低版本浏览器不支持</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>所以什么是模块化呢？就是将代码分割成可复用的单元，并且通过某种规范实现互相引用</p><p>模块化是前端工程化的基石</p><h2 id="一些考点"><a href="#一些考点" class="headerlink" title="一些考点"></a>一些考点</h2><h3 id="CJS"><a href="#CJS" class="headerlink" title="CJS"></a>CJS</h3><p>node 端提出的模块加载机制，不支持异步，不支持浏览器，每个文件都有自己的作用域。<br>导出语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// add.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; add &#125;<br><span class="hljs-comment">// or</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">add</span> = add<br></code></pre></td></tr></table></figure><p>导入语法，<code>require</code>永远引入<code>module.exports</code>的值，对应 JS 文件可省略文件后缀</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; add &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./add.js&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>动态(同步)：当代码执行到<code>require</code>那行时才去加载对应的文件并执行文件内容，可以理解为是“同步”的<br><code>reqiure</code>伪代码实现（node 端），所以它的是同步，并且是对值的<strong>“拷贝”</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">require</span>(<span class="hljs-params">filePath</span>) &#123;<br>    <span class="hljs-keyword">const</span> content = fs.<span class="hljs-title function_">readFileSync</span>(filePath);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>(content);<br>&#125;<br></code></pre></td></tr></table></figure><p>对值的<strong>“拷贝”</strong>代码展示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// a.js</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> a++, <span class="hljs-number">500</span>)<br><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">a</span> = a<br><br><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">const</span> &#123; a &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a.js&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a), <span class="hljs-number">1000</span>)<br><br><span class="hljs-comment">// 打印结果为：</span><br><span class="hljs-number">1</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="module-exports-与-exports"><a href="#module-exports-与-exports" class="headerlink" title="module.exports 与 exports"></a>module.exports 与 exports</h4><p>初始时<code>module.exports === exports 为 true</code>，等价于<code>**const exports = module.exports**</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">subtract</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">add</span> = add<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">subtract</span> = subtract<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">exports</span>) <span class="hljs-comment">// &#123; add: [Function: add], subtract: [Function: subtract] &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>) <span class="hljs-comment">// &#123; add: [Function: add], subtract: [Function: subtract] &#125;</span><br></code></pre></td></tr></table></figure><p>但当它们同时存在时，最终<code>require</code>得到的是<code>module.exports</code>的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">subtract</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">add</span> = add<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">subtract</span> = subtract<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; add &#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">exports</span>) <span class="hljs-comment">// &#123; add: [Function: add], subtract: [Function: subtract] &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>) <span class="hljs-comment">// &#123; add: [Function: add] &#125;</span><br></code></pre></td></tr></table></figure><p>所以为了避免混淆，同一文件只使用一种导出方式</p><h4 id="对循环依赖的处理"><a href="#对循环依赖的处理" class="headerlink" title="对循环依赖的处理"></a>对循环依赖的处理</h4><p>a.js 引入 b.js，b.js 引入 a.js，则形成了循环依赖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// a.js</span><br><span class="hljs-keyword">const</span> b = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./b&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;b&quot;</span>, b);<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">a</span> = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// b.js</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./a&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a&quot;</span>, a);<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">b</span> = <span class="hljs-number">2</span>;<br><br><br><span class="hljs-comment">// 命令行运行：node a.js</span><br><span class="hljs-comment">// 打印结果如下：</span><br><span class="hljs-comment">// a &gt; &#123;&#125;</span><br><span class="hljs-comment">// b &gt; &#123; 2 &#125;</span><br><span class="hljs-comment">// (node:95411) Warning: Accessing non-existent property &#x27;Symbol(nodejs.util.inspect.custom)&#x27; of module exports inside circular dependency</span><br><span class="hljs-comment">// (Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="hljs-comment">// (node:95411) Warning: Accessing non-existent property &#x27;constructor&#x27; of module exports inside circular dependency</span><br><span class="hljs-comment">// (node:95411) Warning: Accessing non-existent property &#x27;Symbol(Symbol.toStringTag)&#x27; of module exports inside circular dependency</span><br><span class="hljs-comment">// (node:95411) Warning: Accessing non-existent property &#x27;Symbol(Symbol.iterator)&#x27; of module exports inside circular dependency</span><br><br><span class="hljs-comment">// 命令行运行：node b.js</span><br><span class="hljs-comment">// 打印结果如下：</span><br><span class="hljs-comment">// b &gt; &#123;&#125;</span><br><span class="hljs-comment">// a &gt; &#123; 1 &#125;</span><br><span class="hljs-comment">// (node:95411) Warning: Accessing non-existent property &#x27;Symbol(nodejs.util.inspect.custom)&#x27; of module exports inside circular dependency</span><br><span class="hljs-comment">// (Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="hljs-comment">// (node:95411) Warning: Accessing non-existent property &#x27;constructor&#x27; of module exports inside circular dependency</span><br><span class="hljs-comment">// (node:95411) Warning: Accessing non-existent property &#x27;Symbol(Symbol.toStringTag)&#x27; of module exports inside circular dependency</span><br><span class="hljs-comment">// (node:95411) Warning: Accessing non-existent property &#x27;Symbol(Symbol.iterator)&#x27; of module exports inside circular dependency</span><br></code></pre></td></tr></table></figure><p>结论：谁先执行，则它里面的能拿到值，并且伴随<code>循环引用</code>的报错</p><h3 id="ESM"><a href="#ESM" class="headerlink" title="ESM"></a>ESM</h3><p>ECMAScript 提供的模块加载规范，支持浏览器、node，支持异步、同步<br>导出语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// add.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">subtract</span>(<span class="hljs-params"></span>) &#123;&#125;<br></code></pre></td></tr></table></figure><p>导入语法，对应 JS 文件默认不可省略文件后缀，除非有配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; add, subtract &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./add.js&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>静态(异步)：是因为 ESM 的核心流程是分成三步（构建、实例化、求值），并且可以分别完成，所以称为异步</p><blockquote><p>为什么要分成三个，不能直接一起吗？因为浏览器加载执行 JS 时会阻塞主线程，造成的后果很大。</p></blockquote><p>构建：根据<code>import</code>创建模块之间的依赖关系图（编译时输出），然后下载模块文件生成模块记录（记录 importName、importUrl）<br>实例化：基于生成的模块记录，找到模块的代码与导出的变量名，然后将<strong>相同导入、导出指向同一个地址</strong><br>求值：运行模块的代码，将值赋到<code>实例化</code>后的地址内</p><p>对值的<strong>“引用”</strong>代码展示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// a.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> a++, <span class="hljs-number">500</span>)<br><br><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> &#123; a &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./a.js&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a), <span class="hljs-number">1000</span>)<br><br><span class="hljs-comment">// 打印结果为：</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="export-与-export-default"><a href="#export-与-export-default" class="headerlink" title="export 与 export default"></a>export 与 export default</h4><p>这是两种导出方式，可并存，只是<code>import</code>的逻辑不同<br><code>export default</code>之后的值将被导出，可以是任意类型，但<code>import</code>时只能命名为一个变量，就算<code>export default</code>了一个对象，也不支持解构，该变量的值等于<code>export default</code>之后的值，<strong>一个文件只能有一个<code>export default</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">msg</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;[ error msg ] &gt;&quot;</span>, msg);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">msg</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&quot;[ add msg ] &gt;&quot;</span>, msg);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123; error, add &#125;;<br><br><span class="hljs-comment">// 引入时</span><br><span class="hljs-keyword">import</span> log <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./log.js&#x27;</span> <span class="hljs-comment">//  只能当做变量</span><br><span class="hljs-keyword">import</span> &#123; error &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./log.js&#x27;</span> <span class="hljs-comment">// 不能解构，会报错的</span><br></code></pre></td></tr></table></figure><p><code>export</code>之后的值将被导出，可以是任意类型，但<code>import</code>时只能当做对象来解构其值，就算<code>export</code>了一个基础类型，也不支持作为一个变量使用（除非使用<code>* as</code>语法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">msg</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;[ error msg ] &gt;&quot;</span>, msg);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">msg</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&quot;[ add msg ] &gt;&quot;</span>, msg);<br>&#125;<br><span class="hljs-keyword">export</span> &#123; error, add &#125;;<br><br><span class="hljs-comment">// 引入时</span><br><span class="hljs-keyword">import</span> &#123; error &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./log.js&#x27;</span> <span class="hljs-comment">// 只能解构</span><br><span class="hljs-keyword">import</span> log <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./log.js&#x27;</span> <span class="hljs-comment">//  不能当做变量，会报错的</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> log <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./log.js&#x27;</span> <span class="hljs-comment">//  导出所有的（包括 export default 的）</span><br></code></pre></td></tr></table></figure><p>总结：<code>export default</code>导出的只能作为变量使用，<code>export</code>导出的只能解构使用</p><h4 id="对循环依赖的处理-1"><a href="#对循环依赖的处理-1" class="headerlink" title="对循环依赖的处理"></a>对循环依赖的处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// a.js</span><br><span class="hljs-keyword">import</span> &#123; b &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./b&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;b&quot;</span>, b);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// b.js</span><br><span class="hljs-keyword">import</span> &#123; a &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./a&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a&quot;</span>, a);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> b = <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">// node --experimental-modules a.js</span><br><span class="hljs-comment">// a.js:3 Uncaught ReferenceError: Cannot access &#x27;b&#x27; before initialization</span><br></code></pre></td></tr></table></figure><p>结论： 直接报错</p><h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><p><a href="https://webpack.docschina.org/concepts/">官方文档</a></p><blockquote><p>核心概念（了解下即可，后面会讲原理的）<br>Sourcemap<br>文件指纹技术<br>Babel 与 AST<br>TreeShaking<br>优化：构建速度、提高页面性能<br>原理：Webpack、Plugin、Loader</p></blockquote><h2 id="手写实现-Webpack-打包基本原理"><a href="#手写实现-Webpack-打包基本原理" class="headerlink" title="手写实现 Webpack 打包基本原理"></a>手写实现 Webpack 打包基本原理</h2><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><ol><li>随便创建个项目文件，然后创建<code>src</code>文件夹与空文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir src &amp;&amp; touch src/add.<span class="hljs-property">js</span> &amp;&amp; touch src/minus.<span class="hljs-property">js</span> &amp;&amp; touch src/index.<span class="hljs-property">js</span> &amp;&amp; touch index.<span class="hljs-property">html</span><br></code></pre></td></tr></table></figure><ol start="2"><li>初始化项目<code>pnpm init</code>，然后安装依赖<code>pnpm add fs-extra</code></li><li><code>src/add.js</code>写入相关代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (a, b) =&gt; a + b;<br></code></pre></td></tr></table></figure><ol start="4"><li><code>src/minus.js</code>写入相关代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">minus</span> = (<span class="hljs-params">a, b</span>) =&gt; a - b;<br></code></pre></td></tr></table></figure><ol start="5"><li><code>src/index.js</code>写入相关代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> add <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./add.js&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; minus &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./minus.js&quot;</span>;<br><br><span class="hljs-keyword">const</span> sum = <span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">const</span> division = <span class="hljs-title function_">minus</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ add(1, 2) ] &gt;&quot;</span>, sum);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ minus(2, 1) ] &gt;&quot;</span>, division);<br></code></pre></td></tr></table></figure><ol start="6"><li><code>index.html</code>写入相关代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>手写实现 Webpack<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我在手写实现 Webpack<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./src/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="6"><li>然后使用 VScode 的 Live Server 启动<code>index.html</code>看效果</li></ol><p><img src="/img/images/2024/1710206895937-67d8977b-eb43-49dd-969a-48f2be83e156.png"><img src="/img/images/2024/1710206997583-d115c05b-7f1d-4da4-8123-14f01d5f6cd2.png"><br>肯定是报错的，因为我们的<code>&lt;script</code>没加<code>type=&quot;module&quot;</code></p><p>我们期望正确的结果是：<br><img src="/img/images/2024/1710207912504-debe310f-5307-4f2c-831f-88fe80ebe2ed.png"></p><h3 id="原理实现"><a href="#原理实现" class="headerlink" title="原理实现"></a>原理实现</h3><blockquote><p>Webpack 的主要作用是从入口开始就加载一系列的依赖文件，最终打包成一个文件，这也是我们要实现的功能。<br>我们常用的打包命令是：npm run build</p></blockquote><ol start="7"><li>新建一个<code>webpack.js</code>作为<code>手写 webpack</code>的入口（这个会基于 node 环境去运行的哦）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch webpack.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><blockquote><p>然后我们期望运行这个<code>node webpack.js</code>后，生成一个<code>dist</code>文件夹，其中有</p><ul><li>一个<code>bundle.js</code>，包含了我们<code>src</code>源码下面的所有文件的代码</li><li>一个<code>index.html</code>，将之前的<code>&lt;script src=&quot;./src/index.js&quot;&gt;&lt;/script&gt;</code>改为了<code>&lt;script src=&quot;./bundle.js&quot;&gt;&lt;/script&gt;</code>后的 html</li></ul></blockquote><p>然后 Live Server 运行<code>dist/index.html</code>后，最终浏览器能正确运行并打印：</p><blockquote><p><img src="/img/images/2024/1710207912504-debe310f-5307-4f2c-831f-88fe80ebe2ed.png"></p></blockquote><h4 id="1、基于主入口，读取文件"><a href="#1、基于主入口，读取文件" class="headerlink" title="1、基于主入口，读取文件"></a>1、基于主入口，读取文件</h4><ol start="8"><li><code>webpack.js</code>编码：基于主入口，读取文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 功能设计：</span><br><span class="hljs-comment"> * 1. 找到主入口，即 src/index.js 文件，然后加载进来(getFileInfo(path) -&gt; fileContent)</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// fs 模块，读取文件内容</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br><span class="hljs-comment">// 主入口路径变量，目前写死</span><br><span class="hljs-keyword">const</span> entry = <span class="hljs-string">&quot;./src/index.js&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取文件信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> path 文件路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回文件内容</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFileInfo</span>(<span class="hljs-params">path</span>) &#123;<br>  <span class="hljs-keyword">return</span> fs.<span class="hljs-title function_">readFileSync</span>(path, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> entryFileContent = <span class="hljs-title function_">getFileInfo</span>(entry);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ entryFileContent ] &gt;&quot;</span>, entryFileContent);<br></code></pre></td></tr></table></figure><ol start="9"><li>运行<code>node webpack.js</code>调试，发现已拿到主入口对应的代码了</li></ol><p><img src="/img/images/2024/1710208913671-ae73b59a-5042-427d-883d-3c807753dda5.png"></p><ol start="10"><li>将<code>node webpack.js</code>放到<code>package.json</code>中，之后就可以<code>pnpm build</code>执行了</li></ol><p><img src="/img/images/2024/1710212706190-0eeb1fe9-352e-4700-b2b6-e1247b5e9aae.png"></p><h4 id="2、基于入口文件内容，去分析依赖关系"><a href="#2、基于入口文件内容，去分析依赖关系" class="headerlink" title="2、基于入口文件内容，去分析依赖关系"></a>2、基于入口文件内容，去分析依赖关系</h4><h5 id="（一）解析为-AST"><a href="#（一）解析为-AST" class="headerlink" title="（一）解析为 AST"></a>（一）解析为 AST</h5><p>第一步拿到了入口文件的内容，我们就需要去分析其中的依赖关系，即<code>import</code>关键词。<br>如何分析呢？要么原始的通过字符串匹配<code>import</code>然后分析；要么借用其他工具帮我们解析与分析<br>这里采用<code>Babel</code>工具来帮我们分析</p><blockquote><p>什么是 Babel？JS 编译器，可将高版本转为低版本的 JS<br>流程为：解析（将源代码转为 AST）、转换（对 AST 进行增删改查）、生成（将 AST 转为 JS 代码）<br>所以我们可以利用它来帮我们解析 JS 代码</p></blockquote><ol start="11"><li>安装<code>@babel/parser</code>依赖，官方使用文档：<a href="https://babeljs.io/docs/babel-parser#example">@babel&#x2F;parser · Babel</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add @babel/parser<br></code></pre></td></tr></table></figure><ol start="12"><li>引入并使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 功能设计：</span><br><span class="hljs-comment"> * 1. 找到主入口，即 src/index.js 文件，然后加载进来(getFileInfo(path) -&gt; fileContent)</span><br><span class="hljs-comment"> * 2. 解析主入口的内容(parseFile(fileContent) -&gt; AST)</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// fs 模块，读取文件内容</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br><span class="hljs-comment">// 主入口路径变量，目前写死</span><br><span class="hljs-keyword">const</span> entry = <span class="hljs-string">&quot;./src/index.js&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取文件信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> path 文件路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回文件内容</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFileInfo</span>(<span class="hljs-params">path</span>) &#123;<br>  <span class="hljs-comment">// 使用 fs.readFileSync 方法同步读取文件内容</span><br>  <span class="hljs-keyword">return</span> fs.<span class="hljs-title function_">readFileSync</span>(path, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> entryFileContent = <span class="hljs-title function_">getFileInfo</span>(entry);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ entryFileContent ] &gt;&quot;</span>, entryFileContent);<br><br><span class="hljs-comment">// ++++ 以下为新增 ++++</span><br><span class="hljs-comment">// @babel/parser 解析文件内容</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解析文件内容并返回抽象语法树（AST）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> fileContent 文件内容</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 抽象语法树（AST）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">parseFile</span>(<span class="hljs-params">fileContent</span>) &#123;<br>  <span class="hljs-comment">// 解析文件内容，生成抽象语法树（AST）</span><br>  <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(fileContent, &#123;<br>    <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&quot;module&quot;</span>, <span class="hljs-comment">// 要解析的模块是 ESM</span><br>  &#125;);<br>  <span class="hljs-comment">// 返回抽象语法树（AST）</span><br>  <span class="hljs-keyword">return</span> ast;<br>&#125;<br><br><span class="hljs-keyword">const</span> entryFileContentAST = <span class="hljs-title function_">parseFile</span>(entryFileContent);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ entryFileContentAST ] &gt;&quot;</span>, entryFileContentAST);<br></code></pre></td></tr></table></figure><ol start="13"><li>然后运行<code>pnpm build</code>，看下打印 AST 的结构</li></ol><p><img src="/img/images/2024/1710213036323-9f84863b-6291-4514-9898-d1ae0991ca97.png"><br>可以发现是正确打印了，但是一些关键信息被隐藏了，比如 body 里面的<br>这时候就可以借助 <a href="https://astexplorer.net/">AST 在线工具</a>，将我们的代码拷贝进去，看完整的结构：<br><img src="/img/images/2024/1710213591971-b5ec28ec-4949-4c57-800e-91c4fb67ae7f.png"></p><h5 id="（二）分析-AST，形成依赖图"><a href="#（二）分析-AST，形成依赖图" class="headerlink" title="（二）分析 AST，形成依赖图"></a>（二）分析 AST，形成依赖图</h5><p>还是使用工具，帮我直接分析依赖：<a href="https://babeljs.io/docs/babel-traverse">@babel&#x2F;traverse · Babel</a></p><ol start="14"><li>安装<code>@babel/traverse</code>依赖</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add @babel/traverse<br></code></pre></td></tr></table></figure><ol start="15"><li><code>webpack.js</code>编码：分析 AST，形成依赖图</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 功能设计：</span><br><span class="hljs-comment"> * 1. 找到主入口，即 src/index.js 文件，然后加载进来(getFileInfo(path) -&gt; fileContent)</span><br><span class="hljs-comment"> * 2. 解析主入口的内容(parseFile(fileContent))，找到所有依赖，形成依赖关系(createDependencyMap(AST) -&gt; dependencyMap)</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 主入口路径变量，目前写死</span><br><span class="hljs-keyword">const</span> entry = <span class="hljs-string">&quot;./src/index.js&quot;</span>;<br><br><span class="hljs-comment">// path 模块，获取文件路径</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-comment">// fs 模块，读取文件内容</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取文件信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> path 文件路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回文件内容</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFileInfo</span>(<span class="hljs-params">path</span>) &#123;<br>  <span class="hljs-comment">// 使用 fs.readFileSync 方法同步读取文件内容</span><br>  <span class="hljs-keyword">return</span> fs.<span class="hljs-title function_">readFileSync</span>(path, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> entryFileContent = <span class="hljs-title function_">getFileInfo</span>(entry);<br><br><span class="hljs-comment">// @babel/parser 解析文件内容</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解析文件内容并返回抽象语法树（AST）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> fileContent 文件内容</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 抽象语法树（AST）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">parseFile</span>(<span class="hljs-params">fileContent</span>) &#123;<br>  <span class="hljs-comment">// 解析文件内容，生成抽象语法树（AST）</span><br>  <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(fileContent, &#123;<br>    <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&quot;module&quot;</span>, <span class="hljs-comment">// 要解析的模块是 ESM</span><br>  &#125;);<br>  <span class="hljs-comment">// 返回抽象语法树（AST）</span><br>  <span class="hljs-keyword">return</span> ast;<br>&#125;<br><br><span class="hljs-keyword">const</span> entryFileContentAST = <span class="hljs-title function_">parseFile</span>(entryFileContent);<br><br><span class="hljs-comment">// ++++ 以下为新增 ++++</span><br><span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).<span class="hljs-property">default</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建依赖关系图</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ast 抽象语法树</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 依赖关系图</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createDependencyMap</span>(<span class="hljs-params">ast</span>) &#123;<br>  <span class="hljs-comment">// 创建依赖关系图</span><br>  <span class="hljs-keyword">const</span> dependencyMap = &#123;&#125;;<br><br>  <span class="hljs-comment">// 遍历抽象语法树（AST）</span><br>  <span class="hljs-title function_">traverse</span>(ast, &#123;<br>    <span class="hljs-title class_">ImportDeclaration</span>(&#123; node &#125;) &#123;<br>      <span class="hljs-keyword">const</span> &#123; value &#125; = node.<span class="hljs-property">source</span>; <span class="hljs-comment">// 从 AST 中获取到导入的相对文件路径</span><br><br>      <span class="hljs-keyword">const</span> dirname = path.<span class="hljs-title function_">dirname</span>(entry); <span class="hljs-comment">// 获取存放主入口文件的文件名</span><br><br>      <span class="hljs-keyword">const</span> abspath = <span class="hljs-string">&quot;./&quot;</span> + path.<span class="hljs-title function_">join</span>(dirname, value); <span class="hljs-comment">// 拼接出每个导入文件的绝对路径</span><br><br>      dependencyMap[value] = abspath; <span class="hljs-comment">// 添加到依赖关系图</span><br>    &#125;,<br>  &#125;);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ dependencyMap ] &gt;&quot;</span>, dependencyMap);<br><br>  <span class="hljs-keyword">return</span> dependencyMap;<br>&#125;<br><br><span class="hljs-title function_">createDependencyMap</span>(entryFileContentAST);<br></code></pre></td></tr></table></figure><ol start="16"><li>运行<code>pnpm build</code>，可以看到打印的依赖图</li></ol><p><img src="/img/images/2024/1710215502198-0b199b0c-bd65-46c4-a23b-bb88eb87bb51.png"></p><h4 id="3、再将-AST-转换为低版本的-JS-代码"><a href="#3、再将-AST-转换为低版本的-JS-代码" class="headerlink" title="3、再将 AST 转换为低版本的 JS 代码"></a>3、再将 AST 转换为低版本的 JS 代码</h4><p>因为我们之前写的代码都是高版本的，所以有些浏览器不一定能识别，因此需要将其转为低版本代码，并且该低代码最终会在浏览器中运行哦</p><ol start="17"><li>安装<code>bable</code>相关依赖</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add babel @babel/preset-env @babel/core<br></code></pre></td></tr></table></figure><h5 id="（三）将-AST-转换为低版本的-JS-代码"><a href="#（三）将-AST-转换为低版本的-JS-代码" class="headerlink" title="（三）将 AST 转换为低版本的 JS 代码"></a>（三）将 AST 转换为低版本的 JS 代码</h5><ol start="18"><li><code>webpack.js</code>编码：将 AST 转换为低版本的 JS 代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 功能设计：</span><br><span class="hljs-comment"> * 1. 找到主入口，即 src/index.js 文件，然后加载进来(getFileInfo(path) -&gt; fileContent)</span><br><span class="hljs-comment"> * 2. 解析主入口的内容(parseFile(fileContent))，找到所有依赖，形成依赖关系(createDependencyMap(AST) -&gt; dependencyMap)</span><br><span class="hljs-comment"> * 3. 在将 AST 转换成低版本的 JS 代码，(generateCode(AST))</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 主入口路径变量，目前写死</span><br><span class="hljs-keyword">const</span> entry = <span class="hljs-string">&quot;./src/index.js&quot;</span>;<br><br><span class="hljs-comment">// path 模块，获取文件路径</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-comment">// fs 模块，读取文件内容</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取文件信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> path 文件路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回文件内容</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFileInfo</span>(<span class="hljs-params">path</span>) &#123;<br>  <span class="hljs-comment">// 使用 fs.readFileSync 方法同步读取文件内容</span><br>  <span class="hljs-keyword">return</span> fs.<span class="hljs-title function_">readFileSync</span>(path, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> entryFileContent = <span class="hljs-title function_">getFileInfo</span>(entry);<br><br><span class="hljs-comment">// @babel/parser 解析文件内容</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解析文件内容并返回抽象语法树（AST）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> fileContent 文件内容</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 抽象语法树（AST）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">parseFile</span>(<span class="hljs-params">fileContent</span>) &#123;<br>  <span class="hljs-comment">// 解析文件内容，生成抽象语法树（AST）</span><br>  <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(fileContent, &#123;<br>    <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&quot;module&quot;</span>, <span class="hljs-comment">// 要解析的模块是 ESM</span><br>  &#125;);<br>  <span class="hljs-comment">// 返回抽象语法树（AST）</span><br>  <span class="hljs-keyword">return</span> ast;<br>&#125;<br><br><span class="hljs-keyword">const</span> entryFileContentAST = <span class="hljs-title function_">parseFile</span>(entryFileContent);<br><br><span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).<span class="hljs-property">default</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建依赖关系图</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ast 抽象语法树</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 依赖关系图</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createDependencyMap</span>(<span class="hljs-params">ast</span>) &#123;<br>  <span class="hljs-comment">// 创建依赖关系图</span><br>  <span class="hljs-keyword">const</span> dependencyMap = &#123;&#125;;<br><br>  <span class="hljs-comment">// 遍历抽象语法树（AST）</span><br>  <span class="hljs-title function_">traverse</span>(ast, &#123;<br>    <span class="hljs-title class_">ImportDeclaration</span>(&#123; node &#125;) &#123;<br>      <span class="hljs-keyword">const</span> &#123; value &#125; = node.<span class="hljs-property">source</span>; <span class="hljs-comment">// 从 AST 中获取到导入的相对文件路径</span><br><br>      <span class="hljs-keyword">const</span> dirname = path.<span class="hljs-title function_">dirname</span>(entry); <span class="hljs-comment">// 获取存放主入口文件的文件名</span><br><br>      <span class="hljs-keyword">const</span> abspath = <span class="hljs-string">&quot;./&quot;</span> + path.<span class="hljs-title function_">join</span>(dirname, value); <span class="hljs-comment">// 拼接出每个导入文件的绝对路径</span><br><br>      dependencyMap[value] = abspath; <span class="hljs-comment">// 添加到依赖关系图</span><br>    &#125;,<br>  &#125;);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ dependencyMap ] &gt;&quot;</span>, dependencyMap);<br><br>  <span class="hljs-keyword">return</span> dependencyMap;<br>&#125;<br><br><span class="hljs-title function_">createDependencyMap</span>(entryFileContentAST);<br><br><span class="hljs-comment">// ++++以下为新增的代码++++</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成代码</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ast AST 对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回生成的代码字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">generateCode</span>(<span class="hljs-params">ast</span>) &#123;<br>  <span class="hljs-comment">// 使用 Babel 将抽象语法树（AST）转换为可执行的 JavaScript 代码</span><br>  <span class="hljs-keyword">const</span> &#123; code &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/core&quot;</span>).<span class="hljs-title function_">transformFromAst</span>(ast, <span class="hljs-literal">null</span>, &#123;<br>    <span class="hljs-attr">presets</span>: [<span class="hljs-string">&quot;@babel/preset-env&quot;</span>], <span class="hljs-comment">// 指定转译的语法</span><br>  &#125;);<br><br>  <span class="hljs-comment">// 返回生成的代码</span><br>  <span class="hljs-keyword">return</span> code;<br>&#125;<br><br><span class="hljs-title function_">generateCode</span>(entryFileContentAST);<br></code></pre></td></tr></table></figure><ol start="19"><li>运行<code>pnpm build</code>，可以看到打印的 code</li></ol><p><img src="/img/images/2024/1710216523413-5bcd2c97-2094-46ab-9589-768c912b3f06.png"></p><h6 id="考点：”use-strict”是什么？"><a href="#考点：”use-strict”是什么？" class="headerlink" title="考点：”use strict”是什么？"></a>考点：”use strict”是什么？</h6><p><code>&quot;use strict&quot;</code>是 ES5 的严格模式，JS 解释器将采用更严格的规则来解析和执行代码，目的是消除常见错误与禁用不安全的操作（因为 JS 太灵活了）</p><ul><li><strong>变量名不能重复使用 var 声明</strong></li><li><strong>eval 不能使用</strong></li><li>变量必须先声明再使用</li><li><strong>函数内部的 this 不会默认绑到全局对象上</strong></li><li>对象属性名不能重复</li><li>函数参数名不能重复</li><li>等等</li></ul><h5 id="（四）将上述代码聚合到一个方法内-getModuleInfo"><a href="#（四）将上述代码聚合到一个方法内-getModuleInfo" class="headerlink" title="（四）将上述代码聚合到一个方法内 - getModuleInfo"></a>（四）将上述代码聚合到一个方法内 - getModuleInfo</h5><ol start="20"><li><code>webpack.js</code>编码：将上述代码聚合到一个方法内 - <code>getModuleInfo</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 功能设计：</span><br><span class="hljs-comment"> * 1. 找到主入口，即 src/index.js 文件，然后加载进来(getFileInfo(path) -&gt; fileContent)</span><br><span class="hljs-comment"> * 2. 解析主入口的内容(parseFile(fileContent))，找到所有依赖，形成依赖关系(createDependencyMap(AST) -&gt; dependencyMap)</span><br><span class="hljs-comment"> * 3. 在将 AST 转换成低版本的 JS 代码，(generateCode(AST))</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 主入口路径变量，目前写死</span><br><span class="hljs-keyword">const</span> entry = <span class="hljs-string">&quot;./src/index.js&quot;</span>;<br><br><span class="hljs-comment">// path 模块，获取文件路径</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-comment">// fs 模块，读取文件内容</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br><span class="hljs-comment">// @babel/parser 解析文件内容</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>);<br><br><span class="hljs-comment">// @babel/traverse 遍历抽象语法树（AST）</span><br><span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).<span class="hljs-property">default</span>;<br><br><span class="hljs-comment">// @babel/generator 将 AST 转换成代码字符串</span><br><span class="hljs-keyword">const</span> babelCore = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/core&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取模块信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> _path 文件路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 包含文件路径、依赖关系图和生成代码的对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getModuleInfo</span>(<span class="hljs-params">_path</span>) &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取文件信息</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> path 文件路径</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> 返回文件内容</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getFileInfo</span>(<span class="hljs-params">path</span>) &#123;<br>    <span class="hljs-comment">// 使用 fs.readFileSync 方法同步读取文件内容</span><br>    <span class="hljs-keyword">return</span> fs.<span class="hljs-title function_">readFileSync</span>(path, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 解析文件内容并返回抽象语法树（AST）</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileContent 文件内容</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> 抽象语法树（AST）</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">parseFile</span>(<span class="hljs-params">fileContent</span>) &#123;<br>    <span class="hljs-comment">// 解析文件内容，生成抽象语法树（AST）</span><br>    <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(fileContent, &#123;<br>      <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&quot;module&quot;</span>, <span class="hljs-comment">// 要解析的模块是 ESM</span><br>    &#125;);<br>    <span class="hljs-comment">// 返回抽象语法树（AST）</span><br>    <span class="hljs-keyword">return</span> ast;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建依赖关系图</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> ast 抽象语法树</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> 依赖关系图</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">createDependencyMap</span>(<span class="hljs-params">ast</span>) &#123;<br>    <span class="hljs-comment">// 创建依赖关系图</span><br>    <span class="hljs-keyword">const</span> dependencyMap = &#123;&#125;;<br><br>    <span class="hljs-comment">// 遍历抽象语法树（AST）</span><br>    <span class="hljs-title function_">traverse</span>(ast, &#123;<br>      <span class="hljs-title class_">ImportDeclaration</span>(&#123; node &#125;) &#123;<br>        <span class="hljs-keyword">const</span> &#123; value &#125; = node.<span class="hljs-property">source</span>; <span class="hljs-comment">// 从 AST 中获取到导入的相对文件路径</span><br><br>        <span class="hljs-keyword">const</span> dirname = path.<span class="hljs-title function_">dirname</span>(entry); <span class="hljs-comment">// 获取存放主入口文件的文件名</span><br><br>        <span class="hljs-keyword">const</span> abspath = <span class="hljs-string">&quot;./&quot;</span> + path.<span class="hljs-title function_">join</span>(dirname, value); <span class="hljs-comment">// 拼接出每个导入文件的绝对路径</span><br><br>        dependencyMap[value] = abspath; <span class="hljs-comment">// 添加到依赖关系图</span><br>      &#125;,<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> dependencyMap;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生成代码</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> ast AST 对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> 返回生成的代码字符串</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">generateCode</span>(<span class="hljs-params">ast</span>) &#123;<br>    <span class="hljs-comment">// 使用 Babel 将抽象语法树（AST）转换为可执行的 JavaScript 代码</span><br>    <span class="hljs-keyword">const</span> &#123; code &#125; = babelCore.<span class="hljs-title function_">transformFromAst</span>(ast, <span class="hljs-literal">null</span>, &#123;<br>      <span class="hljs-attr">presets</span>: [<span class="hljs-string">&quot;@babel/preset-env&quot;</span>], <span class="hljs-comment">// 指定转译的语法</span><br>    &#125;);<br><br>    <span class="hljs-comment">// 返回生成的代码</span><br>    <span class="hljs-keyword">return</span> code;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> _pathFileContent = <span class="hljs-title function_">getFileInfo</span>(_path);<br>  <span class="hljs-keyword">const</span> _pathFileContentAST = <span class="hljs-title function_">parseFile</span>(_pathFileContent);<br>  <span class="hljs-keyword">const</span> _pathFileDepsMap = <span class="hljs-title function_">createDependencyMap</span>(_pathFileContentAST);<br>  <span class="hljs-keyword">const</span> _pathFileCode = <span class="hljs-title function_">generateCode</span>(_pathFileContentAST);<br><br>  <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">path</span>: _path, <span class="hljs-attr">deps</span>: _pathFileDepsMap, <span class="hljs-attr">code</span>: _pathFileCode &#125;;<br>&#125;<br><br><span class="hljs-keyword">const</span> entryModuleInfo = <span class="hljs-title function_">getModuleInfo</span>(entry);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ entryModuleInfo ] &gt;&quot;</span>, entryModuleInfo);<br></code></pre></td></tr></table></figure><ol start="21"><li>运行 build，得到如下结果</li></ol><p><img src="/img/images/2024/1710217154766-d11490bf-0f25-4585-92c7-609098f6173c.png"></p><h4 id="4、基于依赖关系图，去加载对应的所有文件"><a href="#4、基于依赖关系图，去加载对应的所有文件" class="headerlink" title="4、基于依赖关系图，去加载对应的所有文件"></a>4、基于依赖关系图，去加载对应的所有文件</h4><ol start="22"><li><code>webpack.js</code>编码：基于依赖关系图，去加载对应的所有文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 前面的不变....</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 加载模块</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dependencyMap 模块依赖映射表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回加载的模块数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loadModules</span>(<span class="hljs-params">dependencyMap</span>) &#123;<br>  <span class="hljs-keyword">const</span> modules = [];<br><br>  <span class="hljs-comment">// 如果dependencyMap为空，则返回一个空数组</span><br>  <span class="hljs-keyword">if</span> (!dependencyMap) <span class="hljs-keyword">return</span> [];<br><br>  <span class="hljs-comment">// 遍历dependencyMap的每一个key</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> dependencyMap) &#123;<br>    <span class="hljs-comment">// 获取模块信息</span><br>    <span class="hljs-keyword">const</span> moduleInfo = <span class="hljs-title function_">getModuleInfo</span>(dependencyMap[key]);<br>    <span class="hljs-comment">// 将模块信息添加到modules数组中</span><br>    modules.<span class="hljs-title function_">push</span>(moduleInfo);<br>    <span class="hljs-comment">// 如果模块信息中存在依赖，则递归加载依赖模块，并将加载的依赖模块添加到modules数组中</span><br>    <span class="hljs-keyword">if</span> (moduleInfo.<span class="hljs-property">deps</span>) modules.<span class="hljs-title function_">push</span>(...<span class="hljs-title function_">loadModules</span>(moduleInfo.<span class="hljs-property">deps</span>));<br>  &#125;<br><br>  <span class="hljs-comment">// 返回加载的模块数组</span><br>  <span class="hljs-keyword">return</span> modules;<br>&#125;<br><br><span class="hljs-comment">// 加载入口模块，并递归加载依赖模块</span><br><span class="hljs-keyword">const</span> allModules = [entryModuleInfo].<span class="hljs-title function_">concat</span>(<span class="hljs-title function_">loadModules</span>(entryModuleInfo.<span class="hljs-property">deps</span>));<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ allModules ] &gt;&quot;</span>, allModules);<br></code></pre></td></tr></table></figure><ol start="23"><li>运行 build，得到如下结果</li></ol><p><img src="/img/images/2024/1710248467635-a69490e6-bc82-4a6c-b395-033c2772115a.png"></p><ol start="24"><li>然后将数组结构转为对象结构，便于通过<code>path</code>取值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 前面的不变....</span><br><br><span class="hljs-comment">// 加载入口模块，并递归加载依赖模块</span><br><span class="hljs-keyword">const</span> allModulesArray = [entryModuleInfo].<span class="hljs-title function_">concat</span>(<br>  <span class="hljs-title function_">loadModules</span>(entryModuleInfo.<span class="hljs-property">deps</span>)<br>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建模块映射表</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> modules 模块数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回模块路径为键，模块对象为值的映射表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createModuleMap</span>(<span class="hljs-params">modules</span>) &#123;<br>  <span class="hljs-comment">// 使用reduce方法遍历modules数组，并返回一个对象</span><br>  <span class="hljs-keyword">return</span> modules.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">modulesMap, <span class="hljs-variable language_">module</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 将module对象按照path属性作为键，module对象作为值存储到modulesMap对象中</span><br>    modulesMap[<span class="hljs-variable language_">module</span>.<span class="hljs-property">path</span>] = <span class="hljs-variable language_">module</span>;<br>    <span class="hljs-comment">// 返回更新后的modulesMap对象</span><br>    <span class="hljs-keyword">return</span> modulesMap;<br>    <span class="hljs-comment">// 初始值为一个空对象</span><br>  &#125;, &#123;&#125;);<br>&#125;<br><span class="hljs-keyword">const</span> allModulesMap = <span class="hljs-title function_">createModuleMap</span>(allModulesArray);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ allModulesMap ] &gt;&quot;</span>, allModulesMap);<br></code></pre></td></tr></table></figure><ol start="25"><li>运行 build，得到如下结果</li></ol><p><img src="/img/images/2024/1710251258320-ae279cca-99d2-41ca-aac9-df4a5fcca75a.png"></p><h5 id="（五）将本阶段的代码聚合到一个方法内-parseModules"><a href="#（五）将本阶段的代码聚合到一个方法内-parseModules" class="headerlink" title="（五）将本阶段的代码聚合到一个方法内 - parseModules"></a>（五）将本阶段的代码聚合到一个方法内 - parseModules</h5><ol start="26"><li><code>webpack.js</code>编码：将本阶段的代码聚合到一个方法内 - <code>parseModules</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 功能设计：</span><br><span class="hljs-comment"> * 1. 找到主入口，即 src/index.js 文件，然后加载进来(getFileInfo(path) -&gt; fileContent)</span><br><span class="hljs-comment"> * 2. 解析主入口的内容(parseFile(fileContent))，找到所有依赖，形成依赖关系(createDependencyMap(AST) -&gt; dependencyMap)</span><br><span class="hljs-comment"> * 3. 在将 AST 转换成低版本的 JS 代码，(generateCode(AST))</span><br><span class="hljs-comment"> * 4. 基于依赖关系图，去加载对应的所有文件(loadModules(dependencyMap))，然后转为对象结构(createModuleMap(dependencyMap))</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 主入口路径变量，目前写死</span><br><span class="hljs-keyword">const</span> entry = <span class="hljs-string">&quot;./src/index.js&quot;</span>;<br><br><span class="hljs-comment">// path 模块，获取文件路径</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-comment">// fs 模块，读取文件内容</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br><span class="hljs-comment">// @babel/parser 解析文件内容</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>);<br><br><span class="hljs-comment">// @babel/traverse 遍历抽象语法树（AST）</span><br><span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).<span class="hljs-property">default</span>;<br><br><span class="hljs-comment">// @babel/generator 将 AST 转换成代码字符串</span><br><span class="hljs-keyword">const</span> babelCore = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/core&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取模块信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> _path 文件路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 包含文件路径、依赖关系图和生成代码的对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getModuleInfo</span>(<span class="hljs-params">_path</span>) &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取文件信息</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> path 文件路径</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> 返回文件内容</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getFileInfo</span>(<span class="hljs-params">path</span>) &#123;<br>    <span class="hljs-comment">// 使用 fs.readFileSync 方法同步读取文件内容</span><br>    <span class="hljs-keyword">return</span> fs.<span class="hljs-title function_">readFileSync</span>(path, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 解析文件内容并返回抽象语法树（AST）</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileContent 文件内容</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> 抽象语法树（AST）</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">parseFile</span>(<span class="hljs-params">fileContent</span>) &#123;<br>    <span class="hljs-comment">// 解析文件内容，生成抽象语法树（AST）</span><br>    <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(fileContent, &#123;<br>      <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&quot;module&quot;</span>, <span class="hljs-comment">// 要解析的模块是 ESM</span><br>    &#125;);<br>    <span class="hljs-comment">// 返回抽象语法树（AST）</span><br>    <span class="hljs-keyword">return</span> ast;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建依赖关系图</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> ast 抽象语法树</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> 依赖关系图</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">createDependencyMap</span>(<span class="hljs-params">ast</span>) &#123;<br>    <span class="hljs-comment">// 创建依赖关系图</span><br>    <span class="hljs-keyword">let</span> dependencyMap = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">// 遍历抽象语法树（AST）</span><br>    <span class="hljs-title function_">traverse</span>(ast, &#123;<br>      <span class="hljs-title class_">ImportDeclaration</span>(&#123; node &#125;) &#123;<br>        <span class="hljs-keyword">const</span> &#123; value &#125; = node.<span class="hljs-property">source</span>; <span class="hljs-comment">// 从 AST 中获取到导入的相对文件路径</span><br><br>        <span class="hljs-keyword">const</span> dirname = path.<span class="hljs-title function_">dirname</span>(entry); <span class="hljs-comment">// 获取存放主入口文件的文件名</span><br><br>        <span class="hljs-keyword">const</span> abspath = <span class="hljs-string">&quot;./&quot;</span> + path.<span class="hljs-title function_">join</span>(dirname, value); <span class="hljs-comment">// 拼接出每个导入文件的绝对路径</span><br><br>        <span class="hljs-keyword">if</span> (!dependencyMap) dependencyMap = &#123;&#125;;<br><br>        dependencyMap[value] = abspath; <span class="hljs-comment">// 添加到依赖关系图</span><br>      &#125;,<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> dependencyMap;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生成代码</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> ast AST 对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> 返回生成的代码字符串</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">generateCode</span>(<span class="hljs-params">ast</span>) &#123;<br>    <span class="hljs-comment">// 使用 Babel 将抽象语法树（AST）转换为可执行的 JavaScript 代码</span><br>    <span class="hljs-keyword">const</span> &#123; code &#125; = babelCore.<span class="hljs-title function_">transformFromAst</span>(ast, <span class="hljs-literal">null</span>, &#123;<br>      <span class="hljs-attr">presets</span>: [<span class="hljs-string">&quot;@babel/preset-env&quot;</span>], <span class="hljs-comment">// 指定转译的语法</span><br>    &#125;);<br><br>    <span class="hljs-comment">// 返回生成的代码</span><br>    <span class="hljs-keyword">return</span> code;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> _pathFileContent = <span class="hljs-title function_">getFileInfo</span>(_path);<br>  <span class="hljs-keyword">const</span> _pathFileContentAST = <span class="hljs-title function_">parseFile</span>(_pathFileContent);<br>  <span class="hljs-keyword">const</span> _pathFileDepsMap = <span class="hljs-title function_">createDependencyMap</span>(_pathFileContentAST);<br>  <span class="hljs-keyword">const</span> _pathFileCode = <span class="hljs-title function_">generateCode</span>(_pathFileContentAST);<br><br>  <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">path</span>: _path, <span class="hljs-attr">deps</span>: _pathFileDepsMap, <span class="hljs-attr">code</span>: _pathFileCode &#125;;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">parseModules</span>(<span class="hljs-params">moduleInfo</span>) &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 加载模块</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> dependencyMap 模块依赖映射表</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> 返回加载的模块数组</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">loadModules</span>(<span class="hljs-params">dependencyMap</span>) &#123;<br>    <span class="hljs-keyword">const</span> modules = [];<br><br>    <span class="hljs-comment">// 如果dependencyMap为空，则返回一个空数组</span><br>    <span class="hljs-keyword">if</span> (!dependencyMap) <span class="hljs-keyword">return</span> [];<br><br>    <span class="hljs-comment">// 遍历dependencyMap的每一个key</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> dependencyMap) &#123;<br>      <span class="hljs-comment">// 获取模块信息</span><br>      <span class="hljs-keyword">const</span> _moduleInfo = <span class="hljs-title function_">getModuleInfo</span>(dependencyMap[key]);<br>      <span class="hljs-comment">// 将模块信息添加到modules数组中</span><br>      modules.<span class="hljs-title function_">push</span>(_moduleInfo);<br>      <span class="hljs-comment">// 如果模块信息中存在依赖，则递归加载依赖模块，并将加载的依赖模块添加到modules数组中</span><br>      <span class="hljs-keyword">if</span> (_moduleInfo.<span class="hljs-property">deps</span>) modules.<span class="hljs-title function_">push</span>(...<span class="hljs-title function_">loadModules</span>(_moduleInfo.<span class="hljs-property">deps</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 返回加载的模块数组</span><br>    <span class="hljs-keyword">return</span> modules;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建模块映射表</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> modules 模块数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> 返回模块路径为键，模块对象为值的映射表</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">createModuleMap</span>(<span class="hljs-params">modules</span>) &#123;<br>    <span class="hljs-comment">// 使用reduce方法遍历modules数组，并返回一个对象</span><br>    <span class="hljs-keyword">return</span> modules.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">modulesMap, <span class="hljs-variable language_">module</span></span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 将module对象按照path属性作为键，module对象作为值存储到modulesMap对象中</span><br>      modulesMap[<span class="hljs-variable language_">module</span>.<span class="hljs-property">path</span>] = <span class="hljs-variable language_">module</span>;<br>      <span class="hljs-comment">// 返回更新后的modulesMap对象</span><br>      <span class="hljs-keyword">return</span> modulesMap;<br>      <span class="hljs-comment">// 初始值为一个空对象</span><br>    &#125;, &#123;&#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> modulesArray = [moduleInfo].<span class="hljs-title function_">concat</span>(<span class="hljs-title function_">loadModules</span>(moduleInfo.<span class="hljs-property">deps</span>));<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">createModuleMap</span>(modulesArray);<br>&#125;<br><br><span class="hljs-keyword">const</span> entryModuleInfo = <span class="hljs-title function_">getModuleInfo</span>(entry);<br><br><span class="hljs-keyword">const</span> allModulesMap = <span class="hljs-title function_">parseModules</span>(entryModuleInfo);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ allModulesMap ] &gt;&quot;</span>, allModulesMap);<br></code></pre></td></tr></table></figure><h4 id="5、处理上下文"><a href="#5、处理上下文" class="headerlink" title="5、处理上下文"></a>5、处理上下文</h4><p>我们分析下打印出来的<code>code</code>，我们要求它能直接在浏览器中运行，但它里面有两个关键点<code>reqiure(函数)、exports(对象)</code>，咋一看这是 CJS 的语法，肯定是不能在浏览器中运行的，所以我们需要分别给定义出<code>reqiure、exports</code>在浏览器上的上下文<br><img src="/img/images/2024/1710251545565-2c09b063-6d3f-4405-903c-9dce4dca69c7.png"></p><ol start="27"><li><code>webpack.js</code>编码：注入上下文</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 前面的不变......</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理上下文，生成一个函数，该函数接受一个模块映射对象作为参数，</span><br><span class="hljs-comment"> * 并返回一个立即执行函数表达式，该函数内部定义了一个 require 函数，</span><br><span class="hljs-comment"> * 用于根据模块路径加载模块并执行模块代码，最后返回模块的导出对象。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> modulesMap 模块映射对象，键为模块路径，值为模块对象，</span><br><span class="hljs-comment"> * 模块对象包含两个属性：deps（依赖数组）和 code（模块代码字符串）。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回一个立即执行函数表达式的字符串形式。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleContext</span>(<span class="hljs-params">modulesMap</span>) &#123;<br>  <span class="hljs-keyword">const</span> modulesMapString = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(modulesMap);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`(function (modulesMap) &#123;</span><br><span class="hljs-string">    function require(path) &#123;</span><br><span class="hljs-string">      function absRequire(absPath) &#123;</span><br><span class="hljs-string">        return require(modulesMap[path].deps[absPath]);</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      var exports = &#123;&#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      (function (require, exports, code) &#123;</span><br><span class="hljs-string">        eval(code);</span><br><span class="hljs-string">      &#125;)(absRequire, exports, modulesMap[path].code);</span><br><span class="hljs-string"></span><br><span class="hljs-string">      return exports;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    require(&#x27;<span class="hljs-subst">$&#123;entry&#125;</span>&#x27;);</span><br><span class="hljs-string">  &#125;)(<span class="hljs-subst">$&#123;modulesMapString&#125;</span>);`</span>;<br>&#125;<br><br><span class="hljs-comment">// 最终生成的 bundle.js 的代码字符串</span><br><span class="hljs-keyword">const</span> bundle_js_code_string = <span class="hljs-title function_">handleContext</span>(allModulesMap);<br></code></pre></td></tr></table></figure><h4 id="6、生成-dist-与相关文件"><a href="#6、生成-dist-与相关文件" class="headerlink" title="6、生成 dist 与相关文件"></a>6、生成 dist 与相关文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 前面的不变......</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建输出文件</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> _output 输出文件路径和文件名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> codeString 要写入的代码字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createOutPutFiles</span>(<span class="hljs-params">_output, codeString</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">createFolder</span>(<span class="hljs-params">path</span>) &#123;<br>    <span class="hljs-comment">// 判断目录是否存在，如果存在则删除</span><br>    <span class="hljs-keyword">const</span> isExist = fs.<span class="hljs-title function_">existsSync</span>(path);<br>    <span class="hljs-keyword">if</span> (isExist) fs.<span class="hljs-title function_">removeSync</span>(path);<br><br>    <span class="hljs-comment">// 创建目录</span><br>    fs.<span class="hljs-title function_">mkdirSync</span>(path);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建HTML文件</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> path 文件路径</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> scriptSrc 脚本源路径</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">createHTML</span>(<span class="hljs-params">path, scriptSrc</span>) &#123;<br>    <span class="hljs-keyword">const</span> htmlName = <span class="hljs-string">&quot;index.html&quot;</span>;<br>    <span class="hljs-comment">// HTML 内容的字符串</span><br>    <span class="hljs-keyword">const</span> htmlContent = fs.<span class="hljs-title function_">readFileSync</span>(htmlName, <span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>    <span class="hljs-comment">// 找到合适的插入点，这里假设在 body 结束前插入</span><br>    <span class="hljs-keyword">const</span> insertPointPattern = <span class="hljs-regexp">/&lt;\/body&gt;/i</span>;<br>    <span class="hljs-keyword">const</span> insertionPoint = htmlContent.<span class="hljs-title function_">search</span>(insertPointPattern);<br><br>    <span class="hljs-keyword">if</span> (insertionPoint !== -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// 创建 script 标签列表</span><br>      <span class="hljs-keyword">const</span> scriptTags = <span class="hljs-string">`&lt;script src=&quot;./<span class="hljs-subst">$&#123;scriptSrc&#125;</span>&quot;&gt;&lt;/script&gt;`</span>;<br><br>      <span class="hljs-comment">// 插入 script 标签到 HTML 内容中</span><br>      <span class="hljs-keyword">const</span> newHtmlContent = <span class="hljs-string">`<span class="hljs-subst">$&#123;htmlContent.slice(<span class="hljs-number">0</span>, insertionPoint)&#125;</span></span><br><span class="hljs-string">  <span class="hljs-subst">$&#123;scriptTags&#125;</span></span><br><span class="hljs-string"><span class="hljs-subst">$&#123;htmlContent.slice(insertionPoint)&#125;</span>`</span>;<br><br>      <span class="hljs-comment">// 创建 html 文件</span><br>      <span class="hljs-keyword">const</span> htmlPath = path + <span class="hljs-string">&quot;/&quot;</span> + htmlName;<br>      fs.<span class="hljs-title function_">writeFileSync</span>(htmlPath, newHtmlContent);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> &#123; path, filename &#125; = _output;<br>  <span class="hljs-comment">// 创建 输出目录</span><br>  <span class="hljs-title function_">createFolder</span>(path);<br>  <span class="hljs-comment">// 创建 bundle.js 文件</span><br>  fs.<span class="hljs-title function_">writeFileSync</span>(path + <span class="hljs-string">&quot;/&quot;</span> + filename, codeString);<br>  <span class="hljs-comment">// 创建 index.html 文件</span><br>  <span class="hljs-title function_">createHTML</span>(path, filename);<br>&#125;<br><br><span class="hljs-comment">// 最终生成的 bundle.js 的代码字符串</span><br><span class="hljs-keyword">const</span> bundle_js_code_string = <span class="hljs-title function_">handleContext</span>(allModulesMap);<br><span class="hljs-title function_">createOutPutFiles</span>(output, bundle_js_code_string);<br></code></pre></td></tr></table></figure><h4 id="7、代码完成，运行看效果"><a href="#7、代码完成，运行看效果" class="headerlink" title="7、代码完成，运行看效果"></a>7、代码完成，运行看效果</h4><p><code>index.html</code>完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>手写实现 Webpack<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我在手写实现 Webpack<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><code>webpack.js</code>完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 功能设计：</span><br><span class="hljs-comment"> * 1. 找到主入口，即 src/index.js 文件，然后加载进来(getFileInfo(path) -&gt; fileContent)</span><br><span class="hljs-comment"> * 2. 解析主入口的内容(parseFile(fileContent))，找到所有依赖，形成依赖关系(createDependencyMap(AST) -&gt; dependencyMap)</span><br><span class="hljs-comment"> * 3. 在将 AST 转换成低版本的 JS 代码，(generateCode(AST))</span><br><span class="hljs-comment"> * 4. 基于依赖关系图，去加载对应的所有文件(loadModules(dependencyMap))，然后转为对象结构(createModuleMap(dependencyMap))</span><br><span class="hljs-comment"> * 5. 处理上下文，注入 reqiure、exports 这两个变量的具体功能(handleContext(moduleMap))</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 主入口路径变量，目前写死</span><br><span class="hljs-keyword">const</span> entry = <span class="hljs-string">&quot;./src/index.js&quot;</span>;<br><span class="hljs-keyword">const</span> output = &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;_dist&quot;</span>, <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span> &#125;;<br><br><span class="hljs-comment">// path 模块，获取文件路径</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-comment">// fs 模块，读取文件内容</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs-extra&quot;</span>);<br><br><span class="hljs-comment">// @babel/parser 解析文件内容</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>);<br><br><span class="hljs-comment">// @babel/traverse 遍历抽象语法树（AST）</span><br><span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).<span class="hljs-property">default</span>;<br><br><span class="hljs-comment">// @babel/generator 将 AST 转换成代码字符串</span><br><span class="hljs-keyword">const</span> babelCore = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/core&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取模块信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> _path 文件路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 包含文件路径、依赖关系图和生成代码的对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getModuleInfo</span>(<span class="hljs-params">_path</span>) &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取文件信息</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> path 文件路径</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> 返回文件内容</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getFileInfo</span>(<span class="hljs-params">path</span>) &#123;<br>    <span class="hljs-comment">// 使用 fs.readFileSync 方法同步读取文件内容</span><br>    <span class="hljs-keyword">return</span> fs.<span class="hljs-title function_">readFileSync</span>(path, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 解析文件内容并返回抽象语法树（AST）</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> fileContent 文件内容</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> 抽象语法树（AST）</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">parseFile</span>(<span class="hljs-params">fileContent</span>) &#123;<br>    <span class="hljs-comment">// 解析文件内容，生成抽象语法树（AST）</span><br>    <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(fileContent, &#123;<br>      <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&quot;module&quot;</span>, <span class="hljs-comment">// 要解析的模块是 ESM</span><br>    &#125;);<br>    <span class="hljs-comment">// 返回抽象语法树（AST）</span><br>    <span class="hljs-keyword">return</span> ast;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建依赖关系图</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> ast 抽象语法树</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> 依赖关系图</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">createDependencyMap</span>(<span class="hljs-params">ast</span>) &#123;<br>    <span class="hljs-comment">// 创建依赖关系图</span><br>    <span class="hljs-keyword">let</span> dependencyMap = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">// 遍历抽象语法树（AST）</span><br>    <span class="hljs-title function_">traverse</span>(ast, &#123;<br>      <span class="hljs-title class_">ImportDeclaration</span>(&#123; node &#125;) &#123;<br>        <span class="hljs-keyword">const</span> &#123; value &#125; = node.<span class="hljs-property">source</span>; <span class="hljs-comment">// 从 AST 中获取到导入的相对文件路径</span><br><br>        <span class="hljs-keyword">const</span> dirname = path.<span class="hljs-title function_">dirname</span>(entry); <span class="hljs-comment">// 获取存放主入口文件的文件名</span><br><br>        <span class="hljs-keyword">const</span> abspath = <span class="hljs-string">&quot;./&quot;</span> + path.<span class="hljs-title function_">join</span>(dirname, value); <span class="hljs-comment">// 拼接出每个导入文件的绝对路径</span><br><br>        <span class="hljs-keyword">if</span> (!dependencyMap) dependencyMap = &#123;&#125;;<br><br>        dependencyMap[value] = abspath; <span class="hljs-comment">// 添加到依赖关系图</span><br>      &#125;,<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> dependencyMap;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生成代码</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> ast AST 对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> 返回生成的代码字符串</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">generateCode</span>(<span class="hljs-params">ast</span>) &#123;<br>    <span class="hljs-comment">// 使用 Babel 将抽象语法树（AST）转换为可执行的 JavaScript 代码</span><br>    <span class="hljs-keyword">const</span> &#123; code &#125; = babelCore.<span class="hljs-title function_">transformFromAst</span>(ast, <span class="hljs-literal">null</span>, &#123;<br>      <span class="hljs-attr">presets</span>: [<span class="hljs-string">&quot;@babel/preset-env&quot;</span>], <span class="hljs-comment">// 指定转译的语法</span><br>    &#125;);<br><br>    <span class="hljs-comment">// 返回生成的代码</span><br>    <span class="hljs-keyword">return</span> code;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> _pathFileContent = <span class="hljs-title function_">getFileInfo</span>(_path);<br>  <span class="hljs-keyword">const</span> _pathFileContentAST = <span class="hljs-title function_">parseFile</span>(_pathFileContent);<br>  <span class="hljs-keyword">const</span> _pathFileDepsMap = <span class="hljs-title function_">createDependencyMap</span>(_pathFileContentAST);<br>  <span class="hljs-keyword">const</span> _pathFileCode = <span class="hljs-title function_">generateCode</span>(_pathFileContentAST);<br><br>  <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">path</span>: _path, <span class="hljs-attr">deps</span>: _pathFileDepsMap, <span class="hljs-attr">code</span>: _pathFileCode &#125;;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解析模块信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> moduleInfo 模块信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回模块路径为键，模块对象为值的映射表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">parseModules</span>(<span class="hljs-params">moduleInfo</span>) &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 加载模块</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> dependencyMap 模块依赖映射表</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> 返回加载的模块数组</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">loadModules</span>(<span class="hljs-params">dependencyMap</span>) &#123;<br>    <span class="hljs-keyword">const</span> modules = [];<br><br>    <span class="hljs-comment">// 如果dependencyMap为空，则返回一个空数组</span><br>    <span class="hljs-keyword">if</span> (!dependencyMap) <span class="hljs-keyword">return</span> [];<br><br>    <span class="hljs-comment">// 遍历dependencyMap的每一个key</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> dependencyMap) &#123;<br>      <span class="hljs-comment">// 获取模块信息</span><br>      <span class="hljs-keyword">const</span> _moduleInfo = <span class="hljs-title function_">getModuleInfo</span>(dependencyMap[key]);<br>      <span class="hljs-comment">// 将模块信息添加到modules数组中</span><br>      modules.<span class="hljs-title function_">push</span>(_moduleInfo);<br>      <span class="hljs-comment">// 如果模块信息中存在依赖，则递归加载依赖模块，并将加载的依赖模块添加到modules数组中</span><br>      <span class="hljs-keyword">if</span> (_moduleInfo.<span class="hljs-property">deps</span>) modules.<span class="hljs-title function_">push</span>(...<span class="hljs-title function_">loadModules</span>(_moduleInfo.<span class="hljs-property">deps</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 返回加载的模块数组</span><br>    <span class="hljs-keyword">return</span> modules;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建模块映射表</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> modules 模块数组</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> 返回模块路径为键，模块对象为值的映射表</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">createModuleMap</span>(<span class="hljs-params">modules</span>) &#123;<br>    <span class="hljs-comment">// 使用reduce方法遍历modules数组，并返回一个对象</span><br>    <span class="hljs-keyword">return</span> modules.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">modulesMap, <span class="hljs-variable language_">module</span></span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 将module对象按照path属性作为键，module对象作为值存储到modulesMap对象中</span><br>      modulesMap[<span class="hljs-variable language_">module</span>.<span class="hljs-property">path</span>] = <span class="hljs-variable language_">module</span>;<br>      <span class="hljs-comment">// 返回更新后的modulesMap对象</span><br>      <span class="hljs-keyword">return</span> modulesMap;<br>      <span class="hljs-comment">// 初始值为一个空对象</span><br>    &#125;, &#123;&#125;);<br>  &#125;<br><br>  <span class="hljs-comment">// 加载入口模块，并递归加载依赖模块</span><br>  <span class="hljs-keyword">const</span> modulesArray = [moduleInfo].<span class="hljs-title function_">concat</span>(<span class="hljs-title function_">loadModules</span>(moduleInfo.<span class="hljs-property">deps</span>));<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">createModuleMap</span>(modulesArray);<br>&#125;<br><br><span class="hljs-keyword">const</span> entryModuleInfo = <span class="hljs-title function_">getModuleInfo</span>(entry);<br><br><span class="hljs-keyword">const</span> allModulesMap = <span class="hljs-title function_">parseModules</span>(entryModuleInfo);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理上下文，生成一个函数，该函数接受一个模块映射对象作为参数，</span><br><span class="hljs-comment"> * 并返回一个立即执行函数表达式，该函数内部定义了一个 require 函数，</span><br><span class="hljs-comment"> * 用于根据模块路径加载模块并执行模块代码，最后返回模块的导出对象。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> modulesMap 模块映射对象，键为模块路径，值为模块对象，</span><br><span class="hljs-comment"> * 模块对象包含两个属性：deps（依赖数组）和 code（模块代码字符串）。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回一个立即执行函数表达式的字符串形式。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleContext</span>(<span class="hljs-params">modulesMap</span>) &#123;<br>  <span class="hljs-keyword">const</span> modulesMapString = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(modulesMap);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`(function (modulesMap) &#123;</span><br><span class="hljs-string">    function require(path) &#123;</span><br><span class="hljs-string">      function absRequire(absPath) &#123;</span><br><span class="hljs-string">        return require(modulesMap[path].deps[absPath]);</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      var exports = &#123;&#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      (function (require, exports, code) &#123;</span><br><span class="hljs-string">        eval(code);</span><br><span class="hljs-string">      &#125;)(absRequire, exports, modulesMap[path].code);</span><br><span class="hljs-string"></span><br><span class="hljs-string">      return exports;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    require(&#x27;<span class="hljs-subst">$&#123;entry&#125;</span>&#x27;);</span><br><span class="hljs-string">  &#125;)(<span class="hljs-subst">$&#123;modulesMapString&#125;</span>);`</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建输出文件</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> _output 输出文件路径和文件名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> codeString 要写入的代码字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createOutPutFiles</span>(<span class="hljs-params">_output, codeString</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">createFolder</span>(<span class="hljs-params">path</span>) &#123;<br>    <span class="hljs-comment">// 判断目录是否存在，如果存在则删除</span><br>    <span class="hljs-keyword">const</span> isExist = fs.<span class="hljs-title function_">existsSync</span>(path);<br>    <span class="hljs-keyword">if</span> (isExist) fs.<span class="hljs-title function_">removeSync</span>(path);<br><br>    <span class="hljs-comment">// 创建目录</span><br>    fs.<span class="hljs-title function_">mkdirSync</span>(path);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建HTML文件</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> path 文件路径</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> scriptSrc 脚本源路径</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">createHTML</span>(<span class="hljs-params">path, scriptSrc</span>) &#123;<br>    <span class="hljs-keyword">const</span> htmlName = <span class="hljs-string">&quot;index.html&quot;</span>;<br>    <span class="hljs-comment">// HTML 内容的字符串</span><br>    <span class="hljs-keyword">const</span> htmlContent = fs.<span class="hljs-title function_">readFileSync</span>(htmlName, <span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>    <span class="hljs-comment">// 找到合适的插入点，这里假设在 body 结束前插入</span><br>    <span class="hljs-keyword">const</span> insertPointPattern = <span class="hljs-regexp">/&lt;\/body&gt;/i</span>;<br>    <span class="hljs-keyword">const</span> insertionPoint = htmlContent.<span class="hljs-title function_">search</span>(insertPointPattern);<br><br>    <span class="hljs-keyword">if</span> (insertionPoint !== -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// 创建 script 标签列表</span><br>      <span class="hljs-keyword">const</span> scriptTags = <span class="hljs-string">`&lt;script src=&quot;./<span class="hljs-subst">$&#123;scriptSrc&#125;</span>&quot;&gt;&lt;/script&gt;`</span>;<br><br>      <span class="hljs-comment">// 插入 script 标签到 HTML 内容中</span><br>      <span class="hljs-keyword">const</span> newHtmlContent = <span class="hljs-string">`<span class="hljs-subst">$&#123;htmlContent.slice(<span class="hljs-number">0</span>, insertionPoint)&#125;</span></span><br><span class="hljs-string">  <span class="hljs-subst">$&#123;scriptTags&#125;</span></span><br><span class="hljs-string"><span class="hljs-subst">$&#123;htmlContent.slice(insertionPoint)&#125;</span>`</span>;<br><br>      <span class="hljs-comment">// 创建 html 文件</span><br>      <span class="hljs-keyword">const</span> htmlPath = path + <span class="hljs-string">&quot;/&quot;</span> + htmlName;<br>      fs.<span class="hljs-title function_">writeFileSync</span>(htmlPath, newHtmlContent);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> &#123; path, filename &#125; = _output;<br>  <span class="hljs-comment">// 创建 输出目录</span><br>  <span class="hljs-title function_">createFolder</span>(path);<br>  <span class="hljs-comment">// 创建 bundle.js 文件</span><br>  fs.<span class="hljs-title function_">writeFileSync</span>(path + <span class="hljs-string">&quot;/&quot;</span> + filename, codeString);<br>  <span class="hljs-comment">// 创建 index.html 文件</span><br>  <span class="hljs-title function_">createHTML</span>(path, filename);<br>&#125;<br><br><span class="hljs-comment">// 最终生成的 bundle.js 的代码字符串</span><br><span class="hljs-keyword">const</span> bundle_js_code_string = <span class="hljs-title function_">handleContext</span>(allModulesMap);<br><span class="hljs-title function_">createOutPutFiles</span>(output, bundle_js_code_string);<br></code></pre></td></tr></table></figure><ol start="28"><li>运行<code>pnpm build</code>，生成如下代码：</li></ol><p><code>_dist/index.html</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>手写实现 Webpack<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我在手写实现 Webpack<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><code>_dist/bundle.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params">modulesMap</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">require</span>(<span class="hljs-params">path</span>) &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">absRequire</span>(<span class="hljs-params">absPath</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">require</span>(modulesMap[path].<span class="hljs-property">deps</span>[absPath]);<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">exports</span> = &#123;&#125;;<br><br>    (<span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, code</span>) &#123;<br>      <span class="hljs-built_in">eval</span>(code);<br>    &#125;)(absRequire, <span class="hljs-built_in">exports</span>, modulesMap[path].<span class="hljs-property">code</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">exports</span>;<br>  &#125;<br>  <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./src/index.js&quot;</span>);<br>&#125;)(&#123;<br>  <span class="hljs-string">&quot;./src/index.js&quot;</span>: &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>,<br>    <span class="hljs-attr">deps</span>: &#123; <span class="hljs-string">&quot;./add.js&quot;</span>: <span class="hljs-string">&quot;./src/add.js&quot;</span>, <span class="hljs-string">&quot;./minus.js&quot;</span>: <span class="hljs-string">&quot;./src/minus.js&quot;</span> &#125;,<br>    <span class="hljs-attr">code</span>: <span class="hljs-string">&#x27;&quot;use strict&quot;;\n\nvar _add = _interopRequireDefault(require(&quot;./add.js&quot;));\nvar _minus = require(&quot;./minus.js&quot;);\nfunction _interopRequireDefault(obj) &#123; return obj &amp;&amp; obj.__esModule ? obj : &#123; &quot;default&quot;: obj &#125;; &#125;\nvar sum = (0, _add[&quot;default&quot;])(1, 2);\nvar division = (0, _minus.minus)(2, 1);\nconsole.log(&quot;[ add(1, 2) ] &gt;&quot;, sum);\nconsole.log(&quot;[ minus(2, 1) ] &gt;&quot;, division);&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-string">&quot;./src/add.js&quot;</span>: &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;./src/add.js&quot;</span>,<br>    <span class="hljs-attr">deps</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">code</span>: <span class="hljs-string">&#x27;&quot;use strict&quot;;\n\nObject.defineProperty(exports, &quot;__esModule&quot;, &#123;\n  value: true\n&#125;);\nexports[&quot;default&quot;] = void 0;\nvar _default = exports[&quot;default&quot;] = function _default(a, b) &#123;\n  return a + b;\n&#125;;&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-string">&quot;./src/minus.js&quot;</span>: &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;./src/minus.js&quot;</span>,<br>    <span class="hljs-attr">deps</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">code</span>: <span class="hljs-string">&#x27;&quot;use strict&quot;;\n\nObject.defineProperty(exports, &quot;__esModule&quot;, &#123;\n  value: true\n&#125;);\nexports.minus = void 0;\nvar minus = exports.minus = function minus(a, b) &#123;\n  return a - b;\n&#125;;&#x27;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="29"><li>然后 Live Server 启动<code>_dist/index.html</code><img src="/img/images/2024/1710255314039-f0ddccce-e21b-4ac7-ad7d-8925333dd143.png"></li></ol><p>至此最简单的实现了手写 Webpack 功能<br>但真正的 Webpack 远远不止这么简单哈</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>上面手动实现了一个最简单的 Webpack 打包功能，可以发现我们以前配的 Webpack 选项影子<br>比如：entry、output<br>然后 Webpack 强大的在于<code>Loader、Plugin</code>系统，你可以粗暴理解就是我们手写时引入的其他依赖(<code>fs-extra、babel</code>)，帮我做更多的事情<br>只是 Webpack 的<code>Loader、Plugin</code>系统做的很完善和强大<br><strong>Webpack 原生</strong><code>**Loader**</code><strong>支持加载的文件有：JS 和 JSON</strong>，其他类型(css&#x2F;svg 等)的就要安装对应的<code>Loader</code>来处理</p><h2 id="Loader-简介"><a href="#Loader-简介" class="headerlink" title="Loader 简介"></a>Loader 简介</h2><p>是对模块的源代码进行转换的，默认只能处理<code>js、json</code>，其他类型的<code>css、txt、less 等</code>需要专门的 Loader 进行转换处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>:[ &#123; <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.less$/</span>, <span class="hljs-attr">use</span>: <span class="hljs-string">&#x27;less-loader&#x27;</span>&#125; ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Loader 是链式传递的，Webpack 会按顺序链式调用每个 Loader，Loader 的输入与输出都是字符串，并且每个 Loader 只应该做一件事并且无状态</p><blockquote><p>less-loader： 将 less 文件处理后通过 style 标签渲染到页面上</p></blockquote><h2 id="Plugin-简介"><a href="#Plugin-简介" class="headerlink" title="Plugin 简介"></a>Plugin 简介</h2><p>在 Webpack 构建工程中，特定时间注入的扩展逻辑，用来改变或优化构建结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HTMLWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">plugin</span>: [ <span class="hljs-keyword">new</span> <span class="hljs-title class_">HTMLWebpackPlugin</span>(&#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./public/index.html&#x27;</span>&#125;) ]<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义插件开发文档：<a href="https://webpack.docschina.org/contribute/writing-a-plugin/#tapasync">自定义插件 | webpack 中文文档</a>、<a href="https://webpack.docschina.org/api/compiler-hooks/#hooks">常用钩子</a><br>核心就是采用固定格式：写一个类，再写一个<code>apply</code>方法，通过<code>compiler.hooks[钩子名].tap(插件名称, 插件功能)</code>，然后重点写我们的<code>插件功能</code>即可。</p><p><code>插件功能</code>就可以随意发挥了，它是运行在<code>node</code>环境下的，所以可以使用<code>fs</code>来创建你想要的文件，也可以使用<code>jszip</code>将<code>dist</code>压缩为<code>.zip</code>等等，甚至可以使用<code>axios</code>调用接口干事情</p><p>比如写一个打包时，创建一个<code>version.json</code>文件的插件，用于表示本次的版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">emit</span>:输出 asset 到 output 目录之前执行。这个钩子不会被复制到子编译器。<br>     回调参数：compilation<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// RawSource 是其中一种 “源码”(&quot;sources&quot;) 类型，</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">RawSource</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack-sources&quot;</span>);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VersionFilePlugin</span> &#123;<br> <span class="hljs-title function_">apply</span>(<span class="hljs-params">compiler</span>) &#123;<br>  compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">emit</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-title class_">VersionFilePlugin</span>.<span class="hljs-property">name</span>, <span class="hljs-function">(<span class="hljs-params">compilation</span>) =&gt;</span> &#123;<br>   <span class="hljs-keyword">const</span> version = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">Number</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>())&#125;</span>_<span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.random().toString(<span class="hljs-number">36</span>)&#125;</span>`</span>;<br>   <span class="hljs-comment">// 向 compilation 添加新的资源，这样 webpack 就会自动生成并输出到 outputFile 目录</span><br>   compilation.<span class="hljs-title function_">emitAsset</span>(<br>    <span class="hljs-string">&quot;version.json&quot;</span>,<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">RawSource</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123; version &#125;)),<br>   );<br>  &#125;);<br> &#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; <span class="hljs-title class_">VersionFilePlugin</span> &#125;;<br><br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">VersionFilePlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../webpack-plugin/versionFile&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-keyword">new</span> <span class="hljs-title class_">VersionFilePlugin</span>()],<br>&#125;<br></code></pre></td></tr></table></figure><p>输入结果如下：<br><img src="/img/images/2024/1710293854750-65375a6f-b15a-4a67-a04f-0b8763f349ea.png"><img src="/img/images/2024/1710293865616-055edbe0-f13c-4bef-be69-9b9dff6b78f9.png"></p><h2 id="Chunk-简介"><a href="#Chunk-简介" class="headerlink" title="Chunk 简介"></a>Chunk 简介</h2><p><img src="/img/images/2024/1710295033517-ece7f062-1709-49aa-9f67-eae29f959b9a.jpeg"><br>Chunk：构建过程中产生的代码块，代表一组模块的集合。可通过分片技术生成不同的 chunks，最终生成不同的 bundle 文件</p><h2 id="Tree-Shaking-简介"><a href="#Tree-Shaking-简介" class="headerlink" title="Tree Shaking 简介"></a>Tree Shaking 简介</h2><p>官方文档：<a href="https://webpack.docschina.org/guides/tree-shaking#root">Tree Shaking | webpack 中文文档</a><br>Tree Shaking：“树摇”，将枯死的叶子摇掉。代码层面指：移除不使用的代码，可减少打包体积。<br>在 Webpack 中开启 Tree shaking 必须满足以下 3 个条件：<br>1、使用 ESM 写代码：<code>import、export、export default</code><br>2、配置<code>optimization.usedExports 为 true</code><br>3、启动优化功能，三选一<br>a、配置<code>mode=production</code>（常用的）<br>b、配置<code>optimization.minimize = true</code><br>c、配置<code>optimization.minimizer</code>数组</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>先<strong>标记</strong>模块导出中未被使用的值，再使用<code>terser</code>来删除相关代码。<br>流程：分析 -&gt; 标记 -&gt; 清除<br>基于生成的依赖关系图，分析对应的关系；将未使用的导出变量，存储为标记依赖图；生成代码时进行清除。</p><h2 id="Webpack-5-的新增功能"><a href="#Webpack-5-的新增功能" class="headerlink" title="Webpack 5 的新增功能"></a>Webpack 5 的新增功能</h2><p>1、新增了<code>cache</code>属性，可支持本地缓存编译结果，提供构建性能<br>2、内置了静态资源（如图片、字体等）的官方 Loader<br>3、提升了 Tree Shaking 能力<br>4、增加了模块联邦，支持共享代码模块</p><h2 id="一些优化思路"><a href="#一些优化思路" class="headerlink" title="一些优化思路"></a>一些优化思路</h2><p><strong>思路 1</strong>：先确定需要进行哪些优化，可基于 Webpack 的配置：resolve、module、externals、plugins 等<br><strong>思路 2</strong>：优化产物体积，利用<code>webpack-bundle-analyzer</code>插件进行分析<br><img src="/img/images/2024/1710310144994-2f646850-aba0-4488-91f6-93e7de490436.png"><br><strong>思路 3</strong>：优化构建速度，利用<code>speed-measure-webpack-plugin</code>插件进行分析<br><img src="/img/images/2024/1710310125123-5095c78d-f1d3-4693-9ccf-efd50358e9df.png"></p><h2 id="一些优化操作"><a href="#一些优化操作" class="headerlink" title="一些优化操作"></a>一些优化操作</h2><p>1、配置<code>[cache](https://webpack.docschina.org/configuration/cache/)</code>属性，会缓存生成的 webpack 模块和 chunk，<strong>来改善构建速度</strong>。Webpack5 之前使用专门的<code>cache-loader</code>来缓存<br>2、配置<code>[externals](https://webpack.docschina.org/configuration/externals/#externals)</code>属性，防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖(external dependencies)。<strong>可减少产物体积</strong><br>3、配置<code>[resolve.alias](https://webpack.docschina.org/configuration/resolve/#resolvealias)</code>属性，这样<code>Utilities</code>是一个绝对路径的别名，有助于降低解析文件的成本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">//...</span><br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-title class_">Utilities</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;src/utilities/&#x27;</span>),<br>      <span class="hljs-title class_">Templates</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;src/templates/&#x27;</span>),<br>    &#125;,<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// import Utility from &#x27;../../utilities/utility&#x27;;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Utility</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;Utilities/utility&#x27;</span>;<br></code></pre></td></tr></table></figure><p>4、配置<code>[resolve.mainFields](https://webpack.docschina.org/configuration/resolve/#resolvemainfields)</code>属性，影响 Webpack 搜索第三方库的顺序。一般 npm 库使用的是<code>main</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">//...</span><br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">mainFields</span>: [<span class="hljs-string">&#x27;main&#x27;</span>], <span class="hljs-comment">// 默认为 [&#x27;browser&#x27;, &#x27;module&#x27;, &#x27;main&#x27;]</span><br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>5、配置<code>[resolve.extensions](https://webpack.docschina.org/configuration/resolve/#resolveextensions)</code> 属性，影响 Webpack 解析文件的顺序，将高频文件类型放在前面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">//...</span><br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&#x27;.js&#x27;</span>, <span class="hljs-string">&#x27;.json&#x27;</span>, <span class="hljs-string">&#x27;.wasm&#x27;</span>],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>以上优化代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&quot;@&quot;</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./src&#x27;</span>),<br>      <span class="hljs-string">&quot;utils&quot;</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./src/utils&#x27;</span>)<br>    &#125;,<br><br>    <span class="hljs-attr">externals</span>: &#123;<br>      <span class="hljs-attr">react</span>: <span class="hljs-string">&#x27;React&#x27;</span>,<br>    &#125;,<br><br>    <span class="hljs-attr">mainFields</span>: [<span class="hljs-string">&#x27;main&#x27;</span>],<br>    <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&#x27;.js&#x27;</span>, <span class="hljs-string">&#x27;.jsx&#x27;</span>]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h1><p>新一代构建工具。<br>核心分为<strong>两个阶段</strong>：开发环境使用 <strong>Esbuild</strong>(干的事跟 Webpack 一样，速度却更快)；生成环境使用 <strong>Rollup</strong>；<br><strong>开发环境时</strong>：类似于<code>Webpack + Webpack Dev Server Plugin</code>的集合，<code>Vite</code>它自带<code>Dev Server</code>，当你采用<code>ESM</code>导入模块时，自建的<code>Dev Server</code>就给你按需编译(Esbuild)然后返回，这样就跳过了整体的打包流程，所以本地开发很快；<br><strong>生成环境时</strong>：使用 Rollup 将代码打包成 bundle</p><p>那为什么要使用两个构建工具呢？</p><ol><li>因为 Esbuild 不支持一些常用的设置<ol><li>不支持降级到 es5 的代码，低版本浏览器跑不起来(es6&#x2F;es7+)。</li><li>不支持 const、enum 等语法，会报错</li><li>打包不够灵活：无法配置打包流程、不支持代码分割</li></ol></li><li>所以生成环境要使用其他工具，然后 Rollup 比 Webpack 简单高效一些，所以用了 Rollup</li></ol><h1 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h1><p>Lerna：管理多版本的 npm，文档：<a href="https://lerna.js.org/docs/introduction">https://lerna.js.org/docs/introduction</a><br>Verdaccio：私有的 npm 代理仓库，文档：<a href="https://verdaccio.org/docs/what-is-verdaccio/">What is Verdaccio? | Verdaccio</a></p>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-1、工程化实战之前端脚手架</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/6-1%E3%80%81%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98%E4%B9%8B%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/6-1%E3%80%81%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98%E4%B9%8B%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="工程化定义"><a href="#工程化定义" class="headerlink" title="工程化定义"></a>工程化定义</h1><p>狭义上：基于研发流程的，包含：分支管理、开发环境、单元测试&#x2F;自动化测试、部署(CI&#x2F;CD)、等<br>广义上：开始写代码到发布、运维、bugfix、安全生产等，广义上就是很大的领域。<br><img src="/img/images/2024/1710120389136-2ec910cf-c328-4ab8-afea-054c8e79afc6.jpeg"></p><h1 id="AST"><a href="#AST" class="headerlink" title="AST"></a>AST</h1><p>Abstract Syntax Tree：抽象语法树，是源代码的抽象语法结构的树状表示。<br>常见的 JS AST，效果如下：<br><img src="/img/images/2024/1710121633421-641c5d4c-d39d-4d91-9443-f3dc9aac5a7e.png"><br>前端构建的基石就是它(Webpack、Babel、Eslint、Prettier)，从 Webpack 来说，它会去加载对应的模块(*.js)，然后解析为 AST，最后再转为处理过的 JS（压缩&#x2F;Tree-shake 等）<br>所以我们可以在这个过程中，基于 AST 去改动某点，这样最后生成的代码也就会有我们想要的“功能”。</p><p>转换为 AST 的过程为：解析(词法、语法) -&gt; 转换(特定转换规则) -&gt; 生成(对应语言代码字符串)<br>1、获取到源代码，通过<strong>词法分析</strong>，分成一个个“单词”(token)，一个 JSON 结构，特性：无语法信息，无法体现代码执行顺序<br><img src="/img/images/2024/1710122273244-2c861cae-d846-4b7f-8c47-b1654fc9a238.png"><br>2、基于 token 进行<strong>语法分析</strong>，将其转换为 AST，这是一个具有“语法”的树结构，每一层有相同的字段<br>3、基于语法分析所得的 AST，进行转换(二次加工)，基于<strong>自定义的转换规则</strong>对节点进行增删改查等操作<br>4、最后基于转换后的 AST，生成对应语言的代码字符串</p><h1 id="脚手架开发"><a href="#脚手架开发" class="headerlink" title="脚手架开发"></a>脚手架开发</h1><p>定义：快速、自动化的搭建、启动项目的工具<br>使用：通过命令行就能创建基于模板的项目</p><blockquote><p>vue-cli 的脚手架流程是：1、收集用户选项；2、去 github 拉取官方配好基础的模板；3、最后通过【选项+基础模板】生成完整的可用项目；最难的就是第 3 点</p></blockquote><p>本次我们实现的脚手架是：收集用户选项，去 github 拉取我们自己的模板，然后下载即可。</p><h2 id="所需依赖"><a href="#所需依赖" class="headerlink" title="所需依赖"></a>所需依赖</h2><blockquote><p>脚手架开发常用的依赖有：</p><ul><li><strong>path</strong>：提供了<strong>处理文件和目录路径</strong>的实用工具，比如路径的解析、组合和规范化等。</li><li><strong>chalk</strong>：一个流行的 Node.js 包，用于<strong>在终端输出彩色文本</strong>，有助于美化命令行输出，提升用户体验。</li><li><strong>fs-extra</strong>：是对 Node.js 内置文件系统（fs）模块的扩展，提供了更方便、更强大的<strong>文件和目录操作</strong>功能，如复制、移动、删除目录及其内容等。</li><li><strong>inquirer</strong>：一个命令行用户界面库，常用于<strong>创建交互式的命令行问答程序</strong>，帮助开发者在初始化项目时收集用户输入的信息。</li><li><strong>commander.js</strong>：另一个命令行接口（CLI）工具库，它简化了<strong>命令行选项、子命令和参数的解析</strong>过程，便于构建复杂的命令行工具。</li><li><strong>axios</strong>：是一个基于 Promise 的 HTTP 客户端，用于在 Node.js 环境中执行 HTTP 请求，这对于脚手架在初始化项目时<strong>从远程获取资源</strong></li><li><strong>download-git-repo</strong>：专门用于<strong>从 GitHub 或其他 Git 仓库下载项目的库</strong>，这对于脚手架根据用户选择的模板快速拉取项目源码非常便捷。</li><li><strong>ora</strong>: 用于在<strong>命令行中显示动画状态图</strong>标（spinner），在执行耗时较长的任务时，可以给用户提供正在运行中的反馈，提高用户体验。</li></ul></blockquote><ol><li>创建项目文件夹，命名自取</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir xxxxxx<br></code></pre></td></tr></table></figure><ol start="2"><li>初始化，使用 npm&#x2F;yarn&#x2F;pnpm 初始化</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">cd hzq-cli &amp;&amp; pnpm init<br></code></pre></td></tr></table></figure><ol start="3"><li>安装对应依赖，带特定版本号的是因为高版本不支持<code>cjs</code>了</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add path chalk@<span class="hljs-number">4</span> fs-extra inquirer@^<span class="hljs-number">8</span> commander axios download-git-repo ora@^<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h2 id="处理工程入口"><a href="#处理工程入口" class="headerlink" title="处理工程入口"></a>处理工程入口</h2><ol start="4"><li>新建入口文件<code>bin/hzqCli.js</code>，命名自取</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir bin &amp;&amp; touch bin/hzqCli.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ol start="5"><li>更改<code>package.json</code>的<code>main</code>为<code>bin/hzqCli.js</code></li></ol><p><img src="/img/images/2024/1710125557267-02c6c311-78c9-4f47-b87d-42d3ccd8c5bb.png"></p><ol start="6"><li>更改<code>package.json</code>的<code>bin</code>为<code>bin/hzqCli.js</code>（<code>bin</code>属性用于指定项目中包含的可执行脚本，并将其暴露为全局命令，全局安装此包后，就可在命令行直接运行<code>hzqCli</code>命令）</li></ol><p><img src="/img/images/2024/1710126802172-c093e66a-68e7-4e74-8d54-6ad2cf2c3c46.png"></p><ol start="7"><li><code>bin/hzqCli.js</code>初始化编码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">#! /usr/bin/env node</span><br><br><span class="hljs-comment">// 上述为 Node.js 脚本文件的行首注释，告知使用 node 来解析和执行后续的脚本内容</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello hzqCli&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="8"><li>本地开发时，可以通过运行<code>npm link</code>，可以实现<code>全局安装</code>的效果，这样可以本地调试与测试（只需要一次即可，后面该代码后不需要重复执行哦）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm link<br></code></pre></td></tr></table></figure><ol start="9"><li>命令行运行<code>hzqCli</code>，可以发现不会报错，并打印<code>hello hzqCli</code></li></ol><p><img src="/img/images/2024/1710127381286-410baa2f-b496-460b-a2f3-353bb5192664.png"></p><h2 id="功能开发"><a href="#功能开发" class="headerlink" title="功能开发"></a>功能开发</h2><p>进入<code>bin/hzqCli.js</code>，开始正式编码了，为了更容易理解编码过程，代码将采用分段形式来展示</p><h3 id="bin-hzqCli-js编码：基础命令-create-的基本逻辑"><a href="#bin-hzqCli-js编码：基础命令-create-的基本逻辑" class="headerlink" title="bin/hzqCli.js编码：基础命令 create 的基本逻辑"></a><code>bin/hzqCli.js</code>编码：基础命令 create 的基本逻辑</h3><ol start="10"><li><code>bin/hzqCli.js</code>编码（一）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">#! /usr/bin/env node</span><br><br><span class="hljs-comment">// 上述为 Node.js 脚本文件的行首注释，告知使用 node 来解析和执行后续的脚本内容</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello hzqCli&quot;</span>);<br><br><span class="hljs-comment">// 引入 commander 模块，官方使用文档：https://github.com/tj/commander.js/blob/HEAD/Readme_zh-CN.md</span><br><span class="hljs-keyword">const</span> &#123; program &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;commander&quot;</span>);<br><br><span class="hljs-comment">// 定义命令与参数，类似 hzqCli init、hzqCli list 等等</span><br><span class="hljs-comment">// create 的命令</span><br>program<br>  .<span class="hljs-title function_">command</span>(<span class="hljs-string">&quot;create &lt;projectName&gt;&quot;</span>)<br>  .<span class="hljs-title function_">description</span>(<span class="hljs-string">&quot;create a new project&quot;</span>)<br>  .<span class="hljs-title function_">option</span>(<span class="hljs-string">&quot;-f --force&quot;</span>, <span class="hljs-string">&quot;overwrite existed project&quot;</span>) <span class="hljs-comment">// 定义选项，同时可以附加选项的简介，短名称（-后面接单个字符）和长名称（--后面接一个或多个单词，空格分隔</span><br>  .<span class="hljs-title function_">action</span>(<span class="hljs-function">(<span class="hljs-params">projectName, options</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;create project: &quot;</span>, projectName);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;options: &quot;</span>, options);<br>  &#125;);<br><br><span class="hljs-comment">// 解析用户输入的命令和参数，第一个参数是要解析的字符串数组，第二个参数是解析选项</span><br>program.<span class="hljs-title function_">parse</span>(process.<span class="hljs-property">argv</span>); <span class="hljs-comment">// 指明，按 node 约定</span><br></code></pre></td></tr></table></figure><ol start="11"><li>命令行运行<code>hzqCli create xx -f、hzqCli create 112</code>，可以看到如下结果</li></ol><p><img src="/img/images/2024/1710128244896-dfcde708-835a-4b76-a692-4d12f087149b.png"></p><h3 id="lib-create-js编码：基础命令-create-调用的实际方法"><a href="#lib-create-js编码：基础命令-create-调用的实际方法" class="headerlink" title="lib/create.js编码：基础命令 create 调用的实际方法"></a><code>lib/create.js</code>编码：基础命令 create 调用的实际方法</h3><ol start="12"><li>新建具体执行代码文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir lib &amp;&amp; touch lib/create.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ol start="13"><li><code>bin/hzqCli.js</code>编码（二），引入<code>lib/create.js</code></li></ol><p><img src="/img/images/2024/1710128530726-003dd194-1093-4b51-8c63-da44ad14d032.png"></p><ol start="14"><li><code>lib/create.js</code>编码（一）：项目路径处理</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建的流程：</span><br><span class="hljs-comment">// 1、 判断项目是否存在(可以单独写个方法 checkFileExist)</span><br><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>); <span class="hljs-comment">// 路径处理</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs-extra&quot;</span>); <span class="hljs-comment">// 文件操作</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkFileExist</span>(<span class="hljs-params">path</span>) &#123;&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">projectName, options</span>) &#123;<br>  <span class="hljs-comment">// 1、判断项目是否存在</span><br><br>  <span class="hljs-comment">// 1.1 获取当前项目的完整路径：当前命令行的路径 + 项目名称</span><br>  <span class="hljs-keyword">const</span> projectPath = path.<span class="hljs-title function_">join</span>(process.<span class="hljs-title function_">cwd</span>(), projectName);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>    <span class="hljs-string">&quot;%c [ projectPath ]-11-「create.js」&quot;</span>,<br>    <span class="hljs-string">&quot;font-size:13px; background:#9ad82a; color:#deff6e;&quot;</span>,<br>    projectPath<br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="15"><li>编码时，随时可运行命令<code>hzqCli create 112</code>进行调试哦，看来我们的处理获取是正确的</li></ol><p><img src="/img/images/2024/1710128912582-472390d5-1ceb-446a-95a8-d8d12d962d18.png"></p><ol start="16"><li><code>lib/create.js</code>编码（二）：检查路径是否存在</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建的流程：</span><br><span class="hljs-comment">// 1、 判断项目是否存在(可以单独写个方法 checkFileExist)</span><br><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>); <span class="hljs-comment">// 路径处理</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs-extra&quot;</span>); <span class="hljs-comment">// 文件操作</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkFileExist</span>(<span class="hljs-params">path</span>) &#123;<br>  <span class="hljs-keyword">return</span> fs.<span class="hljs-title function_">existsSync</span>(path);<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">projectName, options</span>) &#123;<br>  <span class="hljs-comment">// 1、判断项目是否存在</span><br><br>  <span class="hljs-comment">// 1.1 获取当前项目的完整路径：当前命令行的路径 + 项目名称</span><br>  <span class="hljs-keyword">const</span> projectPath = path.<span class="hljs-title function_">join</span>(process.<span class="hljs-title function_">cwd</span>(), projectName);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>    <span class="hljs-string">&quot;%c [ projectPath ]-11-「create.js」&quot;</span>,<br>    <span class="hljs-string">&quot;font-size:13px; background:#9ad82a; color:#deff6e;&quot;</span>,<br>    projectPath<br>  );<br>  <span class="hljs-keyword">const</span> isExits = <span class="hljs-keyword">await</span> <span class="hljs-title function_">checkFileExist</span>(projectPath);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ isExits ] &gt;&quot;</span>, isExits);<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="17"><li>运行调试</li></ol><p><img src="/img/images/2024/1710129096770-3c871ba9-24e4-4731-b91d-32e7d23170a1.png"></p><ol start="18"><li><code>lib/create.js</code>编码（三）：针对检查路径是否存在做不同处理</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建的流程：</span><br><span class="hljs-comment">// 1、 判断项目是否存在(可以单独写个方法 checkFileExist)</span><br><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>); <span class="hljs-comment">// 路径处理</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs-extra&quot;</span>); <span class="hljs-comment">// 文件操作</span><br><span class="hljs-keyword">const</span> inquirer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;inquirer&quot;</span>); <span class="hljs-comment">// 命令行交互</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 异步检查文件是否存在</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> path 文件路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回一个布尔值，表示文件是否存在</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">checkFileExist</span>(<span class="hljs-params">path</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> fs.<span class="hljs-title function_">existsSync</span>(path);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 异步删除文件</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> path 文件路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回删除操作的结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">removeFile</span>(<span class="hljs-params">path</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> fs.<span class="hljs-title function_">removeSync</span>(path);<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">projectName, options</span>) &#123;<br>  <span class="hljs-comment">// 1、判断项目是否存在 -- start</span><br><br>  <span class="hljs-comment">// 1.1 获取当前项目的完整路径：当前命令行的路径 + 项目名称</span><br>  <span class="hljs-keyword">const</span> projectPath = path.<span class="hljs-title function_">join</span>(process.<span class="hljs-title function_">cwd</span>(), projectName);<br><br>  <span class="hljs-comment">// 1.2 判断项目是否存在</span><br>  <span class="hljs-keyword">const</span> isExits = <span class="hljs-keyword">await</span> <span class="hljs-title function_">checkFileExist</span>(projectPath);<br><br>  <span class="hljs-keyword">if</span> (isExits) &#123;<br>    <span class="hljs-comment">// 1.2.1 项目已经存在</span><br>    <span class="hljs-comment">// 再判断是否需要强制创建</span><br>    <span class="hljs-keyword">if</span> (options.<span class="hljs-property">force</span>) &#123;<br>      <span class="hljs-comment">// 1.2.1.1 强制创建：则删除已存在项目，继续走创建流程</span><br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">removeFile</span>(projectPath);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 1.2.1.2 不强制创建：则询问用户是否确认覆盖</span><br>      <span class="hljs-keyword">const</span> answer = <span class="hljs-keyword">await</span> inquirer.<span class="hljs-title function_">prompt</span>([<br>        &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;choosedForce&quot;</span>,<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;list&quot;</span>,<br>          <span class="hljs-attr">message</span>: <span class="hljs-string">`请选择是否覆盖已存在的 <span class="hljs-subst">$&#123;projectName&#125;</span> 文件？`</span>,<br>          <span class="hljs-attr">choices</span>: [<br>            &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;是（选择后将删除文件）&quot;</span>, <span class="hljs-attr">value</span>: <span class="hljs-literal">true</span> &#125;,<br>            &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;否（选择后将退出流程）&quot;</span>, <span class="hljs-attr">value</span>: <span class="hljs-literal">false</span> &#125;,<br>          ],<br>        &#125;,<br>      ]);<br><br>      <span class="hljs-keyword">if</span> (answer.<span class="hljs-property">choosedForce</span>) &#123;<br>        <span class="hljs-comment">// 1.2.1.2.1 是：则删除已存在项目，继续走创建流程</span><br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">removeFile</span>(projectPath);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 1.2.1.2.2 否：则退出</span><br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 2、创建项目流程 -- todo</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="lib-generator-js编码：创建项目流程"><a href="#lib-generator-js编码：创建项目流程" class="headerlink" title="lib/generator.js编码：创建项目流程"></a><code>lib/generator.js</code>编码：创建项目流程</h3><ol start="19"><li>创建对应文件，并初始化代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch lib/generator.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 写如下代码：</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generator</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">projectName, projectPath</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">projectName</span> = projectName;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">projectPath</span> = projectPath;<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 创建文件</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ create todo ] &gt;&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">projectName</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">projectPath</span>);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="20"><li><code>lib/create.js</code> 引入<code>Generator</code>，最末尾加上：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// .....</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Generator</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./generator&quot;</span>); <span class="hljs-comment">// ++++++</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">projectName, options</span>) &#123;<br>  <span class="hljs-comment">// .....</span><br><br>  <span class="hljs-comment">// 2、创建项目流程 -- start</span><br>  <span class="hljs-keyword">const</span> generator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generator</span>(projectName, projectPath); <span class="hljs-comment">// ++++++</span><br>  <span class="hljs-keyword">await</span> generator.<span class="hljs-title function_">create</span>(); <span class="hljs-comment">// 创建项目 // ++++++</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="22"><li>运行命令<code>hzqCli create 123</code></li></ol><p><img src="/img/images/2024/1710132072864-ad1bd688-9402-44e5-b7d7-43eaecb33465.png"></p><ol start="23"><li><code>lib/generator.js</code>编码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;util&quot;</span>); <span class="hljs-comment">// 工具库</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">DownloadGitRepo</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;download-git-repo&quot;</span>); <span class="hljs-comment">// 下载 git 仓库</span><br><span class="hljs-keyword">const</span> &#123; getRepoList, getTagList, <span class="hljs-variable constant_">OWNER</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./https&quot;</span>);<br><span class="hljs-keyword">const</span> inquirer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;inquirer&quot;</span>); <span class="hljs-comment">// 命令行交互</span><br><span class="hljs-keyword">const</span> &#123; spinner &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./log&quot;</span>);<br><br><span class="hljs-comment">// 将 DownloadGitRepo promise 化，因为它本身不是 promise 风格的</span><br><span class="hljs-keyword">const</span> downloadGitRepo = util.<span class="hljs-title function_">promisify</span>(<span class="hljs-title class_">DownloadGitRepo</span>);<br><br><span class="hljs-comment">// 封装一个 loading 函数，方便使用</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">createLoading</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">fn, msg, ...fnArgs</span>) =&gt; &#123;<br>  spinner.<span class="hljs-title function_">start</span>(msg);<br><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">let</span> result;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> fn === <span class="hljs-string">&quot;function&quot;</span>) result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fn</span>(...fnArgs);<br><br>    spinner.<span class="hljs-title function_">succeed</span>();<br>    <span class="hljs-keyword">return</span> result;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    spinner.<span class="hljs-title function_">fail</span>(<span class="hljs-string">`【<span class="hljs-subst">$&#123;msg&#125;</span>】error: `</span> + error.<span class="hljs-property">message</span>);<br>    spinner.<span class="hljs-title function_">fail</span>(<span class="hljs-string">`【<span class="hljs-subst">$&#123;msg&#125;</span>】failed, please try again later.`</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generator</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">projectName, projectFullPath</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">projectName</span> = projectName;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">projectFullPath</span> = projectFullPath;<br>  &#125;<br><br>  <span class="hljs-comment">// 核心创建流程</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 创建的流程是：</span><br>    <span class="hljs-comment">// 1、用户已选择的模板名称</span><br>    <span class="hljs-keyword">const</span> repoName = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getRepo</span>();<br><br>    <span class="hljs-keyword">if</span> (repoName) &#123;<br>      <span class="hljs-comment">// 2、用户已选择的模板版本</span><br>      <span class="hljs-keyword">const</span> tag = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getTag</span>(repoName);<br><br>      <span class="hljs-comment">// 3、下载模板到项目内</span><br>      <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">download</span>(repoName, tag);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">getRepo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 1、从远端拉取可选择的模板数据(使用 ora 加 loading)</span><br>    <span class="hljs-comment">// 2、让用户选择模板</span><br>    <span class="hljs-comment">// 3、提供给用户选择，并得到已选的模板</span><br><br>    <span class="hljs-comment">// 1、</span><br>    <span class="hljs-keyword">const</span> repoList = <span class="hljs-keyword">await</span> <span class="hljs-title function_">createLoading</span>(getRepoList, <span class="hljs-string">&quot;Loading templates...&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!repoList?.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// 2、</span><br>    <span class="hljs-keyword">const</span> chooseTemplateList = repoList.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">name</span>);<br><br>    <span class="hljs-comment">// 3、</span><br>    <span class="hljs-keyword">const</span> promptName = <span class="hljs-string">&quot;choosedTemplateName&quot;</span>;<br>    <span class="hljs-keyword">const</span> answer = <span class="hljs-keyword">await</span> inquirer.<span class="hljs-title function_">prompt</span>([<br>      &#123;<br>        <span class="hljs-attr">name</span>: promptName,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;list&quot;</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">`请选择对应模板`</span>,<br>        <span class="hljs-attr">choices</span>: chooseTemplateList,<br>      &#125;,<br>    ]);<br><br>    <span class="hljs-keyword">return</span> answer[promptName];<br>  &#125;<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">getTag</span>(<span class="hljs-params">repoName</span>) &#123;<br>    <span class="hljs-keyword">const</span> tagList = <span class="hljs-keyword">await</span> <span class="hljs-title function_">createLoading</span>(<br>      getTagList,<br>      <span class="hljs-string">&quot;Loading versions...&quot;</span>,<br>      repoName<br>    );<br><br>    <span class="hljs-keyword">if</span> (!tagList?.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">return</span> tagList[<span class="hljs-number">0</span>];<br>  &#125;<br><br>  <span class="hljs-comment">// 下载 github 仓库</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">repoName, tag</span>) &#123;<br>    <span class="hljs-keyword">const</span> repoUrl = <span class="hljs-string">`<span class="hljs-subst">$&#123;OWNER&#125;</span>/<span class="hljs-subst">$&#123;repoName&#125;</span><span class="hljs-subst">$&#123;tag ? <span class="hljs-string">&quot;#&quot;</span> + tag : <span class="hljs-string">&quot;&quot;</span>&#125;</span>`</span>;<br><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">createLoading</span>(<br>      downloadGitRepo,<br>      <span class="hljs-string">&quot;download template...&quot;</span>,<br>      repoUrl,<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">projectFullPath</span><br>    );<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="23"><li>新建请求工具</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch lib/https.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 写如下代码：</span><br><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;axios&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">BASEURL</span> = <span class="hljs-string">&quot;https://api.github.com&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">OWNER</span> = <span class="hljs-string">&quot;hzq-fe-template&quot;</span>;<br><br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">baseURL</span> = <span class="hljs-variable constant_">BASEURL</span>;<br><br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">common</span>[<span class="hljs-string">&quot;User-Agent&quot;</span>] = <span class="hljs-string">&quot;myTestApp&quot;</span>; <span class="hljs-comment">// 不加这个会报 403 错误</span><br><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.<span class="hljs-property">data</span>); <span class="hljs-comment">// 处理 github api 返回的数据</span><br><br><span class="hljs-comment">// 通过调用 github API 来获取模板列表</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getRepoList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 从 orgs/hzq-fe-template/repos 获取模板列表</span><br>  <span class="hljs-comment">// 具体 github 地址为：https://github.com/orgs/hzq-fe-template/repositories</span><br>  <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">`/orgs/<span class="hljs-subst">$&#123;OWNER&#125;</span>/repos`</span>);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getTagList</span>(<span class="hljs-params">repoName</span>) &#123;<br>  <span class="hljs-comment">// 从 repos/hzq-fe-template/$&#123;repo&#125;/tags 获取模板列表</span><br>  <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">`/repos/<span class="hljs-subst">$&#123;OWNER&#125;</span>/<span class="hljs-subst">$&#123;repoName&#125;</span>/tags`</span>);<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-variable constant_">OWNER</span>,<br>  getRepoList,<br>  getTagList,<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="24"><li>新建打印工具</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch lib/log.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 写如下代码：</span><br><span class="hljs-keyword">const</span> ora = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;ora&quot;</span>);<br><span class="hljs-keyword">const</span> chalk = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;chalk&quot;</span>);<br><br><span class="hljs-keyword">const</span> log = &#123;<br>  <span class="hljs-attr">successText</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">msg</span>) &#123;<br>    <span class="hljs-keyword">return</span> chalk.<span class="hljs-property">green</span>.<span class="hljs-title function_">bold</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;msg&#125;</span>`</span>);<br>  &#125;,<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">msg</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">successText</span>(msg));<br>  &#125;,<br>  <span class="hljs-attr">errorText</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">msg</span>) &#123;<br>    <span class="hljs-keyword">return</span> chalk.<span class="hljs-title function_">red</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;msg&#125;</span>`</span>);<br>  &#125;,<br>  <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">msg</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">errorText</span>(msg));<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// 创建一个spinner实例：初始为【青色并加粗】</span><br><span class="hljs-keyword">const</span> spinner = <span class="hljs-title function_">ora</span>();<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  log,<br>  <span class="hljs-attr">spinner</span>: &#123;<br>    <span class="hljs-title function_">start</span>(<span class="hljs-params">text = <span class="hljs-string">&quot;&quot;</span></span>) &#123;<br>      spinner.<span class="hljs-title function_">start</span>(text);<br>    &#125;,<br>    <span class="hljs-title function_">succeed</span>(<span class="hljs-params">text = <span class="hljs-string">&quot;&quot;</span></span>) &#123;<br>      spinner.<span class="hljs-title function_">succeed</span>(log.<span class="hljs-title function_">successText</span>(text));<br>    &#125;,<br>    <span class="hljs-title function_">fail</span>(<span class="hljs-params">text = <span class="hljs-string">&quot;&quot;</span></span>) &#123;<br>      spinner.<span class="hljs-title function_">fail</span>(log.<span class="hljs-title function_">errorText</span>(text));<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="25"><li>运行命令，就可以正确下载了</li></ol><p><img src="/img/images/2024/1710144632547-3d93d6de-b6bb-413d-8a88-d5aae1d5047d.png"><br><img src="/img/images/2024/1710144639652-ff69cffe-a75b-4d76-a36d-1b3990f1c599.png"></p><h3 id="异常情况"><a href="#异常情况" class="headerlink" title="异常情况"></a>异常情况</h3><p>由于 github API 自身的限制：<a href="https://docs.github.com/en/rest/using-the-rest-api/rate-limits-for-the-rest-api?apiVersion=2022-11-28#exceeding-the-rate-limit">超过速率限制</a> 后会 403，所以不是很容易的成功……</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>讲述了前端工程化可做的事情：可从研发流程切入</li><li>讲述了 AST 的基础概念</li><li>通过手写实现了一个脚手架</li></ol><p>脚手架代码地址：<a href="https://github.com/MrHzq/scaffold-actual-combat">https://github.com/MrHzq/scaffold-actual-combat</a></p>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5-1、React 实战之从零到一的项目搭建与开发</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/5-1%E3%80%81React%20%E5%AE%9E%E6%88%98%E4%B9%8B%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%BC%80%E5%8F%91/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/5-1%E3%80%81React%20%E5%AE%9E%E6%88%98%E4%B9%8B%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="1、Mono-仓库搭建"><a href="#1、Mono-仓库搭建" class="headerlink" title="1、Mono 仓库搭建"></a>1、Mono 仓库搭建</h1><p>Mono：单一；repo：repository 仓库<br>Monorepo：指的是多个项目用一个仓库来管理<br><a href="https://juejin.cn/post/7207743145999368229">为什么越来越多的项目选择 Monorepo？ - 掘金</a></p><p>本次采用<code>pnpm v7.30.3</code>来搭建，<code>node</code>版本为<code>v16.14.0</code></p><h2 id="搭建步骤如下"><a href="#搭建步骤如下" class="headerlink" title="搭建步骤如下"></a>搭建步骤如下</h2><p>所有带<strong>数字编号</strong>的都是要操作的步骤哦</p><h3 id="初始化工程"><a href="#初始化工程" class="headerlink" title="初始化工程"></a>初始化工程</h3><ol><li>初始化并生成一个<code>package.json</code>文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm init<br></code></pre></td></tr></table></figure><ol start="2"><li>创建<code>pnpm-workspace.yaml</code>文件，并填入如下内容：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch pnpm-workspace.<span class="hljs-property">yaml</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">packages:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;packages/**&quot;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>创建<code>packages</code>文件夹</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir packages<br></code></pre></td></tr></table></figure><ol start="4"><li>创建<code>apps、components、libs</code>三个文件夹</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir packages/apps packages/components packages/libs<br></code></pre></td></tr></table></figure><ol start="5"><li>初始化<code>apps</code>下面的项目，<code>react-master</code>可任意取名</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">cd packages/apps &amp;&amp; mkdir react-master &amp;&amp; cd react-master &amp;&amp; pnpm init &amp;&amp; touch index.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ol start="6"><li>初始化<code>libs</code>下面的项目，<code>react-test-utils</code>可任意取名</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">cd ../../../ &amp;&amp; cd packages/libs &amp;&amp; mkdir react-test-utils &amp;&amp; cd react-test-utils &amp;&amp; pnpm init &amp;&amp; touch index.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ol start="7"><li>在<code>libs/react-test-utils/index.js</code>内写如下代码：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getName</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this is react-test-utils&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="npm-包的安装"><a href="#npm-包的安装" class="headerlink" title="npm 包的安装"></a>npm 包的安装</h3><h4 id="项目全局安装"><a href="#项目全局安装" class="headerlink" title="项目全局安装"></a>项目全局安装</h4><p>这样安装的包三个项目都可以使用，核心命令<code>-w 或 --workspace</code><br>完整命令：<code>pnpm add XXX -w</code>，在<code>项目根路径</code>运行如下命令，将在当前文件创建<code>node_modules</code></p><ol start="8"><li>全局安装<code>eslint</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add eslint -D -w<br></code></pre></td></tr></table></figure><h4 id="局部安装"><a href="#局部安装" class="headerlink" title="局部安装"></a>局部安装</h4><p>将对应的包安装到对应的项目中去，核心命令<code>--filter=packageName</code><br>完整命令：<code>pnpm add XXX --filter=packageName</code>，在<code>项目根路径</code>运行如下命令，将在<code>packageName</code>创建<code>node_modules</code></p><ol start="9"><li>给<code>apps/test-pro</code>项目安装<code>lodash</code>（根目录运行）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add lodash --filter=react-master<br></code></pre></td></tr></table></figure><blockquote><p>PS：也可以 cd 到 test-pro 内，然后安装依赖 pnpm add lodash</p></blockquote><h4 id="内部安装"><a href="#内部安装" class="headerlink" title="内部安装"></a>内部安装</h4><p>使用 Mono 形式后，支持互相作为 npm 包进行安装引用，语法跟局部安装一样<br>完整命令：<code>pnpm add packageName1 --filter=packageName2</code>，解释：将<code>packageName1</code>作为 npm 包安装到<code>packageName2</code>中</p><ol start="10"><li>将<code>libs/test-util</code>安装到<code>apps/test-pro</code>内（根目录运行）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add react-test-utils --filter=react-master<br></code></pre></td></tr></table></figure><p>以下是<code>apps/react-test-pro/package.json</code>，可以看到<code>react-test-utils</code>作为依赖成功被安装了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;react-master&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;keywords&quot;</span>: [],<br>  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span>,<br>  <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;lodash&quot;</span>: <span class="hljs-string">&quot;^4.17.21&quot;</span>,<br>    <span class="hljs-string">&quot;react-test-utils&quot;</span>: <span class="hljs-string">&quot;workspace:^1.0.0&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>PS：若内部包名与外部(npm 上)包名重复，优先安装外部的，所以内部包名最好取的唯一一点</p></blockquote><h3 id="安装基础环境-根目录下"><a href="#安装基础环境-根目录下" class="headerlink" title="安装基础环境(根目录下)"></a>安装基础环境(根目录下)</h3><h4 id="eslint-环境"><a href="#eslint-环境" class="headerlink" title="eslint 环境"></a>eslint 环境</h4><blockquote><p>eslint 检测代码错误的</p></blockquote><ol start="11"><li>根目录，运行：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npx eslint --init<br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1709800832052-29f9c9ae-8d1a-4e5b-b096-12a7eaeb1acb.png"></p><ol start="12"><li>根目录，手动安装（因为缺了 -w 所以上一步安装报警告）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest -D -w<br></code></pre></td></tr></table></figure><h4 id="prettier-环境"><a href="#prettier-环境" class="headerlink" title="prettier 环境"></a>prettier 环境</h4><blockquote><p>prettier 处理代码风格的</p></blockquote><ol start="13"><li>根目录，运行：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add prettier -D -w<br></code></pre></td></tr></table></figure><ol start="14"><li>根目录，新建<code>.prettierrc.json</code>文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch .<span class="hljs-property">prettierrc</span>.<span class="hljs-property">json</span><br></code></pre></td></tr></table></figure><ol start="15"><li>然后简单写如下配置，可以自行网上找更丰富的配置项</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;printWidth&quot;</span>: <span class="hljs-number">80</span>,<br>    <span class="hljs-string">&quot;tabWidth&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;useTabs&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="16"><li>安装对应的 vscode 插件，才能起作用哦<br><img src="/img/images/2024/1709801671722-35e3994b-8428-42e8-a42e-4b81f4e6c220.png"></li><li>但<code>prettier</code>可能会和<code>eslint</code>其冲突，所以还要安装(根目录)：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add eslint-plugin-prettier eslint-config-prettier -D -w<br></code></pre></td></tr></table></figure><ol start="18"><li>进入<code>.eslintrc.json</code>加上安装的插件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  ....<br><br>  <span class="hljs-string">&quot;plugins&quot;</span>: [<span class="hljs-string">&quot;@typescript-eslint&quot;</span>, <span class="hljs-string">&quot;prettier&quot;</span>],<br><br>  ....<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="安装-TypeScript"><a href="#安装-TypeScript" class="headerlink" title="安装 TypeScript"></a>安装 TypeScript</h3><blockquote><p>tsc、ts-loader、@babel&#x2F;preset-typescript 的区别与使用</p><p>1、tsc：TypeScript 的官方编译器，将 TS 代码转为 JS 代码，并进行类型检查、支持 TS 泛型、枚举等转为 JS<br>2、ts-loader：一个 webpack loader，它内部调用了 TypeScript 的官方编译器(tsc)，所以它两能共用 tsconfig.json<br>3、@babel&#x2F;preset-typescript： 只将 TS 代码转为 JS 代码，不进行类型检查，所以为了实现类型检查，就需要用 tsc 的配置</p><p>使用：一般项目，不使用 tsc 生成代码，只让它做类型检查。<br>项目中没 babel，就用 tsc + ts-loader；有 babel 就用 @babel&#x2F;preset-typescript + tsc(类型检查)</p></blockquote><ol start="19"><li>去进入项目<code>packages/apps/react-master</code>，命令行运行，创建 tsconfig.json 配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">tsc --init<br></code></pre></td></tr></table></figure><p>会生成如下的配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br> <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>  <span class="hljs-comment">/* Visit https://aka.ms/tsconfig to read more about this file */</span><br><br>  <span class="hljs-comment">/* Projects */</span><br>  <span class="hljs-comment">// &quot;incremental&quot;: true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */</span><br>  <span class="hljs-comment">// &quot;composite&quot;: true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */</span><br>  <span class="hljs-comment">// &quot;tsBuildInfoFile&quot;: &quot;./.tsbuildinfo&quot;,              /* Specify the path to .tsbuildinfo incremental compilation file. */</span><br>  <span class="hljs-comment">// &quot;disableSourceOfProjectReferenceRedirect&quot;: true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */</span><br>  <span class="hljs-comment">// &quot;disableSolutionSearching&quot;: true,                 /* Opt a project out of multi-project reference checking when editing. */</span><br>  <span class="hljs-comment">// &quot;disableReferencedProjectLoad&quot;: true,             /* Reduce the number of projects loaded automatically by TypeScript. */</span><br><br>  <span class="hljs-comment">/* Language and Environment */</span><br>  <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;es2016&quot;</span> <span class="hljs-comment">/* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */</span>,<br>  <span class="hljs-comment">// &quot;lib&quot;: [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */</span><br>  <span class="hljs-comment">// &quot;jsx&quot;: &quot;preserve&quot;,                                /* Specify what JSX code is generated. */</span><br>  <span class="hljs-comment">// &quot;experimentalDecorators&quot;: true,                   /* Enable experimental support for legacy experimental decorators. */</span><br>  <span class="hljs-comment">// &quot;emitDecoratorMetadata&quot;: true,                    /* Emit design-type metadata for decorated declarations in source files. */</span><br>  <span class="hljs-comment">// &quot;jsxFactory&quot;: &quot;&quot;,                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. &#x27;React.createElement&#x27; or &#x27;h&#x27;. */</span><br>  <span class="hljs-comment">// &quot;jsxFragmentFactory&quot;: &quot;&quot;,                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. &#x27;React.Fragment&#x27; or &#x27;Fragment&#x27;. */</span><br>  <span class="hljs-comment">// &quot;jsxImportSource&quot;: &quot;&quot;,                            /* Specify module specifier used to import the JSX factory functions when using &#x27;jsx: react-jsx*&#x27;. */</span><br>  <span class="hljs-comment">// &quot;reactNamespace&quot;: &quot;&quot;,                             /* Specify the object invoked for &#x27;createElement&#x27;. This only applies when targeting &#x27;react&#x27; JSX emit. */</span><br>  <span class="hljs-comment">// &quot;noLib&quot;: true,                                    /* Disable including any library files, including the default lib.d.ts. */</span><br>  <span class="hljs-comment">// &quot;useDefineForClassFields&quot;: true,                  /* Emit ECMAScript-standard-compliant class fields. */</span><br>  <span class="hljs-comment">// &quot;moduleDetection&quot;: &quot;auto&quot;,                        /* Control what method is used to detect module-format JS files. */</span><br><br>  <span class="hljs-comment">/* Modules */</span><br>  <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;commonjs&quot;</span> <span class="hljs-comment">/* Specify what module code is generated. */</span>,<br>  <span class="hljs-comment">// &quot;rootDir&quot;: &quot;./&quot;,                                  /* Specify the root folder within your source files. */</span><br>  <span class="hljs-comment">// &quot;moduleResolution&quot;: &quot;node10&quot;,                     /* Specify how TypeScript looks up a file from a given module specifier. */</span><br>  <span class="hljs-comment">// &quot;baseUrl&quot;: &quot;./&quot;,                                  /* Specify the base directory to resolve non-relative module names. */</span><br>  <span class="hljs-comment">// &quot;paths&quot;: &#123;&#125;,                                      /* Specify a set of entries that re-map imports to additional lookup locations. */</span><br>  <span class="hljs-comment">// &quot;rootDirs&quot;: [],                                   /* Allow multiple folders to be treated as one when resolving modules. */</span><br>  <span class="hljs-comment">// &quot;typeRoots&quot;: [],                                  /* Specify multiple folders that act like &#x27;./node_modules/@types&#x27;. */</span><br>  <span class="hljs-comment">// &quot;types&quot;: [],                                      /* Specify type package names to be included without being referenced in a source file. */</span><br>  <span class="hljs-comment">// &quot;allowUmdGlobalAccess&quot;: true,                     /* Allow accessing UMD globals from modules. */</span><br>  <span class="hljs-comment">// &quot;moduleSuffixes&quot;: [],                             /* List of file name suffixes to search when resolving a module. */</span><br>  <span class="hljs-comment">// &quot;allowImportingTsExtensions&quot;: true,               /* Allow imports to include TypeScript file extensions. Requires &#x27;--moduleResolution bundler&#x27; and either &#x27;--noEmit&#x27; or &#x27;--emitDeclarationOnly&#x27; to be set. */</span><br>  <span class="hljs-comment">// &quot;resolvePackageJsonExports&quot;: true,                /* Use the package.json &#x27;exports&#x27; field when resolving package imports. */</span><br>  <span class="hljs-comment">// &quot;resolvePackageJsonImports&quot;: true,                /* Use the package.json &#x27;imports&#x27; field when resolving imports. */</span><br>  <span class="hljs-comment">// &quot;customConditions&quot;: [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */</span><br>  <span class="hljs-comment">// &quot;resolveJsonModule&quot;: true,                        /* Enable importing .json files. */</span><br>  <span class="hljs-comment">// &quot;allowArbitraryExtensions&quot;: true,                 /* Enable importing files with any extension, provided a declaration file is present. */</span><br>  <span class="hljs-comment">// &quot;noResolve&quot;: true,                                /* Disallow &#x27;import&#x27;s, &#x27;require&#x27;s or &#x27;&lt;reference&gt;&#x27;s from expanding the number of files TypeScript should add to a project. */</span><br><br>  <span class="hljs-comment">/* JavaScript Support */</span><br>  <span class="hljs-comment">// &quot;allowJs&quot;: true,                                  /* Allow JavaScript files to be a part of your program. Use the &#x27;checkJS&#x27; option to get errors from these files. */</span><br>  <span class="hljs-comment">// &quot;checkJs&quot;: true,                                  /* Enable error reporting in type-checked JavaScript files. */</span><br>  <span class="hljs-comment">// &quot;maxNodeModuleJsDepth&quot;: 1,                        /* Specify the maximum folder depth used for checking JavaScript files from &#x27;node_modules&#x27;. Only applicable with &#x27;allowJs&#x27;. */</span><br><br>  <span class="hljs-comment">/* Emit */</span><br>  <span class="hljs-comment">// &quot;declaration&quot;: true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */</span><br>  <span class="hljs-comment">// &quot;declarationMap&quot;: true,                           /* Create sourcemaps for d.ts files. */</span><br>  <span class="hljs-comment">// &quot;emitDeclarationOnly&quot;: true,                      /* Only output d.ts files and not JavaScript files. */</span><br>  <span class="hljs-comment">// &quot;sourceMap&quot;: true,                                /* Create source map files for emitted JavaScript files. */</span><br>  <span class="hljs-comment">// &quot;inlineSourceMap&quot;: true,                          /* Include sourcemap files inside the emitted JavaScript. */</span><br>  <span class="hljs-comment">// &quot;outFile&quot;: &quot;./&quot;,                                  /* Specify a file that bundles all outputs into one JavaScript file. If &#x27;declaration&#x27; is true, also designates a file that bundles all .d.ts output. */</span><br>  <span class="hljs-comment">// &quot;outDir&quot;: &quot;./&quot;,                                   /* Specify an output folder for all emitted files. */</span><br>  <span class="hljs-comment">// &quot;removeComments&quot;: true,                           /* Disable emitting comments. */</span><br>  <span class="hljs-comment">// &quot;noEmit&quot;: true,                                   /* Disable emitting files from a compilation. */</span><br>  <span class="hljs-comment">// &quot;importHelpers&quot;: true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */</span><br>  <span class="hljs-comment">// &quot;importsNotUsedAsValues&quot;: &quot;remove&quot;,               /* Specify emit/checking behavior for imports that are only used for types. */</span><br>  <span class="hljs-comment">// &quot;downlevelIteration&quot;: true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */</span><br>  <span class="hljs-comment">// &quot;sourceRoot&quot;: &quot;&quot;,                                 /* Specify the root path for debuggers to find the reference source code. */</span><br>  <span class="hljs-comment">// &quot;mapRoot&quot;: &quot;&quot;,                                    /* Specify the location where debugger should locate map files instead of generated locations. */</span><br>  <span class="hljs-comment">// &quot;inlineSources&quot;: true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */</span><br>  <span class="hljs-comment">// &quot;emitBOM&quot;: true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */</span><br>  <span class="hljs-comment">// &quot;newLine&quot;: &quot;crlf&quot;,                                /* Set the newline character for emitting files. */</span><br>  <span class="hljs-comment">// &quot;stripInternal&quot;: true,                            /* Disable emitting declarations that have &#x27;@internal&#x27; in their JSDoc comments. */</span><br>  <span class="hljs-comment">// &quot;noEmitHelpers&quot;: true,                            /* Disable generating custom helper functions like &#x27;__extends&#x27; in compiled output. */</span><br>  <span class="hljs-comment">// &quot;noEmitOnError&quot;: true,                            /* Disable emitting files if any type checking errors are reported. */</span><br>  <span class="hljs-comment">// &quot;preserveConstEnums&quot;: true,                       /* Disable erasing &#x27;const enum&#x27; declarations in generated code. */</span><br>  <span class="hljs-comment">// &quot;declarationDir&quot;: &quot;./&quot;,                           /* Specify the output directory for generated declaration files. */</span><br>  <span class="hljs-comment">// &quot;preserveValueImports&quot;: true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */</span><br><br>  <span class="hljs-comment">/* Interop Constraints */</span><br>  <span class="hljs-comment">// &quot;isolatedModules&quot;: true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */</span><br>  <span class="hljs-comment">// &quot;verbatimModuleSyntax&quot;: true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file&#x27;s format based on the &#x27;module&#x27; setting. */</span><br>  <span class="hljs-comment">// &quot;allowSyntheticDefaultImports&quot;: true,             /* Allow &#x27;import x from y&#x27; when a module doesn&#x27;t have a default export. */</span><br>  <span class="hljs-string">&quot;esModuleInterop&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">/* Emit additional JavaScript to ease support for importing CommonJS modules. This enables &#x27;allowSyntheticDefaultImports&#x27; for type compatibility. */</span>,<br>  <span class="hljs-comment">// &quot;preserveSymlinks&quot;: true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */</span><br>  <span class="hljs-string">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">/* Ensure that casing is correct in imports. */</span>,<br><br>  <span class="hljs-comment">/* Type Checking */</span><br>  <span class="hljs-string">&quot;strict&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">/* Enable all strict type-checking options. */</span>,<br>  <span class="hljs-comment">// &quot;noImplicitAny&quot;: true,                            /* Enable error reporting for expressions and declarations with an implied &#x27;any&#x27; type. */</span><br>  <span class="hljs-comment">// &quot;strictNullChecks&quot;: true,                         /* When type checking, take into account &#x27;null&#x27; and &#x27;undefined&#x27;. */</span><br>  <span class="hljs-comment">// &quot;strictFunctionTypes&quot;: true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */</span><br>  <span class="hljs-comment">// &quot;strictBindCallApply&quot;: true,                      /* Check that the arguments for &#x27;bind&#x27;, &#x27;call&#x27;, and &#x27;apply&#x27; methods match the original function. */</span><br>  <span class="hljs-comment">// &quot;strictPropertyInitialization&quot;: true,             /* Check for class properties that are declared but not set in the constructor. */</span><br>  <span class="hljs-comment">// &quot;noImplicitThis&quot;: true,                           /* Enable error reporting when &#x27;this&#x27; is given the type &#x27;any&#x27;. */</span><br>  <span class="hljs-comment">// &quot;useUnknownInCatchVariables&quot;: true,               /* Default catch clause variables as &#x27;unknown&#x27; instead of &#x27;any&#x27;. */</span><br>  <span class="hljs-comment">// &quot;alwaysStrict&quot;: true,                             /* Ensure &#x27;use strict&#x27; is always emitted. */</span><br>  <span class="hljs-comment">// &quot;noUnusedLocals&quot;: true,                           /* Enable error reporting when local variables aren&#x27;t read. */</span><br>  <span class="hljs-comment">// &quot;noUnusedParameters&quot;: true,                       /* Raise an error when a function parameter isn&#x27;t read. */</span><br>  <span class="hljs-comment">// &quot;exactOptionalPropertyTypes&quot;: true,               /* Interpret optional property types as written, rather than adding &#x27;undefined&#x27;. */</span><br>  <span class="hljs-comment">// &quot;noImplicitReturns&quot;: true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */</span><br>  <span class="hljs-comment">// &quot;noFallthroughCasesInSwitch&quot;: true,               /* Enable error reporting for fallthrough cases in switch statements. */</span><br>  <span class="hljs-comment">// &quot;noUncheckedIndexedAccess&quot;: true,                 /* Add &#x27;undefined&#x27; to a type when accessed using an index. */</span><br>  <span class="hljs-comment">// &quot;noImplicitOverride&quot;: true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */</span><br>  <span class="hljs-comment">// &quot;noPropertyAccessFromIndexSignature&quot;: true,       /* Enforces using indexed accessors for keys declared using an indexed type. */</span><br>  <span class="hljs-comment">// &quot;allowUnusedLabels&quot;: true,                        /* Disable error reporting for unused labels. */</span><br>  <span class="hljs-comment">// &quot;allowUnreachableCode&quot;: true,                     /* Disable error reporting for unreachable code. */</span><br><br>  <span class="hljs-comment">/* Completeness */</span><br>  <span class="hljs-comment">// &quot;skipDefaultLibCheck&quot;: true,                      /* Skip type checking .d.ts files that are included with TypeScript. */</span><br>  <span class="hljs-string">&quot;skipLibCheck&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">/* Skip type checking all .d.ts files. */</span><br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="20"><li>配置微调，调整完毕后如下：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br> <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>  <span class="hljs-comment">/* Visit https://aka.ms/tsconfig to read more about this file */</span><br><br>  <span class="hljs-comment">/* Projects */</span><br>  <span class="hljs-comment">// &quot;incremental&quot;: true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */</span><br>  <span class="hljs-comment">// &quot;composite&quot;: true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */</span><br>  <span class="hljs-comment">// &quot;tsBuildInfoFile&quot;: &quot;./.tsbuildinfo&quot;,              /* Specify the path to .tsbuildinfo incremental compilation file. */</span><br>  <span class="hljs-comment">// &quot;disableSourceOfProjectReferenceRedirect&quot;: true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */</span><br>  <span class="hljs-comment">// &quot;disableSolutionSearching&quot;: true,                 /* Opt a project out of multi-project reference checking when editing. */</span><br>  <span class="hljs-comment">// &quot;disableReferencedProjectLoad&quot;: true,             /* Reduce the number of projects loaded automatically by TypeScript. */</span><br><br>  <span class="hljs-comment">/* Language and Environment */</span><br>  <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;es2016&quot;</span> <span class="hljs-comment">/* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */</span>,<br>  <span class="hljs-string">&quot;lib&quot;</span>: [<br>   <span class="hljs-string">&quot;DOM&quot;</span>,<br>   <span class="hljs-string">&quot;DOM.Iterable&quot;</span>,<br>   <span class="hljs-string">&quot;ESNext&quot;</span><br>  ] <span class="hljs-comment">/* Specify a set of bundled library declaration files that describe the target runtime environment. */</span>,<br>  <span class="hljs-string">&quot;jsx&quot;</span>: <span class="hljs-string">&quot;react&quot;</span> <span class="hljs-comment">/* Specify what JSX code is generated. */</span>,<br>  <span class="hljs-string">&quot;experimentalDecorators&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">/* Enable experimental support for legacy experimental decorators. */</span>,<br>  <span class="hljs-string">&quot;emitDecoratorMetadata&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">/* Emit design-type metadata for decorated declarations in source files. */</span>,<br>  <span class="hljs-comment">// &quot;jsxFactory&quot;: &quot;&quot;,                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. &#x27;React.createElement&#x27; or &#x27;h&#x27;. */</span><br>  <span class="hljs-comment">// &quot;jsxFragmentFactory&quot;: &quot;&quot;,                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. &#x27;React.Fragment&#x27; or &#x27;Fragment&#x27;. */</span><br>  <span class="hljs-comment">// &quot;jsxImportSource&quot;: &quot;&quot;,                            /* Specify module specifier used to import the JSX factory functions when using &#x27;jsx: react-jsx*&#x27;. */</span><br>  <span class="hljs-comment">// &quot;reactNamespace&quot;: &quot;&quot;,                             /* Specify the object invoked for &#x27;createElement&#x27;. This only applies when targeting &#x27;react&#x27; JSX emit. */</span><br>  <span class="hljs-comment">// &quot;noLib&quot;: true,                                    /* Disable including any library files, including the default lib.d.ts. */</span><br>  <span class="hljs-comment">// &quot;useDefineForClassFields&quot;: true,                  /* Emit ECMAScript-standard-compliant class fields. */</span><br>  <span class="hljs-comment">// &quot;moduleDetection&quot;: &quot;auto&quot;,                        /* Control what method is used to detect module-format JS files. */</span><br><br>  <span class="hljs-comment">/* Modules */</span><br>  <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;ESNext&quot;</span> <span class="hljs-comment">/* Specify what module code is generated. */</span>,<br>  <span class="hljs-comment">// &quot;rootDir&quot;: &quot;./&quot;,                                  /* Specify the root folder within your source files. */</span><br>  <span class="hljs-string">&quot;moduleResolution&quot;</span>: <span class="hljs-string">&quot;node&quot;</span> <span class="hljs-comment">/* Specify how TypeScript looks up a file from a given module specifier. */</span>,<br>  <span class="hljs-comment">// &quot;baseUrl&quot;: &quot;./&quot;,                                  /* Specify the base directory to resolve non-relative module names. */</span><br>  <span class="hljs-comment">// &quot;paths&quot;: &#123;&#125;,                                      /* Specify a set of entries that re-map imports to additional lookup locations. */</span><br>  <span class="hljs-comment">// &quot;rootDirs&quot;: [],                                   /* Allow multiple folders to be treated as one when resolving modules. */</span><br>  <span class="hljs-comment">// &quot;typeRoots&quot;: [],                                  /* Specify multiple folders that act like &#x27;./node_modules/@types&#x27;. */</span><br>  <span class="hljs-comment">// &quot;types&quot;: [],                                      /* Specify type package names to be included without being referenced in a source file. */</span><br>  <span class="hljs-comment">// &quot;allowUmdGlobalAccess&quot;: true,                     /* Allow accessing UMD globals from modules. */</span><br>  <span class="hljs-comment">// &quot;moduleSuffixes&quot;: [],                             /* List of file name suffixes to search when resolving a module. */</span><br>  <span class="hljs-comment">// &quot;allowImportingTsExtensions&quot;: true,               /* Allow imports to include TypeScript file extensions. Requires &#x27;--moduleResolution bundler&#x27; and either &#x27;--noEmit&#x27; or &#x27;--emitDeclarationOnly&#x27; to be set. */</span><br>  <span class="hljs-comment">// &quot;resolvePackageJsonExports&quot;: true,                /* Use the package.json &#x27;exports&#x27; field when resolving package imports. */</span><br>  <span class="hljs-comment">// &quot;resolvePackageJsonImports&quot;: true,                /* Use the package.json &#x27;imports&#x27; field when resolving imports. */</span><br>  <span class="hljs-comment">// &quot;customConditions&quot;: [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */</span><br>  <span class="hljs-string">&quot;resolveJsonModule&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">/* Enable importing .json files. */</span>,<br>  <span class="hljs-comment">// &quot;allowArbitraryExtensions&quot;: true,                 /* Enable importing files with any extension, provided a declaration file is present. */</span><br>  <span class="hljs-comment">// &quot;noResolve&quot;: true,                                /* Disallow &#x27;import&#x27;s, &#x27;require&#x27;s or &#x27;&lt;reference&gt;&#x27;s from expanding the number of files TypeScript should add to a project. */</span><br><br>  <span class="hljs-comment">/* JavaScript Support */</span><br>  <span class="hljs-string">&quot;allowJs&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">/* Allow JavaScript files to be a part of your program. Use the &#x27;checkJS&#x27; option to get errors from these files. */</span>,<br>  <span class="hljs-comment">// &quot;checkJs&quot;: true,                                  /* Enable error reporting in type-checked JavaScript files. */</span><br>  <span class="hljs-comment">// &quot;maxNodeModuleJsDepth&quot;: 1,                        /* Specify the maximum folder depth used for checking JavaScript files from &#x27;node_modules&#x27;. Only applicable with &#x27;allowJs&#x27;. */</span><br><br>  <span class="hljs-comment">/* Emit */</span><br>  <span class="hljs-comment">// &quot;declaration&quot;: true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */</span><br>  <span class="hljs-comment">// &quot;declarationMap&quot;: true,                           /* Create sourcemaps for d.ts files. */</span><br>  <span class="hljs-comment">// &quot;emitDeclarationOnly&quot;: true,                      /* Only output d.ts files and not JavaScript files. */</span><br>  <span class="hljs-comment">// &quot;sourceMap&quot;: true,                                /* Create source map files for emitted JavaScript files. */</span><br>  <span class="hljs-comment">// &quot;inlineSourceMap&quot;: true,                          /* Include sourcemap files inside the emitted JavaScript. */</span><br>  <span class="hljs-comment">// &quot;outFile&quot;: &quot;./&quot;,                                  /* Specify a file that bundles all outputs into one JavaScript file. If &#x27;declaration&#x27; is true, also designates a file that bundles all .d.ts output. */</span><br>  <span class="hljs-comment">// &quot;outDir&quot;: &quot;./&quot;,                                   /* Specify an output folder for all emitted files. */</span><br>  <span class="hljs-comment">// &quot;removeComments&quot;: true,                           /* Disable emitting comments. */</span><br>  <span class="hljs-string">&quot;noEmit&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">/* 不输出文件，只做类型检查 */</span> <span class="hljs-comment">/* Disable emitting files from a compilation. */</span>,<br>  <span class="hljs-comment">// &quot;importHelpers&quot;: true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */</span><br>  <span class="hljs-comment">// &quot;importsNotUsedAsValues&quot;: &quot;remove&quot;,               /* Specify emit/checking behavior for imports that are only used for types. */</span><br>  <span class="hljs-comment">// &quot;downlevelIteration&quot;: true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */</span><br>  <span class="hljs-comment">// &quot;sourceRoot&quot;: &quot;&quot;,                                 /* Specify the root path for debuggers to find the reference source code. */</span><br>  <span class="hljs-comment">// &quot;mapRoot&quot;: &quot;&quot;,                                    /* Specify the location where debugger should locate map files instead of generated locations. */</span><br>  <span class="hljs-comment">// &quot;inlineSources&quot;: true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */</span><br>  <span class="hljs-comment">// &quot;emitBOM&quot;: true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */</span><br>  <span class="hljs-comment">// &quot;newLine&quot;: &quot;crlf&quot;,                                /* Set the newline character for emitting files. */</span><br>  <span class="hljs-comment">// &quot;stripInternal&quot;: true,                            /* Disable emitting declarations that have &#x27;@internal&#x27; in their JSDoc comments. */</span><br>  <span class="hljs-comment">// &quot;noEmitHelpers&quot;: true,                            /* Disable generating custom helper functions like &#x27;__extends&#x27; in compiled output. */</span><br>  <span class="hljs-comment">// &quot;noEmitOnError&quot;: true,                            /* Disable emitting files if any type checking errors are reported. */</span><br>  <span class="hljs-comment">// &quot;preserveConstEnums&quot;: true,                       /* Disable erasing &#x27;const enum&#x27; declarations in generated code. */</span><br>  <span class="hljs-comment">// &quot;declarationDir&quot;: &quot;./&quot;,                           /* Specify the output directory for generated declaration files. */</span><br>  <span class="hljs-comment">// &quot;preserveValueImports&quot;: true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */</span><br><br>  <span class="hljs-comment">/* Interop Constraints */</span><br>  <span class="hljs-string">&quot;isolatedModules&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">/* Ensure that each file can be safely transpiled without relying on other imports. */</span>,<br>  <span class="hljs-comment">// &quot;verbatimModuleSyntax&quot;: true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file&#x27;s format based on the &#x27;module&#x27; setting. */</span><br>  <span class="hljs-string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">/* Allow &#x27;import x from y&#x27; when a module doesn&#x27;t have a default export. */</span>,<br>  <span class="hljs-string">&quot;esModuleInterop&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">/* Emit additional JavaScript to ease support for importing CommonJS modules. This enables &#x27;allowSyntheticDefaultImports&#x27; for type compatibility. */</span>,<br>  <span class="hljs-comment">// &quot;preserveSymlinks&quot;: true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */</span><br>  <span class="hljs-string">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">/* Ensure that casing is correct in imports. */</span>,<br><br>  <span class="hljs-comment">/* Type Checking */</span><br>  <span class="hljs-string">&quot;strict&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">/* Enable all strict type-checking options. */</span>,<br>  <span class="hljs-comment">// &quot;noImplicitAny&quot;: true,                            /* Enable error reporting for expressions and declarations with an implied &#x27;any&#x27; type. */</span><br>  <span class="hljs-comment">// &quot;strictNullChecks&quot;: true,                         /* When type checking, take into account &#x27;null&#x27; and &#x27;undefined&#x27;. */</span><br>  <span class="hljs-comment">// &quot;strictFunctionTypes&quot;: true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */</span><br>  <span class="hljs-comment">// &quot;strictBindCallApply&quot;: true,                      /* Check that the arguments for &#x27;bind&#x27;, &#x27;call&#x27;, and &#x27;apply&#x27; methods match the original function. */</span><br>  <span class="hljs-comment">// &quot;strictPropertyInitialization&quot;: true,             /* Check for class properties that are declared but not set in the constructor. */</span><br>  <span class="hljs-comment">// &quot;noImplicitThis&quot;: true,                           /* Enable error reporting when &#x27;this&#x27; is given the type &#x27;any&#x27;. */</span><br>  <span class="hljs-comment">// &quot;useUnknownInCatchVariables&quot;: true,               /* Default catch clause variables as &#x27;unknown&#x27; instead of &#x27;any&#x27;. */</span><br>  <span class="hljs-comment">// &quot;alwaysStrict&quot;: true,                             /* Ensure &#x27;use strict&#x27; is always emitted. */</span><br>  <span class="hljs-comment">// &quot;noUnusedLocals&quot;: true,                           /* Enable error reporting when local variables aren&#x27;t read. */</span><br>  <span class="hljs-comment">// &quot;noUnusedParameters&quot;: true,                       /* Raise an error when a function parameter isn&#x27;t read. */</span><br>  <span class="hljs-comment">// &quot;exactOptionalPropertyTypes&quot;: true,               /* Interpret optional property types as written, rather than adding &#x27;undefined&#x27;. */</span><br>  <span class="hljs-comment">// &quot;noImplicitReturns&quot;: true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */</span><br>  <span class="hljs-comment">// &quot;noFallthroughCasesInSwitch&quot;: true,               /* Enable error reporting for fallthrough cases in switch statements. */</span><br>  <span class="hljs-comment">// &quot;noUncheckedIndexedAccess&quot;: true,                 /* Add &#x27;undefined&#x27; to a type when accessed using an index. */</span><br>  <span class="hljs-comment">// &quot;noImplicitOverride&quot;: true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */</span><br>  <span class="hljs-comment">// &quot;noPropertyAccessFromIndexSignature&quot;: true,       /* Enforces using indexed accessors for keys declared using an indexed type. */</span><br>  <span class="hljs-comment">// &quot;allowUnusedLabels&quot;: true,                        /* Disable error reporting for unused labels. */</span><br>  <span class="hljs-comment">// &quot;allowUnreachableCode&quot;: true,                     /* Disable error reporting for unreachable code. */</span><br><br>  <span class="hljs-comment">/* Completeness */</span><br>  <span class="hljs-comment">// &quot;skipDefaultLibCheck&quot;: true,                      /* Skip type checking .d.ts files that are included with TypeScript. */</span><br>  <span class="hljs-string">&quot;skipLibCheck&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">/* Skip type checking all .d.ts files. */</span><br> &#125;,<br> <span class="hljs-string">&quot;include&quot;</span>: [<span class="hljs-string">&quot;./src/**/*&quot;</span>],<br> <span class="hljs-string">&quot;exclude&quot;</span>: [<span class="hljs-string">&quot;node_modules&quot;</span>, <span class="hljs-string">&quot;dist&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="react-master-项目配置"><a href="#react-master-项目配置" class="headerlink" title="react-master 项目配置"></a>react-master 项目配置</h3><p>react-master 将作为 react 项目</p><h4 id="删除-新建一些东西"><a href="#删除-新建一些东西" class="headerlink" title="删除&#x2F;新建一些东西"></a>删除&#x2F;新建一些东西</h4><ol start="21"><li>react-master 目录下，删除 index.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">rm index.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ol start="22"><li>react-master 目录下，删除 package.json 下多余的 <code>dependencies</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm remove lodash react-test-utils<br></code></pre></td></tr></table></figure><ol start="23"><li>react-master 目录下，创建<code>src</code>与<code>index.tsx</code>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir src &amp;&amp; touch src/index.<span class="hljs-property">tsx</span><br></code></pre></td></tr></table></figure><h4 id="安装-Webpack、babel-等一系列环境"><a href="#安装-Webpack、babel-等一系列环境" class="headerlink" title="安装 Webpack、babel 等一系列环境"></a>安装 Webpack、babel 等一系列环境</h4><ol start="24"><li>react-master 目录下，运行安装命令：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add webpack webpack-cli webpack-merge webpack-dev-server @babel/core @babel/preset-react @babel/preset-env @babel/preset-typescript babel-loader css-loader style-loader less less-loader postcss postcss-loader tailwindcss autoprefixer html-webpack-plugin css-minimizer-webpack-plugin terser-webpack-plugin mini-css-extract-plugin cross-env -D<br></code></pre></td></tr></table></figure><blockquote><p>安装的包归类：</p></blockquote><blockquote><p>1、webpack 类：webpack webpack-cli webpack-merge webpack-dev-server<br>2、babel 类：babel-loader 依赖 @babel&#x2F;core；解析 React 则要安装 @babel&#x2F;preset-react；解析 TS 则安装 @babel&#x2F;preset-typescript ；解析环境则安装 @babel&#x2F;preset-env<br>3、css 编译器：css-loader style-loader less less-loader<br>4、postcss postcss-loader<br>5、tailwindcss autoprefixer<br>6、html-webpack-plugin<br>7、css-minimizer-webpack-plugin terser-webpack-plugin mini-css-extract-plugin<br>8、cross-env</p></blockquote><p><strong>通义千问的详细解释：</strong></p><blockquote><p>以下是这些 NPM 包的功能和用途的简要归类解释：</p><ol><li><strong>pnpm</strong>:</li></ol><ul><li>pnpm 是一个高效的 JavaScript 包管理器，采用了硬链接和内容寻址存储的方式来优化磁盘空间和缓存性能，特别适合在大型项目和 Monorepo 中使用。</li></ul><ol start="2"><li><strong>webpack</strong>:</li></ol><ul><li>webpack 是一款流行的模块打包工具，负责将项目中的 JavaScript、CSS、图片等资源组织在一起，通过 loaders 和 plugins 处理和转换源文件，最终生成优化过的 bundle 文件。</li></ul><ol start="3"><li><strong>webpack-cli</strong>:</li></ol><ul><li>webpack-cli 是 webpack 的命令行接口，提供了一系列命令用于与 webpack 交互，执行构建、配置、打包等任务。</li></ul><ol start="4"><li><strong>webpack-merge</strong>:</li></ol><ul><li>webpack-merge 是一个用于合并 webpack 配置对象的工具，便于在不同环境（如开发、生产）间共享基础配置并叠加特定环境的配置。</li></ul><ol start="5"><li><strong>webpack-dev-server</strong>:</li></ol><ul><li>webpack-dev-server 是一个小型的静态文件服务器，配合 webpack 使用，可以实现热模块替换(HMR)、自动刷新等功能，用于快速开发调试。</li></ul><ol start="6"><li><strong>@babel&#x2F;core</strong>:</li></ol><ul><li>Babel 核心包，用于转译 JavaScript 代码，支持 ES6+、JSX 等新的语言特性转换为旧版本 JavaScript。</li></ul><ol start="7"><li><strong>@babel&#x2F;preset-react</strong>:</li></ol><ul><li>Babel 预设，用于将 React 的 JSX 语法转换为标准的 JavaScript。</li></ul><ol start="8"><li><strong>@babel&#x2F;preset-env</strong>:</li></ol><ul><li>Babel 预设，根据目标环境自动应用兼容性 polyfill 和转换，使新版本 JavaScript 代码能在老版本浏览器运行。</li></ul><ol start="9"><li><strong>@babel&#x2F;preset-typescript</strong>:</li></ol><ul><li>Babel 预设，用于编译 TypeScript 代码为 JavaScript。</li></ul><ol start="10"><li><strong>babel-loader</strong>:</li></ol><ul><li>webpack 加载器，用于配合 Babel 将源代码通过 Babel 转换后再传递给 webpack 进行打包。</li></ul><ol start="11"><li><strong>css-loader</strong>:</li></ol><ul><li>webpack 加载器，用于处理 CSS 文件，支持导入和导出 CSS 语句。</li></ul><ol start="12"><li><strong>style-loader</strong>:</li></ol><ul><li>webpack 加载器，将 CSS 代码插入到 JavaScript 中，通过动态样式标签注入到 DOM 中，实现 CSS 的实时加载。</li></ul><ol start="13"><li><strong>less</strong>:</li></ol><ul><li>Less 是一种 CSS 预处理器，提供变量、嵌套、混合等高级功能。</li></ul><ol start="14"><li><strong>less-loader</strong>:</li></ol><ul><li>webpack 加载器，用于将 Less 文件编译成 CSS。</li></ul><ol start="15"><li><strong>postcss</strong>:</li></ol><ul><li>PostCSS 是一个 CSS 处理工具，支持一系列插件对 CSS 进行扩展和转换。</li></ul><ol start="16"><li><strong>postcss-loader</strong>:</li></ol><ul><li>webpack 加载器，用于在 webpack 流程中运行 PostCSS。</li></ul><ol start="17"><li><strong>tailwindcss</strong>:</li></ol><ul><li>一个实用的 CSS 框架，提供了一整套原子级实用类，用于快速构建自定义响应式界面。</li></ul><ol start="18"><li><strong>autoprefixer</strong>:</li></ol><ul><li>PostCSS 的一个插件，自动为 CSS 添加 vendor 前缀，确保跨浏览器兼容性。</li></ul><ol start="19"><li><strong>html-webpack-plugin</strong>:</li></ol><ul><li>生成 HTML 文件并自动引入打包后的 JavaScript 和 CSS 文件。</li></ul><ol start="20"><li><strong>css-minimizer-webpack-plugin</strong>:</li></ol><ul><li>用于压缩输出的 CSS 文件，减少文件大小。</li></ul><ol start="21"><li><strong>terser-webpack-plugin</strong>:</li></ol><ul><li>用于压缩 JavaScript 文件，是一个替代 UglifyJS 的 webpack 插件，提供了更好的 ES6+ 代码压缩能力。</li></ul><ol start="22"><li><strong>mini-css-extract-plugin</strong>:</li></ol><ul><li>从 JavaScript 文件中提取 CSS 代码到单独的 CSS 文件中，有利于 CSS 文件的缓存和分离样式与脚本。</li></ul><ol start="23"><li><strong>cross-env</strong>:</li></ol><ul><li>设置跨平台的环境变量，使得在 Windows、Unix 等不同操作系统上的环境变量设置变得简单。</li></ul></blockquote><h4 id="安装-React-相关"><a href="#安装-React-相关" class="headerlink" title="安装 React 相关"></a>安装 React 相关</h4><ol start="25"><li>react-master 目录下，运行安装命令：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add react react-dom react-router-dom @types/react @types/react-dom @types/react-router-dom<br></code></pre></td></tr></table></figure><h4 id="带来的思考：前端的方案"><a href="#带来的思考：前端的方案" class="headerlink" title="带来的思考：前端的方案"></a>带来的思考：前端的方案</h4><p>刚刚进行了<code>react-master</code>项目的配置，那从中可以思考下：前端的方案有哪些？</p><h5 id="构建方案"><a href="#构建方案" class="headerlink" title="构建方案"></a>构建方案</h5><p>构建关键词：bundle、chunk、module、channel</p><p><strong>module：</strong>构建的基本单元，从构建角度来说任何文件(.js&#x2F;.css&#x2F;.json 等)都是一个 Module，基于模块构建依赖关系<br><strong>chunk：</strong>一般指中间产物，代表一组模块的集合，会根据模块的依赖关系生成 chunks。chunks 之后会被打进一个&#x2F;多个 bundle 里面。比如通过代码分割（code splitting）功能来创建按需加载的代码块，会形成一个 chunks<br><strong>bundle：</strong>一般指最终产物，比如：mian.xxx.js，它可能是把所有文件(js&#x2F;css&#x2F;图片等)合在一起形成的，浏览器可以直接加载它来运行应用程序<br><strong>channel：</strong>一般跟 uri 挂钩，代表唯一的地址。</p><p>常用方案有：Bundled 与 Bundleless<br><strong>Bundled</strong>：打包的最终产物为一个 js，典型工具：Webpack、Rollup<br><strong>Bundleless</strong>：几乎不打包，利用 ESM 进行加载使用，典型工具：Vite、Snowpack</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jquery&#x27;</span><br></code></pre></td></tr></table></figure><p>工具&#x2F;组件库还希望产物有目录结构，比如下面这种结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Button</span><br>  -index.<span class="hljs-property">js</span><br>  -index.<span class="hljs-property">css</span><br><span class="hljs-title class_">Card</span><br>  -index.<span class="hljs-property">js</span><br>  -index.<span class="hljs-property">css</span><br></code></pre></td></tr></table></figure><p>实际使用：<br>业务项目，采用 Webpack，构建 bundle 方案<br>组件库，采用 Rollup + 多入口，构建 bundleless 方案</p><h5 id="CSS-方案"><a href="#CSS-方案" class="headerlink" title="CSS 方案"></a>CSS 方案</h5><blockquote><p>比如：css 如何隔离的？</p></blockquote><h6 id="css-in-js-方案"><a href="#css-in-js-方案" class="headerlink" title="css in js 方案"></a>css in js 方案</h6><p>有个库：<a href="https://emotion.sh/docs/introduction">@emotion</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; css &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@emotion&#x27;</span><br><br><span class="hljs-keyword">const</span> color = <span class="hljs-string">&#x27;white&#x27;</span><br><br><span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">css</span>`</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">padding:</span> <span class="hljs-attr">32px</span>;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">margin-left:</span> <span class="hljs-attr">10px</span>;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">font-size:</span> <span class="hljs-attr">12px</span>;</span></span><br><span class="hljs-tag"><span class="language-xml">    `</span></span><br><span class="hljs-tag"><span class="language-xml">  &#125;&gt;</span></span><br><span class="language-xml">    hello world!</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><h6 id="styled-component-方案"><a href="#styled-component-方案" class="headerlink" title="styled-component 方案"></a>styled-component 方案</h6><p>本质还是 css in js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;styled-components&#x27;</span>;<br><br><span class="hljs-comment">// 定义一个简单的样式组件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Button</span> = styled.<span class="hljs-property">button</span><span class="hljs-string">`</span><br><span class="hljs-string">  background-color: <span class="hljs-subst">$&#123;props =&gt; props.primary ? <span class="hljs-string">&#x27;blue&#x27;</span> : <span class="hljs-string">&#x27;grey&#x27;</span>&#125;</span>;</span><br><span class="hljs-string">  color: white;</span><br><span class="hljs-string">  font-size: 1em;</span><br><span class="hljs-string">  padding: 0.5em 1em;</span><br><span class="hljs-string">  border: none;</span><br><span class="hljs-string">  border-radius: 3px;</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-comment">// 在 React 组件中使用</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">primary</span>=<span class="hljs-string">&#123;true&#125;</span>&gt;</span>Click me<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="css-module-方案"><a href="#css-module-方案" class="headerlink" title="css module 方案"></a>css module 方案</h6><p>通过 Webpack 的 css-loader 配置，在编译阶段转换 CSS 类名，将其变为唯一的、局部作用域的类名。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">/* styles.module.css */</span><br>.<span class="hljs-property">title</span> &#123;<br>  <span class="hljs-attr">color</span>: silver;<br>&#125;<br><br>.<span class="hljs-property">description</span> &#123;<br>  <span class="hljs-attr">composes</span>: baseText <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./base.module.css&#x27;</span>;<br>  font-<span class="hljs-attr">size</span>: 14px;<br>&#125;<br><br><span class="hljs-comment">/* base.module.css */</span><br>:<span class="hljs-keyword">export</span> &#123;<br>  <span class="hljs-attr">baseText</span>: base-text;<br>&#125;<br><br>.<span class="hljs-property">base</span>-text &#123;<br>  <span class="hljs-attr">color</span>: black;<br>  font-<span class="hljs-attr">family</span>: <span class="hljs-title class_">Arial</span>, sans-serif;<br>&#125;<br><br><span class="hljs-comment">// Component.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./styles.module.css&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.title&#125;</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.description&#125;</span>&gt;</span>Description text<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>bem 规范：block-element_modifier css 命名规范化<br>block：块，功能的抽象，比如 .nav、.search<br>element：元素，块里面的实际元素，比如 .nav__item、.search__card<br>modifier：修饰符，表示状态、类型、外观的变化，比如 .nav__item–actived、.search__card–disabled</p></blockquote><h6 id="utility-css-方案"><a href="#utility-css-方案" class="headerlink" title="utility-css 方案"></a>utility-css 方案</h6><p>提供原子化类名，灵活、可复用、易于定制。（写多了就能记住了）<br>代表库：tailwindcss、windicss</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;flex flex-row items-center justify-between bg-gray-200 rounded-lg&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-xl font-bold&quot;</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h5 id="组件库方案"><a href="#组件库方案" class="headerlink" title="组件库方案"></a>组件库方案</h5><blockquote><p>一般用第三方组件库</p></blockquote><p>headless 组件库 vs styled 组件库<br>headless 组件库：只提供交互，样式完全自己写，适合公司内无设计规范并且和第三方组件库样式差别大的情况<br>styled 组件库：提供交互与样式，特殊样式需要自己去覆盖，适合有设计规范并且和第三方组件库样式差别不大</p><p>实际场景：公司设计与主流组件库差别大，可以选 headless ui + tailwindcss + css module</p><h5 id="状态方案"><a href="#状态方案" class="headerlink" title="状态方案"></a>状态方案</h5><p>Zustand、Solid、Redux、mobx</p><h5 id="微前端方案"><a href="#微前端方案" class="headerlink" title="微前端方案"></a>微前端方案</h5><p>iframe、Web Components、Module Federation(模块联邦)<br><a href="https://mp.weixin.qq.com/s/WRxonsnQvA11V0zK2znyVw">微前端时代：打造高效、灵活的前端开发体系</a></p><h4 id="安装-headless-ui、图标库"><a href="#安装-headless-ui、图标库" class="headerlink" title="安装 headless ui、图标库"></a>安装 headless ui、图标库</h4><ol start="26"><li>安装 headless ui、图标库</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add @headlessui/react @heroicons/react<br></code></pre></td></tr></table></figure><h4 id="手动配置-Webpack"><a href="#手动配置-Webpack" class="headerlink" title="手动配置 Webpack"></a>手动配置 Webpack</h4><p>我们会配置三个：<br>webpack.base.js：基础配置<br>webpack.dev.js：基于 webpack.base.js，处理开发环境配置<br>webpack.prod.js：基于 webpack.base.js，处理生产环境配置</p><ol start="27"><li>react-master 目录下，创建这三个文件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">mkdir scripts &amp;&amp; touch scripts/webpack.<span class="hljs-property">dev</span>.<span class="hljs-property">js</span> &amp;&amp; touch scripts/webpack.<span class="hljs-property">prod</span>.<span class="hljs-property">js</span> &amp;&amp; touch scripts/webpack.<span class="hljs-property">base</span>.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ol start="28"><li>更改 package.json，加上 build、start 命令</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;react-master&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,<br>    <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack --config scripts/webpack.prod.js&quot;</span>, <span class="hljs-comment">// +++++++</span><br>    <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;webpack-dev-server --config scripts/webpack.dev.js&quot;</span> <span class="hljs-comment">// +++++++</span><br>  &#125;,<br>  ...<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="29"><li>手写<code>webpack.base.js</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniCssExtractPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mini-css-extract-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">isDev</span>) &#123;<br> <span class="hljs-keyword">return</span> &#123;<br>  <span class="hljs-comment">// 1、输入输出部分</span><br>  <span class="hljs-comment">// 输入，当你不知道是用 ./scr、../src、@/scr 时就使用 path 来处理，__dirname 当前目录</span><br>  <span class="hljs-attr">entry</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../src/index.tsx&quot;</span>),<br>  <span class="hljs-comment">// 输出</span><br>  <span class="hljs-attr">output</span>: &#123;<br>   <span class="hljs-comment">// 打包后文件的位置</span><br>   <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../dist&quot;</span>),<br>   <span class="hljs-comment">// 打包后 js 的名字，采用了占位符，[name] 代表入口文件的名字，[hash:8] 代表打包后文件的 hash 值，取前 8 位</span><br>   <span class="hljs-comment">// hash 每次打包后根据内容生成 hash 值（任一文件有变动则 hash 会变，颗粒度最大）</span><br>   <span class="hljs-comment">// contenthash 每次打包后根据内容生成 hash 值（当输出内容变化则 hash 会变，颗粒度最小）</span><br>   <span class="hljs-comment">// chunkhash 每次打包后根据 chunk 生成 hash 值（当代码块变化则 hash 会变，颗粒度居中）</span><br>   <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;static/js/[name]/[hash:8].js&quot;</span>,<br><br>   <span class="hljs-comment">// webpack 5 内置的，构建前清空 dist 目录</span><br>   <span class="hljs-comment">// webpack 4 没有，需安装 clean-webpack-plugin</span><br>   <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>,<br><br>   <span class="hljs-comment">// 打包后静态资源的位置，相对于 output.path</span><br>   <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>  &#125;,<br><br>  <span class="hljs-comment">// 2、resolve 部分</span><br>  <span class="hljs-attr">resolve</span>: &#123;<br>   <span class="hljs-comment">// 用于在引入文件时，不需要写后缀名</span><br>   <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&quot;.tsx&quot;</span>, <span class="hljs-string">&quot;.ts&quot;</span>, <span class="hljs-string">&quot;.jsx&quot;</span>, <span class="hljs-string">&quot;.js&quot;</span>], <span class="hljs-comment">// 优先级从左到右，会影响性能的</span><br>  &#125;,<br><br>  <span class="hljs-comment">// 3、loader 部分：</span><br>  <span class="hljs-attr">module</span>: &#123;<br>   <span class="hljs-comment">// loader 是 webpack 的核心，从入口文件起去解析 import from 的文件时，针对不同类型的文件进行不同处理</span><br>   <span class="hljs-comment">// 所以不同文件需要对应的解析器，去识别解析它，从而保证最后能形成一个 bundle</span><br>   <span class="hljs-attr">rules</span>: [<br>    &#123;<br>     <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(tsx|ts)$/</span>,<br>     <span class="hljs-attr">use</span>: &#123;<br>      <span class="hljs-comment">// 要使用 babel-loader 就需要有对应配置文件（.babelrc）</span><br>      <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>, <span class="hljs-comment">// 有了这个 loader，react 就已经可以跑起来了</span><br>     &#125;,<br>    &#125;,<br>    &#123;<br>     <span class="hljs-comment">// 为了避免三个 loader 重复处理，采用 oneOf 的实现匹配一个规则</span><br>     <span class="hljs-attr">oneOf</span>: [<br>      &#123;<br>       <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>, <span class="hljs-comment">// 匹配 css 文件</span><br>       <span class="hljs-attr">use</span>: [<br>        <span class="hljs-comment">// style-loader 用于将 css 放到元素内联样式上</span><br>        <span class="hljs-comment">// dev 环境使用 style-loader，方便热更新替换</span><br>        <span class="hljs-comment">// 生产环境使用 MiniCssExtractPlugin.loader 单独提取成 css 文件，方便缓存，还需要在下面的 plugin 中配置</span><br>        isDev ? <span class="hljs-string">&quot;style-loader&quot;</span> : <span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>,<br>        <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-comment">// 主要处理路径，给&lt;link&gt; 用</span><br>        <span class="hljs-string">&quot;postcss-loader&quot;</span>, <span class="hljs-comment">// 处理语法转换，postcss 就是 css 界的 babel，需要有对应配置文件（.postcssrc.js）</span><br>       ],<br>      &#125;,<br>      <span class="hljs-comment">// 定义规则：针对模块化的 css，统一采用 .module.css|.less 形式命名文件</span><br>      &#123;<br>       <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.module\.(css|less)$/</span>,<br>       <span class="hljs-attr">include</span>: [path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../src&quot;</span>)], <span class="hljs-comment">// 指定生效的目录</span><br>       <span class="hljs-attr">use</span>: [<br>        isDev ? <span class="hljs-string">&quot;style-loader&quot;</span> : <span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>,<br>        &#123;<br>         <span class="hljs-comment">// 配置 css-loader 的 modules 模式</span><br>         <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;css-loader&quot;</span>,<br>         <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-attr">modules</span>: &#123;<br>           <span class="hljs-comment">// 借用 css-module 实现我们的 BEM 命名规范</span><br><br>           <span class="hljs-comment">// localIdentName：会将 class 名替换成 [path][name]__[local]--[hash:base64:5]</span><br>           <span class="hljs-attr">localIdentName</span>: <span class="hljs-string">&quot;[path][name]__[local]--[hash:base64:5]&quot;</span>,<br>          &#125;,<br>         &#125;,<br>        &#125;,<br>        <span class="hljs-string">&quot;postcss-loader&quot;</span>,<br>        <span class="hljs-string">&quot;less-loader&quot;</span>,<br>       ],<br>      &#125;,<br>      &#123;<br>       <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>, <span class="hljs-comment">// 匹配 less 文件</span><br>       <span class="hljs-attr">use</span>: [<br>        isDev ? <span class="hljs-string">&quot;style-loader&quot;</span> : <span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>,<br>        <span class="hljs-string">&quot;css-loader&quot;</span>,<br>        <span class="hljs-string">&quot;postcss-loader&quot;</span>,<br>        <span class="hljs-string">&quot;less-loader&quot;</span>,<br>       ],<br>      &#125;,<br>     ],<br>    &#125;,<br><br>    <span class="hljs-comment">// webpack5 以前要单独的 loader(file|url 等)，webpack5 已经内置了</span><br>    &#123;<br>     <span class="hljs-comment">// 图片处理</span><br>     <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(png|jpg|jpeg|gif|svg)$/</span>,<br>     <span class="hljs-attr">generator</span>: &#123;<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;static/images/[name].[contenthash:8][ext]&quot;</span>,<br>     &#125;,<br>    &#125;,<br>    &#123;<br>     <span class="hljs-comment">// 字体处理</span><br>     <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(woff2?|eot|ttf|otf)$/</span>,<br>     <span class="hljs-attr">generator</span>: &#123;<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;static/fonts/[name].[contenthash:8][ext]&quot;</span>,<br>     &#125;,<br>    &#125;,<br>    &#123;<br>     <span class="hljs-comment">// 音视频处理</span><br>     <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(mp4|map3|flv|wav)$/</span>,<br>     <span class="hljs-attr">generator</span>: &#123;<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;static/media/[name].[contenthash:8][ext]&quot;</span>,<br>     &#125;,<br>    &#125;,<br>   ],<br>  &#125;,<br><br>  <span class="hljs-attr">plugins</span>: [<br>   <span class="hljs-comment">// HtmlWebpackPlugin：将打包后的 js、css 注入到 html 文件中</span><br>   <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>    <span class="hljs-comment">// 指定模板文件位置</span><br>    <span class="hljs-attr">template</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../public/index.html&quot;</span>),<br>    <span class="hljs-comment">// 自动注入打包后的 js、css 文件</span><br>    <span class="hljs-attr">inject</span>: <span class="hljs-literal">true</span>,<br>   &#125;),<br><br>   <span class="hljs-comment">// 由于生产环境使用 MiniCssExtractPlugin.loader 单独提取成 css 文件，所以需要加对应的 plugin 配置</span><br>   <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>(&#123;<br>    <span class="hljs-comment">// 提取后的文件名 开发环境文件名不带 hash，生产环境文件名带 hash</span><br>    <span class="hljs-attr">filename</span>: isDev<br>     ? <span class="hljs-string">&quot;static/css/[name].css&quot;</span><br>     : <span class="hljs-string">&quot;static/css/[name].[contenthash:4].css&quot;</span>,<br>   &#125;),<br>  ],<br> &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="30"><li>手动配置<code>babel</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx">touch .<span class="hljs-property">babelrc</span><br><br><span class="hljs-comment">// 并写入如下内容：</span><br>&#123;<br> <span class="hljs-string">&quot;presets&quot;</span>: [<br>  <span class="hljs-string">&quot;@babel/preset-react&quot;</span>, <span class="hljs-comment">// 解析 react</span><br>  <span class="hljs-string">&quot;@babel/preset-typescript&quot;</span> <span class="hljs-comment">// 解析 typescript</span><br> ]<br>&#125;<br></code></pre></td></tr></table></figure><ol start="31"><li>手动配置<code>postcss</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx">touch .<span class="hljs-property">postcssrc</span>.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 并写入如下内容：</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br> <span class="hljs-attr">plugins</span>: [<br>  <span class="hljs-string">&quot;autoprefixer&quot;</span>, <span class="hljs-comment">// 自动添加浏览器前缀</span><br>  <span class="hljs-string">&quot;tailwindcss&quot;</span>,<br> ],<br>&#125;;<br><br></code></pre></td></tr></table></figure><ol start="32"><li>手写<code>public/index.html</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx">mkdir public &amp;&amp; touch public/index.<span class="hljs-property">html</span><br><br><span class="hljs-comment">// 并写入如下内容：</span><br>&lt;!doctype html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>React Master<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><ol start="32"><li>手写<code>webpack.prod.js</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; merge &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack-merge&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CssMinimizerPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;css-minimizer-webpack-plugin&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">TerserPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;terser-webpack-plugin&quot;</span>);<br><br><span class="hljs-keyword">const</span> baseConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./webpack.base&quot;</span>);<br><br><span class="hljs-comment">// 基于 webpack 的官方 merge 方法，将 baseConfig 和 prodConfig 合并</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">merge</span>(<span class="hljs-title function_">baseConfig</span>(), &#123;<br> <span class="hljs-comment">// 生产环境配置</span><br><br> <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;production&quot;</span>,<br><br> <span class="hljs-comment">// 优化配置</span><br> <span class="hljs-attr">optimization</span>: &#123;<br>  <span class="hljs-attr">minimizer</span>: [<br>   <span class="hljs-comment">// 压缩 css</span><br>   <span class="hljs-keyword">new</span> <span class="hljs-title class_">CssMinimizerPlugin</span>(),<br><br>   <span class="hljs-comment">// 压缩 js</span><br>   <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerserPlugin</span>(&#123;<br>    <span class="hljs-comment">// 开启多进程并行运行</span><br>    <span class="hljs-attr">parallel</span>: <span class="hljs-literal">true</span>,<br><br>    <span class="hljs-comment">// 压缩参数</span><br>    <span class="hljs-attr">terserOptions</span>: &#123;<br>     <span class="hljs-comment">// 开启压缩</span><br>     <span class="hljs-attr">compress</span>: &#123;<br>      <span class="hljs-attr">pure_funcs</span>: [<span class="hljs-string">&quot;console.log&quot;</span>, <span class="hljs-string">&quot;console.warn&quot;</span>], <span class="hljs-comment">// 移除 console</span><br>     &#125;,<br>    &#125;,<br>   &#125;),<br>  ],<br><br>  <span class="hljs-comment">// 代码分割配置(拆包)</span><br>  <span class="hljs-attr">splitChunks</span>: &#123;<br>   <span class="hljs-comment">// 缓存组</span><br>   <span class="hljs-attr">cacheGroups</span>: &#123;<br>    <span class="hljs-comment">// 第三方库: https://webpack.docschina.org/plugins/split-chunks-plugin/#splitchunkscachegroups</span><br>    <span class="hljs-attr">vendors</span>: &#123;<br>     <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;vendors&quot;</span>,<br>     <span class="hljs-attr">test</span>: <span class="hljs-regexp">/node_modules/</span>,<br>     <span class="hljs-comment">// 官方已经默认设置了比较合理的 minSize: 30000，minChunks: 1 等，所以我们不要额外去更改</span><br>    &#125;,<br>    <span class="hljs-comment">// 公共代码</span><br>    <span class="hljs-attr">commoms</span>: &#123;<br>     <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;commons&quot;</span>,<br>    &#125;,<br>   &#125;,<br>  &#125;,<br> &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="33"><li>手撸入口页面，进入<code>react-master/src/index.tsx</code>，写如下代码</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDom</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./app&#x27;</span><br><br><span class="hljs-title class_">ReactDom</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">Element</span>).<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><ol start="34"><li>创建<code>app.tsx</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx">touch src/app.<span class="hljs-property">tsx</span><br><br><span class="hljs-comment">// 并写入如下内容：快捷键输入 tsrfc 回车</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./app.css&quot;</span>;<br><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./app2.module.less&quot;</span>;<br><br>type <span class="hljs-title class_">Props</span> = &#123;&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params">&#123;&#125;: Props</span>) &#123;<br> <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">hello</span> $&#123;<span class="hljs-attr">styles.greenBGColor</span>&#125;`&#125;&gt;</span>App<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="35"><li>创建<code>app.css</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">touch src/app.<span class="hljs-property">css</span><br><br><span class="hljs-comment">// 并写入如下内容：</span><br>.<span class="hljs-property">hello</span> &#123;<br>  <span class="hljs-attr">color</span>: red<br>&#125;<br></code></pre></td></tr></table></figure><ol start="36"><li>创建<code>app2.module.less</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">touch src/app2.<span class="hljs-property">module</span>.<span class="hljs-property">less</span><br><br><span class="hljs-comment">// 并写入如下内容：</span><br>.<span class="hljs-property">greenBGColor</span> &#123;<br>    background-<span class="hljs-attr">color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="37"><li>创建<code>golbal.d.ts</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">touch src/golbal.<span class="hljs-property">d</span>.<span class="hljs-property">ts</span><br><br><span class="hljs-comment">// 并写入如下内容：</span><br>declare <span class="hljs-variable language_">module</span> <span class="hljs-string">&quot;*.module.less&quot;</span>;<br>declare <span class="hljs-variable language_">module</span> <span class="hljs-string">&quot;*.module.css&quot;</span>;<br></code></pre></td></tr></table></figure><ol start="38"><li>运行打包</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">pnpm build<br></code></pre></td></tr></table></figure><ol start="39"><li>打包成功后，可以看到对应的<code>dist</code>文件，然后在 dist&#x2F;index.html 里面改下路径</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;script defer=<span class="hljs-string">&quot;defer&quot;</span> src=<span class="hljs-string">&quot;/static/js/main/8aa22f5b.js&quot;</span>&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/css/main.2609.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><br><span class="hljs-comment">// 改为这个，多加一个 .</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span>=<span class="hljs-string">&quot;defer&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./static/js/main/8aa22f5b.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./static/css/main.2609.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="40"><li>然后用浏览器打开<code>dist/index.html</code>，就能看到页面正常渲染了<img src="/img/images/2024/1709865374724-3308e724-6153-4659-9a14-4ad9a481217d.png"></li><li>手写<code>webpack.dev.js</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; merge &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack-merge&quot;</span>);<br><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-keyword">const</span> baseConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./webpack.base&quot;</span>);<br><br><span class="hljs-comment">// 基于 webpack 的官方 merge 方法，将 baseConfig 和 devConfig 合并</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">merge</span>(<span class="hljs-title function_">baseConfig</span>(<span class="hljs-literal">true</span>), &#123;<br> <span class="hljs-comment">// 开发环境配置</span><br><br> <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br><br> <span class="hljs-comment">// 源码调试：使用 source-map</span><br> <span class="hljs-attr">devtool</span>: <span class="hljs-string">&quot;eval-cheap-module-source-map&quot;</span>,<br><br> <span class="hljs-comment">// 开发服务器配置</span><br> <span class="hljs-attr">devServer</span>: &#123;<br>  <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>,<br>  <span class="hljs-attr">compress</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 关闭压缩，这样热更新会更快</span><br>  <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启热更新</span><br>  <span class="hljs-attr">historyApiFallback</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 解决开发环境 history 路由 404 的问题</span><br>  <span class="hljs-attr">static</span>: &#123;<br>   <span class="hljs-comment">// 托管静态资源 public 文件夹</span><br>   <span class="hljs-attr">directory</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../public&quot;</span>),<br>  &#125;,<br> &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="42"><li>本地启动运行</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">pnpm start<br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1709864722122-5ee6c7a8-c04c-4c5a-9164-26735da0450a.png"></p><ol start="43"><li>浏览器打开 <a href="http://localhost:3000/">http://localhost:3000/</a>，然后更改代码(背景色改为黄色)保存下，页面也会热更新<br><img src="/img/images/2024/1709865405750-f1cd65db-f37d-43d6-b7d1-c0bb3116ad30.png"></li></ol><h4 id="tailwindcss-配置"><a href="#tailwindcss-配置" class="headerlink" title="tailwindcss 配置"></a>tailwindcss 配置</h4><ol start="44"><li>安装 vscode 插件，便于代码提示<br><img src="/img/images/2024/1709869629217-46034fbd-70fb-4a3b-bb46-578ce246b739.png"></li><li>初始化，生成<code>tailwind.config.js</code>文件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">npx tailwindcss init<br></code></pre></td></tr></table></figure><ol start="46"><li>更改完善<code>tailwind.config.js</code>文件，改为如下：</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br> <span class="hljs-attr">content</span>: [<span class="hljs-string">&quot;./src/**/*.&#123;tsx,ts,jsx,js&#125;&quot;</span>],<br> <span class="hljs-attr">theme</span>: &#123;<br>  <span class="hljs-attr">extend</span>: &#123;&#125;,<br> &#125;,<br> <span class="hljs-attr">plugins</span>: [],<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="47"><li>新增<code>index.less</code>，并完善</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx">touch src/index.<span class="hljs-property">less</span><br><br><br><span class="hljs-comment">// 并写入如下内容：</span><br><br><span class="hljs-comment">// 全局的东西</span><br><br><span class="hljs-comment">// tailwind 配置</span><br>@tailwind base;<br>@tailwind components;<br>@tailwind utilities;<br></code></pre></td></tr></table></figure><ol start="48"><li>在<code>index.tsx</code>引入<code>index.less</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./app&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./index.less&quot;</span>; <span class="hljs-comment">// ++++++</span><br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;app&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">Element</span>).<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>);<br></code></pre></td></tr></table></figure><ol start="49"><li>在<code>app.tsx</code>使用一些原子 css</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./app.css&quot;</span>;<br><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./app2.module.less&quot;</span>;<br><br>type <span class="hljs-title class_">Props</span> = &#123;&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params">&#123;&#125;: Props</span>) &#123;<br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">hello</span> $&#123;<span class="hljs-attr">styles.greenBGColor</span>&#125; <span class="hljs-attr">flex</span> <span class="hljs-attr">justify-center</span>`&#125;&gt;</span> // +++++</span><br><span class="language-xml">   App</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="50"><li>重新 start 下，效果如下：<br><img src="/img/images/2024/1709865726372-95566a99-b37e-496f-84f4-78f29a90a305.png"></li></ol><h1 id="2、项目开发"><a href="#2、项目开发" class="headerlink" title="2、项目开发"></a>2、项目开发</h1><p>当仓库搭建完毕后，并且<code>react-master</code>项目的基础配置搞完后，就要进行页面开发了<br>本次的项目开发目标是模仿<strong>知乎首页</strong><br><img src="/img/images/2024/1709868478433-2a9dfe87-1aec-45bd-a796-615b05f1f964.png"><br>功能与技术点：顶部菜单、搜索、搜索历史、阅读全文、悬底操作、无限滚动、骨架屏等</p><h2 id="开发之前"><a href="#开发之前" class="headerlink" title="开发之前"></a>开发之前</h2><p>利其器之 VSCode 插件：<a href="https://juejin.cn/post/7218369118788649020">React vscode 开发插件与代码补全提示 - 掘金</a></p><ol start="51"><li><code>react-master</code>内，新建文件夹</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir src/pages src/components src/router src/utils<br></code></pre></td></tr></table></figure><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><p>知乎路由结构：<br><img src="/img/images/2024/1709869004893-0b7ba799-79d9-4c6a-a6dd-1968183a79f4.png"></p><ol start="52"><li>新建<code>router/index.tsx</code>，并完善</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch router/index.<span class="hljs-property">tsx</span><br><br><span class="hljs-comment">// 并写如下代码：</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Outlet</span>, <span class="hljs-title class_">RouteObject</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-comment">// 自己扩展的类型</span><br><span class="hljs-keyword">export</span> interface extraBizObject &#123;<br> title?: string;<br> isShow?: boolean; <span class="hljs-comment">// 是否显示</span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">router</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">RouteObject</span> &amp; extraBizObject&gt; = [<br> <span class="hljs-comment">// https://www.zhihu.com/</span><br> &#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>  <span class="hljs-attr">element</span>: (<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;flex gap-4 text-blue-500 underline&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#education&quot;</span>&gt;</span>知乎知学堂<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#explore&quot;</span>&gt;</span>发现<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#question&quot;</span>&gt;</span>等你来答<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">     首页自身内容</span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;flex gap-4 text-blue-500 underline&quot;</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#command&quot;</span>&gt;</span>command<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#follow&quot;</span>&gt;</span>follow<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#hot&quot;</span>&gt;</span>hot<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#zvideo&quot;</span>&gt;</span>zvideo<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      首页二级菜单内容</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  ),<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;首页&quot;</span>,<br>  <span class="hljs-attr">isShow</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">children</span>: [<br>   &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>command<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>,<br>   &#125;,<br><br>   &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;follow&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>follow<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>,<br>   &#125;,<br><br>   &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;hot&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hot<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>,<br>   &#125;,<br><br>   &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;zvideo&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>zvideo<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>,<br>   &#125;,<br>  ],<br> &#125;,<br> <span class="hljs-comment">// https://www.zhihu.com/education/learning</span><br> &#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/education&quot;</span>,<br>  <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>education<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>,<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;知乎知学堂&quot;</span>,<br>  <span class="hljs-attr">children</span>: [<br>   &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;learning&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>learning<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>,<br>   &#125;,<br>  ],<br> &#125;,<br><br> <span class="hljs-comment">// https://www.zhihu.com/explore</span><br> &#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/explore&quot;</span>,<br>  <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>explore<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>,<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;发现&quot;</span>,<br> &#125;,<br><br> <span class="hljs-comment">// https://www.zhihu.com/question/waiting</span><br> &#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/question&quot;</span>,<br>  <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>question<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>,<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;等你来答&quot;</span>,<br>  <span class="hljs-attr">children</span>: [<br>   &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;waiting&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>waiting<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>,<br>   &#125;,<br>  ],<br> &#125;,<br>];<br></code></pre></td></tr></table></figure><ol start="53"><li>改造<code>app.tsx</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HashRouter</span>, useRoutes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; router &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br><br>type <span class="hljs-title class_">Props</span> = &#123;<br> name?: string;<br>&#125;;<br><br><span class="hljs-comment">// 放在 App 外面，防止每次渲染都重新生成</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Routers</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">useRoutes</span>(router);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params">&#123;&#125;: Props</span>) &#123;<br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">Routers</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br> );<br>&#125;<br></code></pre></td></tr></table></figure><ol start="54"><li>删除多余的<code>app.css、app2.module.less</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">rm src/app.<span class="hljs-property">css</span> src/app2.<span class="hljs-property">module</span>.<span class="hljs-property">less</span><br></code></pre></td></tr></table></figure><ol start="55"><li>启动项目：<code>pnpm start</code>，效果如下，点击可以已经可以跳转到对应页面了<br><img src="/img/images/2024/1709871900633-c34f6dcc-8fd2-42e3-a0dd-4b846888c6e1.png"></li></ol><h2 id="首页初始化"><a href="#首页初始化" class="headerlink" title="首页初始化"></a>首页初始化</h2><ol start="56"><li>新建 首页 相关文件，并迁移路由文件里面的代码完成初始化</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir src/pages/home &amp;&amp; touch src/pages/home/index.<span class="hljs-property">tsx</span><br><br><span class="hljs-comment">// 并写如下代码（只是将 router/index.tsx 里面的 / 对应的 element 复制过来）：</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Outlet</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br>type <span class="hljs-title class_">Props</span> = &#123;&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params">&#123;&#125;: Props</span>) &#123;<br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;flex gap-4 text-blue-500 underline&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#education&quot;</span>&gt;</span>知乎知学堂<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#explore&quot;</span>&gt;</span>发现<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#question&quot;</span>&gt;</span>等你来答<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    首页 page 自身内容</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;flex gap-4 text-blue-500 underline&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#command&quot;</span>&gt;</span>command<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#follow&quot;</span>&gt;</span>follow<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#hot&quot;</span>&gt;</span>hot<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#zvideo&quot;</span>&gt;</span>zvideo<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">     首页二级菜单内容</span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;<br></code></pre></td></tr></table></figure><ol start="57"><li>更改路由文件，将首页的 element 改一下（不贴代码了，看变动吧）</li></ol><p><img src="/img/images/2024/1709872388150-06eb5392-2f85-462a-9cb0-aac3ae0b1dc8.png"></p><ol start="58"><li>看浏览器，确保页面还是正常的</li></ol><h2 id="公共部分之导航栏开发"><a href="#公共部分之导航栏开发" class="headerlink" title="公共部分之导航栏开发"></a>公共部分之导航栏开发</h2><ol start="59"><li>新建导航对应文件，并写代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir src/components/navigation &amp;&amp; touch src/components/navigation/index.<span class="hljs-property">tsx</span><br><br><span class="hljs-comment">// 写如下代码：</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-variable constant_">FC</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ZHRouter</span>, router &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../router&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BellIcon</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@heroicons/react/24/outline&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NavLink</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Search</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../search&quot;</span>;<br><br>type <span class="hljs-title class_">Props</span> = &#123;&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Logo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; px-2&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">svg</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 64 30&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#1772F6&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;64&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;30&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;css-1hlrcxk&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">   &gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M29.05 4.582H16.733V25.94h3.018l.403 2.572 4.081-2.572h4.815V4.582zm-5.207 18.69l-2.396 1.509-.235-1.508h-1.724V7.233h6.78v16.04h-2.425zM14.46 14.191H9.982c0-.471.033-.954.039-1.458v-5.5h5.106V5.935a1.352 1.352 0 0 0-.404-.957 1.378 1.378 0 0 0-.968-.396H5.783c.028-.088.056-.177.084-.255.274-.82 1.153-3.326 1.153-3.326a4.262 4.262 0 0 0-2.413.698c-.57.4-.912.682-1.371 1.946-.532 1.453-.997 2.856-1.31 3.693C1.444 8.674.28 11.025.28 11.025a5.85 5.85 0 0 0 2.52-.61c1.119-.593 1.679-1.502 2.054-2.883l.09-.3h2.334v5.5c0 .5-.045.982-.073 1.46h-4.12c-.71 0-1.39.278-1.893.775a2.638 2.638 0 0 0-.783 1.874h6.527a17.717 17.717 0 0 1-.778 3.649 16.796 16.796 0 0 1-3.012 5.273A33.104 33.104 0 0 1 0 28.74s3.13 1.175 5.425-.954c1.388-1.292 2.631-3.814 3.23-5.727a28.09 28.09 0 0 0 1.12-5.229h5.967v-1.37a1.254 1.254 0 0 0-.373-.899 1.279 1.279 0 0 0-.909-.37z&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M11.27 19.675l-2.312 1.491 5.038 7.458a6.905 6.905 0 0 0 .672-2.218 3.15 3.15 0 0 0-.28-2.168l-3.118-4.563zM51.449 15.195V5.842c4.181-.205 7.988-.405 9.438-.483l.851-.05c.387-.399.885-2.395.689-3.021-.073-.25-.213-.666-.638-.555a33.279 33.279 0 0 1-4.277.727c-2.766.321-3.97.404-7.804.682-6.718.487-12.709.72-12.709.72a2.518 2.518 0 0 0 .788 1.834 2.567 2.567 0 0 0 1.883.706c2.278-.095 5.598-.25 8.996-.41v9.203h-12.78c0 .703.281 1.377.783 1.874a2.69 2.69 0 0 0 1.892.777h10.105v7.075c0 .887-.464 1.192-1.231 1.214h-3.92a4.15 4.15 0 0 0 .837 1.544 4.2 4.2 0 0 0 1.403 1.067 6.215 6.215 0 0 0 2.71.277c1.36-.066 2.967-.826 2.967-3.57v-7.607h11.28c.342 0 .67-.135.91-.374.242-.239.378-.563.378-.902v-1.375H51.449z&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M42.614 8.873a2.304 2.304 0 0 0-1.508-.926 2.334 2.334 0 0 0-1.727.405l-.376.272 4.255 5.85 2.24-1.62-2.884-3.98zM57.35 8.68l-3.125 4.097 2.24 1.663 4.517-5.927-.375-.277a2.32 2.32 0 0 0-1.722-.452 2.327 2.327 0 0 0-1.536.896z&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;;<br><br>interface <span class="hljs-title class_">NavProps</span> &#123;<br> <span class="hljs-attr">navs</span>: <span class="hljs-title class_">ZHRouter</span>;<br>&#125;<br><br>type <span class="hljs-title class_">NavLinkRenderProps</span> = &#123;<br> isActive?: boolean;<br> isPending?: boolean;<br> isTransitioning?: boolean;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">NavTab</span>: <span class="hljs-variable constant_">FC</span>&lt;<span class="hljs-title class_">NavProps</span>&gt; = <span class="hljs-function">(<span class="hljs-params">&#123; navs &#125;</span>) =&gt;</span> &#123;<br> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getStyles</span> = (<span class="hljs-params">&#123; isActive &#125;: NavLinkRenderProps</span>) =&gt;<br>  <span class="hljs-string">&quot;hover:text-black mx-4 h-full py-3.5 transition-all &quot;</span> +<br>  (isActive<br>   ? <span class="hljs-string">&quot;font-extrabold text-black border-b-4 border-blue-600&quot;</span><br>   : <span class="hljs-string">&quot;text-gray-400&quot;</span>);<br><br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex mx-6 box-border&quot;</span>&gt;</span></span><br><span class="language-xml">   &#123;navs.map((item) =&gt; (</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.path</span> + &quot;<span class="hljs-attr">__</span>&quot;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;item.path</span> || &quot;/&quot;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;getStyles&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">     &#123;item.title&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">   ))&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">MenuAlarm</span> = (<span class="hljs-params"></span>) =&gt; (<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;flex mr-10 gap-4&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex flex-col justify-center items-center&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">BellIcon</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; h-5 w-5 text-gray-400 fill-gray-400&quot;</span> /&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; text-gray-400 text-xs&quot;</span>&gt;</span>消息<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex flex-col justify-center items-center&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">BellIcon</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; h-5 w-5 text-gray-400 fill-gray-400&quot;</span> /&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; text-gray-400 text-xs&quot;</span>&gt;</span>私信<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Navigation</span>(<span class="hljs-params">&#123;&#125;: Props</span>) &#123;<br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; bg-white w-screen shadow-lg&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; max-w-6xl mx-auto my-0 flex justify-center w-full&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; h-14 flex justify-between items-center min-w-max w-full&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex items-center&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Logo</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">NavTab</span> <span class="hljs-attr">navs</span>=<span class="hljs-string">&#123;router&#125;</span> /&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">Search</span> /&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">MenuAlarm</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;<br></code></pre></td></tr></table></figure><ol start="60"><li>更改<code>react-master/src/pages/home/index.tsx</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Outlet</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Navigation</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../components/navigation&quot;</span>;<br><br>type <span class="hljs-title class_">Props</span> = &#123;&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params">&#123;&#125;: Props</span>) &#123;<br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">Navigation</span> /&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;<br></code></pre></td></tr></table></figure><ol start="61"><li>更改<code>react-master/src/pages/router/index.tsx</code></li></ol><p><img src="/img/images/2024/1709885578000-a9ea41cb-410d-41b5-b64b-4241fb15572f.png"></p><ol start="62"><li>新建搜索栏对应文件，并写代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir src/components/search &amp;&amp; touch src/components/search/index.<span class="hljs-property">tsx</span><br><br><span class="hljs-comment">// 写如下代码：</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br>type <span class="hljs-title class_">Props</span> = &#123;&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Search</span>(<span class="hljs-params">&#123;&#125;: Props</span>) &#123;<br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex items-center&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-98 h-8 border border-gray-100 px-4 rounded-full bg-gray-50&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;福建软考报名入口&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">   /&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-16 h-8 mx-4 text-sm bg-blue-500 text-white flex justify-center items-center rounded-full hover:bg-blue-800 transition-all&quot;</span>&gt;</span></span><br><span class="language-xml">    提问</span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;<br></code></pre></td></tr></table></figure><ol start="63"><li>此时的页面效果如下</li></ol><p><img src="/img/images/2024/1709885612891-c9761074-1926-4d62-a088-4868d0d92847.png"></p><h2 id="完善首页"><a href="#完善首页" class="headerlink" title="完善首页"></a>完善首页</h2><ol start="64"><li>完善首页代码，<code>react-master/src/pages/home/index.tsx</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Navigation</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../components/navigation&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Card</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../components/card&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Tabs</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./tabs&quot;</span>;<br><br>type <span class="hljs-title class_">Props</span> = &#123;&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params">&#123;&#125;: Props</span>) &#123;<br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">Navigation</span> /&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; mx-auto max-w-6xl flex my-2 px-20&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Card</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-2/3&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">Tabs</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex-1 w-1/3&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">Card</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-full&quot;</span>&gt;</span>创作中心<span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">Card</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-full&quot;</span>&gt;</span>推荐关注<span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">Card</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-full&quot;</span>&gt;</span>其他功能<span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;<br></code></pre></td></tr></table></figure><ol start="65"><li>新建<code>Card</code>组件，并写代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir src/components/card &amp;&amp; touch src/components/card/index.<span class="hljs-property">tsx</span><br><br><span class="hljs-comment">// 写如下代码：</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">ReactNode</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br>type <span class="hljs-title class_">Props</span> = &#123;<br> className?: string;<br> children?: <span class="hljs-title class_">ReactNode</span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Card</span>(<span class="hljs-params">&#123; className, children &#125;: Props</span>) &#123;<br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">   <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>` <span class="hljs-attr">bg-white</span> <span class="hljs-attr">border</span> <span class="hljs-attr">border-gray-200</span> <span class="hljs-attr">m-2</span> <span class="hljs-attr">rounded-sm</span> <span class="hljs-attr">shadow-md</span> $&#123;<span class="hljs-attr">className</span>&#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml">   &#123;children&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;<br></code></pre></td></tr></table></figure><ol start="66"><li>新建<code>tabs.tsx</code>，作为二级菜单<img src="/img/images/2024/1709886675241-b05080b8-6262-4256-bd1a-62a604916d2b.png"></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch src/pages/home/tabs.<span class="hljs-property">tsx</span><br><br><span class="hljs-comment">// 写如下代码：</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NavLink</span>, <span class="hljs-title class_">Outlet</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br>type <span class="hljs-title class_">Props</span> = &#123;<br> className?: string;<br>&#125;;<br><br><span class="hljs-keyword">const</span> tabs = [<br> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;关注&quot;</span>,<br>  <span class="hljs-attr">to</span>: <span class="hljs-string">&quot;/follow&quot;</span>,<br> &#125;,<br> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;推荐&quot;</span>,<br>  <span class="hljs-attr">to</span>: <span class="hljs-string">&quot;/&quot;</span>,<br> &#125;,<br> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;热榜&quot;</span>,<br>  <span class="hljs-attr">to</span>: <span class="hljs-string">&quot;/hot&quot;</span>,<br> &#125;,<br> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;视频&quot;</span>,<br>  <span class="hljs-attr">to</span>: <span class="hljs-string">&quot;/zvideo&quot;</span>,<br> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Tabs</span>(<span class="hljs-params">&#123;&#125;: Props</span>) &#123;<br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-full&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex mx-6 box-border&quot;</span>&gt;</span></span><br><span class="language-xml">    &#123;tabs.map((item) =&gt; (</span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.to&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;item.to&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(&#123;</span> <span class="hljs-attr">isActive</span> &#125;) =&gt;</span></span><br><span class="language-xml">       &quot; whitespace-nowrap py-4 px-4 text-base transition-all &quot; +</span><br><span class="language-xml">       (isActive</span><br><span class="language-xml">        ? &quot;text-blue-600 font-bold&quot;</span><br><span class="language-xml">        : &quot;text-black hover:text-blue-700&quot;)</span><br><span class="language-xml">      &#125;</span><br><span class="language-xml">     &gt;</span><br><span class="language-xml">      &#123;item.name&#125;</span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">    ))&#125;</span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;<br></code></pre></td></tr></table></figure><ol start="67"><li>目前页面效果如下</li></ol><p><img src="/img/images/2024/1709891445941-3eee6c78-5284-49d8-a120-f272c43f6e58.png"></p><h2 id="完善推荐列表"><a href="#完善推荐列表" class="headerlink" title="完善推荐列表"></a>完善推荐列表</h2><ol start="68"><li>处理 mock 数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir src/pages/home/commandList &amp;&amp; touch src/pages/home/commandList/mock.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 写入代码（数据太长了，去 github 上 copy 吧）：</span><br><br><span class="hljs-attr">https</span>:<span class="hljs-comment">//github.com/MrHzq/react-actual-combat/blob/main/packages/apps/react-master/src/pages/home/commandList/mock.js</span><br></code></pre></td></tr></table></figure><ol start="67"><li>新建推荐列表页面 &amp;&amp; 路由更改</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch src/pages/home/commandList/index.<span class="hljs-property">tsx</span><br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1709895001762-cece1a26-d55a-4632-b4f6-4194b9665299.png"></p><ol start="68"><li>推荐列表页面代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-variable constant_">FC</span>, <span class="hljs-title class_">MouseEventHandler</span>, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; mockList &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./mock&quot;</span>;<br><br>type <span class="hljs-title class_">Props</span> = &#123;&#125;;<br><br>interface <span class="hljs-title class_">ICommandItem</span> &#123;<br> <span class="hljs-attr">key</span>: string;<br> <span class="hljs-attr">item</span>: any;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CommandData</span>: <span class="hljs-variable constant_">FC</span>&lt;<span class="hljs-title class_">ICommandItem</span>&gt; = <span class="hljs-function">(<span class="hljs-params">&#123; item &#125;</span>) =&gt;</span> &#123;<br> <span class="hljs-keyword">const</span> [selected, setSelected] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br> <span class="hljs-keyword">const</span> <span class="hljs-attr">handleClick</span>: <span class="hljs-title class_">MouseEventHandler</span>&lt;<span class="hljs-title class_">Element</span>&gt; = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  event.<span class="hljs-title function_">preventDefault</span>();<br>  <span class="hljs-title function_">setSelected</span>(!selected);<br> &#125;;<br><br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex flex-col items-start p-4 border-b&quot;</span>&gt;</span></span><br><span class="language-xml">   &#123;/* 标题部分 */&#125;</span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex h-auto&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; font-bold text-lg leading-10&quot;</span>&gt;</span></span><br><span class="language-xml">     &#123;item?.target?.question?.title || item?.target?.title&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   &#123;/* 文章卡片 */&#125;</span><br><span class="language-xml">   &#123;selected ? (</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">dangerouslySetInnerHTML</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">__html:</span> <span class="hljs-attr">item</span>?<span class="hljs-attr">.target</span>?<span class="hljs-attr">.content</span> &#125;&#125; /&gt;</span></span><br><span class="language-xml">   ) : (</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">a</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; cursor-pointer hover:text-gray-600 text-gray-800&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">     &#123;item?.target?.excerpt?.substring(0, 80) + &quot;...&quot;&#125;</span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; text-sm leading-7 text-blue-500 ml-2&quot;</span>&gt;</span></span><br><span class="language-xml">      阅读全文 <span class="hljs-symbol">&amp;gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">   )&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">   &#123;/* 底部 bar */&#125;</span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">flex</span> <span class="hljs-attr">justify-between</span> <span class="hljs-attr">items-center</span> <span class="hljs-attr">p-3</span> <span class="hljs-attr">bg-white</span> <span class="hljs-attr">w-full</span> $&#123;<span class="hljs-attr">selected</span> ? &quot; <span class="hljs-attr">bottom-0</span> <span class="hljs-attr">left-0</span> <span class="hljs-attr">shadow-sm</span> <span class="hljs-attr">border-t</span> <span class="hljs-attr">sticky</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;&#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">   &gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex items-center flex-1&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">                        flex justify-center items-center h-8 px-4 bg-blue-100 text-sm text-blue-600 rounded-sm  cursor-pointer hover:bg-blue-200 transition-all&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     &gt;</span></span><br><span class="language-xml">      赞同 &#123;item?.target?.thanks_count || 0&#125;</span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex justify-center items-center h-8 px-4 bg-blue-100 text-sm text-blue-600 rounded-sm  cursor-pointer hover:bg-blue-200 transition-all ml-2&quot;</span>&gt;</span></span><br><span class="language-xml">      踩</span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex items-center flex-1 gap-8 text-gray-400 text-sm ml-8&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;item?.target?.comment_count&#125; 评论<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>收藏<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>举报<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    &#123;selected &amp;&amp; (</span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; text-gray-500 text-sm cursor-pointer&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">       收起</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    )&#125;</span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">CommandList</span>(<span class="hljs-params">&#123;&#125;: Props</span>) &#123;<br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex flex-col border-t&quot;</span>&gt;</span></span><br><span class="language-xml">   &#123;mockList.map((item, idx) =&gt; (</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">CommandData</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id</span> + <span class="hljs-attr">idx</span>&#125; <span class="hljs-attr">item</span>=<span class="hljs-string">&#123;item&#125;</span> /&gt;</span></span><br><span class="language-xml">   ))&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;<br></code></pre></td></tr></table></figure><ol start="69"><li>当前页面效果</li></ol><p><img src="/img/images/2024/1709895144355-f28819e9-5ec2-4e0d-b672-ee3a4a693ce6.png"></p><h1 id="3、继续页面开发"><a href="#3、继续页面开发" class="headerlink" title="3、继续页面开发"></a>3、继续页面开发</h1><p>第二大节【2、项目开发】中已经基本成型了，这次会补充、完善一些细节</p><h3 id="顶部导航吸顶，要求：滚动一点距离后才吸顶"><a href="#顶部导航吸顶，要求：滚动一点距离后才吸顶" class="headerlink" title="顶部导航吸顶，要求：滚动一点距离后才吸顶"></a>顶部导航吸顶，要求：滚动一点距离后才吸顶</h3><ol start="70"><li>改动页面：<code>react-master/src/components/navigation/index.tsx</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-variable constant_">FC</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ZHRouter</span>, router &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../router&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BellIcon</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@heroicons/react/24/outline&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NavLink</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Search</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../search&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Tab</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../pages/home/tabs&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Logo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; px-2&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">svg</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 64 30&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#1772F6&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;64&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;30&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;css-1hlrcxk&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">   &gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M29.05 4.582H16.733V25.94h3.018l.403 2.572 4.081-2.572h4.815V4.582zm-5.207 18.69l-2.396 1.509-.235-1.508h-1.724V7.233h6.78v16.04h-2.425zM14.46 14.191H9.982c0-.471.033-.954.039-1.458v-5.5h5.106V5.935a1.352 1.352 0 0 0-.404-.957 1.378 1.378 0 0 0-.968-.396H5.783c.028-.088.056-.177.084-.255.274-.82 1.153-3.326 1.153-3.326a4.262 4.262 0 0 0-2.413.698c-.57.4-.912.682-1.371 1.946-.532 1.453-.997 2.856-1.31 3.693C1.444 8.674.28 11.025.28 11.025a5.85 5.85 0 0 0 2.52-.61c1.119-.593 1.679-1.502 2.054-2.883l.09-.3h2.334v5.5c0 .5-.045.982-.073 1.46h-4.12c-.71 0-1.39.278-1.893.775a2.638 2.638 0 0 0-.783 1.874h6.527a17.717 17.717 0 0 1-.778 3.649 16.796 16.796 0 0 1-3.012 5.273A33.104 33.104 0 0 1 0 28.74s3.13 1.175 5.425-.954c1.388-1.292 2.631-3.814 3.23-5.727a28.09 28.09 0 0 0 1.12-5.229h5.967v-1.37a1.254 1.254 0 0 0-.373-.899 1.279 1.279 0 0 0-.909-.37z&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M11.27 19.675l-2.312 1.491 5.038 7.458a6.905 6.905 0 0 0 .672-2.218 3.15 3.15 0 0 0-.28-2.168l-3.118-4.563zM51.449 15.195V5.842c4.181-.205 7.988-.405 9.438-.483l.851-.05c.387-.399.885-2.395.689-3.021-.073-.25-.213-.666-.638-.555a33.279 33.279 0 0 1-4.277.727c-2.766.321-3.97.404-7.804.682-6.718.487-12.709.72-12.709.72a2.518 2.518 0 0 0 .788 1.834 2.567 2.567 0 0 0 1.883.706c2.278-.095 5.598-.25 8.996-.41v9.203h-12.78c0 .703.281 1.377.783 1.874a2.69 2.69 0 0 0 1.892.777h10.105v7.075c0 .887-.464 1.192-1.231 1.214h-3.92a4.15 4.15 0 0 0 .837 1.544 4.2 4.2 0 0 0 1.403 1.067 6.215 6.215 0 0 0 2.71.277c1.36-.066 2.967-.826 2.967-3.57v-7.607h11.28c.342 0 .67-.135.91-.374.242-.239.378-.563.378-.902v-1.375H51.449z&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M42.614 8.873a2.304 2.304 0 0 0-1.508-.926 2.334 2.334 0 0 0-1.727.405l-.376.272 4.255 5.85 2.24-1.62-2.884-3.98zM57.35 8.68l-3.125 4.097 2.24 1.663 4.517-5.927-.375-.277a2.32 2.32 0 0 0-1.722-.452 2.327 2.327 0 0 0-1.536.896z&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;;<br><br>interface <span class="hljs-title class_">NavProps</span> &#123;<br> <span class="hljs-attr">navs</span>: <span class="hljs-title class_">ZHRouter</span>;<br>&#125;<br><br>type <span class="hljs-title class_">NavLinkRenderProps</span> = &#123;<br> isActive?: boolean;<br> isPending?: boolean;<br> isTransitioning?: boolean;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">NavTab</span>: <span class="hljs-variable constant_">FC</span>&lt;<span class="hljs-title class_">NavProps</span>&gt; = <span class="hljs-function">(<span class="hljs-params">&#123; navs &#125;</span>) =&gt;</span> &#123;<br> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getStyles</span> = (<span class="hljs-params">&#123; isActive &#125;: NavLinkRenderProps</span>) =&gt;<br>  <span class="hljs-string">&quot;hover:text-black mx-4 h-full py-3.5 transition-all &quot;</span> +<br>  (isActive<br>   ? <span class="hljs-string">&quot;font-extrabold text-black border-b-4 border-blue-600&quot;</span><br>   : <span class="hljs-string">&quot;text-gray-400&quot;</span>);<br><br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex mx-6 box-border&quot;</span>&gt;</span></span><br><span class="language-xml">   &#123;navs.map((item) =&gt; (</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.path</span> + &quot;<span class="hljs-attr">__</span>&quot;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;item.path</span> || &quot;/&quot;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;getStyles&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">     &#123;item.title&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">   ))&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">MenuAlarm</span> = (<span class="hljs-params"></span>) =&gt; (<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;flex mr-10 gap-4&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex flex-col justify-center items-center&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">BellIcon</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; h-5 w-5 text-gray-400 fill-gray-400&quot;</span> /&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; text-gray-400 text-xs&quot;</span>&gt;</span>消息<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex flex-col justify-center items-center&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">BellIcon</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; h-5 w-5 text-gray-400 fill-gray-400&quot;</span> /&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; text-gray-400 text-xs&quot;</span>&gt;</span>私信<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br><br>type <span class="hljs-title class_">Props</span> = &#123;<br> <span class="hljs-attr">className</span>: string;<br> <span class="hljs-attr">hide</span>: boolean;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Navigation</span>(<span class="hljs-params">&#123; className, hide &#125;: Props</span>) &#123;<br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">   <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>` <span class="hljs-attr">bg-white</span> <span class="hljs-attr">w-screen</span> <span class="hljs-attr">shadow-lg</span> <span class="hljs-attr">overflow-hidden</span> $&#123;<span class="hljs-attr">className</span>&#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; max-w-6xl mx-auto my-0 flex justify-center w-full&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>` <span class="hljs-attr">relative</span> <span class="hljs-attr">h-14</span> <span class="hljs-attr">flex</span> <span class="hljs-attr">flex-col</span> <span class="hljs-attr">justify-between</span> <span class="hljs-attr">items-center</span> <span class="hljs-attr">min-w-max</span> <span class="hljs-attr">w-full</span> <span class="hljs-attr">transition-all</span> <span class="hljs-attr">duration-300</span> $&#123;<span class="hljs-attr">hide</span> ? &quot;<span class="hljs-attr">top-0</span>&quot; <span class="hljs-attr">:</span> &quot;<span class="hljs-attr">-top-14</span>&quot;&#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">     &#123;/* 未吸顶时展示这个 */&#125;</span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-full h-14 flex justify-between items-center min-w-max&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex items-center&quot;</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">Logo</span> /&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">NavTab</span> <span class="hljs-attr">navs</span>=<span class="hljs-string">&#123;router&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Search</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MenuAlarm</span> /&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">     &#123;/* 吸顶时展示这个 */&#125;</span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-full h-14 flex justify-between items-center min-w-max&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex items-center&quot;</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">Logo</span> /&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">Tab</span> <span class="hljs-attr">activeStyle</span>=<span class="hljs-string">&quot;border-b-4 border-blue-600&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Search</span> /&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;<br></code></pre></td></tr></table></figure><ol start="71"><li>改动页面：<code>react-master/src/pages/home/index.tsx</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Navigation</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../components/navigation&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Card</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../components/card&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Tabs</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./tabs&quot;</span>;<br><br>type <span class="hljs-title class_">Props</span> = &#123;&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params">&#123;&#125;: Props</span>) &#123;<br> <span class="hljs-keyword">const</span> [hide, setHide] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br><br> <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleChange</span> = (<span class="hljs-params">flag: boolean</span>) =&gt; &#123;<br>  <span class="hljs-title function_">setHide</span>(flag);<br> &#125;;<br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">Navigation</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; sticky top-0&quot;</span> <span class="hljs-attr">hide</span>=<span class="hljs-string">&#123;hide&#125;</span> /&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; mx-auto max-w-6xl flex my-2 px-20&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Card</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-2/3&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">Tabs</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleChange&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex-1 w-1/3&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">Card</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-full&quot;</span>&gt;</span>创作中心<span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">Card</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-full&quot;</span>&gt;</span>推荐关注<span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">Card</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-full&quot;</span>&gt;</span>其他功能<span class="hljs-tag">&lt;/<span class="hljs-name">Card</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;<br></code></pre></td></tr></table></figure><ol start="72"><li>改动页面：<code>react-master/src/pages/home/tabs.tsx</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-variable constant_">FC</span>, useEffect, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NavLink</span>, <span class="hljs-title class_">Outlet</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> tabs = [<br> &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;关注&quot;</span>,<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/follow&quot;</span>,<br> &#125;,<br> &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;推荐&quot;</span>,<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br> &#125;,<br> &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;热榜&quot;</span>,<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/hot&quot;</span>,<br> &#125;,<br> &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;视频&quot;</span>,<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/zvideo&quot;</span>,<br> &#125;,<br>];<br><br>type <span class="hljs-title class_">TabProps</span> = &#123;<br> activeStyle?: string;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">Tab</span>: <span class="hljs-variable constant_">FC</span>&lt;<span class="hljs-title class_">TabProps</span>&gt; = <span class="hljs-function">(<span class="hljs-params">&#123; activeStyle &#125;</span>) =&gt;</span> (<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex mx-6 box-border&quot;</span>&gt;</span></span><br><span class="language-xml">  &#123;tabs.map((item) =&gt; (</span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.path&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;item.path&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;(&#123;</span> <span class="hljs-attr">isActive</span> &#125;) =&gt;</span></span><br><span class="language-xml">     &quot; whitespace-nowrap py-4 mx-4 text-base transition-all &quot; +</span><br><span class="language-xml">     (isActive</span><br><span class="language-xml">      ? &quot;text-blue-600 font-bold &quot; + activeStyle</span><br><span class="language-xml">      : &quot;text-black hover:text-blue-700&quot;)</span><br><span class="language-xml">    &#125;</span><br><span class="language-xml">   &gt;</span><br><span class="language-xml">    &#123;item.title&#125;</span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">  ))&#125;</span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br><br>type <span class="hljs-title class_">Props</span> = &#123;<br> className?: string;<br> onChange?: <span class="hljs-function">(<span class="hljs-params">bool: boolean</span>) =&gt;</span> <span class="hljs-keyword">void</span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Tabs</span>(<span class="hljs-params">&#123; onChange &#125;: Props</span>) &#123;<br> <span class="hljs-keyword">const</span> scrollRef = useRef&lt;<span class="hljs-title class_">HTMLDivElement</span>&gt;(<span class="hljs-literal">null</span>);<br><br> <span class="hljs-comment">// 当这个 ref 的 div 到顶后，则进行吸顶处理</span><br><br> <span class="hljs-comment">// 判断到顶</span><br> <span class="hljs-comment">// 1、getBoundingClientRect 获取到元素的位置信息，然后计算</span><br> <span class="hljs-comment">// 2、IntersectionObserver 监听元素进入可视区域</span><br> <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">intersectionObserver</span>: <span class="hljs-title class_">IntersectionObserver</span> | <span class="hljs-literal">undefined</span> =<br>   <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(<span class="hljs-function">(<span class="hljs-params">entries</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 当进入可视区域内时，执行一次，entries[0]?.isIntersecting 为 true</span><br>    <span class="hljs-comment">// 当离开可视区域内时，执行一次，entries[0]?.isIntersecting 为 false</span><br>    <span class="hljs-comment">// 所以当为 false 时处理吸顶</span><br>    onChange?.(entries[<span class="hljs-number">0</span>]?.<span class="hljs-property">isIntersecting</span>);<br>   &#125;);<br><br>  scrollRef.<span class="hljs-property">current</span> &amp;&amp; intersectionObserver.<span class="hljs-title function_">observe</span>(scrollRef.<span class="hljs-property">current</span>);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>   scrollRef.<span class="hljs-property">current</span> &amp;&amp; intersectionObserver!.<span class="hljs-title function_">unobserve</span>(scrollRef.<span class="hljs-property">current</span>);<br><br>   intersectionObserver = <span class="hljs-literal">undefined</span>;<br>  &#125;;<br> &#125;, []);<br><br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-full&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;scrollRef&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">Tab</span> /&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="无限滚动"><a href="#无限滚动" class="headerlink" title="无限滚动"></a>无限滚动</h3><ol start="73"><li>改动页面：<code>react-master/src/pages/home/commandList.tsx</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123;<br> <span class="hljs-variable constant_">FC</span>,<br> <span class="hljs-title class_">MouseEventHandler</span>,<br> useEffect,<br> useRef,<br> useState,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; mockList &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./mock&quot;</span>;<br><br>type <span class="hljs-title class_">Props</span> = &#123;&#125;;<br><br>interface <span class="hljs-title class_">ICommandItem</span> &#123;<br> <span class="hljs-attr">key</span>: string;<br> <span class="hljs-attr">item</span>: any;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CommandData</span>: <span class="hljs-variable constant_">FC</span>&lt;<span class="hljs-title class_">ICommandItem</span>&gt; = <span class="hljs-function">(<span class="hljs-params">&#123; item &#125;</span>) =&gt;</span> &#123;<br> <span class="hljs-keyword">const</span> [selected, setSelected] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br> <span class="hljs-keyword">const</span> <span class="hljs-attr">handleClick</span>: <span class="hljs-title class_">MouseEventHandler</span>&lt;<span class="hljs-title class_">Element</span>&gt; = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  event.<span class="hljs-title function_">preventDefault</span>();<br>  <span class="hljs-title function_">setSelected</span>(!selected);<br> &#125;;<br><br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex flex-col items-start p-4 border-b&quot;</span>&gt;</span></span><br><span class="language-xml">   &#123;/* 标题部分 */&#125;</span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex h-auto&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; font-bold text-lg leading-10&quot;</span>&gt;</span></span><br><span class="language-xml">     &#123;item?.target?.question?.title || item?.target?.title&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   &#123;/* 文章卡片 */&#125;</span><br><span class="language-xml">   &#123;selected ? (</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">dangerouslySetInnerHTML</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">__html:</span> <span class="hljs-attr">item</span>?<span class="hljs-attr">.target</span>?<span class="hljs-attr">.content</span> &#125;&#125; /&gt;</span></span><br><span class="language-xml">   ) : (</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">a</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; cursor-pointer hover:text-gray-600 text-gray-800&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">     &#123;item?.target?.excerpt?.substring(0, 80) + &quot;...&quot;&#125;</span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; text-sm leading-7 text-blue-500 ml-2&quot;</span>&gt;</span></span><br><span class="language-xml">      阅读全文 <span class="hljs-symbol">&amp;gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">   )&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">   &#123;/* 底部 bar */&#125;</span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">flex</span> <span class="hljs-attr">justify-between</span> <span class="hljs-attr">items-center</span> <span class="hljs-attr">p-3</span> <span class="hljs-attr">bg-white</span> <span class="hljs-attr">w-full</span> $&#123;<span class="hljs-attr">selected</span> ? &quot; <span class="hljs-attr">bottom-0</span> <span class="hljs-attr">left-0</span> <span class="hljs-attr">shadow-sm</span> <span class="hljs-attr">border-t</span> <span class="hljs-attr">sticky</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;&#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">   &gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex items-center flex-1&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">                        flex justify-center items-center h-8 px-4 bg-blue-100 text-sm text-blue-600 rounded-sm  cursor-pointer hover:bg-blue-200 transition-all&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     &gt;</span></span><br><span class="language-xml">      赞同 &#123;item?.target?.thanks_count || 0&#125;</span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex justify-center items-center h-8 px-4 bg-blue-100 text-sm text-blue-600 rounded-sm  cursor-pointer hover:bg-blue-200 transition-all ml-2&quot;</span>&gt;</span></span><br><span class="language-xml">      踩</span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex items-center flex-1 gap-8 text-gray-400 text-sm ml-8&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;item?.target?.comment_count&#125; 评论<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>收藏<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>举报<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    &#123;selected &amp;&amp; (</span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; text-gray-500 text-sm cursor-pointer&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">       收起</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    )&#125;</span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchList</span> = (<span class="hljs-params"></span>) =&gt;<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Array</span>&lt;any&gt;&gt;(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>   <span class="hljs-title function_">resolve</span>(mockList.<span class="hljs-title function_">slice</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>));<br>  &#125;, <span class="hljs-number">500</span>);<br> &#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">CommandList</span>(<span class="hljs-params">&#123;&#125;: Props</span>) &#123;<br> <span class="hljs-keyword">const</span> [list, setList] = <span class="hljs-title function_">useState</span>(mockList.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>));<br><br> <span class="hljs-keyword">const</span> scrollRef = useRef&lt;<span class="hljs-title class_">HTMLDivElement</span>&gt;(<span class="hljs-literal">null</span>);<br><br> <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">intersectionObserver</span>: <span class="hljs-title class_">IntersectionObserver</span> | <span class="hljs-literal">undefined</span> =<br>   <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(<span class="hljs-function">(<span class="hljs-params">entries</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 这个函数执行时，拿不到最新的 list</span><br>    <span class="hljs-keyword">const</span> isIntersecting = entries[<span class="hljs-number">0</span>]?.<span class="hljs-property">isIntersecting</span>;<br><br>    <span class="hljs-keyword">if</span> (isIntersecting) &#123;<br>     <span class="hljs-comment">// 加载更多数据</span><br>     <span class="hljs-title function_">fetchList</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res: <span class="hljs-built_in">Array</span>&lt;any&gt;</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">setList</span>(<span class="hljs-function">(<span class="hljs-params">list</span>) =&gt;</span> [...list, ...res]);<br><br>      <span class="hljs-comment">// setList([...list, ...res]); 这样写，list 不会更新</span><br>     &#125;);<br>    &#125;<br>   &#125;);<br><br>  scrollRef.<span class="hljs-property">current</span> &amp;&amp; intersectionObserver.<span class="hljs-title function_">observe</span>(scrollRef.<span class="hljs-property">current</span>);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>   scrollRef.<span class="hljs-property">current</span> &amp;&amp; intersectionObserver!.<span class="hljs-title function_">unobserve</span>(scrollRef.<span class="hljs-property">current</span>);<br>   intersectionObserver = <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>;<br>  &#125;;<br> &#125;, []);<br><br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex flex-col border-t&quot;</span>&gt;</span></span><br><span class="language-xml">   &#123;list.map((item, idx) =&gt; (</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">CommandData</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id</span> + <span class="hljs-attr">idx</span>&#125; <span class="hljs-attr">item</span>=<span class="hljs-string">&#123;item&#125;</span> /&gt;</span></span><br><span class="language-xml">   ))&#125;</span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;scrollRef&#125;</span>&gt;</span>loading......<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="use-API-封装"><a href="#use-API-封装" class="headerlink" title="use* API 封装"></a>use* API 封装</h3><p>React 的 useApi 有 useState 这种有返回值的，也有 useEffect 这种“生命周期”类的</p><h4 id="useRefInsObsEffect"><a href="#useRefInsObsEffect" class="headerlink" title="useRefInsObsEffect"></a>useRefInsObsEffect</h4><p>类似于 useEffect 的</p><ol start="74"><li>新增<code>useRefInsObsEffect.ts</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch src/pages/home/commandList/useRefInsObsEffect.<span class="hljs-property">ts</span><br><br><span class="hljs-comment">// 写如下代码：</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">RefObject</span>, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useRefInsObsEffect</span>(<span class="hljs-params"></span><br><span class="hljs-params"> fn: (b: boolean) =&gt; <span class="hljs-keyword">void</span>,</span><br><span class="hljs-params"> scrollRef: RefObject&lt;HTMLDivElement&gt;,</span><br><span class="hljs-params"></span>) &#123;<br> <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">intersectionObserver</span>: <span class="hljs-title class_">IntersectionObserver</span> | <span class="hljs-literal">undefined</span> =<br>   <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(<span class="hljs-function">(<span class="hljs-params">entries</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">fn</span>(entries[<span class="hljs-number">0</span>]?.<span class="hljs-property">isIntersecting</span>);<br>   &#125;);<br><br>  scrollRef.<span class="hljs-property">current</span> &amp;&amp; intersectionObserver.<span class="hljs-title function_">observe</span>(scrollRef.<span class="hljs-property">current</span>);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>   scrollRef.<span class="hljs-property">current</span> &amp;&amp; intersectionObserver!.<span class="hljs-title function_">unobserve</span>(scrollRef.<span class="hljs-property">current</span>);<br>   intersectionObserver = <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>;<br>  &#125;;<br> &#125;, []);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="75"><li>更改<code>react-master/src/pages/home/commandList/index.tsx</code>（看变更吧）</li></ol><p><img src="/img/images/2024/1709905780255-ab58c2e3-a3ee-4755-a1cf-38c7d27a34f6.png"></p><h4 id="useRefInsObsState"><a href="#useRefInsObsState" class="headerlink" title="useRefInsObsState"></a>useRefInsObsState</h4><p>类似于 useState 的</p><ol start="76"><li>新增<code>useRefInsObsState.ts</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">RefObject</span>, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useRefInsObsEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./useRefInsObsEffect&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123; mockList &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./mock&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchList</span> = (<span class="hljs-params"></span>) =&gt;<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Array</span>&lt;any&gt;&gt;(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>   <span class="hljs-title function_">resolve</span>(mockList.<span class="hljs-title function_">slice</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>));<br>  &#125;, <span class="hljs-number">1000</span>);<br> &#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useRefInsObsState</span>(<span class="hljs-params">scrollRef: RefObject&lt;HTMLDivElement&gt;</span>) &#123;<br> <span class="hljs-keyword">const</span> [list, setList] = <span class="hljs-title function_">useState</span>(mockList.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>));<br><br> <span class="hljs-title function_">useRefInsObsEffect</span>(<span class="hljs-function">(<span class="hljs-params">isIntersecting</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (isIntersecting) &#123;<br>   <span class="hljs-comment">// 加载更多数据</span><br>   <span class="hljs-title function_">fetchList</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res: <span class="hljs-built_in">Array</span>&lt;any&gt;</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">setList</span>(<span class="hljs-function">(<span class="hljs-params">list</span>) =&gt;</span> [...list, ...res]);<br>   &#125;);<br>  &#125;<br> &#125;, scrollRef);<br><br> <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="77"><li>更改<code>react-master/src/pages/home/commandList/index.tsx</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-variable constant_">FC</span>, <span class="hljs-title class_">MouseEventHandler</span>, useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useRefInsObsState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./useRefInsObsState&quot;</span>;<br><br>type <span class="hljs-title class_">Props</span> = &#123;&#125;;<br><br>interface <span class="hljs-title class_">ICommandItem</span> &#123;<br> <span class="hljs-attr">key</span>: string;<br> <span class="hljs-attr">item</span>: any;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CommandData</span>: <span class="hljs-variable constant_">FC</span>&lt;<span class="hljs-title class_">ICommandItem</span>&gt; = <span class="hljs-function">(<span class="hljs-params">&#123; item &#125;</span>) =&gt;</span> &#123;<br> <span class="hljs-keyword">const</span> [selected, setSelected] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br> <span class="hljs-keyword">const</span> <span class="hljs-attr">handleClick</span>: <span class="hljs-title class_">MouseEventHandler</span>&lt;<span class="hljs-title class_">Element</span>&gt; = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  event.<span class="hljs-title function_">preventDefault</span>();<br>  <span class="hljs-title function_">setSelected</span>(!selected);<br> &#125;;<br><br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex flex-col items-start p-4 border-b&quot;</span>&gt;</span></span><br><span class="language-xml">   &#123;/* 标题部分 */&#125;</span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex h-auto&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; font-bold text-lg leading-10&quot;</span>&gt;</span></span><br><span class="language-xml">     &#123;item?.target?.question?.title || item?.target?.title&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   &#123;/* 文章卡片 */&#125;</span><br><span class="language-xml">   &#123;selected ? (</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">dangerouslySetInnerHTML</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">__html:</span> <span class="hljs-attr">item</span>?<span class="hljs-attr">.target</span>?<span class="hljs-attr">.content</span> &#125;&#125; /&gt;</span></span><br><span class="language-xml">   ) : (</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">a</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; cursor-pointer hover:text-gray-600 text-gray-800&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">     &#123;item?.target?.excerpt?.substring(0, 80) + &quot;...&quot;&#125;</span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; text-sm leading-7 text-blue-500 ml-2&quot;</span>&gt;</span></span><br><span class="language-xml">      阅读全文 <span class="hljs-symbol">&amp;gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">   )&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">   &#123;/* 底部 bar */&#125;</span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">flex</span> <span class="hljs-attr">justify-between</span> <span class="hljs-attr">items-center</span> <span class="hljs-attr">p-3</span> <span class="hljs-attr">bg-white</span> <span class="hljs-attr">w-full</span> $&#123;<span class="hljs-attr">selected</span> ? &quot; <span class="hljs-attr">bottom-0</span> <span class="hljs-attr">left-0</span> <span class="hljs-attr">shadow-sm</span> <span class="hljs-attr">border-t</span> <span class="hljs-attr">sticky</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;&#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">   &gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex items-center flex-1&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">                        flex justify-center items-center h-8 px-4 bg-blue-100 text-sm text-blue-600 rounded-sm  cursor-pointer hover:bg-blue-200 transition-all&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     &gt;</span></span><br><span class="language-xml">      赞同 &#123;item?.target?.thanks_count || 0&#125;</span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex justify-center items-center h-8 px-4 bg-blue-100 text-sm text-blue-600 rounded-sm  cursor-pointer hover:bg-blue-200 transition-all ml-2&quot;</span>&gt;</span></span><br><span class="language-xml">      踩</span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex items-center flex-1 gap-8 text-gray-400 text-sm ml-8&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;item?.target?.comment_count&#125; 评论<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>收藏<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>举报<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    &#123;selected &amp;&amp; (</span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; text-gray-500 text-sm cursor-pointer&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">       <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">       收起</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    )&#125;</span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">CommandList</span>(<span class="hljs-params">&#123;&#125;: Props</span>) &#123;<br> <span class="hljs-keyword">const</span> scrollRef = useRef&lt;<span class="hljs-title class_">HTMLDivElement</span>&gt;(<span class="hljs-literal">null</span>);<br><br> <span class="hljs-keyword">const</span> list = <span class="hljs-title function_">useRefInsObsState</span>(scrollRef);<br><br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex flex-col border-t&quot;</span>&gt;</span></span><br><span class="language-xml">   &#123;list.map((item, idx) =&gt; (</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">CommandData</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id</span> + <span class="hljs-attr">idx</span>&#125; <span class="hljs-attr">item</span>=<span class="hljs-string">&#123;item&#125;</span> /&gt;</span></span><br><span class="language-xml">   ))&#125;</span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;scrollRef&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; h-auto&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">svg</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;656&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;108&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 656 108&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;w-full text-gray-100&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">path</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M0 0h656v108H0V0zm0 0h350v12H0V0zm20 32h238v12H20V32zM0 32h12v12H0V32zm0 32h540v12H0V64zm0 32h470v12H0V96z&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;currentColor&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">fill-rule</span>=<span class="hljs-string">&quot;evenodd&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="搜索历史记录功能"><a href="#搜索历史记录功能" class="headerlink" title="搜索历史记录功能"></a>搜索历史记录功能</h3><p>知乎原功能<img src="/img/images/2024/1709907989788-bffa1333-9f9f-43bd-87de-0a7103fa7ffe.png"></p><h4 id="极致的本地存储库封装"><a href="#极致的本地存储库封装" class="headerlink" title="极致的本地存储库封装"></a>极致的本地存储库封装</h4><ol start="78"><li>新建文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir src/utils/store &amp;&amp; touch src/utils/store/index.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ol start="79"><li>写入如下代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 一个本地存储库</span><br><span class="hljs-comment"> * 1. 初始化时可选择 localStorage、sessionStorage</span><br><span class="hljs-comment"> * 2. 若浏览器出现了异步问题、高频线程问题，也能解决</span><br><span class="hljs-comment"> * 3. 若本地存储有问题，可以降级处理</span><br><span class="hljs-comment"> * 4. 不用自己去解析 json，支持各种数组操作</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 如何讲一个小工具封装到极致（过度设计）</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CreateStore</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span><br><span class="hljs-params"> unLocal = <span class="hljs-literal">false</span>,</span><br><span class="hljs-params"> maxLength = <span class="hljs-number">30</span>,</span><br><span class="hljs-params"> expireTime = <span class="hljs-literal">NaN</span>,</span><br><span class="hljs-params"></span>) &#123;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">unLocal</span> = unLocal;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxLength</span> = maxLength;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">expireTime</span> = expireTime;<br><br> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">observe</span>();<br>&#125;;<br><br><span class="hljs-title class_">CreateStore</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">observe</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br> <span class="hljs-keyword">const</span> context = <span class="hljs-variable language_">this</span>;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">__mock__storage</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(<br>  &#123;&#125;,<br>  &#123;<br>   <span class="hljs-title function_">get</span>(<span class="hljs-params">target, propKey, receiver</span>) &#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, propKey, receiver);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">unLocal</span>) &#123;<br>     <span class="hljs-comment">// 存储在本地时，直接 getItem</span><br>     result = (context.<span class="hljs-property">getItem</span> &amp;&amp; context.<span class="hljs-title function_">getItem</span>(propKey)) || <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>;<br><br>     <span class="hljs-comment">// if (result !== Reflect.get(target, propKey, receiver)) &#123;</span><br>     <span class="hljs-comment">//  throw new Error(&quot;数据不一致&quot;);</span><br>     <span class="hljs-comment">// &#125;</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>   &#125;,<br>   <span class="hljs-title function_">set</span>(<span class="hljs-params">target, propKey, value, receiver</span>) &#123;<br>    <span class="hljs-keyword">let</span> _value = value;<br><br>    <span class="hljs-comment">// 数据处理</span><br>    <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span> &amp;&amp; value.<span class="hljs-property">length</span> &gt; context.<span class="hljs-property">maxLength</span>) &#123;<br>     _value = value.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, context.<span class="hljs-property">maxLength</span>); <span class="hljs-comment">// 截取数据，多余丢弃</span><br>    &#125;<br><br>    <span class="hljs-comment">// 当 unLocal 为 false 时，在合适的时间将数据存储到本地</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">unLocal</span>) &#123;<br>     context.<span class="hljs-property">setItem</span> &amp;&amp; context.<span class="hljs-title function_">setItem</span>(propKey, _value);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, propKey, value, receiver);<br>   &#125;,<br>  &#125;,<br> );<br>&#125;;<br><br><span class="hljs-title class_">CreateStore</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getItem</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">type</span>) &#123;<br> <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">window</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;请在浏览器环境下运行&quot;</span>);<br><br> <span class="hljs-comment">// 依赖反转：将操作抽象，不依赖于自己的实现，通过初始化时传入的storageMethod自行实现 getItem</span><br> <span class="hljs-keyword">const</span> data = <span class="hljs-variable language_">window</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">storageMethod</span>].<span class="hljs-title function_">getItem</span>(type);<br><br> <span class="hljs-keyword">let</span> dataJson;<br> <span class="hljs-keyword">try</span> &#123;<br>  dataJson = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data);<br> &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(error);<br> &#125;<br><br> <span class="hljs-keyword">return</span> dataJson;<br>&#125;;<br><br><span class="hljs-title class_">CreateStore</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">setItem</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">type, data</span>) &#123;<br> <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">window</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;请在浏览器环境下运行&quot;</span>);<br><br> <span class="hljs-keyword">const</span> dataJson = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data);<br><br> <span class="hljs-comment">// 依赖反转：将操作抽象，不依赖于自己的实现，通过初始化时传入的storageMethod自行实现 setItem</span><br> <span class="hljs-variable language_">window</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">storageMethod</span>].<span class="hljs-title function_">setItem</span>(type, dataJson);<br>&#125;;<br><br><span class="hljs-title class_">CreateStore</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">set</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">type, data</span>) &#123;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">__mock__storage</span>[<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.key&#125;</span>__<span class="hljs-subst">$&#123;type&#125;</span>`</span>] = data;<br>&#125;;<br><br><span class="hljs-title class_">CreateStore</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">get</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">type</span>) &#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">__mock__storage</span>[<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.key&#125;</span>__<span class="hljs-subst">$&#123;type&#125;</span>`</span>];<br>&#125;;<br><br><span class="hljs-comment">// 支持数组的方法</span><br>[<span class="hljs-string">&quot;pop&quot;</span>, <span class="hljs-string">&quot;push&quot;</span>, <span class="hljs-string">&quot;shift&quot;</span>, <span class="hljs-string">&quot;unshift&quot;</span>, <span class="hljs-string">&quot;reverse&quot;</span>, <span class="hljs-string">&quot;splice&quot;</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">method</span>) =&gt;</span> &#123;<br> <span class="hljs-title class_">CreateStore</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[method] = <span class="hljs-keyword">function</span> (<span class="hljs-params">type, ...rest</span>) &#123;<br>  <span class="hljs-comment">// 当没有数组时，要用数组方法，直接初始化一个空数组</span><br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(type)) <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">set</span>(type, []);<br><br>  <span class="hljs-keyword">if</span> ((!<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(type)) <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;必须为数组类型&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> dataList = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(type);<br>  <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[method].<span class="hljs-title function_">apply</span>(dataList, rest);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">set</span>(type, dataList);<br> &#125;;<br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CreateLocalStorage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">key, ...rest</span>) &#123;<br> <span class="hljs-title class_">CreateStore</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, rest);<br><br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">storageMethod</span> = <span class="hljs-string">&quot;localStorage&quot;</span>;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">key</span> = key;<br>&#125;;<br><br><span class="hljs-title class_">CreateLocalStorage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">CreateStore</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><span class="hljs-title class_">CreateLocalStorage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">CreateLocalStorage</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CreateSessionlStorage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">key, ...rest</span>) &#123;<br> <span class="hljs-title class_">CreateStore</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, rest);<br><br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">storageMethod</span> = <span class="hljs-string">&quot;sessionlStorage&quot;</span>;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">key</span> = key;<br>&#125;;<br><br><span class="hljs-title class_">CreateSessionlStorage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">CreateStore</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><span class="hljs-title class_">CreateSessionlStorage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">CreateSessionlStorage</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> localStore = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateLocalStorage</span>(<span class="hljs-string">&quot;local&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="思考：函数与-SDK-的区别"><a href="#思考：函数与-SDK-的区别" class="headerlink" title="思考：函数与 SDK 的区别"></a>思考：函数与 SDK 的区别</h5><p>SDK 一般采用类来写，它的扩展性更强。并且可以自行分层，逻辑隔离更清晰</p><h4 id="更改react-master-src-components-search-index-tsx"><a href="#更改react-master-src-components-search-index-tsx" class="headerlink" title="更改react-master/src/components/search/index.tsx"></a>更改<code>react-master/src/components/search/index.tsx</code></h4><p>搜索框支持历史记录、上下箭头选择历史记录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123;<br> <span class="hljs-title class_">ChangeEventHandler</span>,<br> <span class="hljs-title class_">FocusEventHandler</span>,<br> <span class="hljs-title class_">Fragment</span>,<br> <span class="hljs-title class_">KeyboardEventHandler</span>,<br> useRef,<br> useState,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; localStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../utils/store/index.js&quot;</span>;<br><br>type <span class="hljs-title class_">Props</span> = &#123;&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Search</span>(<span class="hljs-params">&#123;&#125;: Props</span>) &#123;<br> <span class="hljs-keyword">const</span> inputRef = useRef&lt;<span class="hljs-title class_">HTMLInputElement</span>&gt;(<span class="hljs-literal">null</span>);<br><br> <span class="hljs-comment">// 下拉框的数据</span><br> <span class="hljs-keyword">const</span> [relatedList, setRelatedList] = useState&lt;string[]&gt;([]);<br><br> <span class="hljs-comment">// 是否展示下拉框</span><br> <span class="hljs-keyword">const</span> [isShow, setIsShow] = useState&lt;boolean&gt;(<span class="hljs-literal">false</span>);<br><br> <span class="hljs-comment">// 输入框内容</span><br> <span class="hljs-keyword">const</span> [inputValue, setInputValue] = useState&lt;string&gt;(<span class="hljs-string">&quot;&quot;</span>);<br><br> <span class="hljs-comment">// 当前选择的数据下标</span><br> <span class="hljs-keyword">const</span> [selectedIdx, setSelectedIdx] = useState&lt;number&gt;(-<span class="hljs-number">1</span>);<br><br> <span class="hljs-keyword">const</span> <span class="hljs-attr">handleFocus</span>: <span class="hljs-title class_">FocusEventHandler</span>&lt;<span class="hljs-title class_">HTMLInputElement</span>&gt; = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 获取历史记录数据</span><br>  <span class="hljs-title function_">setRelatedList</span>(<br>   <span class="hljs-comment">// @ts-ignore</span><br>   (localStore.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;searchHistoryList&quot;</span>) || [])<br>    .<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">setArr: string[], item: string</span>) =&gt;</span> &#123;<br>     <span class="hljs-keyword">return</span> setArr.<span class="hljs-title function_">includes</span>(item) ? setArr : [...setArr, item];<br>    &#125;, [])<br>    .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item: string</span>) =&gt;</span> <span class="hljs-title class_">Boolean</span>(item))<br>    .<span class="hljs-title function_">filter</span>(<br>     <span class="hljs-function">(<span class="hljs-params">item: string</span>) =&gt;</span><br>      !e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> ||<br>      (e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> &amp;&amp; item.<span class="hljs-title function_">includes</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)),<br>    )<br>    .<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>),<br>  );<br><br>  <span class="hljs-title function_">setIsShow</span>(<span class="hljs-literal">true</span>);<br> &#125;;<br><br> <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleBlur</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">setIsShow</span>(<span class="hljs-literal">false</span>);<br> &#125;;<br><br> <span class="hljs-keyword">const</span> <span class="hljs-attr">handleChangge</span>: <span class="hljs-title class_">ChangeEventHandler</span>&lt;<span class="hljs-title class_">HTMLInputElement</span>&gt; = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">setInputValue</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>  <span class="hljs-title function_">setSelectedIdx</span>(-<span class="hljs-number">1</span>);<br>  <span class="hljs-title function_">handleFocus</span>(e <span class="hljs-keyword">as</span> any);<br> &#125;;<br><br> <span class="hljs-keyword">const</span> <span class="hljs-attr">handleKeyDown</span>: <span class="hljs-title class_">KeyboardEventHandler</span>&lt;<span class="hljs-title class_">HTMLInputElement</span>&gt; = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ handleKeyDown ] &gt;&quot;</span>);<br>  <span class="hljs-keyword">switch</span> (e.<span class="hljs-property">key</span>) &#123;<br>   <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Enter&quot;</span>: &#123;<br>    <span class="hljs-comment">// 监听回车事件</span><br>    <span class="hljs-keyword">const</span> currentValue =<br>     selectedIdx !== -<span class="hljs-number">1</span> ? relatedList[selectedIdx] : inputValue;<br><br>    <span class="hljs-comment">// 将值放到输入框内</span><br>    <span class="hljs-title function_">setInputValue</span>(currentValue);<br><br>    <span class="hljs-comment">// @ts-ignore</span><br>    localStore.<span class="hljs-title function_">unshift</span>(<span class="hljs-string">&quot;searchHistoryList&quot;</span>, currentValue);<br><br>    <span class="hljs-title function_">setIsShow</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-keyword">break</span>;<br>   &#125;<br>   <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;ArrowUp&quot;</span>: &#123;<br>    <span class="hljs-comment">// 监听上箭头事件</span><br>    <span class="hljs-keyword">if</span> (relatedList.<span class="hljs-property">length</span>) &#123;<br>     <span class="hljs-keyword">if</span> (selectedIdx &lt; <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-title function_">setSelectedIdx</span>(relatedList.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>);<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">setSelectedIdx</span>(<span class="hljs-function">(<span class="hljs-params">idx: number</span>) =&gt;</span> idx - <span class="hljs-number">1</span>);<br>     &#125;<br>    &#125;<br>    <span class="hljs-keyword">break</span>;<br>   &#125;<br>   <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;ArrowDown&quot;</span>: &#123;<br>    <span class="hljs-comment">// 监听下箭头事件</span><br>    <span class="hljs-keyword">if</span> (relatedList.<span class="hljs-property">length</span>) &#123;<br>     <span class="hljs-keyword">if</span> (selectedIdx === relatedList.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-title function_">setSelectedIdx</span>(<span class="hljs-number">0</span>);<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">setSelectedIdx</span>(<span class="hljs-function">(<span class="hljs-params">idx: number</span>) =&gt;</span> idx + <span class="hljs-number">1</span>);<br>     &#125;<br>    &#125;<br>    <span class="hljs-keyword">break</span>;<br>   &#125;<br><br>   <span class="hljs-attr">default</span>:<br>    <span class="hljs-keyword">break</span>;<br>  &#125;<br> &#125;;<br><br> <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSearchBtnClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> currentValue = inputValue || inputRef.<span class="hljs-property">current</span>?.<span class="hljs-property">placeholder</span>;<br><br>  <span class="hljs-comment">// 将值放到输入框内</span><br>  <span class="hljs-title function_">setInputValue</span>(currentValue!);<br><br>  <span class="hljs-comment">// @ts-ignore</span><br>  localStore.<span class="hljs-title function_">unshift</span>(<span class="hljs-string">&quot;searchHistoryList&quot;</span>, currentValue);<br><br>  <span class="hljs-title function_">setIsShow</span>(<span class="hljs-literal">false</span>);<br> &#125;;<br><br> <span class="hljs-keyword">return</span> (<br>  <span class="hljs-comment">// Fragment 内置组件，用于在 JSX 中返回多个元素而不必包裹在一个额外的 HTML 元素中。</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Fragment</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; flex items-center&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">onFocus</span>=<span class="hljs-string">&#123;handleFocus&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;handleBlur&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleChangge&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">onKeyDown</span>=<span class="hljs-string">&#123;handleKeyDown&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;inputValue&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-98 h-8 border border-gray-100 px-4 rounded-full bg-gray-50&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;福建软考报名入口&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-16 h-8 mx-4 text-sm bg-blue-500 text-white flex justify-center items-center rounded-full hover:bg-blue-800 transition-all&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleSearchBtnClick&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">     提问</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   &#123;relatedList?.length &amp;&amp; isShow ? (</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;fixed top-16 w-96 z-10 bg-white border h-auto&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">     <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">left:</span> <span class="hljs-attr">inputRef.current</span>?<span class="hljs-attr">.getBoundingClientRect</span>()?<span class="hljs-attr">.x</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">     &#123;relatedList.map((item, idx) =&gt; &#123;</span><br><span class="language-xml">      return (</span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;idx&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">mb-2</span> <span class="hljs-attr">last:mb-0</span> <span class="hljs-attr">py-2</span> <span class="hljs-attr">px-4</span> <span class="hljs-attr">hover:bg-gray-100</span> <span class="hljs-attr">cursor-pointer</span> <span class="hljs-attr">flex</span> <span class="hljs-attr">justify-between</span> <span class="hljs-attr">hover:</span>*<span class="hljs-attr">:flex</span> $&#123;<span class="hljs-attr">idx</span> === <span class="hljs-string">selectedIdx</span> ? &quot;<span class="hljs-attr">bg-gray-100</span> <span class="hljs-attr">text-blue-400</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;&#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">       &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-gray-500 text-sm hidden&quot;</span>&gt;</span>X<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      );</span><br><span class="language-xml">     &#125;)&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   ) : (</span><br><span class="language-xml">    <span class="hljs-tag">&lt;&gt;</span><span class="hljs-tag">&lt;/&gt;</span></span><br>   )&#125;<br>  &lt;/<span class="hljs-title class_">Fragment</span>&gt;<br> );<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、组件库开发"><a href="#4、组件库开发" class="headerlink" title="4、组件库开发"></a>4、组件库开发</h1><blockquote><p>采用 Rollup 打包，产物为 umd、esm 两种</p></blockquote><ol start="80"><li>新建组件库文件夹（进入<code>packages/components</code>内）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir react-x-components<br></code></pre></td></tr></table></figure><ol start="81"><li>初始化该项目（进入<code>packages/component/react-x-components</code>内）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">cd react-x-components &amp;&amp; pnpm init<br></code></pre></td></tr></table></figure><ol start="82"><li>创建两个组件文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir src &amp;&amp; mkdir src/button &amp;&amp; touch src/button/index.<span class="hljs-property">tsx</span> &amp;&amp; mkdir src/card &amp;&amp; touch src/card/index.<span class="hljs-property">tsx</span><br></code></pre></td></tr></table></figure><ol start="83"><li><code>src/button/index.tsx</code>写入代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br>type <span class="hljs-title class_">Props</span> = &#123;<br> <span class="hljs-attr">children</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">ReactNode</span>;<br> onClick?: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">void</span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">&#123; children, onClick &#125;: Props</span>) &#123;<br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">   <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">   <span class="hljs-attr">className</span>=<span class="hljs-string">&quot; w-16 h-8 mx-4 text-sm bg-blue-500 text-white flex justify-center items-center rounded-full hover:bg-blue-800 transition-all&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml">   &#123;children&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br> );<br>&#125;<br></code></pre></td></tr></table></figure><ol start="84"><li><code>src/card/index.tsx</code>写入代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br>type <span class="hljs-title class_">Props</span> = &#123;<br> className?: string;<br> children?: <span class="hljs-title class_">React</span>.<span class="hljs-property">ReactNode</span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Card</span>(<span class="hljs-params">&#123; className, children &#125;: Props</span>) &#123;<br> <span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">   <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>` <span class="hljs-attr">bg-white</span> <span class="hljs-attr">border</span> <span class="hljs-attr">border-gray-200</span> <span class="hljs-attr">m-2</span> <span class="hljs-attr">rounded-sm</span> <span class="hljs-attr">shadow-md</span> $&#123;<span class="hljs-attr">className</span>&#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml">   &#123;children&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> );<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="手写-Rollup-配置"><a href="#手写-Rollup-配置" class="headerlink" title="手写 Rollup 配置"></a>手写 Rollup 配置</h2><ol start="85"><li>安装对应依赖（<code>packages/components/react-x-components</code>下）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add rollup rollup-plugin-clear rollup-plugin-auto-add rollup-plugin-typescript2 @rollup/plugin-node-resolve @rollup/plugin-commonjs @rollup/plugin-alias rollup-plugin-peer-deps-external rollup-plugin-filesize rollup-plugin-postcss rollup-plugin-terser rollup-plugin-multi-input postcss typescript react @types/react -D<br></code></pre></td></tr></table></figure><ol start="86"><li>创建对应文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir scripts &amp;&amp; touch scripts/rollup.<span class="hljs-property">config</span>.<span class="hljs-property">js</span> &amp;&amp; touch tsconfig.<span class="hljs-property">json</span> &amp;&amp; touch scripts/tsconfig.<span class="hljs-property">esm</span>.<span class="hljs-property">json</span> &amp;&amp; touch scripts/tsconfig.<span class="hljs-property">umd</span>.<span class="hljs-property">json</span><br></code></pre></td></tr></table></figure><ol start="87"><li><code>tsconfig.json</code>写如下代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br> <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;ESNext&quot;</span>,<br>  <span class="hljs-string">&quot;useDefineForClassFields&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;lib&quot;</span>: [<span class="hljs-string">&quot;DOM&quot;</span>, <span class="hljs-string">&quot;DOM.Iterable&quot;</span>, <span class="hljs-string">&quot;ESNext&quot;</span>],<br>  <span class="hljs-string">&quot;outDir&quot;</span>: <span class="hljs-string">&quot;./lib&quot;</span>,<br>  <span class="hljs-string">&quot;allowJs&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;skipLibCheck&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;esModuleInterop&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;strict&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;ESNext&quot;</span>,<br>  <span class="hljs-string">&quot;moduleResolution&quot;</span>: <span class="hljs-string">&quot;Node&quot;</span>,<br>  <span class="hljs-string">&quot;resolveJsonModule&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;isolatedModules&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;noEmit&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;jsx&quot;</span>: <span class="hljs-string">&quot;react&quot;</span>, <span class="hljs-comment">// react18这里也可以改成react-jsx</span><br>  <span class="hljs-string">&quot;baseUrl&quot;</span>: <span class="hljs-string">&quot;./&quot;</span>,<br>  <span class="hljs-string">&quot;paths&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;@/*&quot;</span>: [<span class="hljs-string">&quot;src/*&quot;</span>]<br>  &#125;,<br>  <span class="hljs-string">&quot;noImplicitAny&quot;</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 是否在表达式和声明上有隐含的any类型时报错</span><br> &#125;,<br> <span class="hljs-string">&quot;include&quot;</span>: [<span class="hljs-string">&quot;./src/**/*&quot;</span>],<br> <span class="hljs-string">&quot;exclude&quot;</span>: [<span class="hljs-string">&quot;node_modules&quot;</span>, <span class="hljs-string">&quot;**/dist&quot;</span>, <span class="hljs-string">&quot;**/esm&quot;</span>],<br> <span class="hljs-string">&quot;ts-node&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;CommonJS&quot;</span><br>  &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="88"><li><code>scripts/tsconfig.esm.json</code>写如下代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br> <span class="hljs-string">&quot;extends&quot;</span>: <span class="hljs-string">&quot;../tsconfig.json&quot;</span>,<br> <span class="hljs-string">&quot;ts-node&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;transplieOnly&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;require&quot;</span>: [<span class="hljs-string">&quot;typescript-transform-paths/register&quot;</span>]<br> &#125;,<br> <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;plugins&quot;</span>: [<br>   &#123; <span class="hljs-string">&quot;transform&quot;</span>: <span class="hljs-string">&quot;typescript-transform-paths&quot;</span> &#125;,<br>   &#123;<br>    <span class="hljs-string">&quot;transform&quot;</span>: <span class="hljs-string">&quot;typescript-transform-paths&quot;</span>,<br>    <span class="hljs-string">&quot;afterDeclarations&quot;</span>: <span class="hljs-literal">true</span><br>   &#125;<br>  ],<br>  <span class="hljs-string">&quot;declaration&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;jsx&quot;</span>: <span class="hljs-string">&quot;react&quot;</span>,<br>  <span class="hljs-string">&quot;jsxFactory&quot;</span>: <span class="hljs-string">&quot;React.createElement&quot;</span>,<br>  <span class="hljs-string">&quot;jsxFragmentFactory&quot;</span>: <span class="hljs-string">&quot;React.Fragment&quot;</span><br> &#125;,<br> <span class="hljs-string">&quot;include&quot;</span>: [<span class="hljs-string">&quot;../src&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><ol start="89"><li><code>scripts/tsconfig.umd.json</code>写如下代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br> <span class="hljs-string">&quot;extends&quot;</span>: <span class="hljs-string">&quot;../tsconfig.json&quot;</span>,<br> <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;jsx&quot;</span>: <span class="hljs-string">&quot;react&quot;</span>,<br>  <span class="hljs-string">&quot;jsxFactory&quot;</span>: <span class="hljs-string">&quot;React.createElement&quot;</span>,<br>  <span class="hljs-string">&quot;jsxFragmentFactory&quot;</span>: <span class="hljs-string">&quot;React.Fragment&quot;</span><br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="90"><li>改造<code>package.json</code>加上<code>peerDependencies</code>告知当前组件库所依赖的包(组件库可不提供)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;react-x-components&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;keywords&quot;</span>: [],<br>  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span>,<br>  <span class="hljs-string">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;@rollup/plugin-alias&quot;</span>: <span class="hljs-string">&quot;^5.1.0&quot;</span>,<br>    <span class="hljs-string">&quot;@rollup/plugin-commonjs&quot;</span>: <span class="hljs-string">&quot;^25.0.7&quot;</span>,<br>    <span class="hljs-string">&quot;@rollup/plugin-node-resolve&quot;</span>: <span class="hljs-string">&quot;^15.2.3&quot;</span>,<br>    <span class="hljs-string">&quot;@types/react&quot;</span>: <span class="hljs-string">&quot;^18.2.64&quot;</span>,<br>    <span class="hljs-string">&quot;postcss&quot;</span>: <span class="hljs-string">&quot;^8.4.35&quot;</span>,<br>    <span class="hljs-string">&quot;react&quot;</span>: <span class="hljs-string">&quot;^18.2.0&quot;</span>,<br>    <span class="hljs-string">&quot;rollup&quot;</span>: <span class="hljs-string">&quot;^4.12.1&quot;</span>,<br>    <span class="hljs-string">&quot;rollup-plugin-auto-add&quot;</span>: <span class="hljs-string">&quot;^0.0.6&quot;</span>,<br>    <span class="hljs-string">&quot;rollup-plugin-clear&quot;</span>: <span class="hljs-string">&quot;^2.0.7&quot;</span>,<br>    <span class="hljs-string">&quot;rollup-plugin-filesize&quot;</span>: <span class="hljs-string">&quot;^10.0.0&quot;</span>,<br>    <span class="hljs-string">&quot;rollup-plugin-multi-input&quot;</span>: <span class="hljs-string">&quot;^1.4.1&quot;</span>,<br>    <span class="hljs-string">&quot;rollup-plugin-peer-deps-external&quot;</span>: <span class="hljs-string">&quot;^2.2.4&quot;</span>,<br>    <span class="hljs-string">&quot;rollup-plugin-postcss&quot;</span>: <span class="hljs-string">&quot;^4.0.2&quot;</span>,<br>    <span class="hljs-string">&quot;rollup-plugin-terser&quot;</span>: <span class="hljs-string">&quot;^7.0.2&quot;</span>,<br>    <span class="hljs-string">&quot;rollup-plugin-typescript2&quot;</span>: <span class="hljs-string">&quot;^0.36.0&quot;</span>,<br>    <span class="hljs-string">&quot;typescript&quot;</span>: <span class="hljs-string">&quot;^5.4.2&quot;</span><br>  &#125;<br>  <span class="hljs-string">&quot;peerDependencies&quot;</span>: &#123; <span class="hljs-comment">// ++++++</span><br>    <span class="hljs-string">&quot;react&quot;</span>: <span class="hljs-string">&quot;^18.2.0&quot;</span>, <span class="hljs-comment">// ++++++</span><br>    <span class="hljs-string">&quot;react-dom&quot;</span>: <span class="hljs-string">&quot;^18.2.0&quot;</span> <span class="hljs-comment">// ++++++</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="91"><li>手写配置代码<code>scripts/rollup.config.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> clear = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;rollup-plugin-clear&quot;</span>);<br><span class="hljs-keyword">const</span> autoAdd = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;rollup-plugin-auto-add&quot;</span>).<span class="hljs-property">default</span>;<br><span class="hljs-keyword">const</span> multiInput = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;rollup-plugin-multi-input&quot;</span>).<span class="hljs-property">default</span>;<br><span class="hljs-keyword">const</span> typescript = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;rollup-plugin-typescript2&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> peerDepExternal = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;rollup-plugin-peer-deps-external&quot;</span>);<br><span class="hljs-keyword">const</span> resolve = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@rollup/plugin-node-resolve&quot;</span>);<br><span class="hljs-keyword">const</span> commonjs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@rollup/plugin-commonjs&quot;</span>);<br><span class="hljs-keyword">const</span> alias = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@rollup/plugin-alias&quot;</span>);<br><span class="hljs-keyword">const</span> postcss = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;rollup-plugin-postcss&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; terser &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;rollup-plugin-terser&quot;</span>);<br><span class="hljs-keyword">const</span> filesize = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;rollup-plugin-filesize&quot;</span>);<br><br><span class="hljs-keyword">const</span> pkg = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../package.json&quot;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = [<br> <span class="hljs-comment">// 打包成 esm 的配置项</span><br> &#123;<br>  <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;src/**/*&quot;</span>,<br>  <span class="hljs-attr">output</span>: [<br>   &#123;<br>    <span class="hljs-attr">dir</span>: <span class="hljs-string">&quot;esm&quot;</span>,<br>    <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;esm&quot;</span>,<br>    <span class="hljs-attr">sourceMap</span>: <span class="hljs-literal">false</span>,<br>   &#125;,<br>  ],<br><br>  <span class="hljs-comment">// 打包时排除 peerDenpendencies 里面的依赖</span><br>  <span class="hljs-attr">enternal</span>: <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(pkg.<span class="hljs-property">peerDenpendencies</span> || &#123;&#125;),<br><br>  <span class="hljs-attr">plugins</span>: [<br>   <span class="hljs-comment">// 自动清除生成代码</span><br>   <span class="hljs-title function_">clear</span>(&#123; <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;esm&quot;</span> &#125;),<br><br>   <span class="hljs-comment">// 自动注入代码</span><br>   <span class="hljs-title function_">autoAdd</span>(&#123;<br>    <span class="hljs-comment">// 匹配这种 src/myComponent/index.tsx</span><br>    <span class="hljs-attr">include</span>: [<span class="hljs-regexp">/src\/(((?!\/).)+?)\/index\.tsx/gi</span>],<br>   &#125;),<br><br>   <span class="hljs-comment">// 多入口</span><br>   <span class="hljs-title function_">multiInput</span>(),<br><br>   <span class="hljs-comment">// 解析 ts</span><br>   <span class="hljs-title function_">typescript</span>(&#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;./tsconfig.esm.json&quot;</span>),<br>   &#125;),<br>   <span class="hljs-title function_">peerDepExternal</span>(),<br>   <span class="hljs-title function_">resolve</span>(), <span class="hljs-comment">// 处理 node_modules</span><br>   <span class="hljs-title function_">commonjs</span>(), <span class="hljs-comment">// 处理 commonjs</span><br>   <span class="hljs-title function_">filesize</span>(), <span class="hljs-comment">// 处理包体积</span><br>   <span class="hljs-title function_">postcss</span>(&#123;<br>    <span class="hljs-attr">minimize</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">sourceMap</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&quot;.less&quot;</span>, <span class="hljs-string">&quot;.css&quot;</span>],<br>    <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;less&quot;</span>],<br>   &#125;),<br>   <span class="hljs-comment">// 文件声明</span><br>   <span class="hljs-title function_">alias</span>(&#123;<br>    <span class="hljs-attr">entries</span>: &#123;<br>     <span class="hljs-string">&quot;@&quot;</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../src&quot;</span>),<br>    &#125;,<br>   &#125;),<br>  ],<br> &#125;,<br><br> <span class="hljs-comment">// 打包成 umd 的配置项</span><br> &#123;<br>  <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;src/index.tsx&quot;</span>,<br>  <span class="hljs-attr">output</span>: [<br>   &#123;<br>    <span class="hljs-attr">dir</span>: <span class="hljs-string">&quot;dist&quot;</span>,<br>    <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;umd&quot;</span>,<br>    <span class="hljs-attr">exports</span>: <span class="hljs-string">&quot;named&quot;</span>,<br>    <span class="hljs-attr">name</span>: pkg.<span class="hljs-property">name</span>,<br>    <span class="hljs-attr">sourceMap</span>: <span class="hljs-literal">true</span>,<br>   &#125;,<br>  ],<br><br>  <span class="hljs-comment">// 打包时排除 peerDenpendencies 里面的依赖</span><br>  <span class="hljs-attr">enternal</span>: <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(pkg.<span class="hljs-property">peerDenpendencies</span> || &#123;&#125;),<br><br>  <span class="hljs-attr">plugins</span>: [<br>   <span class="hljs-comment">// 自动清除生成代码</span><br>   <span class="hljs-title function_">clear</span>(&#123; <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;dist&quot;</span> &#125;),<br><br>   <span class="hljs-comment">// 自动注入代码</span><br>   <span class="hljs-title function_">autoAdd</span>(&#123;<br>    <span class="hljs-comment">// 匹配这种 src/myComponent/index.tsx</span><br>    <span class="hljs-attr">include</span>: [<span class="hljs-regexp">/src\/(((?!\/).)+?)\/index\.tsx/gi</span>],<br>   &#125;),<br><br>   <span class="hljs-comment">// 多入口</span><br>   <span class="hljs-title function_">multiInput</span>(),<br><br>   <span class="hljs-comment">// 解析 ts</span><br>   <span class="hljs-title function_">typescript</span>(&#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;./tsconfig.dist.json&quot;</span>),<br>   &#125;),<br>   <span class="hljs-title function_">peerDepExternal</span>(),<br>   <span class="hljs-title function_">resolve</span>(), <span class="hljs-comment">// 处理 node_modules</span><br>   <span class="hljs-title function_">commonjs</span>(), <span class="hljs-comment">// 处理 commonjs</span><br>   <span class="hljs-title function_">filesize</span>(), <span class="hljs-comment">// 处理包体积</span><br>   <span class="hljs-title function_">postcss</span>(&#123;<br>    <span class="hljs-attr">minimize</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">sourceMap</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&quot;.less&quot;</span>, <span class="hljs-string">&quot;.css&quot;</span>],<br>    <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;less&quot;</span>],<br>   &#125;),<br>   <span class="hljs-comment">// 文件声明</span><br>   <span class="hljs-title function_">alias</span>(&#123;<br>    <span class="hljs-attr">entries</span>: &#123;<br>     <span class="hljs-string">&quot;@&quot;</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../src&quot;</span>),<br>    &#125;,<br>   &#125;),<br>  ],<br> &#125;,<br>];<br></code></pre></td></tr></table></figure><ol start="92"><li>改造<code>package.json</code>加上打包命令</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  ....<br><br>  <span class="hljs-attr">scripts</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,<br>    <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;rollup --config ./scripts/rollup.config.js&quot;</span> <span class="hljs-comment">// ++++++</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="93"><li>新建<code>index.tsx</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch src/index.<span class="hljs-property">tsx</span><br><br><span class="hljs-comment">// 写如下代码：</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./button&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Card</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./card&quot;</span>;<br><br><span class="hljs-keyword">export</span> &#123; <span class="hljs-title class_">Button</span>, <span class="hljs-title class_">Card</span> &#125;;<br></code></pre></td></tr></table></figure><ol start="94"><li>运行<code>pnpm build</code>，进行打包</li></ol><p><img src="/img/images/2024/1709986358134-eaa5ec99-b7ba-43b1-91d1-d0a894096169.png"></p><h2 id="改造一些，给内部项目使用"><a href="#改造一些，给内部项目使用" class="headerlink" title="改造一些，给内部项目使用"></a>改造一些，给内部项目使用</h2><ol start="95"><li>改造<code>package.json</code>，看变更</li></ol><p><img src="/img/images/2024/1709986689318-e10a86c7-029a-4b63-b4c4-b89a01be1f3f.png"></p><ol start="96"><li>内部项目安装它，进入<code>apps/react-master</code>内，运行安装命令</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add @hzq/react-x-components<br></code></pre></td></tr></table></figure><ol start="97"><li>在项目中引入并使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@hzq/react-x-components&quot;</span>;<br><br><span class="hljs-comment">// ....</span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span>提问111<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>效果如下：<br><img src="/img/images/2024/1709986995270-496c3d22-2c31-4dae-b595-71d35eab1115.png"></p><h2 id="组件使用流程讲解"><a href="#组件使用流程讲解" class="headerlink" title="组件使用流程讲解"></a>组件使用流程讲解</h2><p><img src="/img/images/2024/1709988965134-32ee7252-b78f-48a3-b54b-a4341d13a5b3.jpeg"><br>若需要实时使用组件，则可以如下处理：<br>1、改造组件项目的<code>package.json</code>，然后运行<code>pnpm dev</code>这样就是边开发边打包，能达到“实时”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  .......<br><br>  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;src/index.tsx&quot;</span>, <span class="hljs-comment">// ++++++</span><br><br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,<br>    <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;rollup --config ./scripts/rollup.config.js&quot;</span>,<br>    <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;rollup --config ./scripts/rollup.config.js -w&quot;</span> <span class="hljs-comment">// ++++++</span><br>  &#125;,<br><br>  ......<br>&#125;<br></code></pre></td></tr></table></figure><p>2、改造组件项目的<code>package.json</code>，这样直接使用组件源码，也能达到“实时”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  .......<br><br>  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;src/index.tsx&quot;</span>, <span class="hljs-comment">// ++++++</span><br><br>  .......<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5、插件封装"><a href="#5、插件封装" class="headerlink" title="5、插件封装"></a>5、插件封装</h1><h2 id="微内核架构"><a href="#微内核架构" class="headerlink" title="微内核架构"></a>微内核架构</h2><blockquote><p>抽象不依赖实现</p></blockquote><p>提供一个内核（core&#x2F;engine），内核本身具有很强的扩展性，但内核不会因为有了一个扩展，就去修改内核自身<br>外部可通过插件（plugin）的形式往内核注入，然后内核去驱动插件的执行（plugins.run()）<br>前端界常见的有：Webpack、Babel 等</p><p>核心伪代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> events = &#123;&#125;;<br><br><span class="hljs-keyword">const</span> typeEnum = [<span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;mount&quot;</span>, <span class="hljs-string">&quot;distory&quot;</span>];<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Core</span> &#123;<br> context = &#123;&#125;;<br><br> defaultOpts = &#123;<br>  <span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;beforeCreate&quot;</span>);<br>  &#125;,<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;created&quot;</span>);<br>  &#125;,<br><br>  <span class="hljs-title function_">beforeMount</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;beforeMount&quot;</span>);<br>  &#125;,<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;mounted&quot;</span>);<br>  &#125;,<br><br>  <span class="hljs-title function_">beforeDistory</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;beforeDistory&quot;</span>);<br>  &#125;,<br>  <span class="hljs-title function_">distoryed</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;distoryed&quot;</span>);<br>  &#125;,<br> &#125;;<br><br> <span class="hljs-title function_">constructor</span>(<span class="hljs-params">opts</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">opts</span> = &#123; ...<span class="hljs-variable language_">this</span>.<span class="hljs-property">defaultOpts</span>, ...opts &#125;;<br> &#125;<br><br> <span class="hljs-title function_">addPlugin</span>(<span class="hljs-params">&#123; type, run &#125;</span>) &#123;<br>  events[type] = events[type] || [];<br>  events[type].<span class="hljs-title function_">push</span>(run);<br> &#125;<br><br> <span class="hljs-title function_">pluginsRun</span>(<span class="hljs-params">type</span>) &#123;<br>  events[type].<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> <span class="hljs-title function_">fn</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>));<br> &#125;<br><br> <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">opts</span>.<span class="hljs-title function_">beforeCreate</span>(); <span class="hljs-comment">// 模拟生命周期</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">pluginsRun</span>(<span class="hljs-string">&quot;create&quot;</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">opts</span>.<span class="hljs-title function_">created</span>(); <span class="hljs-comment">// 模拟生命周期</span><br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">opts</span>.<span class="hljs-title function_">beforeMount</span>(); <span class="hljs-comment">// 模拟生命周期</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">pluginsRun</span>(<span class="hljs-string">&quot;mount&quot;</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">opts</span>.<span class="hljs-title function_">mounted</span>(); <span class="hljs-comment">// 模拟生命周期</span><br> &#125;<br><br> <span class="hljs-title function_">end</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">opts</span>.<span class="hljs-title function_">beforeDistory</span>(); <span class="hljs-comment">// 模拟生命周期</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">pluginsRun</span>(<span class="hljs-string">&quot;distory&quot;</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">opts</span>.<span class="hljs-title function_">distoryd</span>(); <span class="hljs-comment">// 模拟生命周期</span><br> &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Core</span>;<br><br><span class="hljs-comment">// 用户使用</span><br><span class="hljs-keyword">const</span> core = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Core</span>(&#123;<br> <span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ this is my beforeCreate] &gt;&quot;</span>);<br> &#125;,<br> <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ this is my mounted] &gt;&quot;</span>);<br> &#125;,<br> <span class="hljs-comment">// ......</span><br>&#125;);<br><br>core.<span class="hljs-title function_">addPlugin</span>(&#123;<br> <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;create&quot;</span>,<br> <span class="hljs-title function_">run</span>(<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ create run 1 ] &gt;&quot;</span>);<br>  context.<span class="hljs-property">xxxx</span> = <span class="hljs-string">&quot;xxxx&quot;</span>;<br> &#125;,<br>&#125;);<br><br>core.<span class="hljs-title function_">addPlugin</span>(&#123;<br> <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;create&quot;</span>,<br> <span class="hljs-title function_">run</span>(<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ create run 2 ] &gt;&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ create run 2 context ] &gt;&quot;</span>, context);<br>  context.<span class="hljs-property">yyyy</span> = <span class="hljs-string">&quot;yyyy&quot;</span>;<br> &#125;,<br>&#125;);<br><br>core.<span class="hljs-title function_">addPlugin</span>(&#123;<br> <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;mount&quot;</span>,<br> <span class="hljs-title function_">run</span>(<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ mount context ] &gt;&quot;</span>, context);<br> &#125;,<br>&#125;);<br><br>core.<span class="hljs-title function_">start</span>();<br></code></pre></td></tr></table></figure><h2 id="Webpack：zipPlugin-插件封装（apps-react-master-下）"><a href="#Webpack：zipPlugin-插件封装（apps-react-master-下）" class="headerlink" title="Webpack：zipPlugin 插件封装（apps&#x2F;react-master 下）"></a>Webpack：zipPlugin 插件封装（apps&#x2F;react-master 下）</h2><blockquote><p>功能描述：将打包的东西压缩成一个包</p></blockquote><ol start="98"><li>安装前置依赖</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add jszip webpack-sources -D<br></code></pre></td></tr></table></figure><ol start="99"><li>新建对应文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch zipPlugin.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ol start="100"><li>编写代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">JSzip</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;jszip&quot;</span>); <span class="hljs-comment">// 引入jszip</span><br><br><span class="hljs-comment">// RawSource 是其中一种 “源码”(&quot;sources&quot;) 类型，</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">RawSource</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack-sources&quot;</span>);<br><br><span class="hljs-comment">// 自定义插件 官方文档：https://webpack.docschina.org/contribute/writing-a-plugin/#creating-a-plugin</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ZipPlugin</span> &#123;<br> <span class="hljs-keyword">static</span> defaultOptions = &#123;<br>  <span class="hljs-attr">outputFile</span>: <span class="hljs-string">&quot;dist.zip&quot;</span>,<br> &#125;;<br><br> <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = &#123; ...<span class="hljs-title class_">ZipPlugin</span>.<span class="hljs-property">defaultOptions</span>, ...options &#125;;<br> &#125;<br><br> <span class="hljs-comment">// 在插件函数的 prototype 上定义一个 `apply` 方法，以 compiler 为参数。</span><br> <span class="hljs-title function_">apply</span>(<span class="hljs-params">compiler</span>) &#123;<br>  <span class="hljs-keyword">const</span> pluginName = <span class="hljs-title class_">ZipPlugin</span>.<span class="hljs-property">name</span>;<br><br>  compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">emit</span>.<span class="hljs-title function_">tapAsync</span>(pluginName, <span class="hljs-function">(<span class="hljs-params">compilation, callback</span>) =&gt;</span> &#123;<br>   <span class="hljs-keyword">const</span> zip = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSzip</span>();<br><br>   <span class="hljs-comment">// 遍历所有资源</span><br>   <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(compilation.<span class="hljs-property">assets</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">filename</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> source = compilation.<span class="hljs-property">assets</span>[filename].<span class="hljs-title function_">source</span>();<br><br>    zip.<span class="hljs-title function_">file</span>(filename, source); <span class="hljs-comment">// 添加文件到 zip</span><br>   &#125;);<br><br>   <span class="hljs-comment">// generateAsync：生成 zip 文件</span><br>   zip.<span class="hljs-title function_">generateAsync</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;nodebuffer&quot;</span> &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">content</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 向 compilation 添加新的资源，这样 webpack 就会自动生成并输出到 outputFile 目录</span><br>    compilation.<span class="hljs-title function_">emitAsset</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>.<span class="hljs-property">outputFile</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RawSource</span>(content));<br>    <span class="hljs-title function_">callback</span>(); <span class="hljs-comment">// 告诉 webpack 插件已经完成</span><br>   &#125;);<br>  &#125;);<br> &#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; <span class="hljs-title class_">ZipPlugin</span> &#125;;<br></code></pre></td></tr></table></figure><ol start="101"><li>更改<code>react-master/scripts/webpack.prod.js</code>（看变更）</li></ol><p><img src="/img/images/2024/1709996553038-373492a4-3de1-4527-905c-b1c81779455b.png"></p><ol start="102"><li>运行<code>pnpm build</code>，生成的<code>dist</code>里面就会有个<code>dist.zip</code>，解压后就是整个<code>dist</code></li></ol><p><img src="/img/images/2024/1709996605391-dbc0a0f7-f1be-4d4e-8977-e9e4fb4201d8.png"></p><h2 id="Babel：consolePlugin-插件封装（apps-react-master-下）"><a href="#Babel：consolePlugin-插件封装（apps-react-master-下）" class="headerlink" title="Babel：consolePlugin 插件封装（apps&#x2F;react-master 下）"></a>Babel：consolePlugin 插件封装（apps&#x2F;react-master 下）</h2><blockquote><p>功能描述：在调试模式下，将 console.log() 丰富，支持打印具体位置：行数、列数</p></blockquote><ol start="103"><li>安装前置依赖</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add @babel/generator -D<br></code></pre></td></tr></table></figure><ol start="104"><li>新建对应文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch consolePlugin.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ol start="105"><li>编写代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> generator = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).<span class="hljs-property">default</span>;<br><br><span class="hljs-comment">// Babel 自定义插件官方文档：https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#toc-writing-your-first-babel-plugin</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">consolePlugin</span>(<span class="hljs-params">&#123; types &#125;</span>) &#123;<br> <span class="hljs-keyword">return</span> &#123;<br>  <span class="hljs-attr">visitor</span>: &#123;<br>   <span class="hljs-title class_">CallExpression</span>(path) &#123;<br>    <span class="hljs-keyword">const</span> name = <span class="hljs-title function_">generator</span>(path.<span class="hljs-property">node</span>.<span class="hljs-property">callee</span>).<span class="hljs-property">code</span>;<br><br>    <span class="hljs-keyword">if</span> ([<span class="hljs-string">&quot;console.log&quot;</span>, <span class="hljs-string">&quot;console.info&quot;</span>, <span class="hljs-string">&quot;console.error&quot;</span>].<span class="hljs-title function_">includes</span>(name)) &#123;<br>     <span class="hljs-keyword">const</span> &#123; line, column &#125; = path.<span class="hljs-property">node</span>.<span class="hljs-property">loc</span>.<span class="hljs-property">start</span>;<br>     path.<span class="hljs-property">node</span>.<span class="hljs-property">arguments</span>.<span class="hljs-title function_">unshift</span>(<br>      types.<span class="hljs-title function_">stringLiteral</span>(<span class="hljs-string">`fliepath: <span class="hljs-subst">$&#123;line&#125;</span>:<span class="hljs-subst">$&#123;column&#125;</span>`</span>),<br>     );<br>    &#125;<br>   &#125;,<br>  &#125;,<br> &#125;;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = consolePlugin;<br></code></pre></td></tr></table></figure><ol start="106"><li>使用插件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br> <span class="hljs-string">&quot;presets&quot;</span>: [<br>  <span class="hljs-string">&quot;@babel/preset-react&quot;</span>, <span class="hljs-comment">// 解析 react</span><br>  <span class="hljs-string">&quot;@babel/preset-typescript&quot;</span> <span class="hljs-comment">// 解析 typescript</span><br> ],<br> <span class="hljs-string">&quot;plugins&quot;</span>: [<span class="hljs-string">&quot;./consolePlugin.js&quot;</span>] <span class="hljs-comment">// ++++++</span><br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="107"><li>重新启动项目<code>pnpm start</code>，写一个<code>console.log(xx)</code>并打印出来，可以看有行数、列数了</li></ol><p><img src="/img/images/2024/1709998714466-58a11c81-bbcc-473a-be69-5f502fc27935.png"></p><h2 id="Postcss-插件：themePlugin（apps-react-master-下）"><a href="#Postcss-插件：themePlugin（apps-react-master-下）" class="headerlink" title="Postcss 插件：themePlugin（apps&#x2F;react-master 下）"></a>Postcss 插件：themePlugin（apps&#x2F;react-master 下）</h2><blockquote><p>主要功能：实现网站主题色切换</p></blockquote><h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><p>先展示基于<code>tailwindcss</code>实现的最朴实的颜色切换</p><ol start="108"><li>更改<code>tailwind.config.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br> <span class="hljs-attr">content</span>: [<span class="hljs-string">&quot;./src/**/*.&#123;tsx,ts,jsx,js&#125;&quot;</span>],<br> <span class="hljs-attr">theme</span>: &#123;<br>  <span class="hljs-attr">extend</span>: &#123;&#125;,<br>  <span class="hljs-attr">colors</span>: &#123; <span class="hljs-comment">// +++ 下面的为新增的 +++</span><br>   <span class="hljs-comment">// 将默认的颜色改为变量</span><br>   <span class="hljs-attr">white</span>: <span class="hljs-string">&quot;var(--color-white)&quot;</span>,<br>   <span class="hljs-attr">black</span>: <span class="hljs-string">&quot;var(--color-black)&quot;</span>,<br>   <span class="hljs-attr">gray</span>: &#123;<br>    <span class="hljs-number">50</span>: <span class="hljs-string">&quot;var(--color-gray-50)&quot;</span>,<br>    <span class="hljs-number">100</span>: <span class="hljs-string">&quot;var(--color-gray-100)&quot;</span>,<br>    <span class="hljs-number">200</span>: <span class="hljs-string">&quot;var(--color-gray-200)&quot;</span>,<br>    <span class="hljs-number">300</span>: <span class="hljs-string">&quot;var(--color-gray-300)&quot;</span>,<br>    <span class="hljs-number">400</span>: <span class="hljs-string">&quot;var(--color-gray-400)&quot;</span>,<br>    <span class="hljs-number">500</span>: <span class="hljs-string">&quot;var(--color-gray-500)&quot;</span>,<br>    <span class="hljs-number">600</span>: <span class="hljs-string">&quot;var(--color-gray-600)&quot;</span>,<br>    <span class="hljs-number">700</span>: <span class="hljs-string">&quot;var(--color-gray-700)&quot;</span>,<br>    <span class="hljs-number">800</span>: <span class="hljs-string">&quot;var(--color-gray-800)&quot;</span>,<br>    <span class="hljs-number">900</span>: <span class="hljs-string">&quot;var(--color-gray-900)&quot;</span>,<br>    <span class="hljs-number">950</span>: <span class="hljs-string">&quot;var(--color-gray-950)&quot;</span>,<br>   &#125;,<br>  &#125;,<br> &#125;,<br> <span class="hljs-attr">plugins</span>: [],<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="109"><li>更改<code>index.less</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 全局的东西</span><br><br><span class="hljs-comment">// tailwind 配置</span><br>@tailwind base;<br>@tailwind components;<br>@tailwind utilities;<br><br><span class="hljs-comment">// 明亮模式</span><br>html &#123;<br> --color-<span class="hljs-attr">white</span>: #fff;<br> --color-<span class="hljs-attr">black</span>: #<span class="hljs-number">000</span>;<br> --color-gray-<span class="hljs-number">50</span>: #f9fafb;<br> --color-gray-<span class="hljs-number">100</span>: #f3f4f6;<br> --color-gray-<span class="hljs-number">200</span>: #e5e7eb;<br> --color-gray-<span class="hljs-number">300</span>: #d1d5db;<br> --color-gray-<span class="hljs-number">400</span>: #9ca3af;<br> --color-gray-<span class="hljs-number">500</span>: #6b7280;<br> --color-gray-<span class="hljs-number">600</span>: #4b5563;<br> --color-gray-<span class="hljs-number">700</span>: #<span class="hljs-number">374151</span>;<br> --color-gray-<span class="hljs-number">800</span>: #1f2937;<br> --color-gray-<span class="hljs-number">900</span>: #<span class="hljs-number">111827</span>;<br> --color-gray-<span class="hljs-number">950</span>: #<span class="hljs-number">030712</span>;<br>&#125;<br><br><span class="hljs-comment">// 深色模式</span><br>html[data-theme=<span class="hljs-string">&quot;dark&quot;</span>] &#123;<br> --color-<span class="hljs-attr">white</span>: #<span class="hljs-number">000</span>;<br> --color-<span class="hljs-attr">black</span>: #fff;<br> --color-gray-<span class="hljs-number">950</span>: #f9fafb;<br> --color-gray-<span class="hljs-number">900</span>: #f3f4f6;<br> --color-gray-<span class="hljs-number">800</span>: #e5e7eb;<br> --color-gray-<span class="hljs-number">700</span>: #d1d5db;<br> --color-gray-<span class="hljs-number">600</span>: #9ca3af;<br> --color-gray-<span class="hljs-number">500</span>: #6b7280;<br> --color-gray-<span class="hljs-number">400</span>: #4b5563;<br> --color-gray-<span class="hljs-number">300</span>: #<span class="hljs-number">374151</span>;<br> --color-gray-<span class="hljs-number">200</span>: #1f2937;<br> --color-gray-<span class="hljs-number">100</span>: #<span class="hljs-number">111827</span>;<br> --color-gray-<span class="hljs-number">50</span>: #<span class="hljs-number">030712</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="110"><li>更改<code>react-master/src/components/navigation/index.tsx</code>，增加一个主题切换操作，看 <a href="https://github.com/MrHzq/react-actual-combat/commit/75beaa5197a3783f80d6ec56bbedbd7c33b2846b">mr</a></li><li>切换之前</li></ol><p><img src="/img/images/2024/1710037354065-18fd812f-ffd2-4a8d-a365-a9bdb19945ce.png"></p><ol start="112"><li>切换之后</li></ol><p><img src="/img/images/2024/1710037395779-8ca17af8-e5e1-452f-8979-d4725ee3644a.png"></p><h3 id="基于插件"><a href="#基于插件" class="headerlink" title="基于插件"></a>基于插件</h3><p>基本功能完成后，会发现我们的主题变量需要手动去维护，当主题多了就麻烦了，现在就可以写插件来处理</p><blockquote><p>色卡：主题需要设计时提供一系列对应的颜色值，明亮、暗黑、xx 一套</p></blockquote><p>在前端可以这样去维护：</p><ol start="113"><li>新建色卡文件，就是之前<code>index.less</code>里面写 css 代码，改成 js 代码而已</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch themeGroup.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 写如下代码</span><br><span class="hljs-keyword">const</span> themeGroup = &#123;<br> <span class="hljs-attr">light</span>: &#123;<br>  <span class="hljs-string">&quot;--color-white&quot;</span>: <span class="hljs-string">&quot;#fff&quot;</span>,<br>  <span class="hljs-string">&quot;--color-black&quot;</span>: <span class="hljs-string">&quot;#000&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-50&quot;</span>: <span class="hljs-string">&quot;#f9fafb&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-100&quot;</span>: <span class="hljs-string">&quot;#f3f4f6&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-200&quot;</span>: <span class="hljs-string">&quot;#e5e7eb&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-300&quot;</span>: <span class="hljs-string">&quot;#d1d5db&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-400&quot;</span>: <span class="hljs-string">&quot;#9ca3af&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-500&quot;</span>: <span class="hljs-string">&quot;#6b7280&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-600&quot;</span>: <span class="hljs-string">&quot;#4b5563&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-700&quot;</span>: <span class="hljs-string">&quot;#374151&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-800&quot;</span>: <span class="hljs-string">&quot;#1f2937&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-900&quot;</span>: <span class="hljs-string">&quot;#111827&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-950&quot;</span>: <span class="hljs-string">&quot;#030712&quot;</span>,<br> &#125;,<br> <span class="hljs-attr">dark</span>: &#123;<br>  <span class="hljs-string">&quot;--color-white&quot;</span>: <span class="hljs-string">&quot;#000&quot;</span>,<br>  <span class="hljs-string">&quot;--color-black&quot;</span>: <span class="hljs-string">&quot;#fff&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-950&quot;</span>: <span class="hljs-string">&quot;#f9fafb&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-900&quot;</span>: <span class="hljs-string">&quot;#f3f4f6&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-800&quot;</span>: <span class="hljs-string">&quot;#e5e7eb&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-700&quot;</span>: <span class="hljs-string">&quot;#d1d5db&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-600&quot;</span>: <span class="hljs-string">&quot;#9ca3af&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-500&quot;</span>: <span class="hljs-string">&quot;#6b7280&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-400&quot;</span>: <span class="hljs-string">&quot;#4b5563&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-300&quot;</span>: <span class="hljs-string">&quot;#374151&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-200&quot;</span>: <span class="hljs-string">&quot;#1f2937&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-100&quot;</span>: <span class="hljs-string">&quot;#111827&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-50&quot;</span>: <span class="hljs-string">&quot;#030712&quot;</span>,<br> &#125;,<br> <span class="hljs-attr">green</span>: &#123;<br>  <span class="hljs-string">&quot;--color-white&quot;</span>: <span class="hljs-string">&quot;#14532d&quot;</span>,<br>  <span class="hljs-string">&quot;--color-black&quot;</span>: <span class="hljs-string">&quot;#f0fdf4&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-50&quot;</span>: <span class="hljs-string">&quot;#f0fdf4&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-100&quot;</span>: <span class="hljs-string">&quot;#dcfce7&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-200&quot;</span>: <span class="hljs-string">&quot;#bbf7d0&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-300&quot;</span>: <span class="hljs-string">&quot;#86efac&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-400&quot;</span>: <span class="hljs-string">&quot;#4ade80&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-500&quot;</span>: <span class="hljs-string">&quot;#22c55e&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-600&quot;</span>: <span class="hljs-string">&quot;#16a34a&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-700&quot;</span>: <span class="hljs-string">&quot;#15803d&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-800&quot;</span>: <span class="hljs-string">&quot;#166534&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-900&quot;</span>: <span class="hljs-string">&quot;#14532d&quot;</span>,<br>  <span class="hljs-string">&quot;--color-gray-950&quot;</span>: <span class="hljs-string">&quot;#052e16&quot;</span>,<br> &#125;,<br>&#125;;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; themeGroup, <span class="hljs-attr">defaultTheme</span>: <span class="hljs-string">&quot;green&quot;</span> &#125;;<br></code></pre></td></tr></table></figure><ol start="114"><li>删除<code>index.less</code>里面的颜色配置</li><li>更改<code>tailwind.config.js</code>，将<code>var</code>改为<code>hzqTheme</code>，最后实现效果是将<code>color:hzqTheme(--color-white)</code>通过插件变为<code>color:#fff</code>，这样就完成了插件的功能</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br> <span class="hljs-attr">content</span>: [<span class="hljs-string">&quot;./src/**/*.&#123;tsx,ts,jsx,js&#125;&quot;</span>],<br> <span class="hljs-attr">theme</span>: &#123;<br>  <span class="hljs-attr">extend</span>: &#123;&#125;,<br>  <span class="hljs-attr">colors</span>: &#123;<br>   <span class="hljs-comment">// 将默认的颜色改为变量</span><br>   <span class="hljs-attr">white</span>: <span class="hljs-string">&quot;hzqTheme(--color-white)&quot;</span>,<br>   <span class="hljs-attr">black</span>: <span class="hljs-string">&quot;hzqTheme(--color-black)&quot;</span>,<br>   <span class="hljs-attr">gray</span>: &#123;<br>    <span class="hljs-number">50</span>: <span class="hljs-string">&quot;hzqTheme(--color-gray-50)&quot;</span>,<br>    <span class="hljs-number">100</span>: <span class="hljs-string">&quot;hzqTheme(--color-gray-100)&quot;</span>,<br>    <span class="hljs-number">200</span>: <span class="hljs-string">&quot;hzqTheme(--color-gray-200)&quot;</span>,<br>    <span class="hljs-number">300</span>: <span class="hljs-string">&quot;hzqTheme(--color-gray-300)&quot;</span>,<br>    <span class="hljs-number">400</span>: <span class="hljs-string">&quot;hzqTheme(--color-gray-400)&quot;</span>,<br>    <span class="hljs-number">500</span>: <span class="hljs-string">&quot;hzqTheme(--color-gray-500)&quot;</span>,<br>    <span class="hljs-number">600</span>: <span class="hljs-string">&quot;hzqTheme(--color-gray-600)&quot;</span>,<br>    <span class="hljs-number">700</span>: <span class="hljs-string">&quot;hzqTheme(--color-gray-700)&quot;</span>,<br>    <span class="hljs-number">800</span>: <span class="hljs-string">&quot;hzqTheme(--color-gray-800)&quot;</span>,<br>    <span class="hljs-number">900</span>: <span class="hljs-string">&quot;hzqTheme(--color-gray-900)&quot;</span>,<br>    <span class="hljs-number">950</span>: <span class="hljs-string">&quot;hzqTheme(--color-gray-950)&quot;</span>,<br>   &#125;,<br>  &#125;,<br> &#125;,<br> <span class="hljs-attr">plugins</span>: [],<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1710038767348-a75d55fb-4d7a-42a6-9ca3-8cbfdbe0e767.png"></p><ol start="116"><li>安装前置依赖：用于修改 css 代码的库</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add postcss-nested@^<span class="hljs-number">6.0</span><span class="hljs-number">.1</span> postcss-nesting@^<span class="hljs-number">10.2</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><ol start="117"><li>新建插件文件<code>themePlugin.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch themePlugin.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 写入代码：</span><br><span class="hljs-comment">// eslint-disable-next-line @typescript-eslint/no-var-requires</span><br><span class="hljs-keyword">const</span> postcss = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;postcss&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = postcss.<span class="hljs-title function_">plugin</span>(<span class="hljs-string">&quot;postcss-theme&quot;</span>, <span class="hljs-function">(<span class="hljs-params">options</span>) =&gt;</span> &#123;<br> <span class="hljs-keyword">const</span> defalutOpts = &#123;<br>  <span class="hljs-attr">functionName</span>: <span class="hljs-string">&quot;hzqTheme&quot;</span>,<br>  <span class="hljs-attr">themeGroup</span>: &#123;&#125;,<br>  <span class="hljs-attr">defaultTheme</span>: <span class="hljs-string">&quot;light&quot;</span>,<br>  <span class="hljs-attr">themeSelector</span>: <span class="hljs-string">&#x27;html[data-theme=&quot;$_$&quot;]&#x27;</span>,<br>  <span class="hljs-attr">nestingPlugin</span>: <span class="hljs-literal">null</span>,<br> &#125;;<br><br> <span class="hljs-comment">// 合并参数</span><br> options = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, defalutOpts, options);<br><br> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getColorByThemeGroup</span> = (<span class="hljs-params">color, theme</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> options.<span class="hljs-property">themeGroup</span>[theme][color];<br> &#125;;<br><br> <span class="hljs-comment">// 正则：获取 hzqTheme(--color-white) 括号中的值：--color-white</span><br> <span class="hljs-keyword">const</span> regColorValue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<br>  <span class="hljs-string">`\\b<span class="hljs-subst">$&#123;options.functionName&#125;</span>\\(([^)]+)\\)`</span>,<br>  <span class="hljs-string">&quot;g&quot;</span>,<br> );<br><br> <span class="hljs-comment">// 插件的入口函数</span><br> <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">style, result</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">hasPlugin</span> = (<span class="hljs-params">name</span>) =&gt;<br>   name.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^postcss-/</span>, <span class="hljs-string">&quot;&quot;</span>) === options.<span class="hljs-property">nestingPlugin</span> ||<br>   result.<span class="hljs-property">processor</span>.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">p</span>) =&gt;</span> p.<span class="hljs-property">postcssPlugin</span> === name);<br><br>  <span class="hljs-comment">// 获取 css 属性值，替换掉 hzqTheme(--color-gray-200)</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getColorValue</span> = (<span class="hljs-params">value, theme</span>) =&gt; &#123;<br>   <span class="hljs-keyword">return</span> value.<span class="hljs-title function_">replace</span>(regColorValue, <span class="hljs-function">(<span class="hljs-params">match, color</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// match: hzqTheme(--color-gray-200)</span><br>    <span class="hljs-comment">// color: --color-gray-200</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getColorByThemeGroup</span>(color, theme);<br>   &#125;);<br>  &#125;;<br><br>  style.<span class="hljs-title function_">walkDecls</span>(<span class="hljs-function">(<span class="hljs-params">decl</span>) =&gt;</span> &#123;<br>   <span class="hljs-comment">// decl 是每个 css 属性的对象，height: 10px 的 css ast &#123; prop: &quot;height&quot;, value: &quot;10px&quot; &#125;</span><br><br>   <span class="hljs-comment">// 每个 css 属性的具体值：height: 10px;</span><br>   <span class="hljs-keyword">const</span> value = decl.<span class="hljs-property">value</span>;<br><br>   <span class="hljs-keyword">if</span> (!value || !regColorValue.<span class="hljs-title function_">test</span>(value)) &#123;<br>    <span class="hljs-comment">// 如果没有匹配到，直接返回</span><br>    <span class="hljs-keyword">return</span>;<br>   &#125;<br><br>   <span class="hljs-comment">// 说明有匹配到值</span><br><br>   <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">let</span> defaultTheme;<br><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(options.<span class="hljs-property">themeGroup</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>     <span class="hljs-comment">// 处理各种模式</span><br>     <span class="hljs-keyword">const</span> themeColor = <span class="hljs-title function_">getColorValue</span>(value, key);<br>     <span class="hljs-keyword">const</span> themeSelector = options.<span class="hljs-property">themeSelector</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;$_$&quot;</span>, key);<br>     <span class="hljs-keyword">let</span> themeRule;<br>     <span class="hljs-comment">// 使用 nest 插件，生成 dark 的规则：html[data-theme=&quot;dark&quot;] &#123;...&#125;</span><br>     <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasPlugin</span>(<span class="hljs-string">&quot;postcss-nesting&quot;</span>)) &#123;<br>      themeRule = postcss.<span class="hljs-title function_">atRule</span>(&#123;<br>       <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;nest&quot;</span>,<br>       <span class="hljs-attr">params</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;themeSelector&#125;</span> &amp;`</span>,<br>      &#125;);<br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasPlugin</span>(<span class="hljs-string">&quot;postcss-nested&quot;</span>)) &#123;<br>      themeRule = postcss.<span class="hljs-title function_">rule</span>(&#123;<br>       <span class="hljs-attr">params</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;themeSelector&#125;</span> &amp;`</span>,<br>      &#125;);<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;请安装 postcss-nesting 或者 postcss-nested 插件&quot;</span>);<br>     &#125;<br>     <span class="hljs-keyword">const</span> themeDecl = decl.<span class="hljs-title function_">clone</span>(&#123; <span class="hljs-attr">value</span>: themeColor &#125;);<br><br>     <span class="hljs-keyword">if</span> (themeRule) &#123;<br>      themeRule.<span class="hljs-title function_">append</span>(themeDecl);<br>      decl.<span class="hljs-title function_">after</span>(themeRule);<br>     &#125;<br><br>     <span class="hljs-keyword">if</span> (key === options.<span class="hljs-property">defaultTheme</span>) &#123;<br>      defaultTheme = themeDecl;<br>     &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">// 处理为默认模式</span><br>    <span class="hljs-keyword">if</span> (defaultTheme) decl.<span class="hljs-title function_">replaceWith</span>(defaultTheme);<br>   &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    decl.<span class="hljs-title function_">warn</span>(result, error);<br>   &#125;<br>  &#125;);<br> &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="118"><li>更改<code>.postcssrc.js</code>文件，加入对应插件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; themeGroup, defaultTheme &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./themeGroup&quot;</span>); <span class="hljs-comment">// ++++++</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br> <span class="hljs-attr">plugins</span>: [<br>  <span class="hljs-string">&quot;autoprefixer&quot;</span>, <span class="hljs-comment">// 自动添加浏览器前缀</span><br>  <span class="hljs-string">&quot;tailwindcss&quot;</span>,<br>  <span class="hljs-string">&quot;postcss-nested&quot;</span>, <span class="hljs-comment">// ++++++</span><br>  <span class="hljs-string">&quot;postcss-nesting&quot;</span>, <span class="hljs-comment">// ++++++</span><br>  <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./themePlugin&quot;</span>)(&#123; themeGroup, defaultTheme &#125;), <span class="hljs-comment">// ++++++</span><br> ],<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="119"><li>重启项目，默认为绿色，切换后为黑色，再切换为白色</li></ol><p><img src="/img/images/2024/1710049853301-6701169c-cc19-4db5-9516-c96d592a8b12.png"><img src="/img/images/2024/1710049860220-a317f8e4-053f-402f-b6a1-c5770b5a5434.png"><img src="/img/images/2024/1710049867735-76295fbf-ca1b-45ff-b1cc-f279c158e3ea.png"><br>打包之后，本地启动<code>index.html</code>也是一样的效果，这样就完成了主题切换的插件，本质是帮我们注入所有的主题 css 代码</p><h1 id="6、后端项目搭建（koa-框架）"><a href="#6、后端项目搭建（koa-框架）" class="headerlink" title="6、后端项目搭建（koa 框架）"></a>6、后端项目搭建（koa 框架）</h1><blockquote><p>nodejs 后端项目使用场景：BFF(backend-for-fontend 给前端用的后端)、内部小系统等</p></blockquote><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><ol start="120"><li>创建文件夹（react-actual-combat 下）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir packages/apps/back-end<br></code></pre></td></tr></table></figure><ol start="121"><li>初始化项目</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">cd packages/apps/back-end &amp;&amp; pnpm init<br></code></pre></td></tr></table></figure><ol start="122"><li>安装<code>devDependencies</code>依赖（apps&#x2F;back-end 下）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add @babel/core @babel/plugin-proposal-<span class="hljs-keyword">class</span>-properties @babel/plugin-proposal-decorators @babel/preset-env babelrc-rollup core-js rollup rollup-plugin-babel -D<br></code></pre></td></tr></table></figure><ol start="123"><li>安装<code>dependencies</code>依赖（apps&#x2F;back-end 下）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm add jsonwebtoken koa koa-bodyparser koa-router<br></code></pre></td></tr></table></figure><ol start="124"><li>编写 Rollup 脚本</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch rollup.<span class="hljs-property">config</span>.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 写如下代码：</span><br><span class="hljs-keyword">const</span> babel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;rollup-plugin-babel&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br> <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>,<br> <span class="hljs-attr">output</span>: &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;hzqServer&quot;</span>, <span class="hljs-comment">// 自定义命名</span><br>  <span class="hljs-attr">file</span>: <span class="hljs-string">&quot;./dist/bundle.js&quot;</span>,<br>  <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;umd&quot;</span>,<br> &#125;,<br> <span class="hljs-attr">treeshake</span>: <span class="hljs-literal">false</span>,<br> <span class="hljs-attr">plugins</span>: [<br>  <span class="hljs-title function_">babel</span>(&#123;<br>   <span class="hljs-attr">runtimeHelpers</span>: <span class="hljs-literal">true</span>,<br>   <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&quot;.js&quot;</span>, <span class="hljs-string">&quot;.ts&quot;</span>],<br>   <span class="hljs-attr">exclude</span>: <span class="hljs-string">&quot;node_modules/**&quot;</span>,<br>   <span class="hljs-attr">externalHelpers</span>: <span class="hljs-literal">true</span>,<br>  &#125;),<br> ],<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="125"><li>编写 Babel 配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch .<span class="hljs-property">babelrc</span><br><br><span class="hljs-comment">// 写如下代码：</span><br>&#123;<br> <span class="hljs-string">&quot;presets&quot;</span>: [<br>  [<br>   <span class="hljs-string">&quot;@babel/preset-env&quot;</span>,<br>   &#123;<br>    <span class="hljs-string">&quot;modules&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;loose&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;targets&quot;</span>: <span class="hljs-string">&quot;node 16&quot;</span>,<br>    <span class="hljs-string">&quot;useBuiltIns&quot;</span>: <span class="hljs-string">&quot;usage&quot;</span>,<br>    <span class="hljs-string">&quot;corejs&quot;</span>: &#123;<br>     <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;3.36&quot;</span>, <span class="hljs-comment">// 跟 package.json 里面的 core-js 版本一致</span><br>     <span class="hljs-string">&quot;proposals&quot;</span>: <span class="hljs-literal">true</span><br>    &#125;<br>   &#125;<br>  ]<br> ],<br> <span class="hljs-string">&quot;plugins&quot;</span>: [<br>  [<span class="hljs-string">&quot;@babel/plugin-proposal-decorators&quot;</span>, &#123; <span class="hljs-string">&quot;legacy&quot;</span>: <span class="hljs-literal">true</span> &#125;],<br>  [<span class="hljs-string">&quot;@babel/plugin-proposal-class-properties&quot;</span>, &#123; <span class="hljs-string">&quot;loose&quot;</span>: <span class="hljs-literal">true</span> &#125;]<br> ]<br>&#125;<br></code></pre></td></tr></table></figure><ol start="126"><li>新建入口文件<code>src/index.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir src &amp;&amp; touch src/index.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 写如下代码：</span><br><span class="hljs-keyword">import</span> &#123; random &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test&quot;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ hello word ] &gt;&quot;</span>, random);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> random;<br></code></pre></td></tr></table></figure><ol start="127"><li>新建测试文件<code>src/test.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch src/test.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 写如下代码：</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> random = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();<br></code></pre></td></tr></table></figure><ol start="128"><li>本地运行下<code>src/index.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">node src/index.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 会发现报错，因为代码里面写了 esm 的 import、export 语法</span><br><span class="hljs-comment">// 但我们的 node环境或 package.json 没有指定支持该语法，所以会报错</span><br></code></pre></td></tr></table></figure><ol start="129"><li><code>package.json</code>新增<code>build</code>命令，然后运行<code>pnpm build</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  ......<br><br> <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,<br>    <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;rollup --config rollup.config.js&quot;</span> <span class="hljs-comment">// ++++++</span><br>  &#125;,<br><br>  ......<br>&#125;<br></code></pre></td></tr></table></figure><ol start="130"><li>打包后的文件如下(<code>back-end/dist/bundle.js</code>)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">global</span>, factory</span>) &#123;<br> <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">exports</span> === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">module</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span> ? <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">factory</span>() :<br> <span class="hljs-keyword">typeof</span> define === <span class="hljs-string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="hljs-property">amd</span> ? <span class="hljs-title function_">define</span>(factory) :<br> (<span class="hljs-variable language_">global</span> = <span class="hljs-keyword">typeof</span> globalThis !== <span class="hljs-string">&#x27;undefined&#x27;</span> ? globalThis : <span class="hljs-variable language_">global</span> || self, <span class="hljs-variable language_">global</span>.<span class="hljs-property">hzqServer</span> = <span class="hljs-title function_">factory</span>());<br>&#125;)(<span class="hljs-variable language_">this</span>, (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-string">&#x27;use strict&#x27;</span>;<br><br> <span class="hljs-keyword">const</span> random = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();<br><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ hello word ] &gt;&quot;</span>, random);<br><br> <span class="hljs-keyword">return</span> random;<br><br>&#125;));<br></code></pre></td></tr></table></figure><ol start="131"><li>然后可以运行下<code>node dist/bundle.js</code></li></ol><p><img src="/img/images/2024/1710052075990-5e411011-e619-4c9c-9069-2ea9383b4dfd.png"></p><h2 id="本地环境搭建"><a href="#本地环境搭建" class="headerlink" title="本地环境搭建"></a>本地环境搭建</h2><p>初始化完项目后，可以发现构建产物是能直接运行的，那可以这样处理本地开发</p><ol start="132"><li><code>package.json</code>新增<code>start</code>命令</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  ......<br><br> <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,<br>    <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;rollup --config rollup.config.js&quot;</span>,<br>    <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;rollup --config rollup.config.js -w&quot;</span>, <span class="hljs-comment">// ++++++`</span><br>  &#125;,<br><br>  ......<br>&#125;<br></code></pre></td></tr></table></figure><ol start="133"><li>运行<code>pnpm start</code>，这样每次更改代码后，就会自动打包</li><li>新起终端，运行<code>nodemon dist/bundle.js</code>，没有的话全局安装下<code>npm install -g nodemon</code>，这样每次变更时可自动运行<br><img src="/img/images/2024/1710052747718-52d2e1d6-bcec-4099-a76e-80a86e03d225.png"></li><li><code>package.json</code>新增<code>dev</code>命令，以后本地开发就运行<code>pnpm dev</code>即可</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  ......<br><br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,<br>    <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;rollup --config rollup.config.js&quot;</span>,<br>    <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;rollup --config rollup.config.js -w&quot;</span>,<br>    <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;pnpm start &amp; nodemon dist/bundle.js&quot;</span> <span class="hljs-comment">// ++++++</span><br>  &#125;,<br><br>  ......<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="练一下手"><a href="#练一下手" class="headerlink" title="练一下手"></a>练一下手</h2><ol start="136"><li>删除之前的构建测试代码，新建空的入口文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">rm src/index.<span class="hljs-property">js</span> src/test.<span class="hljs-property">js</span> &amp;&amp; touch src/index.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ol start="137"><li>项目保持运行<code>pnpm dev</code>哦</li><li>先写个 <a href="https://www.koajs.net/#hello-koa">Hello Koa</a>，练练手</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Koa</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;koa&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;koa-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br> ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&quot;hello koa 3&quot;</span>;<br>&#125;);<br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/list&quot;</span>, <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br> ctx.<span class="hljs-property">body</span> = [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>];<br>&#125;);<br><br>app.<span class="hljs-title function_">use</span>(router.<span class="hljs-title function_">routes</span>());<br><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">3001</span>;<br><br>app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`server is running at http://localhost:<span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="139"><li>命令行里面点击网址，可以看到页面</li></ol><p><img src="/img/images/2024/1710053407431-31dc7351-f187-4517-b839-d3cdaa62a37a.png"><img src="/img/images/2024/1710053418337-d813c379-b507-49b5-b809-cfcbbd3e6c8a.png"><br>访问 <a href="http://localhost:3001/list">http://localhost:3001/list</a>，也能看到数据<br><img src="/img/images/2024/1710053779932-c4ae8a47-9ab5-4e36-976b-2608a72e2e1e.png"></p><h2 id="实际开发"><a href="#实际开发" class="headerlink" title="实际开发"></a>实际开发</h2><p>后端项目，一般是基于 MVC 形式来组织代码的<br><img src="/img/images/2024/1710055097023-438f5ca7-44e6-454c-80bc-44ef18870c0f.jpeg"><br>所以我们的后端项目也会进行分层创建文件夹：controllers、services<br>核心技术：基于<code>TS 的装饰器</code>去组装我们的代码</p><ol start="140"><li>新建<code>controllers</code>文件夹</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir src/controllers &amp;&amp; touch src/controllers/book.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ol start="141"><li>新建辅助函数：装饰器等等</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir src/utils &amp;&amp; touch src/utils/decorator.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ol start="142"><li><code>src/utils/decorator.js</code>写如下代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">RequestMethod</span> = &#123;<br> <span class="hljs-attr">GET</span>: <span class="hljs-string">&quot;get&quot;</span>,<br> <span class="hljs-attr">POST</span>: <span class="hljs-string">&quot;post&quot;</span>,<br> <span class="hljs-attr">PUT</span>: <span class="hljs-string">&quot;put&quot;</span>,<br> <span class="hljs-attr">DELETE</span>: <span class="hljs-string">&quot;delete&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Controller</span>(<span class="hljs-params">perfix = <span class="hljs-string">&quot;&quot;</span></span>) &#123;&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">RequestMapping</span>(<span class="hljs-params">method = <span class="hljs-string">&quot;&quot;</span>, url = <span class="hljs-string">&quot;&quot;</span></span>) &#123;&#125;<br></code></pre></td></tr></table></figure><ol start="143"><li><code>src/controllers/book.js</code>写代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">RequestMapping</span>, <span class="hljs-title class_">RequestMethod</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../utils/decorator&quot;</span>;<br><br>@<span class="hljs-title class_">Controller</span>(<span class="hljs-string">&quot;/book&quot;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br> @<span class="hljs-title class_">RequestMapping</span>(<span class="hljs-title class_">RequestMethod</span>.<span class="hljs-property">GET</span>, <span class="hljs-string">&quot;/all&quot;</span>)<br> <span class="hljs-keyword">async</span> <span class="hljs-title function_">getAll</span>(<span class="hljs-params">ctx</span>) &#123;<br>  ctx.<span class="hljs-property">body</span> = [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>];<br> &#125;<br>&#125;<br><br><span class="hljs-comment">// 我们期望这样写后，就能当做接口被调用，这需要处理成 router</span><br><span class="hljs-comment">// 比如：router.get(&#x27;/book/all&#x27;, ctx =&gt; ctx.body = [&quot;1&quot;, &quot;2&quot;])</span><br><span class="hljs-comment">// 核心为：方法(get)、地址(&#x27;/book/all&#x27;)、函数(ctx =&gt; ctx.body = [&quot;1&quot;, &quot;2&quot;])</span><br><span class="hljs-comment">// 所以只要想办法能根据配置生成对应的路由就行了，即 router[method](path, fn)</span><br><span class="hljs-comment">// 这一步其实也很简单，自己写个 JSON，有method、path、fn，然后循环 JSON，也能生成路由</span><br><br><span class="hljs-comment">// ⭐️ 但核心的在于如何实现达到更高的扩展性、稳定性</span><br></code></pre></td></tr></table></figure><ol start="144"><li>完善<code>src/utils/decorator.js</code>代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">RequestMethod</span> = &#123;<br> <span class="hljs-attr">GET</span>: <span class="hljs-string">&quot;get&quot;</span>,<br> <span class="hljs-attr">POST</span>: <span class="hljs-string">&quot;post&quot;</span>,<br> <span class="hljs-attr">PUT</span>: <span class="hljs-string">&quot;put&quot;</span>,<br> <span class="hljs-attr">DELETE</span>: <span class="hljs-string">&quot;delete&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> controllers = [];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Controller</span>(<span class="hljs-params">prefix = <span class="hljs-string">&quot;&quot;</span></span>) &#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">constructor</span>) &#123;<br>  constructor.<span class="hljs-property">prefix</span> = prefix;<br> &#125;;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">RequestMapping</span>(<span class="hljs-params">method = <span class="hljs-string">&quot;&quot;</span>, url = <span class="hljs-string">&quot;&quot;</span></span>) &#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">target, propertyKey, decriptor</span>) &#123;<br>  <span class="hljs-keyword">let</span> path = url || <span class="hljs-string">`/<span class="hljs-subst">$&#123;propertyKey&#125;</span>`</span>;<br><br>  <span class="hljs-keyword">const</span> item = &#123;<br>   method,<br>   path,<br>   <span class="hljs-attr">handler</span>: decriptor.<span class="hljs-property">value</span>, <span class="hljs-comment">// 函数自身</span><br>   <span class="hljs-attr">constructor</span>: target.<span class="hljs-property">constructor</span>, <span class="hljs-comment">// 构造函数</span><br>  &#125;;<br><br>  controllers.<span class="hljs-title function_">push</span>(item);<br> &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="145"><li>新建<code>src/controllers/index.js</code>，集中导出<code>controllers</code>下面的文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch src/controllers/index.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 写如下代码：</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">BookController</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./book.js&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<span class="hljs-title class_">BookController</span>];<br></code></pre></td></tr></table></figure><ol start="146"><li>现在这几个文件还毫无关系，所以我们简单点强行关联(import)，更改<code>src/index.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Koa</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;koa&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;koa-router&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Routers</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./controllers/index&quot;</span>; <span class="hljs-comment">// 导入 controllers 作为路由</span><br><br><span class="hljs-keyword">import</span> &#123; controllers &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./utils/decorator.js&quot;</span>; <span class="hljs-comment">// 导入 controllers，里面有具体的 method, path, handler</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br><br><span class="hljs-keyword">const</span> allPath = [];<br><br><span class="hljs-title class_">Routers</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">route</span>) =&gt;</span> &#123;<br> <span class="hljs-keyword">const</span> currRoute = controllers.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">constructor</span> === route);<br><br> <span class="hljs-keyword">if</span> (!currRoute) <span class="hljs-keyword">return</span>;<br><br> <span class="hljs-keyword">let</span> &#123; method, path, handler &#125; = currRoute;<br><br> <span class="hljs-keyword">const</span> &#123; prefix &#125; = route;<br><br> <span class="hljs-keyword">if</span> (prefix) path = prefix + path;<br><br> allPath.<span class="hljs-title function_">push</span>(&#123; method, path &#125;);<br><br> router[method](path, handler);<br>&#125;);<br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br> <span class="hljs-keyword">let</span> body = <span class="hljs-string">&quot;&quot;</span>;<br><br> allPath.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  body += <span class="hljs-string">`&lt;a href=&#x27;<span class="hljs-subst">$&#123;item.path&#125;</span>&#x27;&gt;<span class="hljs-subst">$&#123;item.method&#125;</span>: <span class="hljs-subst">$&#123;item.path&#125;</span>&lt;/a&gt;&lt;br&gt;`</span>;<br> &#125;);<br><br> ctx.<span class="hljs-property">body</span> = body;<br>&#125;);<br><br>app.<span class="hljs-title function_">use</span>(router.<span class="hljs-title function_">routes</span>());<br><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">3001</span>;<br><br>app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`server is running at http://localhost:<span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="147"><li>页面效果如下：</li></ol><p><img src="/img/images/2024/1710059455864-b888bb47-acc7-4b59-a1a4-ea6fde4ff34a.png"><img src="/img/images/2024/1710059462271-8497c6f7-7a35-44d0-b0c0-eaa3e5b8b028.png"></p><h3 id="处理跨域"><a href="#处理跨域" class="headerlink" title="处理跨域"></a>处理跨域</h3><p>首先跨域是<strong>浏览器限制</strong>的，为了网页的安全。<br>所以我们本地开发前端时，前端浏览器直接访问服务器会出现跨域，一般是本地加个 devServer 配置就能解决，那是因为服务端直接无跨域的说法。<br>当我们加了 devServer 后，浏览器就直接访问 devServer，然后 devServer 再去访问服务端，这样就走通了。<br>若我们是服务端，则可以通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">cors</a>(跨源资源共享) 解决</p><ol start="148"><li>更改<code>src/index.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//  找地方加上这一段手写代码，也可以使用 @koa/cors 库来处理跨域</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br> ctx.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;Acess-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>); <span class="hljs-comment">// 允许与给定的来源（origin）共享。</span><br> ctx.<span class="hljs-title function_">set</span>(<br>  <span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>,<br>  <span class="hljs-string">&quot;Content-Type,Content-Length,Authorization,Accept,X-Requested-With&quot;</span>,<br> ); <span class="hljs-comment">// 允许的请求头。</span><br><br> ctx.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;OPTIONS, GET, POST, PUT, DELETE&quot;</span>); <span class="hljs-comment">// 允许使用的方法或方法列表。</span><br><br> ctx.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>); <span class="hljs-comment">// 设置响应的 Content-Type 头，与跨域无关，只是放在一起写了</span><br><br> <span class="hljs-keyword">if</span> (ctx.<span class="hljs-property">request</span>.<span class="hljs-property">method</span> === <span class="hljs-string">&quot;OPTIONS&quot;</span>) &#123;<br>  ctx.<span class="hljs-property">status</span> = <span class="hljs-number">200</span>; <span class="hljs-comment">// 状态码为 200，表示请求成功</span><br> &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="登录鉴权"><a href="#登录鉴权" class="headerlink" title="登录鉴权"></a>登录鉴权</h3><h4 id="JWT-是什么？"><a href="#JWT-是什么？" class="headerlink" title="JWT 是什么？"></a>JWT 是什么？</h4><p>JSON Web Token，由三段通过<code>.</code>连接组成：</p><ul><li>header：类型，通常是 jwt</li><li>payload：主体内容，可以包含一些用户信息等</li><li>signature：签名结果，一般是 header、payload 加密后的结果</li></ul><p>类似于：<code>eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</code></p><h4 id="模拟一下"><a href="#模拟一下" class="headerlink" title="模拟一下"></a>模拟一下</h4><p>本次通过模拟生成来演示</p><ol start="149"><li>创建文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch src/utils/mockJWT.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ol start="150"><li><code>src/utils/mockJWT.js</code>编码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;crypto&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成JWT令牌</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> payload 令牌负载</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> salt 加密盐</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回JWT令牌字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sign</span>(<span class="hljs-params">payload, salt</span>) &#123;<br> <span class="hljs-comment">// 定义头部信息</span><br> <span class="hljs-keyword">const</span> header = &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;JWT&quot;</span>, <span class="hljs-attr">alg</span>: <span class="hljs-string">&quot;HS256&quot;</span> &#125;;<br><br> <span class="hljs-comment">// 创建一个空数组用于存储令牌</span><br> <span class="hljs-keyword">const</span> tokenArr = [];<br><br> <span class="hljs-comment">// 第一段：将头部信息编码为Base64Url格式并添加到令牌数组中</span><br> tokenArr.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">base64UrlEncode</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(header)));<br><br> <span class="hljs-comment">// 第二段：将负载信息编码为Base64Url格式并添加到令牌数组中</span><br> tokenArr.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">base64UrlEncode</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(payload)));<br><br> <span class="hljs-comment">// 第三段：将前两段拼接后的字符串进行加密，并将加密结果添加到令牌数组中</span><br> tokenArr.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">encryption</span>(tokenArr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;.&quot;</span>), salt));<br><br> <span class="hljs-comment">// 将令牌数组中的元素用&quot;.&quot;连接并返回</span><br> <span class="hljs-keyword">return</span> tokenArr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将字符串进行base64Url编码</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> str 待编码的字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回base64Url编码后的字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">base64UrlEncode</span>(<span class="hljs-params">str</span>) &#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(str).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&quot;base64&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">encryption</span>(<span class="hljs-params">value, salt</span>) &#123;<br> <span class="hljs-keyword">return</span> crypto.<span class="hljs-title function_">createHmac</span>(<span class="hljs-string">&quot;sha256&quot;</span>, salt).<span class="hljs-title function_">update</span>(value).<span class="hljs-title function_">digest</span>(<span class="hljs-string">&quot;base64&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证token是否有效</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> token 需要验证的token</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> salt 加密时使用的盐值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回布尔值，表示token是否有效</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">verify</span>(<span class="hljs-params">token, salt</span>) &#123;<br> <span class="hljs-comment">// 将token按&quot;.&quot;分割成header、payload和signature三部分</span><br> <span class="hljs-keyword">const</span> [header, payload, signature] = token.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>);<br> <span class="hljs-comment">// 将header和payload拼接成字符串，并使用salt进行加密</span><br> <span class="hljs-comment">// 返回加密后的结果是否与signature相等</span><br> <span class="hljs-keyword">return</span> <span class="hljs-title function_">encryption</span>([header, payload].<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;.&quot;</span>), salt) === signature;<br>&#125;<br><br><span class="hljs-keyword">const</span> salt = <span class="hljs-string">&quot;&lt;huangzq&gt;&quot;</span>;<br><span class="hljs-keyword">const</span> token = <span class="hljs-title function_">sign</span>(&#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;hzq&quot;</span> &#125;, salt);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ token ] &gt;&quot;</span>, token);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ verify() ] &gt;&quot;</span>, <span class="hljs-title function_">verify</span>(token, salt));<br><br><span class="hljs-comment">// 终端进入该文件夹，运行 node ./mockJWT.js</span><br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// [ token ] &gt; eyJ0eXBlIjoiSldUIiwiYWxnIjoiSFMyNTYifQ==.eyJ1c2VyIjoiaHpxIn0=.WOckAZBwACMtmAFXTBb3vRsY0J2Lef1S80WMU/RJUvg=</span><br><span class="hljs-comment">// [ verify() ] &gt; true</span><br></code></pre></td></tr></table></figure><h4 id="正式开搞"><a href="#正式开搞" class="headerlink" title="正式开搞"></a>正式开搞</h4><blockquote><p>基于三方库，完成 JWT 模块</p></blockquote><ol start="151"><li>新建文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch src/utils/jwt.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ol start="152"><li><code>src/utils/jwt.js</code>编码，实现验证、加密逻辑</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> jwt <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;jsonwebtoken&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SALT</span> = <span class="hljs-string">&quot;&lt;Huangzq666&gt;&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">verify</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">token</span>) =&gt; &#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (token) &#123;<br>   jwt.<span class="hljs-title function_">verify</span>(token, <span class="hljs-variable constant_">SALT</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>     <span class="hljs-keyword">if</span> (err.<span class="hljs-property">name</span> === <span class="hljs-string">&quot;TokenExpiredError&quot;</span>) &#123;<br>      <span class="hljs-title function_">resolve</span>(&#123;<br>       <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;failed&quot;</span>,<br>       <span class="hljs-attr">error</span>: <span class="hljs-string">&quot;token 已过期&quot;</span>,<br>      &#125;);<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(&#123;<br>       <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;failed&quot;</span>,<br>       <span class="hljs-attr">error</span>: <span class="hljs-string">&quot; 认证失败&quot;</span>,<br>      &#125;);<br>     &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>     <span class="hljs-title function_">resolve</span>(&#123;<br>      <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>      data,<br>     &#125;);<br>    &#125;<br>   &#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-title function_">resolve</span>(&#123;<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;failed&quot;</span>,<br>    <span class="hljs-attr">error</span>: <span class="hljs-string">&quot;token 不能为空&quot;</span>,<br>   &#125;);<br>  &#125;<br> &#125;);<br>&#125;;<br><br><span class="hljs-comment">// 加密</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">signature</span> = (<span class="hljs-params">data</span>) =&gt; &#123;<br> <span class="hljs-keyword">return</span> jwt.<span class="hljs-title function_">sign</span>(data, <span class="hljs-variable constant_">SALT</span>, &#123;<br>  <span class="hljs-attr">expiresIn</span>: <span class="hljs-string">&quot;10h&quot;</span>, <span class="hljs-comment">// 秒</span><br> &#125;);<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">jwtVerify</span> =<br> (<span class="hljs-params">whiteList = []</span>) =&gt;<br> <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (whiteList.<span class="hljs-title function_">includes</span>(ctx.<span class="hljs-property">path</span>)) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-title function_">next</span>(ctx);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-comment">// 不是白名单，则需要进行校验</span><br>   <span class="hljs-keyword">let</span> token;<br>   <span class="hljs-keyword">try</span> &#123;<br>    token = ctx.<span class="hljs-property">header</span>.<span class="hljs-property">authorization</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;Bearer &quot;</span>)[<span class="hljs-number">1</span>];<br>   &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-comment">// todo</span><br>   &#125;<br><br>   <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">verify</span>(token);<br><br>   <span class="hljs-keyword">if</span> (res.<span class="hljs-property">status</span> === <span class="hljs-string">&quot;success&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">next</span>(ctx);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>    ctx.<span class="hljs-property">body</span> = &#123;<br>     ...res,<br>     <span class="hljs-attr">code</span>: <span class="hljs-number">401</span>,<br>    &#125;;<br>   &#125;<br>  &#125;<br> &#125;;<br></code></pre></td></tr></table></figure><ol start="153"><li>在<code>index.js</code>里面进行<code>app.use</code>注册</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; jwtVerify &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./utils/jwt.js&quot;</span>;<br><br><br><span class="hljs-comment">// ......</span><br><br><br><span class="hljs-comment">// 使用 jwt 验证中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">jwtVerify</span>([<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;/api/user/login&quot;</span>, <span class="hljs-string">&quot;/api/user/register&quot;</span>]));<br></code></pre></td></tr></table></figure><ol start="154"><li>刷新下页面，就能看到无法访问了，因为没带<code>token</code></li></ol><p><img src="/img/images/2024/1710071756990-4507cdff-32ef-4109-a832-3ba4e35477f8.png"></p><ol start="155"><li>新增<code>user</code>模块</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch src/controllers/user.<span class="hljs-property">js</span> &amp;&amp; mkdir src/services &amp;&amp; touch src/services/user.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ol start="156"><li><code>src/controllers/user.js</code>初始化编码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">RequestMapping</span>, <span class="hljs-title class_">RequestMethod</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../utils/decorator&quot;</span>;<br><br>@<span class="hljs-title class_">Controller</span>(<span class="hljs-string">&quot;/user&quot;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br> @<span class="hljs-title class_">RequestMapping</span>(<span class="hljs-title class_">RequestMethod</span>.<span class="hljs-property">POST</span>, <span class="hljs-string">&quot;/login&quot;</span>)<br> <span class="hljs-keyword">async</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">ctx</span>) &#123;<br>  ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&quot;登录成功&quot;</span>;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="157"><li><code>src/services/user.js</code>初始化编码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;&#125;<br></code></pre></td></tr></table></figure><ol start="158"><li><code>src/controllers/index.js</code>引入</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">BookController</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./book.js&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">UserController</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./user.js&quot;</span>; <span class="hljs-comment">// ++++++</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<span class="hljs-title class_">BookController</span>, <span class="hljs-title class_">UserController</span>];<br></code></pre></td></tr></table></figure><ol start="159"><li>因为是<code>post</code>请求，就只有打开<code>postman</code>调用，发现能调通</li></ol><p><img src="/img/images/2024/1710072895076-3496eca6-fc66-42fa-a94c-cfc63add6fb4.png"></p><ol start="160"><li><code>src/controllers/user.js</code>正式编码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../services/user&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">RequestMapping</span>, <span class="hljs-title class_">RequestMethod</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../utils/decorator&quot;</span>;<br><br>@<span class="hljs-title class_">Controller</span>(<span class="hljs-string">&quot;/user&quot;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br> @<span class="hljs-title class_">RequestMapping</span>(<span class="hljs-title class_">RequestMethod</span>.<span class="hljs-property">POST</span>, <span class="hljs-string">&quot;/login&quot;</span>)<br> <span class="hljs-keyword">async</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">ctx</span>) &#123;<br>  <span class="hljs-keyword">const</span> userService = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> userService.<span class="hljs-title function_">validate</span>(ctx.<span class="hljs-property">request</span>.<span class="hljs-property">body</span> || &#123;&#125;);<br>  ctx.<span class="hljs-property">body</span> = &#123; ...res &#125;;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="161"><li><code>src/services/user.js</code>正式编码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; signature &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../utils/jwt&quot;</span>;<br><br><span class="hljs-keyword">const</span> mockUserTable = [<br> &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;123456&quot;</span> &#125;,<br> &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;654321&quot;</span> &#125;,<br> &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;111111&quot;</span> &#125;,<br> &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;huangzq&quot;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;hzq666&quot;</span> &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br> <span class="hljs-keyword">async</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">&#123; username, password &#125;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (username &amp;&amp; password) &#123;<br>   <span class="hljs-keyword">let</span> findValue = mockUserTable.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">username</span> === username);<br>   <span class="hljs-keyword">if</span> (findValue) &#123;<br>    <span class="hljs-keyword">let</span> findValue = mockUserTable.<span class="hljs-title function_">find</span>(<br>     <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">username</span> === username &amp;&amp; item.<span class="hljs-property">password</span> === password,<br>    );<br>    <span class="hljs-keyword">if</span> (findValue) &#123;<br>     <span class="hljs-comment">// 登录成功</span><br>     <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;登录成功&quot;</span>,<br>      <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>      <span class="hljs-attr">data</span>: &#123; <span class="hljs-attr">token</span>: <span class="hljs-title function_">signature</span>(&#123; username &#125;) &#125;,<br>     &#125;;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>     <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;密码错误&quot;</span>,<br>      <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;failed&quot;</span>,<br>      <span class="hljs-attr">data</span>: <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>,<br>     &#125;;<br>    &#125;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>     <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>     <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;用户名错误&quot;</span>,<br>     <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;failed&quot;</span>,<br>     <span class="hljs-attr">data</span>: <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>,<br>    &#125;;<br>   &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;用户名或密码不能为空&quot;</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;failed&quot;</span>,<br>    <span class="hljs-attr">data</span>: <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>,<br>   &#125;;<br>  &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="162"><li>完善一下<code>index.js</code>，支持<code>body</code>参数的获取</li></ol><p><img src="/img/images/2024/1710076254112-11e55663-583d-470c-b082-40ebc5292bfe.png"></p><ol start="163"><li>重新启动下后端项目，然后用<code>postman</code>调用下，正常 ok 了</li></ol><p><img src="/img/images/2024/1710076322063-b154c016-2d09-4d0c-a54e-c380e2bd3d10.png"><img src="/img/images/2024/1710076310443-0eeaf24f-6b16-4cd0-be06-b9d181c8388c.png"></p><ol start="164"><li>然后拿着这个 token，去调用其他接口</li></ol><p><img src="/img/images/2024/1710076707645-b1bac10a-ad7c-47e1-be03-96c3822653b7.png"><br><img src="/img/images/2024/1710076716959-1c6e73fd-bf72-47dc-a7eb-c8c492a884a5.png"></p><h1 id="7、埋点实现（react-master-下）"><a href="#7、埋点实现（react-master-下）" class="headerlink" title="7、埋点实现（react-master 下）"></a>7、埋点实现（react-master 下）</h1><ol start="165"><li>新建目录</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir src/utils/lib &amp;&amp; touch src/utils/lib/track.<span class="hljs-property">ts</span> &amp;&amp; touch src/utils/lib/<span class="hljs-keyword">async</span>-track-queue.<span class="hljs-property">ts</span><br></code></pre></td></tr></table></figure><ol start="166"><li>安装依赖<code>pnpm add lodash</code></li><li><code>src/utils/lib/track.ts</code>编码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 这个是埋点 API</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AsyncTrackQueue</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./async-track-queue&quot;</span>;<br><br><span class="hljs-keyword">export</span> interface <span class="hljs-title class_">TrackQueue</span> &#123;<br> <span class="hljs-attr">seqId</span>: number;<br> <span class="hljs-attr">id</span>: number;<br> <span class="hljs-attr">timestamp</span>: number;<br>&#125;<br><br><span class="hljs-keyword">export</span> interface <span class="hljs-title class_">UserTrackData</span> &#123;<br> <span class="hljs-attr">type</span>: string;<br> <span class="hljs-attr">data</span>: any;<br>&#125;<br><br><span class="hljs-comment">// 思考 1：每次调用时是否立马发起请求？</span><br><span class="hljs-comment">// 答案 1：不一定，比如滚动了页面，那可能存在几十个埋点请求，所以应该先收集一波，然后统一发送。这样服务器的 QPS 会减少</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseTrack</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">AsyncTrackQueue</span>&lt;<span class="hljs-title class_">TrackQueue</span>&gt; &#123;<br> private seq = <span class="hljs-number">0</span>;<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 埋点请求收集</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> data 用户轨迹数据</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-title function_">track</span>(<span class="hljs-params">data: UserTrackData</span>) &#123;<br>  <span class="hljs-comment">// 埋点请求收集</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addTask</span>(&#123;<br>   <span class="hljs-attr">id</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(),<br>   <span class="hljs-attr">seqId</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">seq</span>++,<br>   <span class="hljs-attr">timestamp</span>: <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>(),<br>   ...data,<br>  &#125;);<br> &#125;<br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 消费埋点请求任务队列</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> data 任务队列数据，类型为任意类型数组</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@returns</span> 返回一个 Promise，当 img 标签加载完成后 resolve 为 true</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-title function_">comsumeTaskQuene</span>(<span class="hljs-params">data: <span class="hljs-built_in">Array</span>&lt;TrackQueue&gt;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>   <span class="hljs-comment">// 通过构建一个 img 标签，然后设置 src 属性，来发送请求</span><br>   <span class="hljs-keyword">const</span> image = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>   image.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;http://localhost:3001/track?data=&quot;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data);<br><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ comsumeTaskQuene data ] &gt;&quot;</span>, data);<br><br>   image.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>);<br>   &#125;;<br>  &#125;);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="168"><li><code>src/utils/lib/sync-track-queue.ts</code>编码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 第二层：AsyncTrackQueue 是专门处理收集工作的</span><br><br><span class="hljs-keyword">import</span> &#123; debounce &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;lodash&quot;</span>;<br><br>interface <span class="hljs-title class_">RequiredData</span> &#123;<br> <span class="hljs-attr">timestamp</span>: number | string;<br>&#125;<br><br><span class="hljs-comment">// 思考 2：如何收集？收集多少？怎么发请求？</span><br><span class="hljs-keyword">export</span> abstract <span class="hljs-keyword">class</span> <span class="hljs-title class_">AsyncTrackQueue</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RequiredData</span>&gt; &#123;<br> <span class="hljs-attr">_queueData</span>: <span class="hljs-title class_">Array</span>&lt;T&gt; = [];<br><br> <span class="hljs-comment">// 获取本次存储服务</span><br> private <span class="hljs-keyword">get</span> <span class="hljs-title function_">storageService</span>() &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">TaskQueueStorableHelper</span>.<span class="hljs-title function_">getInstance</span>();<br> &#125;<br><br> private <span class="hljs-keyword">get</span> <span class="hljs-title function_">queueData</span>(): <span class="hljs-title class_">Array</span>&lt;T&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">storageService</span>.<span class="hljs-property">queueData</span>;<br> &#125;<br><br> private <span class="hljs-keyword">set</span> <span class="hljs-title function_">queueData</span>(<span class="hljs-params">data: <span class="hljs-built_in">Array</span>&lt;T&gt;</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">storageService</span>.<span class="hljs-property">queueData</span> = data;<br><br>  <span class="hljs-keyword">if</span> (data.<span class="hljs-property">length</span>) &#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">debounceRun</span>();<br>  &#125;<br> &#125;<br><br> <span class="hljs-comment">// 添加任务</span><br> <span class="hljs-title function_">addTask</span>(<span class="hljs-params">data: T | <span class="hljs-built_in">Array</span>&lt;T&gt;</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">queueData</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">queueData</span>.<span class="hljs-title function_">concat</span>(data);<br> &#125;<br><br> <span class="hljs-comment">// 消费埋点请求任务队列，需要子类去实现</span><br> protected abstract <span class="hljs-title function_">comsumeTaskQuene</span>(<span class="hljs-attr">data</span>: <span class="hljs-title class_">Array</span>&lt;T&gt;): <span class="hljs-title class_">Promise</span>&lt;unknown&gt;;<br><br> <span class="hljs-comment">// 上报策略：当一段时间内，没有新增的任务时，可以去上报一波</span><br> <span class="hljs-comment">// 通过 debounce 防抖，来控制上报频率</span><br> protected debounceRun = <span class="hljs-title function_">debounce</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">run</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), <span class="hljs-number">500</span>);<br><br> private <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> currentDataList = <span class="hljs-variable language_">this</span>.<span class="hljs-property">queueData</span>;<br><br>  <span class="hljs-keyword">if</span> (currentDataList.<span class="hljs-property">length</span>) &#123;<br>   <span class="hljs-comment">// 清空任务</span><br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">queueData</span> = [];<br>   <span class="hljs-comment">// 执行任务</span><br>   <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">comsumeTaskQuene</span>(currentDataList);<br>  &#125;<br> &#125;<br>&#125;<br><br><span class="hljs-comment">// 思考 3：当还有数据未上报时，用户关闭了浏览器，那就会丢失一部分待上报的埋点数据，如何解决这个问题？</span><br><span class="hljs-comment">// 答案 3：使用 localStorage 存储，当用户关闭浏览器时，将数据存到 localStorage 中，下次打开浏览器时，再从 localStorage 中读取数据上报</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskQueueStorableHelper</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RequiredData</span> = any&gt; &#123;<br> <span class="hljs-comment">// 一个单例模式</span><br><br> private <span class="hljs-keyword">static</span> <span class="hljs-attr">instance</span>: <span class="hljs-title class_">TaskQueueStorableHelper</span> | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br><br> <span class="hljs-keyword">static</span> getInstance&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RequiredData</span> = any&gt;() &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>) &#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskQueueStorableHelper</span>();<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>;<br> &#125;<br><br> private <span class="hljs-variable constant_">STORAGE_KEY</span> = <span class="hljs-string">&quot;track-queue&quot;</span>;<br><br> protected <span class="hljs-attr">store</span>: any = <span class="hljs-literal">null</span>;<br><br> <span class="hljs-comment">// 打开浏览器时，是要执行 constructor</span><br> <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> localStorageVal = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">STORAGE_KEY</span>);<br><br>  <span class="hljs-keyword">if</span> (localStorageVal) &#123;<br>   <span class="hljs-comment">// 说明有待上报的数据，则存储一些</span><br>   <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">store</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(localStorageVal);<br>   &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-attr">error</span>: any) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(error);<br>   &#125;<br>  &#125;<br> &#125;<br><br> <span class="hljs-keyword">get</span> <span class="hljs-title function_">queueData</span>() &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">store</span>?.<span class="hljs-property">queueData</span> || [];<br> &#125;<br><br> <span class="hljs-keyword">set</span> <span class="hljs-title function_">queueData</span>(<span class="hljs-params">data: <span class="hljs-built_in">Array</span>&lt;T&gt;</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">store</span> = &#123;<br>   ...<span class="hljs-variable language_">this</span>.<span class="hljs-property">store</span>,<br>   <span class="hljs-attr">queueData</span>: data.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> <span class="hljs-title class_">Number</span>(a.<span class="hljs-property">timestamp</span>) - <span class="hljs-title class_">Number</span>(b.<span class="hljs-property">timestamp</span>)),<br>  &#125;;<br><br>  <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">STORAGE_KEY</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">store</span>));<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="169"><li>新建上报文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch src/utils/lib/apis.<span class="hljs-property">ts</span><br></code></pre></td></tr></table></figure><ol start="170"><li><code>src/utils/lib/apis.ts</code>编码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BaseTrack</span>, <span class="hljs-title class_">UserTrackData</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./track&quot;</span>;<br><br><span class="hljs-comment">// 性能上报</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Performance</span> &#123;<br> <span class="hljs-keyword">static</span> readonly timing = <span class="hljs-variable language_">window</span>.<span class="hljs-property">performance</span> &amp;&amp; <span class="hljs-variable language_">window</span>.<span class="hljs-property">performance</span>.<span class="hljs-property">timing</span>;<br><br> <span class="hljs-keyword">static</span> <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">timing</span>) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&quot;performance is not support&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;load&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>   <span class="hljs-keyword">const</span> data = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getTiming</span>();<br><br>   <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseTrack</span>().<span class="hljs-title function_">track</span>(data);<br>  &#125;);<br> &#125;<br> <span class="hljs-keyword">static</span> <span class="hljs-title function_">getTiming</span>(): <span class="hljs-title class_">UserTrackData</span> &#123;<br>  <span class="hljs-keyword">const</span> timing = <span class="hljs-variable language_">this</span>.<span class="hljs-property">timing</span>;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>   <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;performance&quot;</span>,<br>   <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">loadTime</span>: timing.<span class="hljs-property">loadEventEnd</span> - timing.<span class="hljs-property">navigationStart</span>,<br>    <span class="hljs-attr">domReadyTime</span>: timing.<span class="hljs-property">domComplete</span> - timing.<span class="hljs-property">domLoading</span>,<br>    <span class="hljs-attr">readyTime</span>: timing.<span class="hljs-property">domContentLoadedEventEnd</span> - timing.<span class="hljs-property">navigationStart</span>,<br>    <span class="hljs-attr">requestTime</span>: timing.<span class="hljs-property">responseEnd</span> - timing.<span class="hljs-property">requestStart</span>,<br>   &#125;,<br>  &#125;;<br> &#125;<br>&#125;<br><span class="hljs-comment">// 主动上报</span><br><span class="hljs-keyword">const</span> t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseTrack</span>();<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> sendLog = &lt;T&gt;<span class="hljs-function">(<span class="hljs-params">data: T</span>) =&gt;</span> &#123;<br> t.<span class="hljs-title function_">track</span>(data <span class="hljs-keyword">as</span> T &amp; <span class="hljs-title class_">UserTrackData</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="171"><li>找个地方使用下上报的，我在<code>react-master/src/pages/home/commandList/index.tsx</code>里面调用</li></ol><p><img src="/img/images/2024/1710082698618-8b51e012-68fa-47cb-ba4b-342bbc4acc69.png"></p><ol start="172"><li>再找个地方使用下上报的，我在<code>react-master/src/app.tsx</code>里面调用</li></ol><p><img src="/img/images/2024/1710084691663-dc9ce24f-8ef3-4a25-994e-25d3735e32f3.png"><br><img src="/img/images/2024/1710084719595-0e30c53c-ddc1-4390-974f-2f1f47881ac8.png"></p><h1 id="8、总结"><a href="#8、总结" class="headerlink" title="8、总结"></a>8、总结</h1><p>本篇文章从项目搭建开始讲解，讲了前端 React 项目的环境搭建：Webpack 配置、Babel 配置等一系列真实开发可用的；然后手动搭建 React 的路由体系，并使用 tailwindcss 仿照知乎进行了代码书写；最后讲了一些业务“亮点”：use* API 的封装、极致的本地存储工具</p><p>之后深入组件库领域，基于 Rollup 自己搭建了一套构建逻辑</p><p>之后了解了前端微内核架构，并手写了 Webpack、Babel、postcss 插件</p><p>之后进入后端领域，基于 koa 手撸了一套装饰器模式的“MVC”架构，并且自己处理了项目打包，写了具有代表意义的登录鉴权的接口（其他接口自然也会了）</p><p>最后讲了前端埋点的一种实现方式，采用“分层设计”，讲了埋点收集、本地存储、埋点上报等逻辑</p><p>所以以上的内容，有很多是可以作为“亮点”去包装一下的</p><p>本项目的代码已全部上传 github：<a href="https://github.com/MrHzq/react-actual-combat">https://github.com/MrHzq/react-actual-combat</a></p><h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="什么是亮点？"><a href="#什么是亮点？" class="headerlink" title="什么是亮点？"></a>什么是亮点？</h2><blockquote><p>具备一定的思考、技术难度、并实际解决了关键问题的事情</p></blockquote><p>符合下面三个之一的可以称为“亮点”</p><ul><li>基于业务，封装公共能力，解决业务中的标准问题，并推广使用。<ul><li>为什么要封装？具体解决了什么问题？如何实现推广的？</li></ul></li><li>基于工程化手段，解决流程或研发问题<ul><li>比如：自研 Webpack 插件，解决 xxx 问题；提供 cli 脚手架解决项目创建问题等</li></ul></li><li>创造性的弄了一个东西(这个行业之前没有的)，并解决了某个问题</li></ul><p>若是：基于 axios、vueRouter、防抖、节流封装 xxx 组件，这种已经不算什么亮点了。</p><h2 id="构建知识"><a href="#构建知识" class="headerlink" title="构建知识"></a>构建知识</h2><p>在 Webpack 的前端项目中，我们一般如下引入依赖</p><blockquote><p>import A from “A”;<br>const A &#x3D; require(“A”);<br>那为什么可以这样写？为什么这两个写法都行？require 不是 node 端的写法吗？</p></blockquote><p>解答：是构建工具来决定你的语法，你在 Webpack 里面这样写，这里的 import、require 与 esm、cjs 没有任何的关系，这样写为了让你写的更方便、好记，并且也是沿用了大家熟悉的 esm、cjs 规范写法。</p><p>Webpack 的本质就是“翻译”，从你写的入口文件开始，找到所有的文件，每个不同类型的文件使用对应的“语言包”进行翻译，最后只输出一篇浏览器能看懂的文章。<br>常见“语言包”：less 翻译为 css、react 翻译为 js、图片地址(.&#x2F;xx.png)翻译为最终的地址((.&#x2F;public&#x2F;img&#x2F;xx.png).</p><p>所以 Webpack 强大在于插件，你需要特定翻译什么，就可以自己去开发对应的语言包，装到 Webpack 上就能用</p><p>一般 Webpack 的产物为：.html、.js、.css，用 html 去 script 加载 js，用 link 加载 css</p><h2 id="React-的闭包陷阱"><a href="#React-的闭包陷阱" class="headerlink" title="React 的闭包陷阱"></a>React 的闭包陷阱</h2><p><a href="https://juejin.cn/post/6844904193044512782?from=search-suggest">从 react hooks“闭包陷阱”切入，浅谈 react hooks - 掘金</a></p><h2 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h2><p>流派划分：连接主义、符号主义<br>连接主义：吸收到新知识时，会用老的知识去连接它，让新知识不那么容易遗忘<br>符号主义：通过自己的逻辑，将新知识变大，这样也不容易遗忘<br><img src="/img/images/2024/1709990631939-8eb470df-242f-4e74-b0e1-3325dbcd3f0c.jpeg"><br>如何连接？<br><strong>输出：找别人讨论、写文章、教别人等等（费曼技巧）。</strong><br>在这个过程中，你会用你熟悉的知识(大球)去解释它(小球)</p><p>如何变大？<br><strong>总结：将关键词记下来，确保看到这几个关键词后就能解释清楚</strong><br>并且在不同的场合都温习一下（通勤、吃饭等）</p><blockquote><p>当你看到一个知识时，脑海有印象但就是想不起来，则说明这个知识正在和你的老知识在连接，但就还差一些。所以就立马去看，把连接建立起来</p></blockquote><p>结合运用：将新知识总结出关键词，自己能通过关键词解释清楚，让知识变大，然后去输出，用自己的语言描述一边，建立连接，最后时常温习关键词，记不清楚了则立马去看。</p><p>这样脑海里面的知识才能形成体系，否则只能死记硬背。</p><h2 id="如何串行-Promise？"><a href="#如何串行-Promise？" class="headerlink" title="如何串行 Promise？"></a>如何串行 Promise？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">PromiseArray</span> = [<br> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>),<br> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">2</span>),<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-number">3</span>), <span class="hljs-number">1000</span>)),<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-number">4</span>), <span class="hljs-number">2000</span>)),<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-number">5</span>), <span class="hljs-number">1000</span>)),<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-number">6</span>), <span class="hljs-number">1000</span>)),<br>];<br><br><span class="hljs-comment">// ⭐️ 核心代码在这</span><br><span class="hljs-keyword">const</span> lastPromise = <span class="hljs-title class_">PromiseArray</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, next</span>) =&gt;</span><br> prev.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ prev promise res ] &gt;&quot;</span>, res);<br>  <span class="hljs-keyword">return</span> next;<br> &#125;),<br>);<br><br><span class="hljs-comment">// 最后一个的结果，需要等待所有 promise 都执行完然后自行 then</span><br>lastPromise.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ last promise res ] &gt;&quot;</span>, res);<br>&#125;);<br><br><span class="hljs-comment">// 打印结果</span><br>[ prev promise res ] &gt; <span class="hljs-number">1</span><br>[ prev promise res ] &gt; <span class="hljs-number">2</span><br>[ prev promise res ] &gt; <span class="hljs-number">3</span><br>[ prev promise res ] &gt; <span class="hljs-number">4</span><br>[ prev promise res ] &gt; <span class="hljs-number">5</span><br>[ last promise res ] &gt; <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4-6、RN 入门与实战</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/4-6%E3%80%81RN%20%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E6%88%98/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/4-6%E3%80%81RN%20%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>期望这篇 RN 文章，能给你的 React、跨端、底层带来一些提升</p><h1 id="移动端演进"><a href="#移动端演进" class="headerlink" title="移动端演进"></a>移动端演进</h1><h2 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h2><p>浏览器 APP，直接打开 HTML</p><h2 id="第二阶段：hybrid-方案"><a href="#第二阶段：hybrid-方案" class="headerlink" title="第二阶段：hybrid 方案"></a>第二阶段：hybrid 方案</h2><p>原生 APP，使用 WebView(嵌入式浏览器) 打开 HTML，采用 JSBridge 与 APP 通信。<br>本质还是写 HTML+CSS+JS，只是在 APP 的内嵌浏览器中打开而已，借用的浏览器实现代码的执行与页面渲染<br>WebView：性能差，启动慢</p><h2 id="第三阶段：RN"><a href="#第三阶段：RN" class="headerlink" title="第三阶段：RN"></a>第三阶段：RN</h2><p>本质还是写 HTML+CSS+JS（用 React 库写）<br>但没有 WebView 了，那写出来的 JS 如何执行呢？页面如何渲染呢？<br>RN 提供了 JS 引擎：JSCore(Safari 浏览器)，去解析执行所写的 JS 代码。<br>RN 提供了 渲染 引擎：根据宿主环境生成原生的 UI<br>tips：在 Web 端，React 是通过 react-dom 库调用<code>document.createElement()</code>，生成浏览器所能识别的 DOM<br>所以 RN 本质也是这样的，还是通过 react-dom 库，调用 JS 方法<code>UIManager.createView()</code>，生成了面向宿主环境的渲染代码，最终实现渲染。</p><p>优点：复用 React 的 diff、reconcile，只需要改最后的原生代码的生成<br>缺点：在运行时跟 native 通信，采用的异步消息，那连续的手势操作可能会卡顿，并且消息本身还需要序列化则耗时，而且消息多了会阻塞</p><h1 id="RN-知识体系"><a href="#RN-知识体系" class="headerlink" title="RN 知识体系"></a>RN 知识体系</h1><p><img src="/img/images/2024/1708344194687-7bbb07f8-3599-4002-b76d-89441cb8bb3d.jpeg"></p><p>结论：<br>RN 还是借用了 React 的 diff、reconcile 处理更新逻辑（RN 源码仓库里面直接 CV 了一份 React 相关代码）<br>但 RN 的核心是用另一套逻辑去生成原生可渲染代码（这也是跟 React 源码上的区别）</p><h1 id="RN-Demo-实战"><a href="#RN-Demo-实战" class="headerlink" title="RN Demo 实战"></a>RN Demo 实战</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="原生-metro-环境"><a href="#原生-metro-环境" class="headerlink" title="原生 metro 环境"></a>原生 metro 环境</h3><p>Facebook 出品的打包工具，类似于 Webpack<br>需要启动对应的项目进行开发，比如：xcode、Android studio 等</p><h3 id="沙箱环境-expo"><a href="#沙箱环境-expo" class="headerlink" title="沙箱环境 expo"></a>沙箱环境 expo</h3><p>社区提供了 expo-cli，expo 需要注册一下的，用它能简化开发流程</p><p>安装：<code>npm i expo-cli -g</code></p><p>初始化项目：<br>旧命令<code>expo init yourProjectName</code><br>新命令<code>expo createexpo-app yourProjectName</code><br>选择第一个：创建空项目</p><p>启动：<code>cd yourProjectName &amp;&amp; npm i &amp;&amp; npm start</code> ，会生成一个二维码<br><img src="/img/images/2024/1708521155108-11262d24-c3b0-4b62-8a66-425e5856e399.png"></p><p>然后下载<code>Expo</code>app，可以在 GooglePlay(开启魔法)、iOS Store 内下载<br>下载后，安卓手机打开该 App，先登录注册下，然后点击扫码，扫描生成的二维码，就能看到页面</p><p>若想在浏览器查看，还需运行<code>npx expo install react-native-web react-dom @expo/metro-runtime</code><br>然后在命令行按<code>w</code>，就会用电脑默认浏览器打开项目，就跟开发 PC 端项目一样了</p><p>注意事项：我 mac 电脑启动项目时，竟然要开启魔法~，但<code>Expo</code>app 扫描时手机不需要魔法</p><h2 id="RN-常见的特性与坑点"><a href="#RN-常见的特性与坑点" class="headerlink" title="RN 常见的特性与坑点"></a>RN 常见的特性与坑点</h2><ol><li>RN 没有<code>&lt;div /&gt;</code>只有自己的标签，常见的为：<code>&lt;View /&gt;、&lt;Text /&gt;</code>可理解为<code>&lt;div /&gt;、&lt;span /&gt;</code>，但 RN 里面文本必须用<code>&lt;Text /&gt;</code>包裹，否则会报错</li><li>所有的布局默认为<code>flex</code>，所以不用显式声明<code>display: flex</code>，但 RN 里面<code>flex-direction</code>默认为<code>: column</code></li><li>需要滚动则要用<code>&lt;ScrollView /&gt;</code>包裹</li><li>像素：RN 里面的 CSS 像素是根据物理像素与 dpr 计算的，比如 dpr &#x3D; 2.75，物理像素宽为 1080，则 window.width &#x3D; 1080 &#x2F; 2.75 &#x3D; 392.72727</li><li>transform 写法有变：<code>transform: [&#123; rotate: &quot;45deg&quot; &#125;, &#123; scale: 1.5 &#125;]</code></li><li>表单使用 e.nativeEvent.text，不再是 e.target.value</li></ol><h2 id="开始实战"><a href="#开始实战" class="headerlink" title="开始实战"></a>开始实战</h2><p>先安装 VSCode 插件：</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=EQuimper.react-native-react-redux-snippets-for-es6-es7-version-standard">React-Native&#x2F;React&#x2F;Redux snippets for es6&#x2F;es7 version Standard</a></li></ul><h3 id="1、安装-UI-组件"><a href="#1、安装-UI-组件" class="headerlink" title="1、安装 UI 组件"></a>1、安装 UI 组件</h3><p>本次选择的是 <a href="https://rn.mobile.ant.design/docs/react/introduce-cn">RN antd</a></p><ol><li>安装对应依赖</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 安装</span><br>npm install @ant-design/react-native --save<br><br><span class="hljs-comment">// 2. 安装字体图标</span><br>npm install @ant-design/icons-react-native --save<br></code></pre></td></tr></table></figure><ol start="2"><li>如果你用的是 expo 请确保字体已经加载完成再初始化 app</li></ol><p>asyncLoadFont.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; loadAsync &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;expo-font&quot;</span>;<br><br><span class="hljs-comment">// 处理字体加载</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">asyncLoadFont</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>    <span class="hljs-title function_">loadAsync</span>(<br>      <span class="hljs-string">&quot;antoutline&quot;</span>,<br>      <span class="hljs-comment">// eslint-disable-next-line</span><br>      <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@ant-design/icons-react-native/fonts/antoutline.ttf&quot;</span>)<br>    ),<br>    <span class="hljs-title function_">loadAsync</span>(<br>      <span class="hljs-string">&quot;antfill&quot;</span>,<br>      <span class="hljs-comment">// eslint-disable-next-line</span><br>      <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@ant-design/icons-react-native/fonts/antfill.ttf&quot;</span>)<br>    ),<br>  ]);<br>&#125;;<br></code></pre></td></tr></table></figure><p>App.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">StatusBar</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;expo-status-bar&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">StyleSheet</span>, <span class="hljs-title class_">Text</span>, <span class="hljs-title class_">View</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-native&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; asyncLoadFont &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./asyncLoadFont&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isFontLoaded, setIsFontLoaded] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">asyncLoadFont</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// setTimeout 用来模拟加载，自己看效果的，可删除</span><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">setIsFontLoaded</span>(<span class="hljs-literal">true</span>);<br>      &#125;, <span class="hljs-number">5000</span>);<br>    &#125;);<br>  &#125;, []);<br><br>  <span class="hljs-keyword">if</span> (!isFontLoaded) &#123;<br>    <span class="hljs-comment">// 字体未加载完毕时，显示 loading</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>Open up App.js to start working on your app!<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">StatusBar</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;auto&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">const</span> styles = <span class="hljs-title class_">StyleSheet</span>.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">container</span>: &#123;<br>    <span class="hljs-attr">flex</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;#fff&quot;</span>,<br>    <span class="hljs-attr">alignItems</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>    <span class="hljs-attr">justifyContent</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="3"><li>使用组件</li></ol><p>App.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">StatusBar</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;expo-status-bar&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">StyleSheet</span>, <span class="hljs-title class_">Text</span>, <span class="hljs-title class_">View</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-native&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; asyncLoadFont &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./asyncLoadFont&quot;</span>;<br><br><span class="hljs-comment">// 手动引入 button 组件，可安装文档改为按需引入</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@ant-design/react-native/lib/button&quot;</span>; <span class="hljs-comment">// +++</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isFontLoaded, setIsFontLoaded] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">asyncLoadFont</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// setTimeout 用来模拟加载，自己看效果的，可删除</span><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">setIsFontLoaded</span>(<span class="hljs-literal">true</span>);<br>      &#125;, <span class="hljs-number">5000</span>);<br>    &#125;);<br>  &#125;, []);<br><br>  <span class="hljs-keyword">if</span> (!isFontLoaded) &#123;<br>    <span class="hljs-comment">// 字体未加载完毕时，显示 loading</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>Open up App.js to start working on your app!<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      // 使用 Button 组件</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginTop:</span> <span class="hljs-attr">10</span> &#125;&#125;&gt;</span> // +++</span><br><span class="language-xml">        primary // +++</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span> // +++</span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">StatusBar</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;auto&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">const</span> styles = <span class="hljs-title class_">StyleSheet</span>.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">container</span>: &#123;<br>    <span class="hljs-attr">flex</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;#fff&quot;</span>,<br>    <span class="hljs-attr">alignItems</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>    <span class="hljs-attr">justifyContent</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="4"><li>效果如下：</li></ol><img src="/img/images/2024/1708532771922-7171d9e0-8b94-4173-bf19-04e12f920427.png" height="400" ><img src="/img/images/2024/1708532777205-d185d89e-8427-411c-a643-92b433779e58.png" height="400" ><p>补充：<a href="https://www.awesome-react-native.com/#Components-Ul">找 RN UI 组件的网站(不仅仅是 UI 组件哦)</a></p><h3 id="2、安装路由"><a href="#2、安装路由" class="headerlink" title="2、安装路由"></a>2、安装路由</h3><p>本次选择的是 <a href="https://github.com/react-community/react-navigation">react-navigation</a></p><ol><li>安装依赖</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install @react-navigation/native @react-navigation/native-stack react-native-screens react-native-safe-area-context @react-navigation/bottom-tabs<br></code></pre></td></tr></table></figure><ol start="2"><li>根目录新建文件夹，直接运行下面命令</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir -p src/navigation/<br>touch src/navigation/index.<span class="hljs-property">jsx</span><br></code></pre></td></tr></table></figure><ol start="3"><li>VSCode 编辑器打开刚创建的 .jsx，输入<code>rnfe</code>回车，然后函数命名为<code>Navigation</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">View</span>, <span class="hljs-title class_">Text</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-native&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Navigation</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>Navigation<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Navigation</span>;<br></code></pre></td></tr></table></figure><ol start="4"><li>App.js 导入该组件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">StatusBar</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;expo-status-bar&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">StyleSheet</span>, <span class="hljs-title class_">Text</span>, <span class="hljs-title class_">View</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-native&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; asyncLoadFont &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./asyncLoadFont&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@ant-design/react-native/lib/button&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Navigation</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/navigation&quot;</span>; <span class="hljs-comment">// +++</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isFontLoaded, setIsFontLoaded] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">asyncLoadFont</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">setIsFontLoaded</span>(<span class="hljs-literal">true</span>);<br>      &#125;, <span class="hljs-number">1000</span>);<br>    &#125;);<br>  &#125;, []);<br><br>  <span class="hljs-keyword">if</span> (!isFontLoaded) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigation</span> /&gt;</span></span> <span class="hljs-comment">// +++，其他的全部去掉</span><br>&#125;<br><br><span class="hljs-keyword">const</span> styles = <span class="hljs-title class_">StyleSheet</span>.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">container</span>: &#123;<br>    <span class="hljs-attr">flex</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;#fff&quot;</span>,<br>    <span class="hljs-attr">alignItems</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>    <span class="hljs-attr">justifyContent</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="5"><li>新建文件，作为首页展示</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir -p src/pages/home<br>touch src/pages/home/index.<span class="hljs-property">jsx</span><br></code></pre></td></tr></table></figure><ol start="6"><li>更改 src&#x2F;pages&#x2F;home&#x2F;index.jsx 文件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">View</span>, <span class="hljs-title class_">Text</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-native&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">alignItems:</span> &quot;<span class="hljs-attr">center</span>&quot;, <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;<br></code></pre></td></tr></table></figure><ol start="7"><li>更改 &#x2F;src&#x2F;navigation&#x2F;index.jsx 文件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NavigationContainer</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@react-navigation/native&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createNativeStackNavigator &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@react-navigation/native-stack&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/home&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Stack</span> = <span class="hljs-title function_">createNativeStackNavigator</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">RootStackNavigation</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Stack.Navigator</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Stack.Screen</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Stack.Navigator</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Navigation</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavigationContainer</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">RootStackNavigation</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavigationContainer</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Navigation</span>;<br></code></pre></td></tr></table></figure><ol start="8"><li><p>页面效果如下</p><img src="/img/images/2024/1708612510329-cf00d8e4-a13a-48f8-ae2f-437a9748aa09.png" height="400" ></li><li><p>新建文件，作为详情页展示</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mkdir -p src/pages/details<br>touch src/pages/details/index.<span class="hljs-property">jsx</span><br></code></pre></td></tr></table></figure><ol start="10"><li>更改 src&#x2F;pages&#x2F;details&#x2F;index.jsx 文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">View</span>, <span class="hljs-title class_">Text</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-native&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Details</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">alignItems:</span> &quot;<span class="hljs-attr">center</span>&quot;, <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>Details<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Details</span>;<br></code></pre></td></tr></table></figure><ol start="11"><li>更改 src&#x2F;pages&#x2F;home&#x2F;index.jsx 文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">View</span>, <span class="hljs-title class_">Text</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-native&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@ant-design/react-native/lib/button&quot;</span>; <span class="hljs-comment">// +++</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params">&#123; navigation &#125;</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>, <span class="hljs-attr">alignItems:</span> &quot;<span class="hljs-attr">center</span>&quot;, <span class="hljs-attr">justifyContent:</span> &quot;<span class="hljs-attr">center</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      // +++ 跳转按钮</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">onPress</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> navigation.navigate(&quot;Details&quot;)&#125;&gt;</span><br><span class="language-xml">        Go to Details</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;<br></code></pre></td></tr></table></figure><ol start="12"><li>更改 &#x2F;src&#x2F;navigation&#x2F;index.jsx 文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NavigationContainer</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@react-navigation/native&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createNativeStackNavigator &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@react-navigation/native-stack&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/home&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Details</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/details&quot;</span>; <span class="hljs-comment">// +++</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Stack</span> = <span class="hljs-title function_">createNativeStackNavigator</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">RootStackNavigation</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Stack.Navigator</span> <span class="hljs-attr">initialRouteName</span>=<span class="hljs-string">&quot;Home&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Stack.Screen</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Stack.Screen</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Details&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Details&#125;</span> /&gt;</span> // +++</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Stack.Navigator</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Navigation</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavigationContainer</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">RootStackNavigation</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavigationContainer</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Navigation</span>;<br></code></pre></td></tr></table></figure><ol start="13"><li>效果如下</li></ol><img src="/img/images/2024/1708614539038-0732ed06-9bd2-45dd-b194-802ec56867cf.png" height="400" ><p>更多路由操作看<a href="https://reactnavigation.org/docs/navigating">官方文档</a></p><h3 id="3、下面讲一下完整的页面布局代码"><a href="#3、下面讲一下完整的页面布局代码" class="headerlink" title="3、下面讲一下完整的页面布局代码"></a>3、下面讲一下完整的页面布局代码</h3><ol><li>更改 src&#x2F;navigation&#x2F;index.jsx 文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NavigationContainer</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@react-navigation/native&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createNativeStackNavigator &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@react-navigation/native-stack&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createBottomTabNavigator &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@react-navigation/bottom-tabs&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Icon</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@ant-design/react-native/lib/icon&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/home&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Search</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/search&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Details</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/details&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Setting</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/setting&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Profile</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/profile&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/user&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">SettingPageStack</span> = <span class="hljs-title function_">createNativeStackNavigator</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">SettingPage</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SettingPageStack.Navigator</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">SettingPageStack.Screen</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Setting&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Setting&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">options</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">title:</span> &quot;<span class="hljs-attr">设置</span>&quot; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">SettingPageStack.Screen</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Profile&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Profile&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">options</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">title:</span> &quot;<span class="hljs-attr">个人信息</span>&quot; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">SettingPageStack.Navigator</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HomePageStack</span> = <span class="hljs-title function_">createNativeStackNavigator</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">HomePage</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HomePageStack.Navigator</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HomePageStack.Screen</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Home&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">options</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">title:</span> &quot;<span class="hljs-attr">首页</span>&quot; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">HomePageStack.Screen</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Details&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Details&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">options</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">title:</span> &quot;<span class="hljs-attr">详情</span>&quot; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">HomePageStack.Navigator</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">TabStack</span> = <span class="hljs-title function_">createBottomTabNavigator</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Tab</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TabStack.Navigator</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TabStack.Screen</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;TabHome&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;HomePage&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">options</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">title:</span> &quot;<span class="hljs-attr">首页</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">headerShown:</span> <span class="hljs-attr">false</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">tabBarIcon:</span> (&#123; <span class="hljs-attr">color</span> &#125;) =&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;home&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;color&#125;</span> /&gt;</span>,</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TabStack.Screen</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;TabSetting&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;SettingPage&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">options</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">title:</span> &quot;<span class="hljs-attr">设置</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">headerShown:</span> <span class="hljs-attr">false</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">tabBarIcon:</span> (&#123; <span class="hljs-attr">color</span> &#125;) =&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;setting&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;color&#125;</span> /&gt;</span>,</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TabStack.Screen</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;TabUser&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;User&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">options</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">title:</span> &quot;<span class="hljs-attr">我的</span>&quot;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">tabBarIcon:</span> (&#123; <span class="hljs-attr">color</span> &#125;) =&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;color&#125;</span> /&gt;</span>,</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TabStack.Navigator</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">RootStack</span> = <span class="hljs-title function_">createNativeStackNavigator</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">RootStackNavigation</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RootStack.Navigator</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">RootStack.Screen</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Tab&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Tab&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">options</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">headerShown:</span> <span class="hljs-attr">false</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">RootStack.Screen</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Search&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Search&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">RootStack.Navigator</span>&gt;</span></span><br>  );<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Navigation</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavigationContainer</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">RootStackNavigation</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">NavigationContainer</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Navigation</span>;<br></code></pre></td></tr></table></figure><ol start="2"><li>新增 src&#x2F;pages&#x2F;setting&#x2F;index.jsx、src&#x2F;pages&#x2F;profile&#x2F;index.jsx、src&#x2F;pages&#x2F;search&#x2F;index.jsx、src&#x2F;pages&#x2F;user&#x2F;index.jsx 文件，内容自己随便填</li><li>效果如下：</li></ol><img src="/img/images/2024/1708618590557-b832ebb4-12f9-463b-934c-478e27e82a75.png" height="400" ><img src="/img/images/2024/1708618594433-a67b82c1-31c3-4b73-9776-d1526194bf66.png" height="400" ><img src="/img/images/2024/1708618598624-68aec573-816d-4e4a-8148-dcd414a41ecb.png" height="400" ><h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="WebView-是什么？"><a href="#WebView-是什么？" class="headerlink" title="WebView 是什么？"></a>WebView 是什么？</h2><p>一种在 APP 内嵌入浏览器引擎的组件<br>Android 与 IOS 都提供了 WebView 组件</p><h2 id="JSBridge-是什么？"><a href="#JSBridge-是什么？" class="headerlink" title="JSBridge 是什么？"></a>JSBridge 是什么？</h2><p>一种 JS 与原生通信的技术，包括调用原生方法传递数据、获取返回结果等操作。<br>WebView 组件自带实现了一些 JSBridge。<br>各个跨端框架都有自己的 JSBridge。</p><h2 id="npm-dedupe"><a href="#npm-dedupe" class="headerlink" title="npm dedupe"></a>npm dedupe</h2><p>作用：简化依赖树，解决幽灵依赖<br>描述：搜索本地包树并尝试通过将依赖关系向上移动树来简化整体结构，在那里它们可以被多个依赖包更有效地共享。<br>场景：A 包依赖 B 包，C 包也依赖 B 包，于是存在安装了两个 B 包的情况。而当 A、C 两个包依赖的 B 包版本是同一版本时，实际只需要安装 1 个 B 包。则可以运行<code>npm dedupe</code>来简化依赖<br>例子：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs tsx">原始依赖图如下<br>a<br>+--b &lt;-- depends on c@<span class="hljs-number">1.0</span>.<span class="hljs-property">x</span><br>  -- c@<span class="hljs-number">1.0</span><span class="hljs-number">.3</span><br>+--d &lt;-- depends on c@~<span class="hljs-number">1.0</span><span class="hljs-number">.9</span><br>  --c@<span class="hljs-number">1.0</span><span class="hljs-number">.10</span><br><br>b 依赖 c<br>d 依赖 c<br><br>运行 npm dedupe 后，依赖图如下<br><br>a<br>+-- b<br>+-- d<br>-- c@<span class="hljs-number">1.0</span><span class="hljs-number">.10</span><br><br>b 和 d 都将通过树的根级别的单个 c 包满足它们的依赖关系<br></code></pre></td></tr></table></figure><h2 id="大厂-P6、P7-的区别"><a href="#大厂-P6、P7-的区别" class="headerlink" title="大厂 P6、P7 的区别"></a>大厂 P6、P7 的区别</h2><ul><li>技术无关性<ul><li>框架：handler 后如何触发 UI 的更新</li><li>路由：地址的变化后加载对应组件</li><li>状态管理：如何设计好观察者或发布订阅模式</li></ul></li><li>团队影响力<ul><li>做的东西，可成标准</li><li>跨团队领导力</li></ul></li><li>一杆到底<ul><li>精通某一个领域，领域内不存在问题</li></ul></li></ul><h2 id="个人能力图谱"><a href="#个人能力图谱" class="headerlink" title="个人能力图谱"></a>个人能力图谱</h2><p>最好拥有一个自己的个人能力图谱，类似如下：<br><img src="/img/images/2024/1708339042046-7ff41cb1-56b8-45fb-9d65-92487ae038c0.png"></p><h2 id="平时我们写的-JS-代码是用来干嘛的？谁来识别的？"><a href="#平时我们写的-JS-代码是用来干嘛的？谁来识别的？" class="headerlink" title="平时我们写的 JS 代码是用来干嘛的？谁来识别的？"></a>平时我们写的 JS 代码是用来干嘛的？谁来识别的？</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>) <span class="hljs-comment">// 在浏览器、node 都能执行</span><br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>) <span class="hljs-comment">// 只能在浏览器执行</span><br></code></pre></td></tr></table></figure><p>JS 代码本质是字符串，需要翻译。<br>谁来翻译？JS 引擎来翻译，解析(词法分析生成 tokens，再生成 AST 树) + 编译(翻译成中间代码或直接转换为机器代码)<br>谁来执行？宿主环境来执行，翻译成可执行的形式后，宿主环境来执行，并提供额外功能(DOM 操作、文件访问等)</p><p>所以 Web 开发本质是用 JS 去调用 DOM、BOM…<br>Node 开发本质是用 JS 去调用 磁盘、网卡…</p><h2 id="mac-下载配置-Android-Emulator"><a href="#mac-下载配置-Android-Emulator" class="headerlink" title="mac 下载配置 Android Emulator"></a>mac 下载配置 Android Emulator</h2><ol><li>点<a href="https://github.com/google/android-emulator-m1-preview/releases">这里</a>去下载 dmg 文件<img src="/img/images/2024/1708524036219-1e29b0e3-81cc-4972-9287-5939aa8eda7c.png"></li><li>下载后，双击打开，然后拖入应用程序内<img src="/img/images/2024/1708524213055-2d3530f8-7115-46f6-9d54-7f3be5736c77.png"></li><li>打开<img src="/img/images/2024/1708524306559-bbb8d830-b188-4b3d-bbbd-a94da27046d3.png"></li><li>打开会有个报错提示，大概意思是没有识别到 adb 程序。我们稍后就在 Settings 配置。<img src="/img/images/2024/1708524335908-73a07692-59e3-4ec4-b83a-4cc5f847e004.png"></li><li>安装 adb，可看下面的<a href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/4-6%E3%80%81RN%20%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E6%88%98/#%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-adb">《手动安装 adb》</a>教程</li><li>在 Android Emulator 内配置下<img src="/img/images/2024/1708524533889-f50ae3e1-472a-45b2-81da-23eb9d7cb0ae.png"><img src="/img/images/2024/1708524640675-0ea6c398-7392-48fb-ab16-dab31b1a8df3.png"></li><li>然后退出重启，就不会在报错了</li><li>安装 apk</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 进入 platform-tools 目录</span><br>cd /<span class="hljs-title class_">Users</span>/xx/platform-tools/<br><br><span class="hljs-comment">// 运行如下命令，install 后面的是你本地 apk 的完整存放路径</span><br>./adb install /<span class="hljs-title class_">Users</span>/xx/xx.<span class="hljs-property">apk</span><br><br><span class="hljs-comment">// 提示这个，表明安装成功</span><br><span class="hljs-title class_">Performing</span> <span class="hljs-title class_">Streamed</span> <span class="hljs-title class_">Install</span><br><span class="hljs-title class_">Success</span><br></code></pre></td></tr></table></figure><ol start="9"><li>找到应用<br><img src="/img/images/2024/1708526616604-3ab96eb2-98cd-4e52-9e31-cf54751c6796.png"></li></ol><h2 id="手动安装-adb"><a href="#手动安装-adb" class="headerlink" title="手动安装 adb"></a>手动安装 adb</h2><ol><li>点<a href="https://developer.android.com/tools/releases/platform-tools?hl=zh-cn">这里</a>去下载对应平台的 Platform-Tools<img src="/img/images/2024/1708523422969-c7d093b9-7fa3-4fe8-ba4f-3968fd4e4ea3.png"></li><li>下载后双击解压，生成<code>platform-tools</code>文件夹</li><li>打开命令行，运行下面的命令</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在根目录创建文件夹</span><br>mkdir ~/android-sdk-macosx<br><br><span class="hljs-comment">// 将解压后的文件夹移到刚创建的文件夹下（也可以自己鼠标拖动）</span><br>mv platform-tools/ ~<span class="hljs-regexp">/android-sdk-macosx/</span>platform-tools<br></code></pre></td></tr></table></figure><ol start="4"><li>添加 path 到环境变量中，命令行运行下面的命令</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">echo <span class="hljs-string">&#x27;export PATH=$PATH:~/android-sdk-macosx/platform-tools/&#x27;</span> &gt;&gt; ~/.<span class="hljs-property">bash_profile</span><br></code></pre></td></tr></table></figure><ol start="5"><li>重载 *_profile 文件，命令行运行下面的命令</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">source ~/.<span class="hljs-property">bash_profile</span><br></code></pre></td></tr></table></figure><ol start="6"><li>测试 adb 命令，命令行运行下面的命令</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">adb version<br></code></pre></td></tr></table></figure><ol start="7"><li>打印如下结果，则安装成功</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Android</span> <span class="hljs-title class_">Debug</span> <span class="hljs-title class_">Bridge</span> version <span class="hljs-number">1.0</span><span class="hljs-number">.41</span><br><span class="hljs-title class_">Version</span> <span class="hljs-number">35.0</span><span class="hljs-number">.0</span>-<span class="hljs-number">11411520</span><br><span class="hljs-title class_">Installed</span> <span class="hljs-keyword">as</span> /<span class="hljs-title class_">Users</span>/hzq/android-sdk-macosx/platform-tools<span class="hljs-comment">//adb</span><br><span class="hljs-title class_">Running</span> on <span class="hljs-title class_">Darwin</span> <span class="hljs-number">23.3</span><span class="hljs-number">.0</span> (arm64)<br></code></pre></td></tr></table></figure><h2 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h2><p>物理像素：设备屏幕的实际像素，不统一，跟设备本身有关<br>逻辑像素(CSS 像素)：浏览器计算布局用的虚拟像素，统一的<br>dpr(屏幕像素比) &#x3D; 物理像素 &#x2F; 逻辑像素，代表一个逻辑像素需要多少个物理像素来显示，所以 dpr 越高显示效果越好越细腻（前提是资源本身要跟上，比如 2 倍图）<br>举例：1 个 dpr 为 3 的设备，若 CSS 设置 width:200px，则占用的物理像素为 600 px</p><h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><p>30 天学 RN：<a href="https://github.com/fangwei716/30-days-of-react-native">https://github.com/fangwei716/30-days-of-react-native</a></p><p>一个比较大的 RN 实际项目：<a href="https://github.com/MarnoDev/react-native-eyepetizer">https://github.com/MarnoDev/react-native-eyepetizer</a></p><p>比较好的 RN 学习笔记：<a href="https://github.com/crazycodeboy/RNstudyNotes">https://github.com/crazycodeboy/RNstudyNotes</a></p>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4-5、React 源码解析</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/4-5%E3%80%81React%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/4-5%E3%80%81React%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>官方源码：<a href="https://github.com/facebook/react">https://github.com/facebook/react</a></p><p>预防针：看过 Vue 源码的正常，不看 React 源码的也正常，因为它非常复杂，未必能看懂，所以看懂一部分就行了。</p><p>看了 React 源码与写好 React 没啥关系。</p><p>这篇文章能带来的是：<strong>搞清楚 React 的工作流程，基于 React 的 17 版本源码</strong></p><h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;div&gt;<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> hello world <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123; text &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#123;<br>    list.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ChildItem</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&#123;item&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ChildItem</span>&gt;</span></span>)<br>  &#125;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>问题：list 数据改变时，怎么最快的判断出来如何更新？<br>答案：React 为了保持运行时的灵活性，<strong>一律采用从头(根节点)遍历，然后再跟之前的对比，把有区别的更新下</strong>。<br>疑问：那若有很多 HTML，React 就比较耗性能了吧？是的！<br>方案：后续 React 的版本就一直在解决这个问题。比如采用了 fiber、使用异步可中断更新策略等等。</p><h1 id="React-为什么要用-Fiber？"><a href="#React-为什么要用-Fiber？" class="headerlink" title="React 为什么要用 Fiber？"></a>React 为什么要用 Fiber？</h1><p>因为 React 采用的更新策略是<strong>从根节点递归遍历，然后再跟之前的对比，把有区别的更新下</strong><br>然后在 15 版本，采用的是 Stack Reconciler 同步更新机制，由于是同步的，则会存在阻塞，并且还不支持中断<br>在之后的版本，采用了 Fiber Reconciler 更新机制，支持异步可中断的遍历&#x2F;更新，若有优先级高的交互(输入、点击等)，则中断遍历&#x2F;更新，先去处理交互，再接着遍历&#x2F;更新</p><h1 id="React-大概的版本区别"><a href="#React-大概的版本区别" class="headerlink" title="React 大概的版本区别"></a>React 大概的版本区别</h1><ul><li>V15 版本，Stack Reconciler：同步更新机制</li><li>16.9 ~ 17.0.2 版本，Fiber Reconciler：异步可中断更新机制<ul><li>但在 17.0.2 里面只是先做了数据结构，但不稳定（可以理解为先吹了一波），有两个模式<ul><li>legacy 模式：可通过 createa 脚手架创建，有 Fiber 的结构，但不会中断，源码文件为 xxx.old.js</li><li>concurrent 模式：需要自己去编译，无法通过 create 脚手架创建，实现了中断，源码文件为 xxx.new.js</li></ul></li></ul></li><li>18 版本，可以理解为 concurrent 模式 ++</li></ul><h1 id="React-中的数据结构"><a href="#React-中的数据结构" class="headerlink" title="React 中的数据结构"></a>React 中的数据结构</h1><h2 id="v-dom-element"><a href="#v-dom-element" class="headerlink" title="v-dom &#x2F; element"></a>v-dom &#x2F; element</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-comment">// 经过 babel 编译后为：</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>, &#123; <span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;app&#x27;</span>&#125;,<br>    <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;h2&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;hello world&#x27;</span>),<br>    <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>, &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;list&#x27;</span> &#125;,<br>      <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;ul&#x27;</span>, <span class="hljs-literal">null</span>,<br>        <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;list 1&#x27;</span>),<br>        <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;list 2&#x27;</span>),<br>        <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;list 3&#x27;</span>)<br>      )<br>    )<br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>那<code>React.createElement</code>到底是个啥？源码地址：<a href="https://github.com/facebook/react/blob/3e58b0af0caebf5f1b507ce5f360c85cb57bf528/packages/react/src/ReactElementProd.js#L362">点这个</a><br>核心代码：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ReactElement</span>(<span class="hljs-params"><span class="hljs-keyword">type</span>, key, ref, self, source, owner, props</span>) &#123;<br>  <span class="hljs-keyword">const</span> element = &#123;<br>    <span class="hljs-comment">// This tag allows us to uniquely identify this as a React Element</span><br>    <span class="hljs-attr">$$typeof</span>: <span class="hljs-variable constant_">REACT_ELEMENT_TYPE</span>,<br><br>    <span class="hljs-comment">// Built-in properties that belong on the element</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-keyword">type</span>,<br>    <span class="hljs-attr">key</span>: key,<br>    <span class="hljs-attr">ref</span>: ref,<br>    <span class="hljs-attr">props</span>: props,<br><br>    <span class="hljs-comment">// Record the component responsible for creating this element.</span><br>    <span class="hljs-attr">_owner</span>: owner,<br>  &#125;;<br><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">return</span> element;<br>&#125;<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-params"><span class="hljs-keyword">type</span>, config, children</span>) &#123;<br>  <span class="hljs-keyword">let</span> propName;<br><br>  <span class="hljs-keyword">const</span> props = &#123;&#125;;<br><br>  <span class="hljs-comment">// ⭐️ 将 config 的值放入 props 中</span><br>  <span class="hljs-keyword">if</span> (config != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-keyword">for</span> (propName <span class="hljs-keyword">in</span> config) &#123;<br>      <span class="hljs-keyword">if</span> (<br>        hasOwnProperty.<span class="hljs-title function_">call</span>(config, propName) &amp;&amp;<br>        !<span class="hljs-variable constant_">RESERVED_PROPS</span>.<span class="hljs-title function_">hasOwnProperty</span>(propName)<br>      ) &#123;<br>        props[propName] = config[propName];<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// ⭐️ 将 children 的值放入 props.children 中</span><br>  <span class="hljs-keyword">const</span> childrenLength = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> - <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">if</span> (childrenLength === <span class="hljs-number">1</span>) &#123;<br>    props.<span class="hljs-property">children</span> = children;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (childrenLength &gt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">const</span> childArray = <span class="hljs-title class_">Array</span>(childrenLength);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; childrenLength; i++) &#123;<br>      childArray[i] = <span class="hljs-variable language_">arguments</span>[i + <span class="hljs-number">2</span>];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (__DEV__) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-property">freeze</span>) &#123;<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(childArray);<br>      &#125;<br>    &#125;<br>    props.<span class="hljs-property">children</span> = childArray;<br>  &#125;<br><br> <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">ReactElement</span>(<br>    <span class="hljs-keyword">type</span>,<br>    key,<br>    ref,<br>    self,<br>    source,<br>    <span class="hljs-title class_">ReactCurrentOwner</span>.<span class="hljs-property">current</span>,<br>    props,<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>通过上述的<code>React.createElement</code>源码可得如下结构(vDom)：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>, &#123; <span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;app&#x27;</span>&#125;,<br>    <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;h2&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;hello world&#x27;</span>),<br>    <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>, &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;list&#x27;</span> &#125;,<br>      <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;ul&#x27;</span>, <span class="hljs-literal">null</span>,<br>        <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;list 1&#x27;</span>),<br>        <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;list 2&#x27;</span>),<br>        <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;list 3&#x27;</span>)<br>      )<br>    )<br>  )<br>&#125;<br><br><span class="hljs-comment">// 得出如下结构（简版）</span><br><span class="hljs-keyword">const</span> vDom = &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;div&quot;</span>,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;app&quot;</span>,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;h2&quot;</span>,<br>        <span class="hljs-attr">props</span>: &#123; <span class="hljs-attr">children</span>: <span class="hljs-string">&quot;hello world&quot;</span> &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;div&quot;</span>,<br>        <span class="hljs-attr">props</span>: &#123;<br>          <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;list&quot;</span>,<br>          <span class="hljs-attr">children</span>: [<br>            &#123;<br>              <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;ul&quot;</span>,<br>              <span class="hljs-attr">props</span>: &#123;<br>                <span class="hljs-attr">children</span>: [<br>                  &#123;<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;li&quot;</span>,<br>                    <span class="hljs-attr">props</span>: &#123; <span class="hljs-attr">children</span>: <span class="hljs-string">&quot;list 1&quot;</span> &#125;,<br>                  &#125;,<br>                  &#123;<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;li&quot;</span>,<br>                    <span class="hljs-attr">props</span>: &#123; <span class="hljs-attr">children</span>: <span class="hljs-string">&quot;list 2&quot;</span> &#125;,<br>                  &#125;,<br>                  &#123;<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;li&quot;</span>,<br>                    <span class="hljs-attr">props</span>: &#123; <span class="hljs-attr">children</span>: <span class="hljs-string">&quot;list 3&quot;</span> &#125;,<br>                  &#125;,<br>                ],<br>              &#125;,<br>            &#125;,<br>          ],<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="fiber"><a href="#fiber" class="headerlink" title="fiber"></a>fiber</h2><p>本质就是一个链表形式的数据结构，用来表示 v-dom 的，大致结构如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">FiberNode</span> = &#123;<br>  tag, <span class="hljs-comment">// 标明 fiber 的类型，如函数组件、类组件等</span><br>  key, <span class="hljs-comment">// React 元素的key，用于优化更新</span><br>  elementType, <span class="hljs-comment">// 标明 React 元素的类型，即调用 createElement 时的第一个参数。</span><br>  type, <span class="hljs-comment">// 标明 DOM 元素 的类型</span><br><br>  <span class="hljs-comment">// 链表形式</span><br>  <span class="hljs-keyword">return</span>, <span class="hljs-comment">// 指向父 fiber</span><br>  child, <span class="hljs-comment">// 指向子 fiber</span><br>  sibling <span class="hljs-comment">// 指向下一个同级 fiber</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="current-Fiber、workInProgress-Fiber"><a href="#current-Fiber、workInProgress-Fiber" class="headerlink" title="current Fiber、workInProgress Fiber"></a>current Fiber、workInProgress Fiber</h3><p>current Fiber：对应当前页面中真实渲染的 DOM 的结构<br>workInProgress Fiber：更新时才创建的并已处理好变更的对应到真实 DOM 的虚拟 DOM 的 Fiber 链表<br>大致的链表结构如下：<br><img src="/img/images/2024/1706609523476-672e6a38-78b3-4fad-bb88-5c681f5ed190.jpeg"></p><h4 id="React-的双缓存是什么？"><a href="#React-的双缓存是什么？" class="headerlink" title="React 的双缓存是什么？"></a>React 的双缓存是什么？</h4><p><code>双缓存</code>来源于：图形渲染的优化技术<br>原理为：</p><ol><li>在双缓存技术中，系统会在内存（通常为显存）中开辟两个区域：<ul><li>前缓冲（Front Buffer）：这是与显示器相连的缓冲区，当前正在被显示的内容就存储在这里。</li><li>后缓冲（Back Buffer）：这是一个独立于前缓冲的内存区域，应用程序在该区域进行所有的绘图操作。</li></ul></li><li>应用程序会在后缓冲中完成所有的图形绘制工作，而不会直接影响到屏幕上显示的内容。</li><li>当所有需要更新的画面内容都在后缓冲区绘制完成后，系统会执行一次“缓冲区交换”或“页面翻转”操作，迅速将前后缓冲区的角色互换，即将后缓冲区的内容复制到前缓冲区，并使其成为新的可见帧。</li><li>由于这个交换操作通常是硬件加速且非常快速的，因此用户看到的是一个完整、无闪烁的新帧画面，而不是半成品或者绘制过程中的中间状态。</li></ol><p>简单理解为：预加载</p><p>React 中的双缓存指的是两个 Fiber 树，一个用于当前展示(<code>current fiber</code>)，一个用于更新的(<code>workInprogress fiber</code>)，有变化时则创建<code>workInprogress fiber</code>并在其中进行比较、计算等，之后直接一次性用整个<code>workInprogress fiber</code>(或部分) 替换掉整个<code>current fiber</code>(或部分)，不用两个逐个比较与 DOM 更新，从而避免了大量的 DOM 操作带来的性能损耗。</p><h1 id="React-的核心库"><a href="#React-的核心库" class="headerlink" title="React 的核心库"></a>React 的核心库</h1><ul><li><code>react 库</code>1、提供虚拟 DOM 相关的 API；2、提供用户相关的 API（useState&#x2F;use* 等）</li><li><code>react-dom 库</code>提供操作 DOM 相关的 API<ul><li><strong>其中的核心库</strong><code>react-reconciler</code>通过调和、调度、提交等过程实现渲染<ul><li>其中核心的为：<ul><li>ReactFiberBeginWork.js：创建 workInProgressFiber</li><li>ReactFiberCompleteWork.js：基于 workInProgressFiber 创建 EffectList</li><li>ReactFiberCommitWork.js：基于 EffectList 更新界面</li></ul></li></ul></li></ul></li></ul><h1 id="React-的整体流程（V17-版本）"><a href="#React-的整体流程（V17-版本）" class="headerlink" title="React 的整体流程（V17 版本）"></a>React 的整体流程（V17 版本）</h1><h2 id="页面代码"><a href="#页面代码" class="headerlink" title="页面代码"></a>页面代码</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-comment">// 入口：ReactDom.render(...)</span><br><span class="hljs-title class_">ReactDom</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>));<br></code></pre></td></tr></table></figure><h2 id="入口：页面的ReactDom-render-，调用的源码是react-dom-库里面的render函数"><a href="#入口：页面的ReactDom-render-，调用的源码是react-dom-库里面的render函数" class="headerlink" title="入口：页面的ReactDom.render(...)，调用的源码是react-dom 库里面的render函数"></a>入口：页面的<code>ReactDom.render(...)</code>，调用的源码是<code>react-dom 库</code>里面的<code>render</code>函数</h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-dom/src/client/ReactDOMLegacy.js#L287">点这</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// react-dom 源码</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span><br><span class="hljs-params">  element: React$Element&lt;<span class="hljs-built_in">any</span>&gt;,</span><br><span class="hljs-params">  container: Container,</span><br><span class="hljs-params">  callback: ?<span class="hljs-built_in">Function</span>,</span><br><span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">legacyRenderSubtreeIntoContainer</span>( <span class="hljs-comment">// 渲染下一级的树到 Container 中</span><br>    <span class="hljs-literal">null</span>,<br>    element,<br>    container,<br>    <span class="hljs-literal">false</span>,<br>    callback,<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="legacyRenderSubtreeIntoContainer：将子树渲染到容器中，首次渲染则调用legacyCreateRootFromDOMContainer"><a href="#legacyRenderSubtreeIntoContainer：将子树渲染到容器中，首次渲染则调用legacyCreateRootFromDOMContainer" class="headerlink" title="legacyRenderSubtreeIntoContainer：将子树渲染到容器中，首次渲染则调用legacyCreateRootFromDOMContainer"></a><code>legacyRenderSubtreeIntoContainer</code>：将子树渲染到容器中，首次渲染则调用<code>legacyCreateRootFromDOMContainer</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-dom/src/client/ReactDOMLegacy.js#L175">点这</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 作用：将子树渲染到容器中。</span><br><span class="hljs-comment">// 具体来说，它是在 React 的旧版本和新的 Fiber 架构之间进行兼容性处理的一部分。</span><br><span class="hljs-keyword">function</span>  <span class="hljs-title function_">legacyRenderSubtreeIntoContainer</span>(<span class="hljs-params"></span><br><span class="hljs-params">  parentComponent: ?React$Component&lt;<span class="hljs-built_in">any</span>, <span class="hljs-built_in">any</span>&gt;, <span class="hljs-comment">// 父组件（可能为null）</span></span><br><span class="hljs-params">  children: ReactNodeList, <span class="hljs-comment">// 要渲染的子节点。</span></span><br><span class="hljs-params">  container: Container, <span class="hljs-comment">// 容器，即 DOM 元素或 React 容器</span></span><br><span class="hljs-params">  forceHydrate: <span class="hljs-built_in">boolean</span>, <span class="hljs-comment">// 一个布尔值，决定是否强制进行 hydration（将服务器端渲染的HTML转换为客户端React组件）。</span></span><br><span class="hljs-params">  callback: ?<span class="hljs-built_in">Function</span>, <span class="hljs-comment">// 回调函数，在渲染完成后调用</span></span><br><span class="hljs-params"></span>): <span class="hljs-title class_">React</span>$Component&lt;<span class="hljs-built_in">any</span>, <span class="hljs-built_in">any</span>&gt; | <span class="hljs-title class_">PublicInstance</span> | <span class="hljs-literal">null</span> &#123;<br> <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-comment">// 从给定的容器中获取 _reactRootContainer ，这可能是根容器</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">root</span>: <span class="hljs-title class_">RootType</span> = (container.<span class="hljs-property">_reactRootContainer</span>: <span class="hljs-built_in">any</span>);<br>  <span class="hljs-keyword">let</span> fiberRoot;<br>  <span class="hljs-keyword">if</span> (!root) &#123; <span class="hljs-comment">// 不存在，即容器是首次渲染：</span><br>    <span class="hljs-comment">// ⭐️ Initial mount</span><br>    root = container.<span class="hljs-property">_reactRootContainer</span> = <span class="hljs-title function_">legacyCreateRootFromDOMContainer</span>(<br>      container,<br>      forceHydrate,<br>    );<br>    fiberRoot = root.<span class="hljs-property">_internalRoot</span>;<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-title function_">unbatchedUpdates</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">updateContainer</span>(children, fiberRoot, parentComponent, callback);<br>    &#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 存在，即容器不是首次渲染</span><br>    fiberRoot = root.<span class="hljs-property">_internalRoot</span>;<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// Update，更新容器的内容</span><br>    <span class="hljs-title function_">updateContainer</span>(children, fiberRoot, parentComponent, callback);<br>  &#125;<br><br>  <span class="hljs-comment">// 返回根容器的公共实例</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">getPublicRootInstance</span>(root);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="legacyCreateRootFromDOMContainer：用于创建-React-的根节点（FiberRoot），核心为createLegacyRoot"><a href="#legacyCreateRootFromDOMContainer：用于创建-React-的根节点（FiberRoot），核心为createLegacyRoot" class="headerlink" title="legacyCreateRootFromDOMContainer：用于创建 React 的根节点（FiberRoot），核心为createLegacyRoot"></a><code>legacyCreateRootFromDOMContainer</code>：用于创建 React 的根节点（FiberRoot），核心为<code>createLegacyRoot</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-dom/src/client/ReactDOMLegacy.js#L113">点这</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">legacyCreateRootFromDOMContainer</span>(<span class="hljs-params"></span><br><span class="hljs-params">  container: Container,</span><br><span class="hljs-params">  forceHydrate: <span class="hljs-built_in">boolean</span>,</span><br><span class="hljs-params"></span>): <span class="hljs-title class_">RootType</span> &#123;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">createLegacyRoot</span>(<br>    container,<br>    shouldHydrate<br>      ? &#123;<br>          <span class="hljs-attr">hydrate</span>: <span class="hljs-literal">true</span>,<br>        &#125;<br>      : <span class="hljs-literal">undefined</span>,<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="createLegacyRoot：用于创建-React-的根节点（FiberRoot），核心为ReactDOMBlockingRoot"><a href="#createLegacyRoot：用于创建-React-的根节点（FiberRoot），核心为ReactDOMBlockingRoot" class="headerlink" title="createLegacyRoot：用于创建 React 的根节点（FiberRoot），核心为ReactDOMBlockingRoot"></a><code>createLegacyRoot</code>：用于创建 React 的根节点（FiberRoot），核心为<code>ReactDOMBlockingRoot</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-dom/src/client/ReactDOMRoot.js#L195">点这</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createLegacyRoot</span>(<span class="hljs-params"></span><br><span class="hljs-params">  container: Container,</span><br><span class="hljs-params">  options?: RootOptions,</span><br><span class="hljs-params"></span>): <span class="hljs-title class_">RootType</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReactDOMBlockingRoot</span>(container, <span class="hljs-title class_">LegacyRoot</span>, options);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ReactDOMBlockingRoot：核心调用createRootImpl"><a href="#ReactDOMBlockingRoot：核心调用createRootImpl" class="headerlink" title="ReactDOMBlockingRoot：核心调用createRootImpl"></a><code>ReactDOMBlockingRoot</code>：核心调用<code>createRootImpl</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-dom/src/client/ReactDOMRoot.js#L66">点这</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ReactDOMBlockingRoot</span>(<span class="hljs-params"></span><br><span class="hljs-params">  container: Container,</span><br><span class="hljs-params">  tag: RootTag,</span><br><span class="hljs-params">  options: <span class="hljs-built_in">void</span> | RootOptions,</span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">_internalRoot</span> = <span class="hljs-title function_">createRootImpl</span>(container, tag, options);<br>&#125;<br><br><span class="hljs-title class_">ReactDOMRoot</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">render</span> = <span class="hljs-title class_">ReactDOMBlockingRoot</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">render</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; ... &#125;<br><span class="hljs-title class_">ReactDOMRoot</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">unmount</span> = <span class="hljs-title class_">ReactDOMBlockingRoot</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">unmount</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">void</span> &#123; ... &#125;<br></code></pre></td></tr></table></figure><h2 id="createRootImpl：核心调用createContainer"><a href="#createRootImpl：核心调用createContainer" class="headerlink" title="createRootImpl：核心调用createContainer"></a><code>createRootImpl</code>：核心调用<code>createContainer</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-dom/src/client/ReactDOMRoot.js#L120">点这</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createRootImpl</span>(<span class="hljs-params"></span><br><span class="hljs-params">  container: Container,</span><br><span class="hljs-params">  tag: RootTag,</span><br><span class="hljs-params">  options: <span class="hljs-built_in">void</span> | RootOptions,</span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">const</span> root = <span class="hljs-title function_">createContainer</span>(container, tag, hydrate, hydrationCallbacks);<br><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="createContainer：核心调用createFiberRoot"><a href="#createContainer：核心调用createFiberRoot" class="headerlink" title="createContainer：核心调用createFiberRoot"></a><code>createContainer</code>：核心调用<code>createFiberRoot</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-reconciler/src/ReactFiberReconciler.new.js#L241">点这</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createContainer</span>(<span class="hljs-params"></span><br><span class="hljs-params">  containerInfo: Container,</span><br><span class="hljs-params">  tag: RootTag,</span><br><span class="hljs-params">  hydrate: <span class="hljs-built_in">boolean</span>,</span><br><span class="hljs-params">  hydrationCallbacks: <span class="hljs-literal">null</span> | SuspenseHydrationCallbacks,</span><br><span class="hljs-params"></span>): <span class="hljs-title class_">OpaqueRoot</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">createFiberRoot</span>(containerInfo, tag, hydrate, hydrationCallbacks);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="createFiberRoot：核心调用new-FiberRootNode"><a href="#createFiberRoot：核心调用new-FiberRootNode" class="headerlink" title="createFiberRoot：核心调用new FiberRootNode"></a><code>createFiberRoot</code>：核心调用<code>new FiberRootNode</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-reconciler/src/ReactFiberRoot.new.js#L83">点这</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createFiberRoot</span>(<span class="hljs-params"></span><br><span class="hljs-params">  containerInfo: <span class="hljs-built_in">any</span>,</span><br><span class="hljs-params">  tag: RootTag,</span><br><span class="hljs-params">  hydrate: <span class="hljs-built_in">boolean</span>,</span><br><span class="hljs-params">  hydrationCallbacks: <span class="hljs-literal">null</span> | SuspenseHydrationCallbacks,</span><br><span class="hljs-params"></span>): <span class="hljs-title class_">FiberRoot</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">root</span>: <span class="hljs-title class_">FiberRoot</span> = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">FiberRootNode</span>(containerInfo, tag, hydrate): <span class="hljs-built_in">any</span>);<br><br>  <span class="hljs-keyword">const</span> rootFiber = <span class="hljs-title function_">createHostRootFiber</span>(tag);<br>  root.<span class="hljs-property">current</span> = rootFiber; <span class="hljs-comment">// ⭐️ current Fiber</span><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="FiberRootNode：一个构造函数，生成Fiber-Root-Node的数据结构"><a href="#FiberRootNode：一个构造函数，生成Fiber-Root-Node的数据结构" class="headerlink" title="FiberRootNode：一个构造函数，生成Fiber Root Node的数据结构"></a><code>FiberRootNode</code>：一个构造函数，生成<code>Fiber Root Node</code>的数据结构</h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-reconciler/src/ReactFiberRoot.new.js#L29">点这</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">FiberRootNode</span>(<span class="hljs-params">containerInfo, tag, hydrate</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">tag</span> = tag;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">containerInfo</span> = containerInfo;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">pendingChildren</span> = <span class="hljs-literal">null</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">current</span> = <span class="hljs-literal">null</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">pingCache</span> = <span class="hljs-literal">null</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">finishedWork</span> = <span class="hljs-literal">null</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">timeoutHandle</span> = noTimeout;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span> = <span class="hljs-literal">null</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">pendingContext</span> = <span class="hljs-literal">null</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">hydrate</span> = hydrate;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">callbackNode</span> = <span class="hljs-literal">null</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">callbackPriority</span> = <span class="hljs-title class_">NoLanePriority</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventTimes</span> = <span class="hljs-title function_">createLaneMap</span>(<span class="hljs-title class_">NoLanes</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">expirationTimes</span> = <span class="hljs-title function_">createLaneMap</span>(<span class="hljs-title class_">NoTimestamp</span>);<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">pendingLanes</span> = <span class="hljs-title class_">NoLanes</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">suspendedLanes</span> = <span class="hljs-title class_">NoLanes</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">pingedLanes</span> = <span class="hljs-title class_">NoLanes</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">expiredLanes</span> = <span class="hljs-title class_">NoLanes</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">mutableReadLanes</span> = <span class="hljs-title class_">NoLanes</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">finishedLanes</span> = <span class="hljs-title class_">NoLanes</span>;<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">entangledLanes</span> = <span class="hljs-title class_">NoLanes</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">entanglements</span> = <span class="hljs-title function_">createLaneMap</span>(<span class="hljs-title class_">NoLanes</span>);<br><br>  <span class="hljs-keyword">if</span> (supportsHydration) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">mutableSourceEagerHydrationData</span> = <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (enableSchedulerTracing) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">interactionThreadID</span> = <span class="hljs-title function_">unstable_getThreadID</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">memoizedInteractions</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">pendingInteractionMap</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>  &#125;<br>  <span class="hljs-keyword">if</span> (enableSuspenseCallback) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hydrationCallbacks</span> = <span class="hljs-literal">null</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结一下前面创建Fiber-Root的流程"><a href="#总结一下前面创建Fiber-Root的流程" class="headerlink" title="总结一下前面创建Fiber Root的流程"></a>总结一下前面创建<code>Fiber Root</code>的流程</h2><p><img src="/img/images/2024/1706605368169-82142d07-4d0c-44a2-b4f6-2f163469e45a.jpeg"></p><h2 id="创建之后，后续关键调用为updateContainer，其中关键为scheduleUpdateOnFiber"><a href="#创建之后，后续关键调用为updateContainer，其中关键为scheduleUpdateOnFiber" class="headerlink" title="创建之后，后续关键调用为updateContainer，其中关键为scheduleUpdateOnFiber"></a>创建之后，后续关键调用为<code>updateContainer</code>，其中关键为<code>scheduleUpdateOnFiber</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-reconciler/src/ReactFiberReconciler.new.js#L250">点这</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateContainer</span>(<span class="hljs-params"></span><br><span class="hljs-params">  element: ReactNodeList,</span><br><span class="hljs-params">  container: OpaqueRoot,</span><br><span class="hljs-params">  parentComponent: ?React$Component&lt;<span class="hljs-built_in">any</span>, <span class="hljs-built_in">any</span>&gt;,</span><br><span class="hljs-params">  callback: ?<span class="hljs-built_in">Function</span>,</span><br><span class="hljs-params"></span>): <span class="hljs-title class_">Lane</span> &#123;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">const</span> current = container.<span class="hljs-property">current</span>;<br><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">const</span> update = <span class="hljs-title function_">createUpdate</span>(eventTime, lane);<br><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-title function_">scheduleUpdateOnFiber</span>(current, lane, eventTime);<br><br>  <span class="hljs-keyword">return</span> lane;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="scheduleUpdateOnFiber：关键调用performSyncWorkOnRoot"><a href="#scheduleUpdateOnFiber：关键调用performSyncWorkOnRoot" class="headerlink" title="scheduleUpdateOnFiber：关键调用performSyncWorkOnRoot"></a><code>scheduleUpdateOnFiber</code>：关键调用<code>performSyncWorkOnRoot</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L528">点这</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">scheduleUpdateOnFiber</span>(<span class="hljs-params"></span><br><span class="hljs-params">  fiber: Fiber,</span><br><span class="hljs-params">  lane: Lane,</span><br><span class="hljs-params">  eventTime: <span class="hljs-built_in">number</span>,</span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">const</span> root = <span class="hljs-title function_">markUpdateLaneFromFiberToRoot</span>(fiber, lane);<br><br><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">if</span> (lane === <span class="hljs-title class_">SyncLane</span>) &#123;<br>     <span class="hljs-comment">// ...</span><br><br>     <span class="hljs-comment">// 关键函数</span><br>      <span class="hljs-title function_">performSyncWorkOnRoot</span>(root);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">ensureRootIsScheduled</span>(root, eventTime);<br>      <span class="hljs-title function_">schedulePendingInteractions</span>(root, lane);<br>      <span class="hljs-keyword">if</span> (executionContext === <span class="hljs-title class_">NoContext</span>) &#123;<br>        <span class="hljs-comment">// Flush the synchronous work now, unless we&#x27;re already working or inside</span><br>        <span class="hljs-comment">// a batch. This is intentionally inside scheduleUpdateOnFiber instead of</span><br>        <span class="hljs-comment">// scheduleCallbackForFiber to preserve the ability to schedule a callback</span><br>        <span class="hljs-comment">// without immediately flushing it. We only do this for user-initiated</span><br>        <span class="hljs-comment">// updates, to preserve historical behavior of legacy mode.</span><br>        <span class="hljs-title function_">resetRenderTimer</span>();<br>        <span class="hljs-title function_">flushSyncCallbackQueue</span>();<br>      &#125;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// Schedule a discrete update but only if it&#x27;s not Sync.</span><br>    <span class="hljs-keyword">if</span> (<br>      (executionContext &amp; <span class="hljs-title class_">DiscreteEventContext</span>) !== <span class="hljs-title class_">NoContext</span> &amp;&amp;<br>      <span class="hljs-comment">// Only updates at user-blocking priority or greater are considered</span><br>      <span class="hljs-comment">// discrete, even inside a discrete event.</span><br>      (priorityLevel === <span class="hljs-title class_">UserBlockingSchedulerPriority</span> ||<br>        priorityLevel === <span class="hljs-title class_">ImmediateSchedulerPriority</span>)<br>    ) &#123;<br>      <span class="hljs-comment">// This is the result of a discrete event. Track the lowest priority</span><br>      <span class="hljs-comment">// discrete update per root so we can flush them early, if needed.</span><br>      <span class="hljs-keyword">if</span> (rootsWithPendingDiscreteUpdates === <span class="hljs-literal">null</span>) &#123;<br>        rootsWithPendingDiscreteUpdates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([root]);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        rootsWithPendingDiscreteUpdates.<span class="hljs-title function_">add</span>(root);<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// Schedule other updates after in case the callback is sync.</span><br>    <span class="hljs-title function_">ensureRootIsScheduled</span>(root, eventTime);<br>    <span class="hljs-title function_">schedulePendingInteractions</span>(root, lane);<br>  &#125;<br><br>  <span class="hljs-comment">// We use this when assigning a lane for a transition inside</span><br>  <span class="hljs-comment">// `requestUpdateLane`. We assume it&#x27;s the same as the root being updated,</span><br>  <span class="hljs-comment">// since in the common case of a single root app it probably is. If it&#x27;s not</span><br>  <span class="hljs-comment">// the same root, then it&#x27;s not a huge deal, we just might batch more stuff</span><br>  <span class="hljs-comment">// together more than necessary.</span><br>  mostRecentlyUpdatedRoot = root;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="performSyncWorkOnRoot：关键调用renderRootSync、commitRoot"><a href="#performSyncWorkOnRoot：关键调用renderRootSync、commitRoot" class="headerlink" title="performSyncWorkOnRoot：关键调用renderRootSync、commitRoot"></a><code>performSyncWorkOnRoot</code>：关键调用<code>renderRootSync</code>、<code>commitRoot</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L976">点这</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">performSyncWorkOnRoot</span>(<span class="hljs-params">root</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br><br>  exitStatus = <span class="hljs-title function_">renderRootSync</span>(root, lanes);<br><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-title function_">commitRoot</span>(root);<br><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="renderRootSync：关键调用workLoopSync"><a href="#renderRootSync：关键调用workLoopSync" class="headerlink" title="renderRootSync：关键调用workLoopSync"></a><code>renderRootSync</code>：关键调用<code>workLoopSync</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1501">点这</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderRootSync</span>(<span class="hljs-params">root: FiberRoot, lanes: Lanes</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-title function_">workLoopSync</span>();<br><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">return</span> workInProgressRootExitStatus;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="workLoopSync：递归调用performUnitOfWork"><a href="#workLoopSync：递归调用performUnitOfWork" class="headerlink" title="workLoopSync：递归调用performUnitOfWork"></a><code>workLoopSync</code>：递归调用<code>performUnitOfWork</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1569">点这</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 一个递归函数，逻辑为根据最开始的页面代码来调用的</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">workLoopSync</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Already timed out, so perform work without checking if we need to yield.</span><br>  <span class="hljs-keyword">while</span> (workInProgress !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-title function_">performUnitOfWork</span>(workInProgress);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 最开始的页面代码</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><span class="hljs-comment">// 入口：ReactDom.render(...)</span><br><span class="hljs-title class_">ReactDom</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>));<br><br>则 workLoopSync 调用 performUnitOfWork 时的参数为：<br>第①次：tag = <span class="hljs-number">3</span>，elementType = <span class="hljs-literal">null</span>，代表 container<br>第②次：tag = <span class="hljs-number">2</span>，elementType = f <span class="hljs-title class_">App</span>()，代表 <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123; ...&#125; 函数<br>第③次：tag = <span class="hljs-number">5</span>，elementType = <span class="hljs-string">&#x27;div&#x27;</span>，代表 &lt;div className=<span class="hljs-string">&quot;app&quot;</span>&gt; 元素<br>第④次：tag = <span class="hljs-number">5</span>，elementType = <span class="hljs-string">&#x27;h2&#x27;</span>，代表 &lt;h2&gt; 元素<br>第⑤次：tag = <span class="hljs-number">5</span>，elementType = <span class="hljs-string">&#x27;div&#x27;</span>，代表 &lt;div id=<span class="hljs-string">&quot;list&quot;</span>&gt; 元素<br>...<br>第n次：tag = <span class="hljs-number">5</span>，elementType = <span class="hljs-string">&#x27;li&#x27;</span>，代表 &lt;li&gt;list <span class="hljs-number">3</span>&lt;/li&gt; 元素<br></code></pre></td></tr></table></figure><h2 id="performUnitOfWork：被递归调用，核心调用beginWork、completeUnitOfWork"><a href="#performUnitOfWork：被递归调用，核心调用beginWork、completeUnitOfWork" class="headerlink" title="performUnitOfWork：被递归调用，核心调用beginWork、completeUnitOfWork"></a><code>performUnitOfWork</code>：被递归调用，核心调用<code>beginWork</code>、<code>completeUnitOfWork</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1653">点这</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">performUnitOfWork</span>(<span class="hljs-params">unitOfWork: Fiber</span>): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">let</span> next;<br><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-comment">// 调用 beginWork 处理当前元素，返回值为子节点，没有则返回 null</span><br>  next = <span class="hljs-title function_">beginWork</span>(current, unitOfWork, subtreeRenderLanes);<br><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">if</span> (next === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 若无子节点，则完成当前任务</span><br>    <span class="hljs-title function_">completeUnitOfWork</span>(unitOfWork);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 否则继续处理子节点</span><br>    workInProgress = next;<br>  &#125;<br><br>  <span class="hljs-title class_">ReactCurrentOwner</span>.<span class="hljs-property">current</span> = <span class="hljs-literal">null</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>所以递归逻辑为：先子级后同级（先深度后广度）<br><code>workLoopSync</code>递归调用<code>performUnitOfWork</code>处理同级，<code>performUnitOfWork</code>调用<code>beginWork</code>处理子级</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归调用逻辑图-Fiber-链表结构"><a href="#递归调用逻辑图-Fiber-链表结构" class="headerlink" title="递归调用逻辑图(Fiber 链表结构)"></a>递归调用逻辑图(Fiber 链表结构)</h3><p><img src="/img/images/2024/1706609523476-672e6a38-78b3-4fad-bb88-5c681f5ed190.jpeg"><br>上图体现的就是<code>Fiber</code>的数据结构，核心就是：return(父)、child(子)、sibling(兄)</p><h2 id="beginWork：作用是创建-workInProgressFiber"><a href="#beginWork：作用是创建-workInProgressFiber" class="headerlink" title="beginWork：作用是创建 workInProgressFiber"></a><code>beginWork</code>：作用是创建 workInProgressFiber</h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L3077">点这</a><br>作用：生成<code>v-dom</code>，然后和<code>current fiber</code>对比，向下调和的过程<br>就是由 fiberRoot 按照 child 指针逐层往下调和，期间会执行：函数组件、类组件，DIFF 子节点，从而打上不同的<code>effectTag</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">beginWork</span>(<span class="hljs-params"></span><br><span class="hljs-params">  current: Fiber | <span class="hljs-literal">null</span>,</span><br><span class="hljs-params">  workInProgress: Fiber,</span><br><span class="hljs-params">  renderLanes: Lanes,</span><br><span class="hljs-params"></span>): <span class="hljs-title class_">Fiber</span> | <span class="hljs-literal">null</span> &#123;<br>  <span class="hljs-keyword">const</span> updateLanes = workInProgress.<span class="hljs-property">lanes</span>;<br><br> <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">if</span> (current !== <span class="hljs-literal">null</span>) &#123;<br>   <span class="hljs-comment">// 初次渲染不会进</span><br><br>    <span class="hljs-comment">// 新老对比</span><br>    <span class="hljs-keyword">const</span> oldProps = current.<span class="hljs-property">memoizedProps</span>;<br>    <span class="hljs-keyword">const</span> newProps = workInProgress.<span class="hljs-property">pendingProps</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 匹配节点的 tag 类型，然后调用对应的方法去打上不同的 effectTag</span><br>  <span class="hljs-keyword">switch</span> (workInProgress.<span class="hljs-property">tag</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-title class_">IndeterminateComponent</span>: &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">mountIndeterminateComponent</span>(<br>        current,<br>        workInProgress,<br>        workInProgress.<span class="hljs-property">type</span>,<br>        renderLanes,<br>      );<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-title class_">LazyComponent</span>: &#123;<br>      <span class="hljs-keyword">const</span> elementType = workInProgress.<span class="hljs-property">elementType</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">mountLazyComponent</span>(<br>        current,<br>        workInProgress,<br>        elementType,<br>        updateLanes,<br>        renderLanes,<br>      );<br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="completeUnitOfWork：核心调用completeWork"><a href="#completeUnitOfWork：核心调用completeWork" class="headerlink" title="completeUnitOfWork：核心调用completeWork"></a><code>completeUnitOfWork</code>：核心调用<code>completeWork</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1681">点这</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">completeUnitOfWork</span>(<span class="hljs-params">unitOfWork: Fiber</span>): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-keyword">let</span> completedWork = unitOfWork;<br>  <span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-keyword">const</span> current = completedWork.<span class="hljs-property">alternate</span>;<br>    <span class="hljs-keyword">const</span> returnFiber = completedWork.<span class="hljs-property">return</span>;<br><br>    <span class="hljs-comment">// Check if the work completed or if something threw.</span><br>    <span class="hljs-keyword">if</span> ((completedWork.<span class="hljs-property">flags</span> &amp; <span class="hljs-title class_">Incomplete</span>) === <span class="hljs-title class_">NoFlags</span>) &#123;<br>      <span class="hljs-comment">// ...</span><br><br>      <span class="hljs-comment">// ⭐️ 核心调用</span><br>      next = <span class="hljs-title function_">completeWork</span>(current, completedWork, subtreeRenderLanes);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// ...</span><br>    &#125;<br><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="completeWork：核心调用createInstance"><a href="#completeWork：核心调用createInstance" class="headerlink" title="completeWork：核心调用createInstance"></a><code>completeWork</code>：核心调用<code>createInstance</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-reconciler/src/ReactFiberCompleteWork.new.js#L800">点这</a><br><code>effectList</code>将需要更新的数据形成一个新的 Fiber 链表结构，这样就只需要去更新这些</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">completeWork</span>(<span class="hljs-params"></span><br><span class="hljs-params">  current: Fiber | <span class="hljs-literal">null</span>,</span><br><span class="hljs-params">  workInProgress: Fiber,</span><br><span class="hljs-params">  renderLanes: Lanes,</span><br><span class="hljs-params"></span>): <span class="hljs-title class_">Fiber</span> | <span class="hljs-literal">null</span> &#123;<br>  <span class="hljs-keyword">const</span> newProps = workInProgress.<span class="hljs-property">pendingProps</span>;<br><br>  <span class="hljs-keyword">switch</span> (workInProgress.<span class="hljs-property">tag</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-title class_">IndeterminateComponent</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-title class_">LazyComponent</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-title class_">SimpleMemoComponent</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-title class_">FunctionComponent</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-title class_">ForwardRef</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-title class_">Fragment</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-title class_">Mode</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-title class_">ContextConsumer</span>:<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-title class_">HostComponent</span>: &#123;<br>      <span class="hljs-comment">// ...</span><br>          <span class="hljs-keyword">const</span> instance = <span class="hljs-title function_">createInstance</span>(<br>            <span class="hljs-keyword">type</span>,<br>            newProps,<br>            rootContainerInstance,<br>            currentHostContext,<br>            workInProgress,<br>          );<br><br>          <span class="hljs-comment">// ...</span><br>  <span class="hljs-title function_">invariant</span>(<br>    <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&#x27;Unknown unit of work tag (%s). This error is likely caused by a bug in &#x27;</span> +<br>      <span class="hljs-string">&#x27;React. Please file an issue.&#x27;</span>,<br>    workInProgress.<span class="hljs-property">tag</span>,<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="createInstance：核心调用createElement"><a href="#createInstance：核心调用createElement" class="headerlink" title="createInstance：核心调用createElement"></a><code>createInstance</code>：核心调用<code>createElement</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-dom/src/client/ReactDOMHostConfig.js#L262">点这</a><br>作用：调用<code>@react-dom 库里面的 createInstance</code>创建真实的 DOM(<code>document.createElement()</code>)，但还不会渲染到页面上</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createInstance</span>(<span class="hljs-params"></span><br><span class="hljs-params">  <span class="hljs-keyword">type</span>: <span class="hljs-built_in">string</span>,</span><br><span class="hljs-params">  props: Props,</span><br><span class="hljs-params">  rootContainerInstance: Container,</span><br><span class="hljs-params">  hostContext: HostContext,</span><br><span class="hljs-params">  internalInstanceHandle: <span class="hljs-built_in">Object</span>,</span><br><span class="hljs-params"></span>): <span class="hljs-title class_">Instance</span> &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">parentNamespace</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">domElement</span>: <span class="hljs-title class_">Instance</span> = <span class="hljs-title function_">createElement</span>(<br>    <span class="hljs-keyword">type</span>,<br>    props,<br>    rootContainerInstance,<br>    parentNamespace,<br>  );<br>  <span class="hljs-title function_">precacheFiberNode</span>(internalInstanceHandle, domElement);<br>  <span class="hljs-title function_">updateFiberProps</span>(domElement, props);<br>  <span class="hljs-keyword">return</span> domElement;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="createElement：核心调用document-createElement"><a href="#createElement：核心调用document-createElement" class="headerlink" title="createElement：核心调用document.createElement"></a><code>createElement</code>：核心调用<code>document.createElement</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-dom/src/client/ReactDOMComponent.js#L401">点这</a><br>创建真实的 DOM</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-params"></span><br><span class="hljs-params">  <span class="hljs-keyword">type</span>: <span class="hljs-built_in">string</span>,</span><br><span class="hljs-params">  props: <span class="hljs-built_in">Object</span>,</span><br><span class="hljs-params">  rootContainerElement: Element | Document,</span><br><span class="hljs-params">  parentNamespace: <span class="hljs-built_in">string</span>,</span><br><span class="hljs-params"></span>): <span class="hljs-title class_">Element</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">ownerDocument</span>: <span class="hljs-title class_">Document</span> = <span class="hljs-title function_">getOwnerDocumentFromRootContainer</span>(<br>    rootContainerElement,<br>  );<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">domElement</span>: <span class="hljs-title class_">Element</span>;<br><br>  <span class="hljs-keyword">if</span> (namespaceURI === <span class="hljs-variable constant_">HTML_NAMESPACE</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> === <span class="hljs-string">&#x27;script&#x27;</span>) &#123;<br>      <span class="hljs-keyword">const</span> div = ownerDocument.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br><br>      div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;script&gt;&lt;&#x27;</span> + <span class="hljs-string">&#x27;/script&gt;&#x27;</span>; <span class="hljs-comment">// eslint-disable-line</span><br>      <span class="hljs-keyword">const</span> firstChild = ((div.<span class="hljs-property">firstChild</span>: <span class="hljs-built_in">any</span>): <span class="hljs-title class_">HTMLScriptElement</span>);<br>      domElement = div.<span class="hljs-title function_">removeChild</span>(firstChild);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> props.<span class="hljs-property">is</span> === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>      domElement = ownerDocument.<span class="hljs-title function_">createElement</span>(<span class="hljs-keyword">type</span>, &#123;<span class="hljs-attr">is</span>: props.<span class="hljs-property">is</span>&#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      domElement = ownerDocument.<span class="hljs-title function_">createElement</span>(<span class="hljs-keyword">type</span>);<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> === <span class="hljs-string">&#x27;select&#x27;</span>) &#123;<br>        <span class="hljs-keyword">const</span> node = ((<span class="hljs-attr">domElement</span>: <span class="hljs-built_in">any</span>): <span class="hljs-title class_">HTMLSelectElement</span>);<br>        <span class="hljs-keyword">if</span> (props.<span class="hljs-property">multiple</span>) &#123;<br>          node.<span class="hljs-property">multiple</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (props.<span class="hljs-property">size</span>) &#123;<br>          node.<span class="hljs-property">size</span> = props.<span class="hljs-property">size</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    domElement = ownerDocument.<span class="hljs-title function_">createElementNS</span>(namespaceURI, <span class="hljs-keyword">type</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">return</span> domElement;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="再总结一下前面的调用栈流程"><a href="#再总结一下前面的调用栈流程" class="headerlink" title="再总结一下前面的调用栈流程"></a>再总结一下前面的调用栈流程</h2><p><img src="/img/images/2024/1708349484074-7255f728-c9f6-4213-8b94-d258cd3b1251.jpeg"></p><h2 id="commitRoot"><a href="#commitRoot" class="headerlink" title="commitRoot"></a><code>commitRoot</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1775">点这</a><br>当前面的<code>beginWork、completeWork</code>完成后，后续关键流程为<code>commitWork</code>，核心调用方法<code>commitRoot</code>，它其中核心调用<code>commitRootImpl</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">commitRoot</span>(<span class="hljs-params">root</span>) &#123;<br>  <span class="hljs-keyword">const</span> renderPriorityLevel = <span class="hljs-title function_">getCurrentPriorityLevel</span>();<br>  <span class="hljs-title function_">runWithPriority</span>(<br>    <span class="hljs-title class_">ImmediateSchedulerPriority</span>,<br>    commitRootImpl.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, root, renderPriorityLevel),<br>  );<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="commitRootImpl"><a href="#commitRootImpl" class="headerlink" title="commitRootImpl"></a><code>commitRootImpl</code></h2><p>源码位置：<a href="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1784">点这</a><br>核心调用：<code>flushPassiveEffects、commitBeforeMutationEffects、commitMutationEffects、commitLayoutEffects</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">commitRootImpl</span>(<span class="hljs-params">root, renderPriorityLevel</span>) &#123;<br>  <span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-comment">// ⭐️ 处理一些还未执行完毕的 useEffect</span><br>    <span class="hljs-title function_">flushPassiveEffects</span>();<br>  &#125; <span class="hljs-keyword">while</span> (rootWithPendingPassiveEffects !== <span class="hljs-literal">null</span>);<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// ⭐️ 更新前</span><br>    <span class="hljs-title function_">commitBeforeMutationEffects</span>(finishedWork);<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// ⭐️ 更新时</span><br>    <span class="hljs-title function_">commitMutationEffects</span>(finishedWork, root, renderPriorityLevel);<br><br>    <span class="hljs-keyword">if</span> (shouldFireAfterActiveInstanceBlur) &#123;<br>      <span class="hljs-title function_">afterActiveInstanceBlur</span>();<br>    &#125;<br>    <span class="hljs-title function_">resetAfterCommit</span>(root.<span class="hljs-property">containerInfo</span>);<br><br>    <span class="hljs-comment">// finishedWork = workInProgressFiber</span><br>    root.<span class="hljs-property">current</span> = finishedWork; <span class="hljs-comment">//  ⭐️ 实现双缓存的切换</span><br><br><br>    <span class="hljs-comment">// ⭐️ 更新后</span><br>    <span class="hljs-title function_">commitLayoutEffects</span>(root);<br><br>    <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="flushPassiveEffects"><a href="#flushPassiveEffects" class="headerlink" title="flushPassiveEffects"></a>flushPassiveEffects</h3><p>处理一些还未执行完毕的 useEffect</p><h3 id="commitBeforeMutationEffects（更新前）"><a href="#commitBeforeMutationEffects（更新前）" class="headerlink" title="commitBeforeMutationEffects（更新前）"></a>commitBeforeMutationEffects（更新前）</h3><p>调用<code>getSnapshotBeforeUpdate</code>生命周期</p><h3 id="commitMutationEffects（更新时）"><a href="#commitMutationEffects（更新时）" class="headerlink" title="commitMutationEffects（更新时）"></a>commitMutationEffects（更新时）</h3><p>通过 Fiber 链表结构，一层层进行处理增删改</p><h3 id="commitLayoutEffects（更新后）"><a href="#commitLayoutEffects（更新后）" class="headerlink" title="commitLayoutEffects（更新后）"></a>commitLayoutEffects（更新后）</h3><p>进行 Layout(布局)阶段，执行一些生命周期：<code>componentDidMount、componentWillUpdate 等</code>、执行 setState 的 callback、调用 useLayoutEffect、将 useEffect 存储起来</p><h1 id="React-的异步可中断（V18-版本）"><a href="#React-的异步可中断（V18-版本）" class="headerlink" title="React 的异步可中断（V18 版本）"></a>React 的异步可中断（V18 版本）</h1><p>中断的是下一次的 beginWork</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">workLoopConcurrent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Perform work until Scheduler asks us to yield</span><br>  <span class="hljs-keyword">while</span> (workInProgress !== <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-title function_">shouldYield</span>()) &#123;<br>    <span class="hljs-title function_">performUnitOfWork</span>(workInProgress);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>shouldYield</code>意思是交出执行权。</p><p>浏览器的任务执行顺序：宏任务 -&gt; 微任务 -&gt; RAF(requestAnimationFrame) -&gt; render -&gt; RIC(requestIdelCallback) -&gt; <strong>新的</strong>宏任务 -&gt; <strong>新的</strong>微任务 -&gt; …</p><p>当面对长任务时，React 会采用分段执行，但又需要满足可打断，先执行后面的，那可以使用的方案如下：</p><ul><li>setTimeout：宏任务，满足 render 后再执行，但它存在 4ms 的延迟</li><li>Promise：微任务，不满足 render 后再执行，宏任务执行后就立马执行了</li><li>requestIdelCallback：在浏览器空闲时期执行，满足 render 后再执行，但它执行时间不确定，兼容性差</li><li>MessageChannel：浏览器创建的低延迟通信，可以创建一个宏观上的异步操作，与 render 执行无关</li></ul><h2 id="仿照-React-源码，模拟实现打断"><a href="#仿照-React-源码，模拟实现打断" class="headerlink" title="仿照 React 源码，模拟实现打断"></a>仿照 React 源码，模拟实现打断</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 仿照 React 源码，模拟实现打断</span><br><br><span class="hljs-comment">// 存放 任务 的队列</span><br><span class="hljs-keyword">const</span> queue = []<br><br><span class="hljs-comment">// 存放 flush 函数的队列</span><br><span class="hljs-keyword">const</span> transition = []<br><br><span class="hljs-keyword">let</span> deadTime;<br><span class="hljs-keyword">const</span> split = <span class="hljs-number">5</span> <span class="hljs-comment">// 任务执行超过 5ms，则让出执行权</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">now</span> = (<span class="hljs-params"></span>) =&gt; performance.<span class="hljs-title function_">now</span>() <span class="hljs-comment">// 获取当前时间，计时精度更高</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">peek</span> = arr =&gt; arr[<span class="hljs-number">0</span>] <span class="hljs-comment">// 拿出数组的第一个值</span><br><br><span class="hljs-keyword">const</span> poseMessage = (()= &gt;&#123;<br><br>  <span class="hljs-keyword">const</span> &#123; port1, port2 &#125; = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageChannel</span>()<br>  <span class="hljs-comment">// ⭐️ 当 port2.postMessage 调用后，类似于在 setTimeout 后再执行 port1.ommessgae</span><br><br>  <span class="hljs-comment">// 恢复执行</span><br>  port1.<span class="hljs-property">ommessgae</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 取出 transition 中的第一个 flush 并执行</span><br>    <span class="hljs-title function_">peek</span>(transition)()<br>  &#125;<br><br>  <span class="hljs-comment">// poseMessage() 执行的是这个 return 的函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    port2.<span class="hljs-title function_">postMessage</span>() <span class="hljs-comment">// 让出执行权</span><br>  &#125;<br>&#125;)()<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">startTransition</span>(<span class="hljs-params">flush</span>) &#123;<br>  <span class="hljs-comment">// 将 flush 放到 transition 数组里面 &amp;&amp; 执行 poseMessage()</span><br>  transition.<span class="hljs-title function_">push</span>(flush) &amp;&amp; <span class="hljs-title function_">poseMessage</span>()<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">shouldYield</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 5ms 到了 或者 有更高优先级的操作</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">now</span>() &gt;= deadTime<br>    || navigatior.<span class="hljs-property">scheduling</span>.<span class="hljs-property">isInputPending</span> <span class="hljs-comment">// 模拟更高优先级的操作</span><br>&#125;<br><br><span class="hljs-comment">// 时间分片的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flush</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 任务执行的截止时间为：当前时间 + 5ms</span><br>  deadTime = <span class="hljs-title function_">now</span>() + split<br>  <span class="hljs-keyword">const</span> task = <span class="hljs-title function_">peek</span>(queue) <span class="hljs-comment">// 拿出第一个任务，task = &#123; task &#125;</span><br>  <span class="hljs-keyword">while</span>(task &amp;&amp; !<span class="hljs-title function_">shouldYield</span>()) &#123;<br>    <span class="hljs-keyword">const</span> &#123; task &#125; = task<br>    task.<span class="hljs-property">task</span> = <span class="hljs-literal">null</span> <span class="hljs-comment">// queue[0] = &#123; task: null &#125;</span><br>    <span class="hljs-comment">// 执行任务</span><br>    <span class="hljs-keyword">const</span> next = <span class="hljs-title function_">task</span>()<br><br>    <span class="hljs-comment">// 如果 next 是函数，则任务还未执行完，类似于 workInProgress benginWork 还未完</span><br>    <span class="hljs-keyword">if</span>(next &amp;&amp; <span class="hljs-keyword">typeof</span> next === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>      <span class="hljs-comment">// 没执行完的，重新放进去</span><br>      task.<span class="hljs-property">task</span> = next <span class="hljs-comment">// queue[0] = &#123; task: next &#125;</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行完了</span><br>      queue.<span class="hljs-title function_">shift</span>()<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 代码执行到这后，就两种情况：</span><br>  <span class="hljs-comment">// 1、task 执行完了</span><br>  <span class="hljs-comment">// 2、task 还有，但 showYield() 为 true 让出执行权了</span><br>  task &amp;&amp; <span class="hljs-title function_">startTransition</span>(flush)<br>&#125;<br><br><span class="hljs-comment">// 用 schedule 来调度任务</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">schedule</span>(<span class="hljs-params">task</span>) &#123;<br>  queue.<span class="hljs-title function_">push</span>( &#123; task &#125; ) <span class="hljs-comment">// 将任务放进队列中</span><br><br>  <span class="hljs-title function_">startTransition</span>(flush)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myTask</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>)<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="高优先级操作"><a href="#高优先级操作" class="headerlink" title="高优先级操作"></a>高优先级操作</h2><ul><li>用户交互事件处理</li><li>错误边界</li><li>引发布局或绘制的操作</li></ul><h1 id="Suspense-组件"><a href="#Suspense-组件" class="headerlink" title="Suspense 组件"></a>Suspense 组件</h1><p>本质是一个错误边界<br>可以作为组件的异步加载，也可以将异步请求改写为同步逻辑</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchList</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>]);<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">readApi</span> = (<span class="hljs-params">fn</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> state = <span class="hljs-string">&quot;pending&quot;</span>;<br>  <span class="hljs-keyword">let</span> res;<br><br>  <span class="hljs-keyword">const</span> suspense = <span class="hljs-title function_">fn</span>()<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>      state = <span class="hljs-string">&quot;success&quot;</span>;<br>      res = r;<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>      state = <span class="hljs-string">&quot;error&quot;</span>;<br>      res = err;<br>    &#125;);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">read</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (state === <span class="hljs-string">&quot;pending&quot;</span>) &#123;<br>      <span class="hljs-keyword">throw</span> suspense;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (state === <span class="hljs-string">&quot;error&quot;</span>) &#123;<br>      <span class="hljs-keyword">throw</span> res;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (state === <span class="hljs-string">&quot;success&quot;</span>) &#123;<br>      <span class="hljs-keyword">return</span> res;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> read;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ListApi</span> = <span class="hljs-title function_">readApi</span>(fetchList);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">List</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// const [list, setList] = useState([]);</span><br><br>  <span class="hljs-comment">// useEffect(() =&gt; &#123;</span><br>  <span class="hljs-comment">//   fetchList().then((res) =&gt; &#123;</span><br>  <span class="hljs-comment">//     setList(res);</span><br>  <span class="hljs-comment">//   &#125;);</span><br>  <span class="hljs-comment">// &#125;, []);</span><br><br>  <span class="hljs-keyword">const</span> list = <span class="hljs-title class_">ListApi</span>();<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;list.map((item) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        ))&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">FuncComName</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">div</span>&gt;</span>loading...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125;&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">List</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">// 逻辑解析：当第一次加载 List 组件时，走的是这个逻辑</span><br><span class="hljs-comment">//  if (state === &quot;pending&quot;) &#123;</span><br><span class="hljs-comment">//    throw suspense;</span><br><span class="hljs-comment">//  &#125;</span><br><span class="hljs-comment">// 抛出了 suspense 错误，被 &lt;Suspense 的 fallback 捕获，所以显示 loading...</span><br><span class="hljs-comment">// 但由于 suspense 是个 Promise，所以等它执行完毕后又重新渲染 List 组件</span><br><span class="hljs-comment">// 然后走的先这个逻辑</span><br><span class="hljs-comment">//   else if (state === &quot;success&quot;) &#123;</span><br><span class="hljs-comment">//    return res;</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// 所以最终又正常显示了</span><br></code></pre></td></tr></table></figure><h2 id="简易手写"><a href="#简易手写" class="headerlink" title="简易手写"></a>简易手写</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MySuspense</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props);<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">loading</span>: <span class="hljs-literal">false</span>,<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">componentDidCatch</span>(<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> error.<span class="hljs-property">then</span> === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">loading</span>: <span class="hljs-literal">true</span> &#125;);<br><br>      error.<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">loading</span>: <span class="hljs-literal">false</span> &#125;));<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">loading</span> ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">fallback</span> : <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">children</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="SetTimeout"><a href="#SetTimeout" class="headerlink" title="SetTimeout"></a>SetTimeout</h2><p>存在 4ms 的延迟问题<br>就算设置的是 0，但浏览器可能会因为其他任务(DOM 更新、事件处理等)，延迟执行回调函数<br>所以嵌套调用越多，时间越不准确</p><h2 id="MessageChannel"><a href="#MessageChannel" class="headerlink" title="MessageChannel"></a>MessageChannel</h2><p>是浏览器提供的一个高级通信机制，它允许在不同上下文之间（比如窗口、iframe 或者 worker 线程）进行安全且异步的消息传递。</p><p>适用于在两个窗口之间建立直接的通信通道。</p><p><strong>创建 MessageChannel</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> messageChannel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageChannel</span>();<br><span class="hljs-comment">// 分别获取两个端口</span><br><span class="hljs-keyword">const</span> port1 = messageChannel.<span class="hljs-property">port1</span>;<br><span class="hljs-keyword">const</span> port2 = messageChannel.<span class="hljs-property">port2</span>;<br></code></pre></td></tr></table></figure><p><strong>发送、接受信息</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 在一个端口上接受消息</span><br>port1.<span class="hljs-property">onmessage</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;收到的信息：&#x27;</span>, event.<span class="hljs-property">data</span>)<br>&#125;<br><br><span class="hljs-comment">// 在一个端口上发送消息</span><br>port1.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;喂喂，收得到吗？&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="BroadcastChannel"><a href="#BroadcastChannel" class="headerlink" title="BroadcastChannel"></a>BroadcastChannel</h2><p>在相同源的不同上下文之间（包括但不限于标签页）实现双向、异步通信</p><p>适用于同一浏览器下的不同窗口进行广播式的通信。</p><p><strong>创建 BroadcastChannel</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 创建一个频道名称为 &quot;my_channel&quot; 的 BroadcastChannel</span><br><span class="hljs-keyword">const</span> channel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BroadcastChannel</span>(<span class="hljs-string">&quot;my_channel&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>发送、接受信息</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 接受消息</span><br>channel.<span class="hljs-property">onmessage</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;收到的信息：&#x27;</span>, event.<span class="hljs-property">data</span>)<br>&#125;<br><br><span class="hljs-comment">// 发送消息</span><br>channel.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;喂喂，收得到吗？&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="什么是-Fiber？"><a href="#什么是-Fiber？" class="headerlink" title="什么是 Fiber？"></a>什么是 Fiber？</h2><p>本质是一个对象形式的数据结构：其中包含了虚拟 DOM、链表、EffectList 等数据<br>在 React 中存在 currentFiber 与 workInProgressFiber 两个 Fiber，每次的更新通过 currentFiber 与虚拟 DOM 对比去生成 workInProgressFiber，最终用 workInProgressFiber 替换掉 currentFiber，实现双缓存的替换<br>双缓存步骤：</p><ul><li>创建 fiberRoot 对象，将所有的 dom 串起来</li><li>在通过 beginWork 的递归调用，创建出 workInProgressFiber，并打上 EffectTag</li><li>然后在 completeWork 中，生成 EffectList，并创建真实的 DOM，在更新前执行一些生命周期，在更新时实现双缓存的切换，在更新后执行一些生命周期</li></ul><h2 id="useState-实现原理？"><a href="#useState-实现原理？" class="headerlink" title="useState 实现原理？"></a>useState 实现原理？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> useState&lt;S&gt;(<br>  <span class="hljs-attr">initialState</span>: (<span class="hljs-function">() =&gt;</span> S) | S,<br>): [S, <span class="hljs-title class_">Dispatch</span>&lt;<span class="hljs-title class_">BasicStateAction</span>&lt;S&gt;&gt;] &#123;<br>  <span class="hljs-keyword">const</span> dispatcher = <span class="hljs-title function_">resolveDispatcher</span>();<br>  <span class="hljs-keyword">return</span> dispatcher.<span class="hljs-title function_">useState</span>(initialState);<br>&#125;<br><br><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">resolveDispatcher</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> dispatcher = <span class="hljs-title class_">ReactCurrentDispatcher</span>.<span class="hljs-property">current</span>;<br>  <span class="hljs-title function_">invariant</span>(<br>    dispatcher !== <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&#x27;Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for&#x27;</span> +<br>      <span class="hljs-string">&#x27; one of the following reasons:\n&#x27;</span> +<br>      <span class="hljs-string">&#x27;1. You might have mismatching versions of React and the renderer (such as React DOM)\n&#x27;</span> +<br>      <span class="hljs-string">&#x27;2. You might be breaking the Rules of Hooks\n&#x27;</span> +<br>      <span class="hljs-string">&#x27;3. You might have more than one copy of React in the same app\n&#x27;</span> +<br>      <span class="hljs-string">&#x27;See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.&#x27;</span>,<br>  );<br>  <span class="hljs-keyword">return</span> dispatcher;<br>&#125;<br><br><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">import</span> type &#123;<span class="hljs-title class_">Dispatcher</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-reconciler/src/ReactInternalTypes&#x27;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ReactCurrentDispatcher</span> = &#123;<br>  <span class="hljs-attr">current</span>: (<span class="hljs-attr">null</span>: <span class="hljs-literal">null</span> | <span class="hljs-title class_">Dispatcher</span>),<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">ReactCurrentDispatcher</span>;<br><br><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">export</span> type <span class="hljs-title class_">Dispatcher</span> = &#123;|<br>  readContext&lt;T&gt;(<br>    <span class="hljs-attr">context</span>: <span class="hljs-title class_">ReactContext</span>&lt;T&gt;,<br>    <span class="hljs-attr">observedBits</span>: <span class="hljs-keyword">void</span> | number | boolean,<br>  ): T,<br>  useState&lt;S&gt;(<span class="hljs-attr">initialState</span>: (<span class="hljs-function">() =&gt;</span> S) | S): [S, <span class="hljs-title class_">Dispatch</span>&lt;<span class="hljs-title class_">BasicStateAction</span>&lt;S&gt;&gt;],<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/useState-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> mountState&lt;S&gt;(<br>  <span class="hljs-attr">initialState</span>: (<span class="hljs-function">() =&gt;</span> S) | S,<br>): [S, <span class="hljs-title class_">Dispatch</span>&lt;<span class="hljs-title class_">BasicStateAction</span>&lt;S&gt;&gt;] &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建一个hook节点，并将其挂载到 currentlyRenderingFiber 链表的最后</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">Hook</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> hook = <span class="hljs-title function_">mountWorkInProgressHook</span>();<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> initialState === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 若传入的是函数，则使用执行该函数后得到的结果</span><br>    initialState = <span class="hljs-title function_">initialState</span>();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 设置该 hook 的初始值</span><br><span class="hljs-comment">   * memoizedState 用来存储当前hook要显示的数据</span><br><span class="hljs-comment">   * baseState 用来存储执行setState()的初始数据</span><br><span class="hljs-comment">   **/</span><br>  hook.<span class="hljs-property">memoizedState</span> = hook.<span class="hljs-property">baseState</span> = initialState;<br><br>  <span class="hljs-comment">// 为该 hook 添加一个 queue 结构，用来存放所有的 setState() 操作</span><br>  <span class="hljs-keyword">const</span> queue = (hook.<span class="hljs-property">queue</span> = &#123;<br>    <span class="hljs-attr">pending</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">dispatch</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">lastRenderedReducer</span>: basicStateReducer,<br>    <span class="hljs-attr">lastRenderedState</span>: (<span class="hljs-attr">initialState</span>: any),<br>  &#125;);<br><br>  <span class="hljs-comment">// 创建一个 dispatch() 方法，提前绑定好 currentlyRenderingFiber 和 queue，最终用它来执行 setState()</span><br>  <span class="hljs-keyword">const</span> dispatch = (queue.<span class="hljs-property">dispatch</span> = (dispatchAction.<span class="hljs-title function_">bind</span>(<br>    <span class="hljs-literal">null</span>,<br>    currentlyRenderingFiber, <span class="hljs-comment">// 当前处理的 fiber 节点</span><br>    queue, <span class="hljs-comment">// 该 hook 的 queue 结构，用来挂载 setState() 中的操作的；</span><br>  ));<br>  <span class="hljs-keyword">return</span> [hook.<span class="hljs-property">memoizedState</span>, dispatch]; <span class="hljs-comment">// useState() 返回的数据</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对当前的 state 执行的基本操作，若传入的不是函数类型，则直接返回该值，</span><br><span class="hljs-comment"> * 若传入的是函数类型，返回执行该函数的结果</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">S</span>&#125; state 当前节点的state</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">BasicStateAction&lt;S&gt;</span>&#125; action 接下来要对该state执行的操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">S</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">basicStateReducer</span>(<span class="hljs-params">state, action</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> action === <span class="hljs-string">&#x27;function&#x27;</span> ? <span class="hljs-title function_">action</span>(state) : action;<br>&#125;<br><br><span class="hljs-keyword">function</span> dispatchAction&lt;S, A&gt;(<br>  <span class="hljs-attr">fiber</span>: <span class="hljs-title class_">Fiber</span>,<br>  <span class="hljs-attr">queue</span>: <span class="hljs-title class_">UpdateQueue</span>&lt;S, A&gt;,<br>  <span class="hljs-attr">action</span>: A,<br>) &#123;<br>  <span class="hljs-keyword">const</span> eventTime = <span class="hljs-title function_">requestEventTime</span>();<br>  <span class="hljs-keyword">const</span> lane = <span class="hljs-title function_">requestUpdateLane</span>(fiber);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">update</span>: <span class="hljs-title class_">Update</span>&lt;S, A&gt; = &#123;<br>    lane,<br>    action,<br>    <span class="hljs-attr">eagerReducer</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">eagerState</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">next</span>: (<span class="hljs-attr">null</span>: any),<br>  &#125;;<br><br>  <span class="hljs-comment">// Append the update to the end of the list.</span><br>  <span class="hljs-keyword">const</span> pending = queue.<span class="hljs-property">pending</span>;<br>  <span class="hljs-keyword">if</span> (pending === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// This is the first update. Create a circular list.</span><br>    update.<span class="hljs-property">next</span> = update;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    update.<span class="hljs-property">next</span> = pending.<span class="hljs-property">next</span>;<br>    pending.<span class="hljs-property">next</span> = update;<br>  &#125;<br>  queue.<span class="hljs-property">pending</span> = update;<br><br>  <span class="hljs-keyword">const</span> alternate = fiber.<span class="hljs-property">alternate</span>;<br>  <span class="hljs-keyword">if</span> (<br>    fiber === currentlyRenderingFiber ||<br>    (alternate !== <span class="hljs-literal">null</span> &amp;&amp; alternate === currentlyRenderingFiber)<br>  ) &#123;<br>    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = <span class="hljs-literal">true</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (<br>      fiber.<span class="hljs-property">lanes</span> === <span class="hljs-title class_">NoLanes</span> &amp;&amp;<br>      (alternate === <span class="hljs-literal">null</span> || alternate.<span class="hljs-property">lanes</span> === <span class="hljs-title class_">NoLanes</span>)<br>    ) &#123;<br>      <span class="hljs-comment">// The queue is currently empty, which means we can eagerly compute the</span><br>      <span class="hljs-comment">// next state before entering the render phase. If the new state is the</span><br>      <span class="hljs-comment">// same as the current state, we may be able to bail out entirely.</span><br>      <span class="hljs-keyword">const</span> lastRenderedReducer = queue.<span class="hljs-property">lastRenderedReducer</span>;<br>      <span class="hljs-keyword">if</span> (lastRenderedReducer !== <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">let</span> prevDispatcher;<br><br>        <span class="hljs-comment">// ...</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-keyword">const</span> <span class="hljs-attr">currentState</span>: S = (queue.<span class="hljs-property">lastRenderedState</span>: any);<br>          <span class="hljs-comment">// 执行传入的 action（setState(action)），返回新的 state</span><br>          <span class="hljs-keyword">const</span> eagerState = <span class="hljs-title function_">lastRenderedReducer</span>(currentState, action);<br><br>          <span class="hljs-comment">// ...</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// ⭐️ 调用更新操作</span><br>    <span class="hljs-title function_">scheduleUpdateOnFiber</span>(fiber, lane, eventTime);<br>  &#125;<br><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>简单理解：但调用 useState 时，会传入一个初始值，useState 会返回一个数组，数组的第一个元素是当前 state 的值，第二个元素是一个 dispatch 方法，并且会记录当前该 hook 对应当前的节点信息(Fiber)；若初始值为函数时，还会执行一下获得函数的返回值。</p><p>当调用 setState 即 dispatch 方法时，会去触发对应的 Queue.dispatch，本质是执行 setState 传入的内容，然后调用 scheduleUpdateOnFiber 去触发更新逻辑</p><h2 id="为什么要使用-useState？"><a href="#为什么要使用-useState？" class="headerlink" title="为什么要使用 useState？"></a>为什么要使用 useState？</h2><p>因为 react 的数据本身是不支持响应式的，因为最开始 react 关注的是数据、视图，但后来发现缺少了数据状态的管理，所以也出现了第三方的 Redux 等库来处理。</p><p>最后官方意识到了，所以提供了 hooks 的形式，调用它来主动更新页面</p>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4-4、React 路由管理</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/4-4%E3%80%81React%20%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/4-4%E3%80%81React%20%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="路由的演变"><a href="#路由的演变" class="headerlink" title="路由的演变"></a>路由的演变</h1><p>之前，部署到服务器的前端项目是由多个 HTML 文件组成，每个 HTML 都有对应服务器路径，前端称其为路由，路由之间使用<code>location.href</code>跳转，跳转路径就是另一个 HTML 的服务器地址。这时候的路由是由后端来管理的<br>后面单页应用流行，部署到服务器的前端项目就只有一个 HTML 文件，对应一个服务器路径。这时候为满足不同页面的展示，就需要借助框架提供的路由能力，至此路由的管理转移到前端身上。</p><h1 id="路由的组成"><a href="#路由的组成" class="headerlink" title="路由的组成"></a>路由的组成</h1><p>即<code>location</code>的组成：<br><code>location.protocal</code>协议<br><code>location.host</code> 域名<br><code>location.port</code> 端口(多数省略了)<br><code>location.pathname</code>  路径<br><code>location.search</code>  参数，[? 后面，# 之前)的内容<br><code>location.hash</code>  锚点，# 后面的内容</p><h1 id="路由的分类"><a href="#路由的分类" class="headerlink" title="路由的分类"></a>路由的分类</h1><p>单页应用下，分为：hash、history<br><strong>hash：</strong><br>路由上带 #，内容为 # 后面，用它来区分页面；<br>不需要服务端配合。</p><p><strong>history：</strong><br>路由上不带 #，内容为[域名后面，? 之前)，用它来区分页面；<br>需要服务端配合。因为部署到服务器后，该模式实际上访问服务器的资源，但单页应用只有一个指向 html 的路径，所以这样访问会返回 404，一般需要配置让其指向 html 的路径</p><h1 id="路由实现的核心原理"><a href="#路由实现的核心原理" class="headerlink" title="路由实现的核心原理"></a>路由实现的核心原理</h1><p><strong>核心原理：监听路径的变化，找到该路径对应的组件，然后渲染到相应位置，并注入 router 等上下文。其中的对应关系就是我们常写的路由配置项。</strong></p><h1 id="react-router"><a href="#react-router" class="headerlink" title="react-router"></a>react-router</h1><p>官网：<a href="https://reactrouter.com/en/main">React Router</a></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./App.css&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BrowserRouter</span>, <span class="hljs-title class_">Routes</span>, <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Outlet</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Menu</span> = (<span class="hljs-params"></span>) =&gt; (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &quot;<span class="hljs-attr">flex</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">margin:</span> &quot;<span class="hljs-attr">0</span> <span class="hljs-attr">10px</span>&quot; &#125;&#125;&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/list&quot;</span>&gt;</span>新闻列表<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">margin:</span> &quot;<span class="hljs-attr">0</span> <span class="hljs-attr">10px</span>&quot; &#125;&#125;&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>关于我们<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Menu</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">div</span>&gt;</span>首页 page<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/list&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">div</span>&gt;</span>新闻列表 page<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">div</span>&gt;</span>关于我们 page<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><h2 id="基本原理-手撸简版"><a href="#基本原理-手撸简版" class="headerlink" title="基本原理(手撸简版)"></a>基本原理(手撸简版)</h2><p>简单手撸<code>react-router-dom</code>核心原理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">&lt;Routes&gt;</span><br><span class="hljs-comment">  &lt;Route path=&quot;/&quot; element=&#123;&lt;Menu /&gt;&#125;&gt;</span><br><span class="hljs-comment">    &lt;Route path=&quot;/&quot; element=&#123;&lt;div&gt;首页 page&lt;/div&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="hljs-comment">    &lt;Route path=&quot;/list&quot; element=&#123;&lt;div&gt;新闻列表 page&lt;/div&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="hljs-comment">    &lt;Route path=&quot;/about&quot; element=&#123;&lt;div&gt;关于我们 page&lt;/div&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="hljs-comment">  &lt;/Route&gt;</span><br><span class="hljs-comment">&lt;/Routes&gt;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 上述代码 等价于：</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">const routes = [</span><br><span class="hljs-comment">  &#123;</span><br><span class="hljs-comment">    path: &quot;/&quot;,</span><br><span class="hljs-comment">    element: &lt;Menu /&gt;,</span><br><span class="hljs-comment">    children: [</span><br><span class="hljs-comment">      &#123;</span><br><span class="hljs-comment">        path: &quot;/&quot;,</span><br><span class="hljs-comment">        element: &lt;div&gt;首页 page&lt;/div&gt;,</span><br><span class="hljs-comment">      &#125;,</span><br><span class="hljs-comment">      &#123;</span><br><span class="hljs-comment">        path: &quot;/list&quot;,</span><br><span class="hljs-comment">        element: &lt;div&gt;新闻列表 page&lt;/div&gt;,</span><br><span class="hljs-comment">      &#125;,</span><br><span class="hljs-comment">      &#123;</span><br><span class="hljs-comment">        path: &quot;/about&quot;,</span><br><span class="hljs-comment">        element: &lt;div&gt;关于我们 page&lt;/div&gt;,</span><br><span class="hljs-comment">      &#125;,</span><br><span class="hljs-comment">    ],</span><br><span class="hljs-comment">  &#125;,</span><br><span class="hljs-comment">];</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">const Routeing = useRoutes(routes);</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">LocationContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>(&#123;&#125;);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">NavigationContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>(&#123;&#125;);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * BrowserRouter 是一个基于 React 的路由器组件，用于在浏览器中导航。</span><br><span class="hljs-comment"> * 它接收一个 children 属性，该属性是一个 React 元素，表示要渲染的组件。</span><br><span class="hljs-comment"> * 它返回一个包含 LocationContext 和 NavigationContext 的组件，这两个上下文提供了有关当前位置和导航器的信息。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">object</span>&#125; <span class="hljs-variable">props</span> - 包含 children 属性的对象。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">ReactElement</span>&#125; - 返回一个包含 LocationContext 和 NavigationContext 的组件。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">BrowserRouter</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-comment">// 创建一个 LocationContext.Provider 组件，并设置其值为一个对象，该对象包含 location 属性，值为 window.location</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LocationContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">location:</span> <span class="hljs-attr">window.location</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">NavigationContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">navigator:</span> <span class="hljs-attr">window.history</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">        &#123;children&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">NavigationContext.Provider</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">LocationContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useLocation</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">LocationContext</span>).<span class="hljs-property">location</span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useNavigation</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">NavigationContext</span>).<span class="hljs-property">navigator</span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">findRoute</span>(<span class="hljs-params">routes, pathname</span>) &#123;<br>  routes.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">&#123; path &#125;</span>) =&gt;</span> path === pathname);<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用路由</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> routes 路由列表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 父级路由的元素，与路由匹配到的渲染组件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useRoutes</span>(<span class="hljs-params">routes</span>) &#123;<br>  <span class="hljs-comment">// 获取当前位置信息</span><br>  <span class="hljs-keyword">const</span> location = <span class="hljs-title function_">useLocation</span>();<br>  <span class="hljs-comment">// 获取当前路径</span><br>  <span class="hljs-keyword">const</span> pathname = location.<span class="hljs-property">pathname</span> || <span class="hljs-string">&quot;/&quot;</span>;<br>  <span class="hljs-comment">// 在路由列表中查找当前路径对应的路由</span><br>  <span class="hljs-keyword">const</span> parentRoute = <span class="hljs-title function_">findRoute</span>(routes, pathname);<br><br>  <span class="hljs-comment">// 返回父级路由的元素</span><br>  <span class="hljs-keyword">return</span> parentRoute?.<span class="hljs-property">element</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将子节点转换为路由对象数组</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> children 子节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 路由对象数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">childrenToRoutes</span>(<span class="hljs-params">children</span>) &#123;<br>  <span class="hljs-keyword">const</span> routes = [];<br><br>  <span class="hljs-comment">// 遍历子节点</span><br>  <span class="hljs-title class_">React</span>.<span class="hljs-property">Children</span>.<span class="hljs-title function_">forEach</span>(children, <span class="hljs-function">(<span class="hljs-params">node</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 提取节点路径和元素</span><br>    <span class="hljs-keyword">const</span> &#123; path, element &#125; = node.<span class="hljs-property">props</span>;<br><br>    <span class="hljs-comment">// 构建路由对象</span><br>    <span class="hljs-keyword">const</span> route = &#123; path, element &#125;;<br><br>    <span class="hljs-comment">// 如果节点有子节点，递归调用childrenToRoutes函数</span><br>    <span class="hljs-keyword">if</span> (node.<span class="hljs-property">props</span>.<span class="hljs-property">children</span>) &#123;<br>      route.<span class="hljs-property">children</span> = <span class="hljs-title function_">childrenToRoutes</span>(node.<span class="hljs-property">props</span>.<span class="hljs-property">children</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 将路由对象添加到routes数组中</span><br>    routes.<span class="hljs-title function_">push</span>(route);<br>  &#125;);<br><br>  <span class="hljs-comment">// 返回routes数组</span><br>  <span class="hljs-keyword">return</span> routes;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义路由组件</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> children 组件列表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 使用路由组件返回结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Routes</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">useRoutes</span>(<span class="hljs-title function_">childrenToRoutes</span>(children));<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="手撸-Router"><a href="#手撸-Router" class="headerlink" title="手撸 Router"></a>手撸 Router</h1><p><strong>核心原理：监听路径的变化，找到该路径对应的组件，然后渲染到相应位置，并注入 router 等上下文。其中的对应关系就是我们常写的路由配置项。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>base-index-html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#about&quot;</span>&gt;</span>关于我们<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#list&quot;</span>&gt;</span>新闻列表<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#post&quot;</span>&gt;</span>新闻详情<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;router-view&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">class</span> <span class="hljs-title class_">Router</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">constructor</span>(<span class="hljs-params">routes</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">routes</span> = routes;</span><br><span class="language-javascript"></span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>();</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;hashchange&quot;</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onHashChange</span>());</span><br><span class="language-javascript"></span><br><span class="language-javascript">          <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;load&quot;</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onHashChange</span>());</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">onHashChange</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> hash = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> route = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">findRoute</span>(hash);</span><br><span class="language-javascript"></span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">updateView</span>(route);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">findRoute</span>(<span class="hljs-params">hash</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">routes</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">route</span>) =&gt;</span> route.<span class="hljs-property">path</span> === <span class="hljs-string">&quot;/&quot;</span> + hash);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">updateView</span>(<span class="hljs-params">route</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> viewEle = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.router-view&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">          viewEle.<span class="hljs-property">innerHTML</span> = route ? route.<span class="hljs-property">element</span> : <span class="hljs-string">&quot;404&quot;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">push</span>(<span class="hljs-params">path</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span> = path.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> routes = [</span><br><span class="language-javascript">        &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">element</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">              &lt;div&gt;首页 page&lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">              &lt;button onclick=&quot;router.push(&#x27;/about&#x27;)&quot;&gt;去 about&lt;/button&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">          `</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/list&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">element</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">              &lt;div&gt;新闻列表 page&lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">          `</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">element</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">              &lt;div&gt;关于我们 page&lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">          `</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/post&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">element</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">              &lt;div&gt;新闻详情 page&lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">          `</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      ];</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(routes);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4-3、React 状态管理</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/4-3%E3%80%81React%20%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/4-3%E3%80%81React%20%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>状态管理：本质对一个[全局唯一、具有响应式]变量的管理<br>因为是全局的，那为了流转&#x2F;使用上的不混乱&#x2F;冲突等，所以会对其制定流转规则，让变化变得可预测。</p><h1 id="Redux-基本原理-手撸简版"><a href="#Redux-基本原理-手撸简版" class="headerlink" title="Redux 基本原理(手撸简版)"></a>Redux 基本原理(手撸简版)</h1><h2 id="createStore-发布订阅者模式"><a href="#createStore-发布订阅者模式" class="headerlink" title="createStore 发布订阅者模式"></a>createStore 发布订阅者模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建 Redux store</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> reducers 用于处理 action 的 reducer 函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> initialValue 初始状态值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回一个包含 getState、dispatch 和 subscribe 方法的对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createStore</span>(<span class="hljs-params">reducers, initialValue</span>) &#123;<br>  <span class="hljs-comment">// 初始化状态为初始值</span><br>  <span class="hljs-keyword">let</span> state = initialValue;<br><br>  <span class="hljs-comment">// 存储监听器的数组</span><br>  <span class="hljs-keyword">const</span> listeners = [];<br><br>  <span class="hljs-comment">// 获取当前状态的方法</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getState</span> = (<span class="hljs-params"></span>) =&gt; state;<br><br>  <span class="hljs-comment">// 订阅监听器的函数</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">subscribe</span> = (<span class="hljs-params">fn</span>) =&gt; &#123;<br>    <span class="hljs-comment">// 将监听器添加到监听器数组中</span><br>    listeners.<span class="hljs-title function_">push</span>(fn);<br>  &#125;;<br><br>  <span class="hljs-comment">// 派发动作的函数</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">dispatch</span> = (<span class="hljs-params">action</span>) =&gt; &#123;<br>    <span class="hljs-comment">// 使用reducers函数计算出新的状态</span><br>    <span class="hljs-keyword">const</span> nextState = <span class="hljs-title function_">reducers</span>(state, action);<br><br>    <span class="hljs-comment">// 更新状态为新的状态</span><br>    state = nextState;<br><br>    <span class="hljs-comment">// 遍历监听器数组，并调用每个监听器函数</span><br>    listeners.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> <span class="hljs-title function_">fn</span>());<br>  &#125;;<br><br>  <span class="hljs-comment">// 返回一个包含getState、dispatch和subscribe的对象</span><br>  <span class="hljs-keyword">return</span> &#123; getState, dispatch, subscribe &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="combineReduces"><a href="#combineReduces" class="headerlink" title="combineReduces"></a>combineReduces</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 组合多个 reducer 函数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> reducers 一个包含多个 reducer 函数的对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回一个 reducer 函数，将多个 reducer 函数组合在一起</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">combineReducers</span>(<span class="hljs-params">reducers</span>) &#123;<br>  <span class="hljs-comment">// 获取所有reducer的键名</span><br>  <span class="hljs-keyword">const</span> keys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(reducers);<br><br>  <span class="hljs-comment">// 返回一个新的reducer函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 创建一个新的状态对象</span><br>    <span class="hljs-keyword">const</span> nextState = &#123;&#125;;<br><br>    <span class="hljs-comment">// 遍历所有reducer的键名</span><br>    keys.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 获取对应键名的reducer函数</span><br>      <span class="hljs-keyword">const</span> reducer = reducers[key];<br><br>      <span class="hljs-comment">// 获取当前状态中对应键名的值</span><br>      <span class="hljs-keyword">const</span> prve = state[key];<br><br>      <span class="hljs-comment">// 调用reducer函数，传入当前值和action，得到下一个状态的值</span><br>      <span class="hljs-keyword">const</span> next = <span class="hljs-title function_">reducer</span>(prve, action);<br><br>      <span class="hljs-comment">// 将下一个状态的值添加到新的状态对象中</span><br>      nextState[key] = next;<br>    &#125;);<br><br>    <span class="hljs-comment">// 返回新的状态对象</span><br>    <span class="hljs-keyword">return</span> nextState;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 连接函数，用于将组件与 Redux store 连接起来</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> mapStateToProps 将 Redux store 中的 state 映射到组件的 props</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> mapDispatchToProps 将 Redux store 中的 dispatch 方法映射到组件的 props</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回一个高阶组件，该高阶组件将传入的组件与 Redux store 连接起来</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">connect</span>(<span class="hljs-params">mapStateToProps, mapDispatchToProps</span>) &#123;<br>  <span class="hljs-comment">// 返回一个函数，该函数接收一个组件作为参数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">Component</span>) &#123;<br>    <span class="hljs-comment">// 返回一个函数，该函数接收props作为参数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">props</span>) &#123;<br>      <span class="hljs-comment">// 使用useContext钩子获取Redux的store</span><br>      <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ReduxContext</span>);<br>      <span class="hljs-comment">// 使用useState钩子创建一个状态变量，并初始化为false</span><br>      <span class="hljs-keyword">const</span> [, setBool] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>      <span class="hljs-comment">// 定义一个forceUpdate函数，用于强制更新组件</span><br>      <span class="hljs-keyword">const</span> <span class="hljs-title function_">forceUpdate</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setBool</span>(<span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> !val);<br><br>      <span class="hljs-comment">// 在组件挂载后，将forceUpdate函数作为监听器订阅store的更新</span><br>      <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> store.<span class="hljs-title function_">subscribe</span>(forceUpdate), []);<br><br>      <span class="hljs-comment">// 返回一个JSX元素，该元素渲染传入的组件，并传入props和绑定的state和dispatch</span><br>      <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Component</span></span></span><br><span class="hljs-tag"><span class="language-xml">          &#123;<span class="hljs-attr">...props</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          &#123;<span class="hljs-attr">...mapStateToProps</span>(<span class="hljs-attr">store.getState</span>())&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          &#123;<span class="hljs-attr">...mapDispatchToProps</span>(<span class="hljs-attr">store.dispatch</span>)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br>      );<br>    &#125;;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完整手写-可运行的"><a href="#完整手写-可运行的" class="headerlink" title="完整手写(可运行的)"></a>完整手写(可运行的)</h2><p><code>src/store/redux.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createContext, useContext, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建 Redux store</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> reducers 用于处理 action 的 reducer 函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> initialValue 初始状态值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回一个包含 getState、dispatch 和 subscribe 方法的对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createStore</span>(<span class="hljs-params">reducers, initialValue</span>) &#123;<br>  <span class="hljs-comment">// 初始化状态为初始值</span><br>  <span class="hljs-keyword">let</span> state = initialValue;<br><br>  <span class="hljs-comment">// 存储监听器的数组</span><br>  <span class="hljs-keyword">const</span> listeners = [];<br><br>  <span class="hljs-comment">// 获取当前状态的方法</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getState</span> = (<span class="hljs-params"></span>) =&gt; state;<br><br>  <span class="hljs-comment">// 订阅监听器的函数</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">subscribe</span> = (<span class="hljs-params">fn</span>) =&gt; &#123;<br>    <span class="hljs-comment">// 将监听器添加到监听器数组中</span><br>    listeners.<span class="hljs-title function_">push</span>(fn);<br>  &#125;;<br><br>  <span class="hljs-comment">// 派发动作的函数</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">dispatch</span> = (<span class="hljs-params">action</span>) =&gt; &#123;<br>    <span class="hljs-comment">// 使用reducers函数计算出新的状态</span><br>    <span class="hljs-keyword">const</span> nextState = <span class="hljs-title function_">reducers</span>(state, action);<br><br>    <span class="hljs-comment">// 更新状态为新的状态</span><br>    state = nextState;<br><br>    <span class="hljs-comment">// 遍历监听器数组，并调用每个监听器函数</span><br>    listeners.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> <span class="hljs-title function_">fn</span>());<br>  &#125;;<br><br>  <span class="hljs-comment">// 返回一个包含getState、dispatch和subscribe的对象</span><br>  <span class="hljs-keyword">return</span> &#123; getState, dispatch, subscribe &#125;;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 组合多个 reducer 函数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> reducers 一个包含多个 reducer 函数的对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回一个 reducer 函数，将多个 reducer 函数组合在一起</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">combineReducers</span>(<span class="hljs-params">reducers</span>) &#123;<br>  <span class="hljs-comment">// 获取所有reducer的键名</span><br>  <span class="hljs-keyword">const</span> keys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(reducers);<br><br>  <span class="hljs-comment">// 返回一个新的reducer函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 创建一个新的状态对象</span><br>    <span class="hljs-keyword">const</span> nextState = &#123;&#125;;<br><br>    <span class="hljs-comment">// 遍历所有reducer的键名</span><br>    keys.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 获取对应键名的reducer函数</span><br>      <span class="hljs-keyword">const</span> reducer = reducers[key];<br><br>      <span class="hljs-comment">// 获取对应键名的当前状态值</span><br>      <span class="hljs-keyword">const</span> prve = state[key];<br><br>      <span class="hljs-comment">// 调用reducer函数，传入当前值和action，得到下一个状态的值</span><br>      <span class="hljs-keyword">const</span> next = <span class="hljs-title function_">reducer</span>(prve, action);<br><br>      <span class="hljs-comment">// 将下一个状态的值添加到新的状态对象中</span><br>      nextState[key] = next;<br>    &#125;);<br><br>    <span class="hljs-comment">// 返回新的状态对象</span><br>    <span class="hljs-keyword">return</span> nextState;<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">ReduxContext</span> = <span class="hljs-title function_">createContext</span>();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 连接函数，用于将组件与 Redux store 连接起来</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> mapStateToProps 将 Redux store 中的 state 映射到组件的 props</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> mapDispatchToProps 将 Redux store 中的 dispatch 方法映射到组件的 props</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回一个高阶组件，该高阶组件将传入的组件与 Redux store 连接起来</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">connect</span>(<span class="hljs-params">mapStateToProps, mapDispatchToProps</span>) &#123;<br>  <span class="hljs-comment">// 返回一个函数，该函数接收一个组件作为参数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">Component</span>) &#123;<br>    <span class="hljs-comment">// 返回一个函数，该函数接收props作为参数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">props</span>) &#123;<br>      <span class="hljs-comment">// 使用useContext钩子获取Redux的store</span><br>      <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ReduxContext</span>);<br>      <span class="hljs-comment">// 使用useState钩子创建一个状态变量，并初始化为false</span><br>      <span class="hljs-keyword">const</span> [, setBool] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>      <span class="hljs-comment">// 定义一个forceUpdate函数，用于强制更新组件</span><br>      <span class="hljs-keyword">const</span> <span class="hljs-title function_">forceUpdate</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setBool</span>(<span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> !val);<br><br>      <span class="hljs-comment">// 在组件挂载后，将forceUpdate函数作为监听器订阅store的更新</span><br>      <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> store.<span class="hljs-title function_">subscribe</span>(forceUpdate), []);<br><br>      <span class="hljs-comment">// 返回一个JSX元素，该元素渲染传入的组件，并传入props和绑定的state和dispatch</span><br>      <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Component</span></span></span><br><span class="hljs-tag"><span class="language-xml">          &#123;<span class="hljs-attr">...props</span>&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          &#123;<span class="hljs-attr">...mapStateToProps</span>(<span class="hljs-attr">store.getState</span>())&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          &#123;<span class="hljs-attr">...mapDispatchToProps</span>(<span class="hljs-attr">store.dispatch</span>)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br>      );<br>    &#125;;<br>  &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>src/store/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createStore, combineReducers, connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./redux&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">countReducers</span>(<span class="hljs-params">count, action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;addCount&quot;</span>:<br>      <span class="hljs-keyword">return</span> count + <span class="hljs-number">1</span>;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> count;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">infoReducers</span>(<span class="hljs-params">info, action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;addAge&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123; ...info, <span class="hljs-attr">age</span>: info.<span class="hljs-property">age</span> + <span class="hljs-number">1</span> &#125;;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> info;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> initialValue = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">23</span>,<br>  <span class="hljs-attr">info</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">27</span>,<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">const</span> reducers = <span class="hljs-title function_">combineReducers</span>(&#123; <span class="hljs-attr">count</span>: countReducers, <span class="hljs-attr">info</span>: infoReducers &#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducers, initialValue);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mapStateToProps</span>(<span class="hljs-params">state</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">count</span>: state.<span class="hljs-property">count</span>, <span class="hljs-attr">info</span>: state.<span class="hljs-property">info</span> &#125;;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mapDispatchToProps</span>(<span class="hljs-params">dispatch</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">addCount</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;addCount&quot;</span> &#125;);<br>    &#125;,<br>    <span class="hljs-title function_">addAge</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;addAge&quot;</span> &#125;);<br>    &#125;,<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> connected = <span class="hljs-title function_">connect</span>(mapStateToProps, mapDispatchToProps);<br><br></code></pre></td></tr></table></figure><p><code>某个 .jsx 文件内</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; store, connected &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../store&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ReduxContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../store/redux&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title function_">connected</span>(<span class="hljs-function">(<span class="hljs-params">&#123; count, info, addCount, addAge &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      I am Child</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>count：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;addCount&#125;</span>&gt;</span>addCount<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          info：&#123;info.name&#125;，&#123;info.age&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;addAge&#125;</span>&gt;</span>addAge<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Parent</span> = (<span class="hljs-params"></span>) =&gt; (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    I am Parent</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Store</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ReduxContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Parent</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ReduxContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="Mobx-基本原理-手撸简版"><a href="#Mobx-基本原理-手撸简版" class="headerlink" title="Mobx 基本原理(手撸简版)"></a>Mobx 基本原理(手撸简版)</h1><p>可以发现跟<code>Vue</code>的响应式有点相似，采用的是观察者模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 具体实现：</span><br><br><span class="hljs-keyword">let</span> effect = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">const</span> deps = [];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 返回一个对象，包含两个方法：get 和 set</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-comment">// get 方法用于获取目标对象的属性值</span><br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key, desc</span>) &#123;<br>      <span class="hljs-comment">// 如果存在 effect，则将其添加到 deps 数组中</span><br>      <span class="hljs-keyword">if</span> (effect) deps.<span class="hljs-title function_">push</span>(effect);<br><br>      <span class="hljs-comment">// 调用 Reflect.get 方法获取目标对象的属性值</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, key, desc);<br>    &#125;,<br>    <span class="hljs-comment">// set 方法用于设置目标对象的属性值</span><br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, value, key, desc</span>) &#123;<br>      <span class="hljs-comment">// 调用 Reflect.set 方法设置目标对象的属性值</span><br>      <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, value, key, desc);<br><br>      <span class="hljs-comment">// 遍历 deps 数组，依次执行其中的函数</span><br>      deps.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">dep</span>) =&gt;</span> <span class="hljs-title function_">dep</span>());<br>    &#125;,<br>  &#125;;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 遍历数据，递归处理对象和数组中的值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> data 要遍历的数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回处理后的数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">walk</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-comment">// 如果数据为空或者数据类型不是对象，则直接返回数据</span><br>  <span class="hljs-keyword">if</span> (data === <span class="hljs-literal">null</span> || <span class="hljs-keyword">typeof</span> data !== <span class="hljs-string">&quot;object&quot;</span>) <span class="hljs-keyword">return</span> data;<br><br>  <span class="hljs-comment">// 遍历对象的所有键值对</span><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(data).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[key, value]</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 递归调用 walk 函数，处理每个键值对的值，并将处理后的值重新赋值给对应的键</span><br>    data[key] = <span class="hljs-title function_">walk</span>(value);<br>  &#125;);<br><br>  <span class="hljs-comment">// 使用 Proxy 对象包装数据，并调用 handle 函数处理代理对象</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(data, <span class="hljs-title function_">handle</span>());<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将给定的数据转换为可观察对象</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> data 要转换的数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回可观察对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">observable</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-comment">// 调用 walk 函数处理 data 参数，并返回处理结果</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">walk</span>(data);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自动运行函数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> _effect 需要运行的函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">autorun</span>(<span class="hljs-params">_effect</span>) &#123;<br>  <span class="hljs-comment">// 将传入的参数_effect赋值给全局变量effect</span><br>  effect = _effect;<br><br>  <span class="hljs-comment">// 调用全局变量effect对应的函数</span><br>  <span class="hljs-title function_">effect</span>();<br><br>  <span class="hljs-comment">// 将全局变量effect置为null</span><br>  effect = <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体使用：</span><br><span class="hljs-keyword">const</span> data = &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">1</span> &#125;;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">observable</span>(data);<br><br><span class="hljs-title function_">autorun</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;autorun store.count：&quot;</span>, store.<span class="hljs-property">count</span>);<br>&#125;);<br><br>store.<span class="hljs-property">count</span> = <span class="hljs-number">2</span>; <span class="hljs-comment">// 自动执行一次 autorun</span><br>store.<span class="hljs-property">count</span> = <span class="hljs-number">3</span>; <span class="hljs-comment">// 自动执行一次 autorun</span><br><br></code></pre></td></tr></table></figure><h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="Redux-中间件的-compose-原理"><a href="#Redux-中间件的-compose-原理" class="headerlink" title="Redux 中间件的 compose 原理"></a>Redux 中间件的 compose 原理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// compose 函数接收多个函数作为参数，并通过 reduce 方法将这些函数组合起来</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">compose</span>(<span class="hljs-params">...funcs</span>) &#123;<br>  <span class="hljs-keyword">return</span> funcs.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// a 和 b 分别代表当前正在组合的两个函数，reduce 的每次迭代中，</span><br>    <span class="hljs-comment">//  a 是之前已经组合好的函数，</span><br>    <span class="hljs-comment">//  b 是当前需要与之组合的新函数</span><br><br>    <span class="hljs-comment">// 返回一个新的函数，该函数接受一组参数 args，</span><br>    <span class="hljs-comment">// 首先应用 b 函数处理 args，然后将结果传递给 a 函数继续处理</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> <span class="hljs-title function_">a</span>(<span class="hljs-title function_">b</span>(args));<br>  &#125;);<br>&#125;<br><br><span class="hljs-comment">// 使用 compose 函数时，传入一系列函数 fn1、fn2、fn3</span><br><span class="hljs-keyword">const</span> composedFn = <span class="hljs-title function_">compose</span>(fn1, fn2, fn3);<br><br><span class="hljs-comment">// 当调用这个组合后的函数时，它会按从右到左的顺序执行函数</span><br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">composedFn</span>(args);<br><br><span class="hljs-comment">// 这样 composedFn(args) 的效果就等同于下面的嵌套调用</span><br><span class="hljs-comment">// fn1(fn2(fn3(args)))</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4-2、React 高级用法</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/4-2%E3%80%81React%20%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/4-2%E3%80%81React%20%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p>作用：用于访问组件实例或者 DOM 元素的<br>白话：React 版的<code>document.querySelector(xx)</code>，更符合 React 的数据流规则<br>HostComponent：代表真实 DOM 元素的 React 组件</p><h2 id="类组件-createRef"><a href="#类组件-createRef" class="headerlink" title="类组件 - createRef"></a>类组件 - createRef</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">ClassCom</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props)<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">inputRef</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>()<br>  &#125;<br><br>  handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">inputRef</span>.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>()<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.inputRef&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span>Focus<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数组件-useRef"><a href="#函数组件-useRef" class="headerlink" title="函数组件 - useRef"></a>函数组件 - useRef</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; useRef &#125;  <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">FunCom</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>()<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    inputRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>()<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span>Focus<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>因为 Ref 本身是不支持跨层级传递的，当需要访问子组件的具体 DOM 时，则子组件需要用<code>forwardRef</code>包裹一下，否则只能获取子组件的 React 实例。</p><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><p>基于<code>forwardRef</code>还可以实现父组件调用子组件的方法<br><code>useImperativeHandle(ref, () =&gt; obj)</code><br>当有<code>useImperativeHandle</code>时，则 ref 的 current 就会被替换为 obj</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">ClassComChild2</span> = <span class="hljs-title function_">forwardRef</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">props, ref</span>) &#123;<br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>();<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    inputRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>();<br>  &#125;;<br><br>  <span class="hljs-title function_">useImperativeHandle</span>(ref, <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">focusEvent</span>: handleClick,<br>  &#125;));<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>I am Class Com Child 2~ <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span>Foucs<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassComName</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props);<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">childRef2</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>  &#125;<br><br>  handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">childRef2</span>.<span class="hljs-property">current</span>.<span class="hljs-title function_">focusEvent</span>();<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ClassComChild2</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.childRef2&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ClassComChild2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一般用于<code>Moadl</code>弹窗组件</p><h1 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h1><p>作用：一种在组件树中跨层级共享和传递状态（数据或函数）的方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 创建：</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">ThemeContext</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment">// 提供：</span><br>&lt;<span class="hljs-title class_">ThemeContext</span>.<span class="hljs-property">Provider</span> value=&#123;<span class="hljs-comment">/* some value */</span>&#125;&gt;<br>  &#123;<span class="hljs-comment">/* 组件树 */</span>&#125;<br>&lt;/<span class="hljs-title class_">ThemeContext</span>.<span class="hljs-property">Provider</span>&gt;<br><br><span class="hljs-comment">// 消费：</span><br><span class="hljs-comment">// 1、Consumer</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br><span class="language-xml">  &#123;value =&gt; /* 使用 value */&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br><br><span class="hljs-comment">// 2、使用 useContext</span><br><span class="hljs-keyword">const</span> value = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ThemeContext</span>);<br></code></pre></td></tr></table></figure><h2 id="类组件-Consumer"><a href="#类组件-Consumer" class="headerlink" title="类组件 - Consumer"></a>类组件 - Consumer</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ThemeContext</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ThemeContext&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassCom</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props)<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123; <span class="hljs-attr">theme</span>: <span class="hljs-string">&#x27;light&#x27;</span> &#125;<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.theme&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>当前 theme：&#123; this.state.theme &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> /&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> /&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Child1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 用法 1 - 定义：static contextType</span><br>  <span class="hljs-keyword">static</span> contextType = <span class="hljs-title class_">ThemeContext</span><br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 用法 1 - 获取：this.context</span><br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>当前 theme：&#123; this.context &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Child2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 用法 2：ThemeContext.Consumer</span><br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br><span class="language-xml">      &#123;</span><br><span class="language-xml">        (theme) =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>当前 theme：&#123; theme &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数组件-useContext"><a href="#函数组件-useContext" class="headerlink" title="函数组件 - useContext"></a>函数组件 - useContext</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; useState, useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ThemeContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./ThemeContext&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child1</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">ThemeContext</span>)<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>当前 theme：&#123; theme &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">FuncCom</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">const</span> [theme] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;light&#x27;</span>)<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;theme&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>当前 theme：&#123; this.state.theme &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="HOC"><a href="#HOC" class="headerlink" title="HOC"></a>HOC</h1><p>HOC：Higher-Order Component，高阶组件，本质是个函数，参数为组件，返回为组件<br>高级函数：参数为函数，返回为函数的函数<br>作用：属性代理、反向继承</p><h2 id="属性代理-常用"><a href="#属性代理-常用" class="headerlink" title="属性代理 - 常用"></a>属性代理 - 常用</h2><p>一般用函数组件实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// ./components/hoc/propsProxy.jsx</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">withCard</span> = (<span class="hljs-params">bgColor</span>) =&gt; <span class="hljs-function">(<span class="hljs-params">ContextComponent</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">WrpperComponent</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> wrapperStyle = &#123;<br>      <span class="hljs-attr">width</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">height</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">border</span>: <span class="hljs-string">`1px solid <span class="hljs-subst">$&#123;props.borderColor&#125;</span>`</span>,<br>      <span class="hljs-attr">borderRadius</span>: <span class="hljs-number">5</span>,<br>      <span class="hljs-attr">display</span>: <span class="hljs-string">&quot;flex&quot;</span>,<br>      <span class="hljs-attr">alignItems</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>      <span class="hljs-attr">justifyContent</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>      <span class="hljs-attr">flexDirection</span>: <span class="hljs-string">&quot;column&quot;</span>,<br>      <span class="hljs-attr">backgroundColor</span>: bgColor,<br>    &#125;;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;wrapperStyle&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>WrpperComponent<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ContextComponent</span> &#123;<span class="hljs-attr">...props</span>&#125; /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">WrpperComponent</span>;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">contextComponent</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      contextComponent</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>text:&#123;props.text&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">withCard</span>(<span class="hljs-string">&quot;blue&quot;</span>)(contextComponent);<br><br><span class="hljs-comment">// App.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">PropsProxy</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/hoc/propsProxy&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PropsProxy</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;PropsProxy Text&quot;</span> <span class="hljs-attr">borderColor</span>=<span class="hljs-string">&quot;red&quot;</span>  /&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="反向继承-少见"><a href="#反向继承-少见" class="headerlink" title="反向继承 - 少见"></a>反向继承 - 少见</h2><p>一般用类组件实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ContentCom</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        ContentCom</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;21dsa&quot;</span>&gt;</span> 一个普通的组件。。。。<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 新需求：当该组件渲染完后时，进行埋点统计</span><br><span class="hljs-comment">// 新需求改动点：-- start</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Logs</span> = (<span class="hljs-params">logMap</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">Com</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> didMount = <span class="hljs-title class_">Com</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">componentDidMount</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Com</span> &#123;<br>      <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (didMount) &#123;<br>          didMount.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br>        &#125;<br><br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(logMap).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[key, value]</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(key)) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`元素 id：<span class="hljs-subst">$&#123;key&#125;</span>，开始埋点统计`</span>);<br><br>            <span class="hljs-keyword">if</span> (value &amp;&amp; <span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>              <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(value).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[method, fn]</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> fn === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>                  fn.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br>                &#125;<br>              &#125;);<br>            &#125;<br>          &#125;<br>        &#125;);<br>      &#125;<br>      <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">render</span>();<br>      &#125;<br>    &#125;;<br>  &#125;;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">LogContentCom</span> = <span class="hljs-title class_">Logs</span>(&#123;<br>  <span class="hljs-string">&quot;21dsa&quot;</span>: &#123;<br>    <span class="hljs-title function_">pv</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[统计 pv ] &gt;&quot;</span>);<br>    &#125;,<br>    <span class="hljs-title function_">uv</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[统计 uv ] &gt;&quot;</span>);<br>    &#125;,<br>  &#125;,<br>&#125;)(<span class="hljs-title class_">ContentCom</span>);<br><span class="hljs-comment">// 新需求改动点：-- end</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReverseExtends</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        ReverseExtends</span><br><span class="language-xml">        &#123;/* 改动点：<span class="hljs-tag">&lt;<span class="hljs-name">ContentCom</span> /&gt;</span> =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">LogContentCom</span> /&gt;</span> */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">LogContentCom</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="渲染控制"><a href="#渲染控制" class="headerlink" title="渲染控制"></a>渲染控制</h1><p>一般为两种方法来控制渲染<br>1、父组件隔离子组件的渲染<br>2、子组件控制不要额外渲染<br>当组件内的响应式数据改变时，整个 render 都会重新执行一遍，生成新的虚拟 DOM，然后新旧对比，完成真实 DOM 的更新</p><h2 id="父组件隔离子组件的渲染"><a href="#父组件隔离子组件的渲染" class="headerlink" title="父组件隔离子组件的渲染"></a>父组件隔离子组件的渲染</h2><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Count</span> = (<span class="hljs-params">&#123; count &#125;</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ Count 执行, count ] &gt;&quot;</span>, count);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>curr count: &#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RenderController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">number</span>: <span class="hljs-number">0</span>,<br>    &#125;;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">Count</span> = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Count</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;this.state.count&#125;</span> /&gt;</span></span>;<br>  &#125;<br><br>  <span class="hljs-comment">// Count 组件的渲染控制逻辑</span><br>  <span class="hljs-title class_">CountComponentController</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 每当 this.state 的值有变化时，该函数都会执行哦</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ CountComponentController 执行 ] &gt;&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span> !== <span class="hljs-variable language_">this</span>.<span class="hljs-property">Count</span>.<span class="hljs-property">props</span>.<span class="hljs-property">count</span>) &#123;<br>      <span class="hljs-comment">// 只有当 count 的值有变化，则重新赋值，触发渲染执行</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">Count</span> = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Count</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;this.state.count&#125;</span> /&gt;</span></span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 否则，直接返回 this.Count，不重新渲染</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">Count</span>;<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>RenderController<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>count: &#123;this.state.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.setState(&#123; count: this.state.count + 1 &#125;)&#125;</span><br><span class="language-xml">          &gt;</span><br><span class="language-xml">            +</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          &#123;/* 这样写，那 number 的变化也会导致该组件重新执行，只是真实 DOM 不重新渲染 */&#125;</span><br><span class="language-xml">          &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">Count</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;this.state.count&#125;</span> /&gt;</span> */&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">          &#123;/* 这样写，那 number 的变化将不会导致该组件重新执行 */&#125;</span><br><span class="language-xml">          &#123;this.CountComponentController()&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>number: &#123;this.state.number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.setState(&#123; number: this.state.number + 1 &#125;)&#125;</span><br><span class="language-xml">          &gt;</span><br><span class="language-xml">            +</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><p>也就是 useMemo 的使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useMemo, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Count</span> = (<span class="hljs-params">&#123; count &#125;</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ Count 执行, count ] &gt;&quot;</span>, count);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>curr count: &#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">RenderController</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [<span class="hljs-built_in">number</span>, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">const</span> memoCount = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Count</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;count&#125;</span> /&gt;</span></span>, [count]);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>RenderController<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>count: &#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 这样写，那 number的变化也会导致该组件重新执行，只是真实 DOM 不重新渲染 */&#125;</span><br><span class="language-xml">        &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">Count</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;count&#125;</span> /&gt;</span> */&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">        &#123;memoCount&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>number: &#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setNumber(number + 1)&#125;&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><code>useMemo(fn, deps)，返回值为 fn 函数的返回值</code><br>fn：函数，返回值进行缓存<br>deps：依赖项，改变时重新执行函数</p><h2 id="子组件控制不要额外渲染"><a href="#子组件控制不要额外渲染" class="headerlink" title="子组件控制不要额外渲染"></a>子组件控制不要额外渲染</h2><p>类组件：</p><ol><li>shouldComponentUpdate(生命周期)</li><li>PureComponent：props、state 进行浅比较，有变化后则更新</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RenderController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PureComponent</span> &#123;<br>  <span class="hljs-title function_">cunstructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-comment">/* ... */</span>)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><p>使用场景：</p><ol><li>回调函数作为 props 传递给子组件：如果您有一个父组件传递给子组件的回调函数，且这个回调函数依赖于父组件的状态或属性，那么使用 useCallback 可以确保子组件在父组件重新渲染时不会因为回调函数的引用发生变化而重新渲染。</li><li>依赖于 props 的内联函数：如果您在组件内部定义了一个依赖于 props 的内联函数，而这个函数在组件重新渲染时没有发生变化，那么使用 useCallback 可以避免不必要的函数重新创建。</li><li>作为 effect 的依赖项：如果您将回调函数作为 effect 的依赖项，使用 useCallback 可以确保 effect 只在回调函数引用发生变化时才重新运行。</li></ol><p><code>useCallback(fn, deps)，返回值为 fn 函数</code><br>fn：要执行函数<br>deps：依赖项，改变时返回新的函数</p>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4-1、React 基础</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/4-1%E3%80%81React%20%E5%9F%BA%E7%A1%80/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/4-1%E3%80%81React%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="发展要史"><a href="#发展要史" class="headerlink" title="发展要史"></a>发展要史</h1><p>1、JS 能操作 DOM</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>my name is<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>react<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-comment">// 可以使用 JS 实现</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createElememt</span>(<span class="hljs-params">tag, props, children</span>) &#123;<br>  <span class="hljs-keyword">const</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElememt</span>(tag)<br><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(props).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[key, value]</span>) =&gt;</span> &#123;<br>    el.<span class="hljs-title function_">setAttribute</span>(key, value)<br>  &#125;)<br><br><br>  children.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">child</span> =&gt;</span> el.<span class="hljs-title function_">appendChild</span>(child))<br>&#125;<br><br><span class="hljs-title function_">createElememt</span>(<span class="hljs-string">&#x27;div&#x27;</span>, &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;app&#x27;</span> &#125;, [<br>  <span class="hljs-title function_">createElememt</span>(<span class="hljs-string">&#x27;h1&#x27;</span>, <span class="hljs-literal">null</span>, [<span class="hljs-string">&#x27;Hello&#x27;</span>]),<br>  <span class="hljs-title function_">createElememt</span>(<span class="hljs-string">&#x27;h2&#x27;</span>, <span class="hljs-literal">null</span>, [<span class="hljs-string">&#x27;my name is&#x27;</span>]),<br>  <span class="hljs-title function_">createElememt</span>(<span class="hljs-string">&#x27;h3&#x27;</span>, <span class="hljs-literal">null</span>, [<span class="hljs-string">&#x27;react&#x27;</span>]),<br>])<br></code></pre></td></tr></table></figure><p>2、根据<code>createElememt</code>就能生成对应的 DOM 结构，但发现有点麻烦，所以 React 让 Babel 帮忙实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>my name is<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>react<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br><br><span class="hljs-comment">// 经过 Babel的 @babel/preset-react 编译后</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>, &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;app&quot;</span> &#125;,<br>  <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;h1&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;Hello&quot;</span>),<br>  <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;h2&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;my name is&quot;</span>),<br>  <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;h3&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;react&quot;</span>)<br>);<br></code></pre></td></tr></table></figure><p>总结：React 核心是写 HTML 片段(JSX)，然后让 Babel 编译为可执行的渲染函数，调用该函数能创建 DOM，但 React 做的事情不止于此，但可以这样简单的理解。</p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>创建一个基础的 React 项目</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">npx create-react-app projectName<br></code></pre></td></tr></table></figure><h2 id="组件分类"><a href="#组件分类" class="headerlink" title="组件分类"></a>组件分类</h2><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><h4 id="基础写法"><a href="#基础写法" class="headerlink" title="基础写法"></a>基础写法</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassComName</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>I am Class Component<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="响应式数据写法"><a href="#响应式数据写法" class="headerlink" title="响应式数据写法"></a>响应式数据写法</h4><p><code>this.state</code>、<code>this.setState</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassComName</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Class Component~&quot;</span>,<br>      <span class="hljs-attr">number</span>: <span class="hljs-number">1</span>,<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">number</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">number</span> + <span class="hljs-number">1</span> &#125;);<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>I am 【&#123;this.state.name&#125;】<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.handleClick()&#125;&gt;Add Number<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Number: &#123;this.state.number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="父子传参"><a href="#父子传参" class="headerlink" title="父子传参"></a>父子传参</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassComName</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props); <span class="hljs-comment">// ⭐️ 父子传参-接收传入参数</span><br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Class Component~&quot;</span>,<br>      <span class="hljs-attr">number</span>: props.<span class="hljs-property">initNumber</span>, <span class="hljs-comment">// ⭐️ 父子传参-使用父传入的参数</span><br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-built_in">number</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">number</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-built_in">number</span> &#125;);<br><br>     <span class="hljs-comment">// ⭐️ 父子传参-调用父传入的函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">callback</span>(<span class="hljs-built_in">number</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">name</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>I am 【&#123;this.state.name&#125;】<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>props: &#123;JSON.stringify(this.props)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.handleClick()&#125;&gt;Add Number<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Number: &#123;this.state.number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><h5 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h5><p><code>constructor</code>：初始化调用，初始化实例状态（state）和绑定事件处理器，不推荐在这里做数据获取或订阅操作。<br><code>static getDerivedStateFromProps</code>：在实例创建及后续每次 props 改变时都会调用，返回对象将与当前 state 合并，生成新的 state<br><code>componentWillMount</code>：<strong>已弃用</strong>，渲染之前执行，若有了<code>getDerivedStateFromProps</code>或<code>getSnapshotBeforeUpdate</code>时不执行<br><code>render</code>：执行，生成新的虚拟 DOM 用于 DIFF(若需要)，但还未去更新 DOM 哦<br><code>componentDidMount</code>：渲染完成时调用，常用于网络请求、订阅或者手动 DOM 操作等。</p><h5 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h5><p><code>componentWillReceiveProps</code>：<strong>已弃用</strong>，props 改变时触发，建议用<code>getDerivedStateFromProps</code><br><code>shouldComponentUpdate</code>：更新拦截，根据返回的布尔值决定是否更新。可用于数据提交中时锁定其他操作<br><code>componentWillUpdate</code>：<strong>已弃用</strong>，更新前调用，建议用<code>getSnapshotBeforeUpdate</code><br><code>render</code>：执行，生成新的虚拟 DOM 用于 DIFF(若需要)，但还未去更新 DOM 哦<br><code>getSnapshotBeforeUpdate</code>：获取更新 DOM 前的快照，获取元素某些信息（如滚动位置）<br><code>componentDidUpdate</code>：更新完成时调用，谨慎调用<code>setState</code>会触发重新渲染</p><h5 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h5><p><code>componentWillUnmount</code>：销毁之前调用，用于清理任何定时器、取消网络请求、解绑事件监听器等资源清理工作。</p><h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><h4 id="基础写法-1"><a href="#基础写法-1" class="headerlink" title="基础写法"></a>基础写法</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">FuncComName</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>I am Function Component<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="响应式数据写法-1"><a href="#响应式数据写法-1" class="headerlink" title="响应式数据写法"></a>响应式数据写法</h4><p><code>useState</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">FuncComName</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [name] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;Function Component~&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> [<span class="hljs-built_in">number</span>, setNumber] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">setNumber</span>(<span class="hljs-built_in">number</span> + <span class="hljs-number">1</span>);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>I am 【&#123;name&#125;】<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleClick()&#125;&gt;Add Number<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Number: &#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="父子传参-1"><a href="#父子传参-1" class="headerlink" title="父子传参"></a>父子传参</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">FuncComName</span>(<span class="hljs-params">props</span>) &#123; <span class="hljs-comment">// ⭐️ 父子传参-接收传入参数</span><br>  <span class="hljs-keyword">const</span> [name] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;Function Component~&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> [<span class="hljs-built_in">number</span>, setNumber] = <span class="hljs-title function_">useState</span>(props.<span class="hljs-property">initNumber</span>); <span class="hljs-comment">// ⭐️ 父子传参-使用父传入的参数</span><br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> _number = <span class="hljs-built_in">number</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-title function_">setNumber</span>(_number);<br><br>    <span class="hljs-comment">// ⭐️ 父子传参-调用父传入的函数</span><br>    props.<span class="hljs-title function_">callback</span>(_number, name);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>I am 【&#123;name&#125;】<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>props: &#123;JSON.stringify(props)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleClick()&#125;&gt;Add Number<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Number: &#123;number&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h4><p>函数式组件是没有生命周期的，只有一些钩子函数来替代生命周期。</p><h5 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h5><p>处理副作用。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-title function_">useEffect</span>(fun, deps)<br>fun：它的返回值将在下一次 fun 执行前调用<br>deps：数组，当值改变时，执行上一次的 fun 返回值，然后再执行 fun<br></code></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 代替：getDerivedStateFromProps</span><br>  <span class="hljs-comment">// 实例创建时触发：</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;getDerivedStateFromProps&#x27;</span>) &#125;, [])<br><br>  <span class="hljs-comment">// props 改变时触发：</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;getDerivedStateFromProps&#x27;</span>) &#125;, [props])<br><span class="hljs-comment">// 代替：componentDidMount</span><br>  <span class="hljs-comment">// 渲染完成后触发：</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;componentDidMount&#x27;</span>) &#125;, [])<br><span class="hljs-comment">// 代替：componentWillUnmount</span><br>  <span class="hljs-comment">//  销毁前触发：</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;componentWillUnmount&#x27;</span>)<br>    &#125;<br>  &#125;, [])<br><span class="hljs-comment">// 代替：componentDidUpdate</span><br>  <span class="hljs-comment">// 更新完成后触发：</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;componentDidUpdate&#x27;</span>)<br>  &#125;)<br></code></pre></td></tr></table></figure><h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="Fiber"><a href="#Fiber" class="headerlink" title="Fiber"></a>Fiber</h2><p>参考资料：<br><a href="https://zhuanlan.zhihu.com/p/670914853">万字长文介绍 React Fiber 架构的原理和工作模式</a><br><a href="https://juejin.cn/post/7053001279580143653">带你彻底读懂 React VDOM DIFF - 掘金</a><br>Fiber：本质是 JS 对象，也可以称为 React 版的虚拟 DOM。链表结构</p><h2 id="Vue-vs-React"><a href="#Vue-vs-React" class="headerlink" title="Vue vs React"></a>Vue vs React</h2><p>Vue：使用 template，写法比较固定，但编译时可以做很多优化。<br>React：使用 JSX，写法非常灵活</p>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-8、Vue 组件高级应用和插件</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/3-8%E3%80%81Vue%20%E7%BB%84%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8%E5%92%8C%E6%8F%92%E4%BB%B6/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/3-8%E3%80%81Vue%20%E7%BB%84%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8%E5%92%8C%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="组件高级应用"><a href="#组件高级应用" class="headerlink" title="组件高级应用"></a>组件高级应用</h1><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>官方文档：<a href="https://cn.vuejs.org/guide/essentials/component-basics.html#dynamic-components">https://cn.vuejs.org/guide/essentials/component-basics.html#dynamic-components</a></p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 将根据 comName 的值渲染对应的组件 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;comName&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">import</span> <span class="hljs-title class_">Content1</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Content1&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> comName = <span class="hljs-title class_">Content1</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="异步动态组件"><a href="#异步动态组件" class="headerlink" title="异步动态组件"></a>异步动态组件</h4><p>官方文档：<a href="https://cn.vuejs.org/guide/components/async.html#async-components">https://cn.vuejs.org/guide/components/async.html#async-components</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span> --&gt;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleChange&quot;</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 将根据 comName.component 的值渲染对应的组件 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;comName.component&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">import</span> &#123; defineAsyncComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> comName = <span class="hljs-title function_">reactive</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleChange</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    comName.<span class="hljs-property">name</span> = comName.<span class="hljs-property">name</span> === <span class="hljs-string">&#x27;Content1&#x27;</span> ? <span class="hljs-string">&#x27;Content2&#x27;</span> : <span class="hljs-string">&#x27;Content1&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// defineAsyncComponent 异步加载，当需要的时候才进行加载</span></span></span><br><span class="language-javascript"><span class="language-xml">    comName.<span class="hljs-property">component</span> = <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">`./<span class="hljs-subst">$&#123;comName.name&#125;</span>.vue`</span>))</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>动态组件切换时，生命周期也是正常的销毁、创建，不会保留。</p><h2 id="KeepAlive"><a href="#KeepAlive" class="headerlink" title="KeepAlive"></a>KeepAlive</h2><p>官方文档：<a href="https://cn.vuejs.org/guide/built-ins/keep-alive.html#keepalive">https://cn.vuejs.org/guide/built-ins/keep-alive.html#keepalive</a><br>作用：在多个组件间动态切换时缓存被移除的组件实例，不会触发创建、销毁的生命周期。<br>配合动态组件使用更佳</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleChange&quot;</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 将根据 comName.component 的值渲染对应的组件 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">KeepAlive</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;comName.component&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">KeepAlive</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">import</span> &#123; defineAsyncComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> comName = <span class="hljs-title function_">reactive</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleChange</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    comName.<span class="hljs-property">name</span> = comName.<span class="hljs-property">name</span> === <span class="hljs-string">&#x27;Content1&#x27;</span> ? <span class="hljs-string">&#x27;Content2&#x27;</span> : <span class="hljs-string">&#x27;Content1&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// defineAsyncComponent 异步加载，当需要的时候才进行加载</span></span></span><br><span class="language-javascript"><span class="language-xml">    comName.<span class="hljs-property">component</span> = <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">`./<span class="hljs-subst">$&#123;comName.name&#125;</span>.vue`</span>))</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>由于配合<code>defineAsyncComponent</code>使用，切换时将不会销毁组件，但每次还是会“新”创建，即不会有“销毁”的生命周期。</p><h2 id="其他内置组件"><a href="#其他内置组件" class="headerlink" title="其他内置组件"></a>其他内置组件</h2><p>官方文档：<a href="https://cn.vuejs.org/api/built-in-components.html#built-in-components">https://cn.vuejs.org/api/built-in-components.html#built-in-components</a></p><h3 id="Teleport-传送门"><a href="#Teleport-传送门" class="headerlink" title="Teleport - 传送门"></a>Teleport - 传送门</h3><p>官方文档：<a href="https://cn.vuejs.org/guide/built-ins/teleport.html">https://cn.vuejs.org/guide/built-ins/teleport.html</a><br>作用：将其插槽内容渲染到 DOM 中的另一个位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;teleport to=<span class="hljs-string">&quot;body&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我将显示在 body 元素内<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&lt;/teleport&gt;<br></code></pre></td></tr></table></figure><h3 id="Transition-过渡态"><a href="#Transition-过渡态" class="headerlink" title="Transition - 过渡态"></a>Transition - 过渡态</h3><p>官方文档：<a href="https://cn.vuejs.org/guide/built-ins/transition.html">https://cn.vuejs.org/guide/built-ins/transition.html</a><br>作用：制作基于状态变化的过渡和动画</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button @click=<span class="hljs-string">&quot;show = !show&quot;</span>&gt;<span class="hljs-title class_">Toggle</span>&lt;/button&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Transition</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Transition</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.v-enter-active</span>,<br><span class="hljs-selector-class">.v-leave-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">0.5s</span> ease;<br>&#125;<br><br><span class="hljs-selector-class">.v-enter-from</span>,<br><span class="hljs-selector-class">.v-leave-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Suspense-悬停"><a href="#Suspense-悬停" class="headerlink" title="Suspense - 悬停"></a>Suspense - 悬停</h3><p>官方文档：<a href="https://cn.vuejs.org/guide/built-ins/suspense.html">https://cn.vuejs.org/guide/built-ins/suspense.html</a><br>作用：用来在组件树中协调对异步依赖的处理</p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// custom.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">install</span>(<span class="hljs-params">app, options</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(app, options)<br><br>    <span class="hljs-comment">// 其他业务逻辑...</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// main.js</span><br>app.<span class="hljs-title function_">use</span>(customPlugin, &#123; <span class="hljs-attr">xx</span>: <span class="hljs-number">1</span> &#125;)<br></code></pre></td></tr></table></figure><h2 id="场景使用"><a href="#场景使用" class="headerlink" title="场景使用"></a>场景使用</h2><ul><li>注册全局的组件</li><li>注册全局的方法，通过挂载到 Vue 的原型链上实现</li><li>注册全局的自定义指令</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// custom.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">install</span>(<span class="hljs-params">app, options</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(app, options)<br><br>    <span class="hljs-comment">// 其他业务逻辑...</span><br><br>    <span class="hljs-comment">// app.component(&#x27;MyCom&#x27;, MyCom) 注册组件</span><br>    <span class="hljs-comment">// app.config.globalProperties.$xx = xx 注册到原型链上</span><br>    <span class="hljs-comment">// app.directive(&#x27;auth&#x27;, (el, binding) =&gt; &#123;&#125;) 注册自定义指令</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="手写异步组件"><a href="#手写异步组件" class="headerlink" title="手写异步组件"></a>手写异步组件</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-keyword">type</span> <span class="hljs-title class_">Component</span>, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-comment">// Vue 源码中，异步组件的返回值是 Promise&lt;Component&gt;</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">AsyncComponentLoader</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Component</span>&gt;<br><br><span class="hljs-comment">// Vue 源码中，异步组件的配置项</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">AsyncComponentOptions</span> &#123;<br>  <span class="hljs-attr">loader</span>: <span class="hljs-title class_">AsyncComponentLoader</span><br>  loadingComponent?: <span class="hljs-title class_">Component</span><br>  errorComponent?: <span class="hljs-title class_">Component</span><br>  delay?: <span class="hljs-built_in">number</span><br>  timeout?: <span class="hljs-built_in">number</span><br>  suspensible?: <span class="hljs-built_in">boolean</span><br>  onError?: <span class="hljs-function">(<span class="hljs-params">error: <span class="hljs-built_in">Error</span>, retry: () =&gt; <span class="hljs-built_in">void</span>, fail: () =&gt; <span class="hljs-built_in">void</span>, attempts: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">any</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义异步组件</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> source 异步组件的加载器或配置对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> 返回一个包装后的组件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-params"></span><br><span class="hljs-params">  source: AsyncComponentLoader | AsyncComponentOptions</span><br><span class="hljs-params"></span>): <span class="hljs-title class_">Component</span> &#123;<br>  <span class="hljs-comment">// --------------- 以下为手写的代码 ---------------</span><br><br>  <span class="hljs-comment">// 如果source是一个函数，则将其视为loader</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> source === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    source = &#123; <span class="hljs-attr">loader</span>: source &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 如果source没有loader属性，则抛出错误</span><br>  <span class="hljs-keyword">if</span> (!source.<span class="hljs-property">loader</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Loader is required for async component&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-comment">// 提取loader、delay和timeout属性</span><br>  <span class="hljs-keyword">const</span> &#123; loader, delay = <span class="hljs-number">0</span>, timeout = <span class="hljs-number">0</span>, loadingComponent, errorComponent &#125; = source<br>  <span class="hljs-keyword">let</span> <span class="hljs-title class_">InnerComp</span>: <span class="hljs-title class_">Component</span><br><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;AsyncComponentWrapper&#x27;</span>,<br>    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 定义loaded、loading和error的响应式引用</span><br>      <span class="hljs-keyword">const</span> loaded = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)<br>      <span class="hljs-keyword">const</span> loading = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)<br>      <span class="hljs-keyword">const</span> error = ref&lt;<span class="hljs-title class_">Error</span> | <span class="hljs-literal">null</span>&gt;(<span class="hljs-literal">null</span>) <span class="hljs-comment">// 添加类型注解并初始化为null</span><br><br>      <span class="hljs-comment">// 定义loader函数，用于异步加载组件</span><br>      <span class="hljs-keyword">const</span> <span class="hljs-title function_">loaderFn</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>        <span class="hljs-comment">// 标记为async以支持await语法</span><br>        loading.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span><br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">// 使用await等待加载完成，将加载完成的组件赋值给InnerComp</span><br>          <span class="hljs-title class_">InnerComp</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">loader</span>() <span class="hljs-comment">// 使用await等待加载完成</span><br>          loaded.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span><br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>          <span class="hljs-comment">// 如果发生错误，将错误赋值给error引用，并使用Error对象表示未知错误</span><br>          error.<span class="hljs-property">value</span> = e <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Error</span> ? e : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Unknown error&#x27;</span>)<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>          loading.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span> <span class="hljs-comment">// 只设置loading为false，不改变loaded的值</span><br>        &#125;<br><br>        <span class="hljs-keyword">let</span> <span class="hljs-attr">timer</span>: <span class="hljs-built_in">number</span> | <span class="hljs-literal">undefined</span><br>        <span class="hljs-keyword">if</span> (timeout) &#123;<br>          timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (!loaded.<span class="hljs-property">value</span>) &#123;<br>              <span class="hljs-comment">// 如果超时且组件未加载完成，则将超时错误赋值给error引用</span><br>              error.<span class="hljs-property">value</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;timeout&#x27;</span>) <span class="hljs-comment">// 使用Error对象表示超时错误</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-built_in">clearTimeout</span>(timer)<br>            &#125;<br>          &#125;, timeout)<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// 如果存在延迟，则使用setTimeout延迟执行loader函数，否则直接执行loader函数</span><br>      <span class="hljs-keyword">if</span> (delay) <span class="hljs-built_in">setTimeout</span>(loaderFn, delay)<br>      <span class="hljs-keyword">else</span> <span class="hljs-title function_">loaderFn</span>()<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (loaded.<span class="hljs-property">value</span>) &#123;<br>          <span class="hljs-comment">// 如果组件已加载完成，则返回加载完成的组件类型InnerComp</span><br>          <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">InnerComp</span> &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (error.<span class="hljs-property">value</span>) &#123;<br>          <span class="hljs-comment">// 这里可以添加错误处理逻辑，例如显示一个错误组件或提示信息</span><br>          <span class="hljs-keyword">return</span> errorComponent || <span class="hljs-string">&#x27;错误&#x27;</span> <span class="hljs-comment">// 假设存在一个错误组件ErrorComponent</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 在组件加载过程中显示一个加载指示器或占位符</span><br>          <span class="hljs-keyword">return</span> loadingComponent || <span class="hljs-string">&#x27;加载中&#x27;</span> <span class="hljs-comment">// 假设存在一个加载指示器组件LoadingIndicator</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-7、Vue 状态管理-核心源码讲解</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/3-7%E3%80%81Vue%20%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86-%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/3-7%E3%80%81Vue%20%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86-%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>状态管理：本质对一个[全局唯一、具有响应式]变量的管理<br>因为是全局的，那为了流转&#x2F;使用上的不混乱&#x2F;冲突等，所以会对其制定流转规则，让变化变得可预测</p><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>状态流转：actions &#x3D;&gt; mutations &#x3D;&gt; state<br>state：数据的存储<br>mutations：唯一的对数据的[同步]操作(增删改查)入口，可以做简单的业务处理<br>actions：复杂业务逻辑处理(axios 等)的入口，并只能调用 mutations</p><h2 id="Vuex-3-x"><a href="#Vuex-3-x" class="headerlink" title="Vuex 3.x"></a>Vuex 3.x</h2><p>官方文档：<a href="https://v3.vuex.vuejs.org/zh/">https://v3.vuex.vuejs.org/zh/</a><br><strong>使用：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    increment (state) &#123;<br>      state.<span class="hljs-property">count</span>++<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>其中的<code>Store</code>本质是类，所以才<code>new Vuex.Store(&#123; /*...*/ &#125;)</code></li><li>通过<code>Vue.use(Vuex)</code>，调用<code>Vuex</code>的<code>install</code>方法<ul><li><code>install</code>方法里面写了<code>Vue.mixin(&#123; beforeCreate: vuexInit &#125;)</code><ul><li>所以<code>Vuex</code>的注入是通过<code>Vue.mixin()</code>混入<code>beforeCreate</code>方法实现</li></ul></li><li>并且在<code>vuexInit</code>内，定义了<code>this.$store</code>，实现<code>$store</code>的挂载</li></ul></li><li>通过调用<code>new Vue</code>来实现<code>Vuex</code>的响应式，并且<code>this.$store.state</code>的获取是通过<code>get</code>实现的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Store</span> &#123;<br>  <span class="hljs-title function_">constructor</span> (options = &#123;&#125;) &#123;<br>    <span class="hljs-comment">// ......</span><br>    <span class="hljs-title function_">resetStoreVM</span>(<span class="hljs-variable language_">this</span>, state)<br>  &#125;,<br><br> <span class="hljs-comment">// ......</span><br><br>  get state () &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_vm</span>.<span class="hljs-property">_data</span>.<span class="hljs-property">$$state</span><br>  &#125;<br>  <span class="hljs-comment">// ......</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">resetStoreVM</span>(<span class="hljs-params">store, state</span>)<br> <span class="hljs-comment">// ......</span><br><br>  <span class="hljs-comment">// ⭐️ 实现 Vuex 的响应式</span><br>  store.<span class="hljs-property">_vm</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">$$state</span>: state<br>    &#125;,<br>    computed<br>  &#125;<br><br>  <span class="hljs-comment">// ......</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="Vuex-4-x"><a href="#Vuex-4-x" class="headerlink" title="Vuex 4.x"></a>Vuex 4.x</h2><p>官方文档：<a href="https://vuex.vuejs.org/zh/">https://vuex.vuejs.org/zh/</a><br><strong>使用：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">function createStore (options) &#123;</span><br><span class="hljs-comment">  return new Store(options)</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 创建一个新的 store 实例</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(&#123;<br>  state () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    increment (state) &#123;<br>      state.<span class="hljs-property">count</span>++<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(&#123; <span class="hljs-comment">/* 根组件 */</span> &#125;)<br><br><span class="hljs-comment">// 将 store 实例作为插件安装</span><br>app.<span class="hljs-title function_">use</span>(store)<br></code></pre></td></tr></table></figure><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><ul><li>引入的<code>createStore</code>本质是个生成实例的函数</li><li>通过<code>app.use(store)</code>，调用<code>store 实例</code>的<code>install</code>方法<ul><li><code>install</code>方法里面写了<code>vue.provide(storeKey, this)</code><ul><li>所以<code>Vuex</code>的注入是通过<code>vue.provide()</code> 实现的</li><li>并且还定义了<code>vue.config.globalProperties.$store = this</code>，实现<code>$store</code>的挂载</li></ul></li></ul></li><li>通过借用<code>Vue</code>的<code>reactive</code>实现<code>Vuex</code>的响应式，并且<code>this.$store.state</code>的获取是通过<code>get</code>实现的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Store</span> &#123;<br>  <span class="hljs-title function_">constructor</span> (options = &#123;&#125;) &#123;<br>    <span class="hljs-comment">// ......</span><br>    <span class="hljs-title function_">resetStoreState</span>(<span class="hljs-variable language_">this</span>, state)<br>  &#125;,<br><br>  install (vue, injectKey) &#123;<br>    vue.<span class="hljs-title function_">provide</span>(injectKey || storeKey, <span class="hljs-variable language_">this</span>)<br>    vue.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">$store</span> = <span class="hljs-variable language_">this</span><br>  &#125;<br><br> <span class="hljs-comment">// ......</span><br><br>  get state () &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_state</span>.<span class="hljs-property">data</span><br>  &#125;<br>  <span class="hljs-comment">// ......</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">resetStoreState</span>(<span class="hljs-params">store, state</span>)<br> <span class="hljs-comment">// ......</span><br><br>  <span class="hljs-comment">// ⭐️ 实现 Vuex 的响应式</span><br>  store.<span class="hljs-property">_state</span> = <span class="hljs-title function_">reactive</span>(&#123;<br>    <span class="hljs-attr">data</span>: state<br>  &#125;)<br><br>  <span class="hljs-comment">// ......</span><br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h1><p>官方文档：<a href="https://pinia.vuejs.org/zh/introduction.html">https://pinia.vuejs.org/zh/introduction.html</a></p><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><p>跟 Vuex 4.x 差不多的<br>使用了<code>vue</code>的<code>provide/inject</code>、<code>vue.config.globalProperties.$store</code>、<code>reactive</code>等</p><h1 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h1><h2 id="观察者-发布订阅"><a href="#观察者-发布订阅" class="headerlink" title="观察者 &amp; 发布订阅"></a>观察者 &amp; 发布订阅</h2><p>观察者：不存在一个中心，事件流：A &#x3D;&gt; B<br>A 干了 xxx，B 观察到了，就直接再行动。<br>Vue 就是观察者模式，通过拦截数据的读取操作，收集依赖；拦截数据的设置操作，触发依赖</p><p>发布订阅：存在一个中心，事件流为：A &#x3D;&gt; 中心 &#x3D;&gt; B<br>A 干了 xxx，然后通知事件中心，事件中心再去通知对应的订阅者(B)，B 再行动<br>EventBus 就是发布订阅</p><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="手写发布订阅（简单版）"><a href="#手写发布订阅（简单版）" class="headerlink" title="手写发布订阅（简单版）"></a>手写发布订阅（简单版）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EventBus</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dep</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>  &#125;<br><br>  <span class="hljs-title function_">on</span>(<span class="hljs-params">name, fn</span>) &#123;<br>    <span class="hljs-keyword">let</span> events = <span class="hljs-variable language_">this</span>.<span class="hljs-property">dep</span>.<span class="hljs-title function_">get</span>(name);<br><br>    <span class="hljs-keyword">if</span> (!events) events = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><br>    events.<span class="hljs-title function_">add</span>(fn);<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dep</span>.<span class="hljs-title function_">set</span>(name, events);<br>  &#125;<br><br>  <span class="hljs-title function_">emit</span>(<span class="hljs-params">name, payload</span>) &#123;<br>    <span class="hljs-keyword">let</span> events = <span class="hljs-variable language_">this</span>.<span class="hljs-property">dep</span>.<span class="hljs-title function_">get</span>(name);<br><br>    <span class="hljs-keyword">if</span> (!events) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span> is not registered`</span>);<br>    &#125;<br><br>    events.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">cb</span>) =&gt;</span> <span class="hljs-title function_">cb</span>(payload));<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> eb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventBus</span>();<br><br>eb.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;log&quot;</span>, <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ log value ] &gt;&quot;</span>, value);<br>&#125;);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  eb.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;log&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;, <span class="hljs-number">5000</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-6、Vue Router-核心源码讲解</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/3-6%E3%80%81Vue%20Router-%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/3-6%E3%80%81Vue%20Router-%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>官方文档：<a href="https://router.vuejs.org/zh/guide/">https://router.vuejs.org/zh/guide/</a></p><h1 id="路由的演变"><a href="#路由的演变" class="headerlink" title="路由的演变"></a>路由的演变</h1><p>之前，部署到服务器的前端项目是由多个 HTML 文件组成，每个 HTML 都有对应服务器路径，前端称其为路由，路由之间使用<code>location.href</code>跳转，跳转路径就是另一个 HTML 的服务器地址。这时候的路由是由后端来管理的<br>后面单页应用流行，部署到服务器的前端项目就只有一个 HTML 文件，对应一个服务器路径。这时候为满足不同页面的展示，就需要借助框架提供的路由能力，至此路由的管理转移到前端身上。</p><h1 id="路由的组成"><a href="#路由的组成" class="headerlink" title="路由的组成"></a>路由的组成</h1><p>即<code>location</code>的组成：<br><code>location.protocal</code>协议<br><code>location.host</code> 域名<br><code>location.port</code> 端口(多数省略了)<br><code>location.pathname</code>  路径<br><code>location.search</code>  参数，[? 后面，# 之前)的内容<br><code>location.hash</code>  锚点，# 后面的内容</p><h1 id="路由的分类"><a href="#路由的分类" class="headerlink" title="路由的分类"></a>路由的分类</h1><p>单页应用下，分为：hash、history<br><strong>hash：</strong><br>路由上带 #，内容为 # 后面，用它来区分页面；<br>不需要服务端配合。</p><p><strong>history：</strong><br>路由上不带 #，内容为[域名后面，? 之前)，用它来区分页面；<br>需要服务端配合。因为部署到服务器后，该模式实际上访问服务器的资源，但单页应用只有一个指向 html 的路径，所以这样访问会返回 404，一般需要配置让其指向 html 的路径</p><h1 id="路由实现的核心原理"><a href="#路由实现的核心原理" class="headerlink" title="路由实现的核心原理"></a>路由实现的核心原理</h1><p><strong>核心原理：监听路径的变化，找到该路径对应的组件，然后渲染到相应位置，并注入 router 等上下文。其中的对应关系就是我们常写的路由配置项。</strong></p><h1 id="Vue-路由"><a href="#Vue-路由" class="headerlink" title="Vue 路由"></a>Vue 路由</h1><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><strong>Vue2</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// router/index.ts</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span>, &#123; <span class="hljs-title class_">RouteConfig</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/HomeView.vue&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>)<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">routes</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">RouteConfig</span>&gt; = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeView</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>    <span class="hljs-comment">// route level code-splitting</span><br>    <span class="hljs-comment">// this generates a separate chunk (about.[hash].js) for this route</span><br>    <span class="hljs-comment">// which is lazy-loaded when the route is visited.</span><br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="hljs-string">&#x27;../views/AboutView.vue&#x27;</span>)<br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br><span class="hljs-comment">// main.ts</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span> <span class="hljs-comment">// ⭐️</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  router, <span class="hljs-comment">// ⭐️</span><br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p><strong>Vue3</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// router/index.ts</span><br><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/HomeView.vue&#x27;</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>),<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeView</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>      <span class="hljs-comment">// route level code-splitting</span><br>      <span class="hljs-comment">// this generates a separate chunk (About.[hash].js) for this route</span><br>      <span class="hljs-comment">// which is lazy-loaded when the route is visited.</span><br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/AboutView.vue&#x27;</span>)<br>    &#125;<br>  ]<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br><span class="hljs-comment">// main.ts</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span> <span class="hljs-comment">// ⭐️</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><br>app.<span class="hljs-title function_">use</span>(router) <span class="hljs-comment">// ⭐️</span><br><br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="页面中使用"><a href="#页面中使用" class="headerlink" title="页面中使用"></a>页面中使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">      // ⭐️</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;bandleNavClick&quot;</span>&gt;</span>About<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>/&gt;</span> // ⭐️</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">computed</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">username</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// this.$route 当前路由</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>.<span class="hljs-property">username</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">bandleNavClick</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// this.$router 路由实例</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><p>全局：beforeEach、beforeResolve、afterEach<br>路由配置：beforeEnter<br>组件内：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave</p><h4 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h4><ol><li>导航被触发。</li><li>在失活的组件里调用 beforeRouteLeave 守卫。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫。</li><li>在路由配置里调用 beforeEnter。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>触发 DOM 更新。</li><li>调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="Vue-Router-3-x"><a href="#Vue-Router-3-x" class="headerlink" title="Vue-Router 3.x"></a>Vue-Router 3.x</h3><p>对应 Vue2.x<br><code>VueRouter</code>部分源码解析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VueRouter</span> &#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">install</span>(<span class="hljs-params">Vue</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// 通过 mixin 生命周期来注册实例的</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixin</span>(&#123;<br>      <span class="hljs-comment">// 每个 .vue 都会调用</span><br>      beforeCreate () &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isDef</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span>.<span class="hljs-property">router</span>)) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">_routerRoot</span> = <span class="hljs-variable language_">this</span> <span class="hljs-comment">// this 为 .vue 实例</span><br><br>          <span class="hljs-comment">// $options.router 来源于 new Vue(&#123; router &#125;) 时传入的 router</span><br>          <span class="hljs-comment">// router 为 new VueRouter(...) 出来的实例</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">_router</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span>.<span class="hljs-property">router</span><br><br>          <span class="hljs-comment">// 初始化应用、设置历史滚动位置等等</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">_router</span>.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">this</span>)<br><br>          <span class="hljs-comment">// 调用 Vue.util 的 上的 defineReactive</span><br>          <span class="hljs-comment">// 将 _route 定义为 .vue 实例的响应式属性，值为当前的路由信息</span><br>          <span class="hljs-title class_">Vue</span>.<span class="hljs-property">util</span>.<span class="hljs-title function_">defineReactive</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&#x27;_route&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_router</span>.<span class="hljs-property">history</span>.<span class="hljs-property">current</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">_routerRoot</span> = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$parent</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">$parent</span>.<span class="hljs-property">_routerRoot</span>) || <span class="hljs-variable language_">this</span><br>        &#125;<br>        <span class="hljs-title function_">registerInstance</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">this</span>)<br>      &#125;,<br>      destroyed () &#123;<br>        <span class="hljs-title function_">registerInstance</span>(<span class="hljs-variable language_">this</span>)<br>      &#125;<br>    &#125;)<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// 将 $router 挂载到 Vue 原型链上，所以才支持 this.$router</span><br>    <span class="hljs-comment">// $router：当前路由实例（全局唯一），主要用提供的方法：push、back 等</span><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&#x27;$router&#x27;</span>, &#123;<br>      get () &#123; <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_routerRoot</span>.<span class="hljs-property">_router</span> &#125;<br>    &#125;)<br><br>    <span class="hljs-comment">// 将 $route 挂载到 Vue 原型链上，所以才支持 this.$route</span><br>    <span class="hljs-comment">// $route：当前路由，主要获取当前路由信息：路径、地址栏参数等</span><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&#x27;$route&#x27;</span>, &#123;<br>      get () &#123; <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_routerRoot</span>.<span class="hljs-property">_route</span> &#125;<br>    &#125;)<br><br>    <span class="hljs-comment">// 注册 Vue 组件：RouterView</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;RouterView&#x27;</span>, <span class="hljs-title class_">View</span>)<br><br>    <span class="hljs-comment">// 注册 Vue 组件：RouterLink</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;RouterLink&#x27;</span>, <span class="hljs-title class_">Link</span>)<br>  &#125;,<br>  <span class="hljs-title function_">constructor</span> (<span class="hljs-attr">options</span>: <span class="hljs-title class_">RouterOptions</span> = &#123;&#125;) &#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// new VueRouter() 时传入的参数：routers、mode 等</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = options<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-keyword">switch</span> (mode) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;history&#x27;</span>:<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">history</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HTML5History</span>(<span class="hljs-variable language_">this</span>, options.<span class="hljs-property">base</span>)<br>        <span class="hljs-keyword">break</span><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;hash&#x27;</span>:<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">history</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashHistory</span>(<span class="hljs-variable language_">this</span>, options.<span class="hljs-property">base</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">fallback</span>)<br>        <span class="hljs-keyword">break</span><br>      <span class="hljs-comment">// ...</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>RouterView</code>源码解析<br>本质上注册了一个 Vue 动态组件，根据路由配置，找到对应<code>component</code>值，然后将其渲染</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;RouterView&#x27;</span>,<br>  <span class="hljs-attr">functional</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">name</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;default&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  _: 这个参数通常用作占位符，表示这个参数在函数体中不会被使用。</span><br><span class="hljs-comment">  props: 传递给当前组件的属性。</span><br><span class="hljs-comment">  children: 当前组件的子组件。</span><br><span class="hljs-comment">  parent: 当前组件的父组件。</span><br><span class="hljs-comment">  data: 当前组件的数据对象。</span><br><span class="hljs-comment">  */</span><br>  render (_, &#123; props, children, parent, data &#125;) &#123;<br>    <span class="hljs-keyword">const</span> h = parent.<span class="hljs-property">$createElement</span><br>    <span class="hljs-keyword">const</span> name = props.<span class="hljs-property">name</span><br>    <span class="hljs-keyword">const</span> route = parent.<span class="hljs-property">$route</span><br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-keyword">const</span> matched = route.<span class="hljs-property">matched</span>[depth]<br>     <span class="hljs-comment">// 找组件 component 的逻辑</span><br>    <span class="hljs-keyword">const</span> component = matched &amp;&amp; matched.<span class="hljs-property">components</span>[name]<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(component, data, children)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面的代码可以粗略表述上述源码逻辑</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//  router-view.vue</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;componentContent&quot;</span> /&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">computed</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">componentContent</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// matched: 指已匹配到的路由配置信息</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">matched</span>[<span class="hljs-number">0</span>]?.<span class="hljs-property">components</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><code>RouterLink</code>源码解析<br>本质上注册了一个 Vue 组件，该组件最终渲染为<code>a 标签</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;RouterLink&#x27;</span>,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">to</span>: &#123;<br>      <span class="hljs-attr">type</span>: toTypes,<br>      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-attr">tag</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;a&#x27;</span><br>    &#125;,<br>    <span class="hljs-comment">// ...</span><br>  &#125;,<br><br>  render (<span class="hljs-attr">h</span>: <span class="hljs-title class_">Function</span>) &#123;<br>    <span class="hljs-keyword">const</span> router = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span><br>    <span class="hljs-keyword">const</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span><br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// 根据 props 与一些逻辑，往 tagAttrs 里面扔 a 标签的一些属性</span><br>    <span class="hljs-keyword">const</span> tagAttrs = &#123;&#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">tag</span>, tagAttrs, <span class="hljs-variable language_">this</span>.<span class="hljs-property">$slots</span>.<span class="hljs-property">default</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">比如：&lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;<br>渲染：&lt;a href=&quot;#/about&quot; class=&quot;&quot;&gt;About&lt;/a&gt;<br></code></pre></td></tr></table></figure><h3 id="Vue-Router-4-x"><a href="#Vue-Router-4-x" class="headerlink" title="Vue-Router 4.x"></a>Vue-Router 4.x</h3><p>对应 Vue3.x</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// router/index.ts</span><br><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/HomeView.vue&#x27;</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>),<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeView</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>      <span class="hljs-comment">// route level code-splitting</span><br>      <span class="hljs-comment">// this generates a separate chunk (About.[hash].js) for this route</span><br>      <span class="hljs-comment">// which is lazy-loaded when the route is visited.</span><br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/AboutView.vue&#x27;</span>)<br>    &#125;<br>  ]<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br><span class="hljs-comment">// main.ts</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span> <span class="hljs-comment">// ⭐️</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><br>app.<span class="hljs-title function_">use</span>(router) <span class="hljs-comment">// ⭐️</span><br><br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p><code>createRouter</code>源码解析</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createRouter</span>(<span class="hljs-params">options: RouterOptions</span>): <span class="hljs-title class_">Router</span> &#123;<br>  <span class="hljs-comment">// 基于传入的 routes，生成 matcher，便于内部的查找</span><br>  <span class="hljs-keyword">const</span> matcher = <span class="hljs-title function_">createRouterMatcher</span>(options.<span class="hljs-property">routes</span>, options)<br><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">router</span>: <span class="hljs-title class_">Router</span> = &#123;<br>    <span class="hljs-comment">// ...</span><br><br>    push,<br>    replace,<br>    go,<br>    <span class="hljs-attr">back</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">go</span>(-<span class="hljs-number">1</span>),<br>    <span class="hljs-attr">forward</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">go</span>(<span class="hljs-number">1</span>),<br><br>    <span class="hljs-comment">// vue.use 时调用</span><br>    <span class="hljs-title function_">install</span>(<span class="hljs-params">app: App</span>) &#123;<br>      <span class="hljs-keyword">const</span> router = <span class="hljs-variable language_">this</span><br><br>      <span class="hljs-comment">// 注册 Vue 组件：RouterView</span><br>      app.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;RouterLink&#x27;</span>, <span class="hljs-title class_">RouterLink</span>)<br><br>      <span class="hljs-comment">// 注册 Vue 组件：RouterView</span><br>      app.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;RouterView&#x27;</span>, <span class="hljs-title class_">RouterView</span>)<br><br>      <span class="hljs-comment">// 将 $router 挂载到 Vue 原型链上，所以才支持 this.$router</span><br>     <span class="hljs-comment">// $router：当前路由实例（全局唯一），主要用提供的方法：push、back 等</span><br>      app.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">$router</span> = router<br><br><br>      <span class="hljs-comment">// 将 $route 挂载到 Vue 原型链上，所以才支持 this.$route</span><br>      <span class="hljs-comment">// $route：当前路由，主要获取当前路由信息：路径、地址栏参数等</span><br>      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(app.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>, <span class="hljs-string">&#x27;$route&#x27;</span>, &#123;<br>        <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">unref</span>(currentRoute),<br>      &#125;)<br><br>      <span class="hljs-comment">// 定义响应式变量：reactiveRoute</span><br>      <span class="hljs-keyword">const</span> reactiveRoute = &#123;&#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">RouteLocationNormalizedLoaded</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> <span class="hljs-variable constant_">START_LOCATION_NORMALIZED</span>) &#123;<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(reactiveRoute, key, &#123;<br>          <span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> currentRoute.<span class="hljs-property">value</span>[key <span class="hljs-keyword">as</span> keyof <span class="hljs-title class_">RouteLocationNormalized</span>],<br>          <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>        &#125;)<br>      &#125;<br><br>      <span class="hljs-comment">// 通过 Vue 的 provide</span><br>      <span class="hljs-comment">//  将 路由实例、浅响应式的reactiveRoute、当前路由currentRoute 进行注入</span><br>      app.<span class="hljs-title function_">provide</span>(routerKey, router)<br>      app.<span class="hljs-title function_">provide</span>(routeLocationKey, <span class="hljs-title function_">shallowReactive</span>(reactiveRoute))<br>      app.<span class="hljs-title function_">provide</span>(routerViewLocationKey, currentRoute)<br><br>      <span class="hljs-comment">// ...</span><br>    &#125;,<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> router<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><h4 id="为啥跳转页面并不会刷新？"><a href="#为啥跳转页面并不会刷新？" class="headerlink" title="为啥跳转页面并不会刷新？"></a>为啥跳转页面并不会刷新？</h4><p>不管路由模式是<code>hash、history</code>，最终跳转页面时<code>Vue Router</code>都是用的<code>window.history.pushState</code>，用该 API 改变地址，页面将不会刷新。<br>路由模式差异体现在<code>window.history.pushState</code>的传参<code>url</code>上，带不带<code>#</code>而已</p><p>并且<code>#</code>的变化本身也不会引起页面的刷新</p><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="手写路由（简单版）"><a href="#手写路由（简单版）" class="headerlink" title="手写路由（简单版）"></a>手写路由（简单版）</h2><p><strong>核心原理：监听路径的变化，找到该路径对应的组件，然后渲染到相应位置，并注入 router 等上下文。其中的对应关系就是我们常写的路由配置项。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// router.js</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Router</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_options</span> = options;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_routes</span> = options.<span class="hljs-property">routes</span>;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">routerHistory</span> = [];<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentIndex</span> = -<span class="hljs-number">1</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPath</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>();<br>  &#125;<br><br>  <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;hashchange&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">refresh</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;load&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">refresh</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));<br>  &#125;<br><br>  <span class="hljs-title function_">refresh</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> _path = <span class="hljs-title class_">Router</span>.<span class="hljs-title function_">getPath</span>();<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">routerHistory</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">routerHistory</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentIndex</span> + <span class="hljs-number">1</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">routerHistory</span>.<span class="hljs-title function_">push</span>(_path);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentIndex</span>++;<br><br>    <span class="hljs-keyword">let</span> &#123; component, path &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">findRoute</span>(_path);<br><br>    <span class="hljs-keyword">if</span> (!component) &#123;<br>      path = <span class="hljs-string">&quot;/404&quot;</span>;<br>      component = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">findRoute</span>(path).<span class="hljs-property">component</span> || <span class="hljs-string">&quot;404&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.router-view-wrapper&quot;</span>).<span class="hljs-property">innerHTML</span> = component;<br><br>    <span class="hljs-title class_">Router</span>.<span class="hljs-title function_">changeHash</span>(path);<br>  &#125;<br><br>  <span class="hljs-title function_">push</span>(<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-keyword">if</span> (options.<span class="hljs-property">path</span>) &#123;<br>      <span class="hljs-title class_">Router</span>.<span class="hljs-title function_">changeHash</span>(options.<span class="hljs-property">path</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (options.<span class="hljs-property">name</span>) &#123;<br>      <span class="hljs-keyword">let</span> &#123; path &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">findRoute</span>(options.<span class="hljs-property">name</span>, <span class="hljs-string">&quot;name&quot;</span>);<br>      <span class="hljs-title class_">Router</span>.<span class="hljs-title function_">changeHash</span>(path);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">findRoute</span>(<span class="hljs-params">value, key = <span class="hljs-string">&quot;path&quot;</span></span>) &#123;<br>    <span class="hljs-keyword">let</span> _findRoute = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_routes</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item[key] === value) || &#123;&#125;;<br><br>    <span class="hljs-keyword">if</span> (_findRoute.<span class="hljs-property">rederict</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">findRoute</span>(_findRoute.<span class="hljs-property">rederict</span>, key);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> _findRoute;<br>  &#125;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getPath</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> path = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span>;<br>    <span class="hljs-keyword">if</span> (path) <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">changeHash</span>(<span class="hljs-params">path</span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span> = path.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>custom-router<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;router.push(&#123;name:&#x27;home&#x27;&#125;)&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;router.push(&#123;name:&#x27;about&#x27;&#125;)&quot;</span>&gt;</span>About<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;router-view-wrapper&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> routes = [</span><br><span class="language-javascript">        &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">rederict</span>: <span class="hljs-string">&quot;/home&quot;</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;home&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">component</span>: <span class="hljs-string">`&lt;div&gt;Home Content&lt;/div&gt;`</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;about&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">component</span>: <span class="hljs-string">`&lt;div&gt;About Content&lt;/div&gt;`</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/404&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;404&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">component</span>: <span class="hljs-string">`&lt;div&gt;Error 404&lt;/div&gt;`</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      ];</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123; routes &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-5、Vue3-核心源码讲解</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/3-5%E3%80%81Vue3-%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/3-5%E3%80%81Vue3-%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="结构更新"><a href="#结构更新" class="headerlink" title="结构更新"></a>结构更新</h1><p>Vue3 的源码采用 TS + monorepo<br><a href="https://juejin.cn/post/7207743145999368229">为什么越来越多的项目选择 Monorepo？ - 掘金</a><br><img src="/img/images/2024/1704357683456-56faed61-ce51-40f8-bc31-838ee77071bc.png"></p><h1 id="Vue3-的重大更新-breaking-changes"><a href="#Vue3-的重大更新-breaking-changes" class="headerlink" title="Vue3 的重大更新(breaking changes)"></a>Vue3 的重大更新(breaking changes)</h1><p><a href="https://cloud.tencent.com/developer/article/1970068">[科普文] Vue3 到底更新了什么？-腾讯云开发者社区-腾讯云</a></p><h2 id="⭐️组合式-API"><a href="#⭐️组合式-API" class="headerlink" title="⭐️组合式 API"></a>⭐️组合式 API</h2><p>将 Vue2 的选项式更新为组合式</p><h3 id="选项式"><a href="#选项式" class="headerlink" title="选项式"></a>选项式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">1</span><br>      &#125;<br>    &#125;,<br>    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> = <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br>      <span class="hljs-title function_">addCount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>遵循语法写在特定区域：data、methods、computed、watch 等都是有固定语法的</li><li>当项目的负责度增加后，这些逻辑就会散落在代码的各处，不利于后期维护</li></ol><p><img src="/img/images/2024/1704080966035-040b634a-9312-4d6b-b25f-a191cf16d6c7.gif" alt="69ee27d59f01075ea46a8639bdb254b0.gif"></p><h3 id="组合式"><a href="#组合式" class="headerlink" title="组合式"></a>组合式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script setup&gt;<br>  <span class="hljs-keyword">import</span> &#123; ref, onMounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br>  <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">addCount</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    count.<span class="hljs-property">value</span>++<br>  &#125;<br>  <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    count.<span class="hljs-property">value</span> = <span class="hljs-number">0</span><br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1704081003263-9a1d839b-97e3-4017-8c89-6e9c1cdc1f04.gif" alt="d5ff314c398ab84cf0ff3c9894a09647.gif"></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>不需要遵循在特点区域写，可以按照逻辑一行行书写，就跟传统的 JS 代码写法一致，可以将相同的逻辑放在一起</li></ol><h2 id="⭐️响应式原理"><a href="#⭐️响应式原理" class="headerlink" title="⭐️响应式原理"></a>⭐️响应式原理</h2><p>Vue2：全部基于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty()</a>的<code>get set</code>实现。通过对<code>data</code>里面的数据递归处理，才能为每个属性增加<code>getter setter</code>，这样会有更高的性能开销，并且对于运行时动态新增&#x2F;删除的属性无法自动处理为响应式<br>Vue3：<code>基础类型</code>基于对象的<code>get|set</code>实现，<code>复杂类型</code>则基于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a>实现。<br><code>Proxy</code>是 ES6 新增的 API，可以直接拦截对象上的所有操作，所以解决了<code>vue2 中的运行时动态新增/删除的属性无法自动处理为响应式</code>问题，并且减少了不必要的性能开销</p><h2 id="其他新增功能"><a href="#其他新增功能" class="headerlink" title="其他新增功能"></a>其他新增功能</h2><ol><li><p><code>Fragment</code>允许组件返回多个根元素，减少层级</p></li><li><p><code>slot</code>插槽的增强与语法简化</p></li><li><p><code>Suspense 组件</code>异步内容加载组件，可以展示备用 UI</p></li><li><p><code>Teleport 组件</code>允许将元素渲染到 DOM 的任意位置</p></li><li><p>编译优化：优化了 VDOM 的对比算法</p></li><li><p>TS 的支持</p></li><li><p>tree-shaking 的支持</p></li><li><p>生命周期优化</p></li><li><p>等等…</p></li></ol><p><img src="/img/images/2024/1704119017446-88b916b2-c88f-4f32-879e-bc07b4dc3c08.png"></p><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;div&gt;</span><br><span class="hljs-string">      &lt;h1&gt;你好呀&lt;/h1&gt;</span><br><span class="hljs-string">      &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">      &lt;p v-if=&quot;array.length&quot;&gt;&#123;&#123; array.length &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  `</span>,<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> msg = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;hello, my children&#x27;</span>)<br>    <span class="hljs-keyword">const</span> array = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">reactive</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// debugger</span><br>      msg.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;hello, my children~~~~~~&#x27;</span><br>    &#125;, <span class="hljs-number">2000</span>)<br><br>    <span class="hljs-keyword">return</span> &#123; msg, array &#125;<br>  &#125;<br>&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>初始化入口为：<a href="https://github.com/vuejs/core/blob/0275dd329d241bdd84ce3ca0c7fc07211cb21751/packages/runtime-dom/src/index.ts#L67">createApp</a> 函数</p><h2 id="初始化流程图"><a href="#初始化流程图" class="headerlink" title="初始化流程图"></a>初始化流程图</h2><p><img src="/img/images/2024/1704458387695-6cf52ef7-abaf-4095-bd15-941c76528453.jpeg"></p><h1 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h1><h2 id="Ref-原理"><a href="#Ref-原理" class="headerlink" title="Ref 原理"></a>Ref 原理</h2><p>完整源码：<a href="https://github.com/vuejs/core/blob/main/packages/reactivity/src/ref.ts">vue3-ref.ts</a><br>核心源码解析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">isRef</span>(<span class="hljs-params">r: any</span>): r is <span class="hljs-title class_">Ref</span> &#123;<br>  <span class="hljs-keyword">return</span> !!(r &amp;&amp; r.<span class="hljs-property">__v_isRef</span> === <span class="hljs-literal">true</span>)<br>&#125;<br><br><span class="hljs-comment">// ref方法：里面调用 createRef 方法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ref</span>(<span class="hljs-params">value?: unknown</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">createRef</span>(value, <span class="hljs-literal">false</span>)<br>&#125;<br><br><span class="hljs-comment">// createRef方法：</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createRef</span>(<span class="hljs-params">rawValue: unknown, shallow: boolean</span>) &#123;<br>  <span class="hljs-comment">// 当为 Ref 类型时表明是响应式了，所以直接返回</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isRef</span>(rawValue)) &#123;<br>    <span class="hljs-keyword">return</span> rawValue<br>  &#125;<br><br>  <span class="hljs-comment">// 否则，调用 new RefImpl，并返回已处理为响应式的实例</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RefImpl</span>(rawValue, shallow)<br>&#125;<br><br><span class="hljs-comment">// RefImpl：最核心的代码</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RefImpl</span>&lt;T&gt; &#123;<br>  private <span class="hljs-attr">_value</span>: T<br>  private <span class="hljs-attr">_rawValue</span>: T<br><br>  public dep?: <span class="hljs-title class_">Dep</span> = <span class="hljs-literal">undefined</span><br>  public readonly __v_isRef = <span class="hljs-literal">true</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    value: T,</span><br><span class="hljs-params">    public readonly __v_isShallow: boolean,</span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-comment">// ref 调用时，__v_isShallow 为 false，所以直接返回 value(ref 的传参)</span><br>    <span class="hljs-comment">// this._rawValue = value</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_rawValue</span> = __v_isShallow ? value : <span class="hljs-title function_">toRaw</span>(value)<br><br>    <span class="hljs-comment">// ref 调用时，__v_isShallow 为 false，所以直接返回 value(ref 的传参)</span><br>    <span class="hljs-comment">// this._value = value</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span> = __v_isShallow ? value : <span class="hljs-title function_">toReactive</span>(value)<br>  &#125;<br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">value</span>() &#123;<br>    <span class="hljs-comment">// 在读取 实例.value 属性时触发：</span><br>    <span class="hljs-comment">// 1. 收集依赖</span><br>    <span class="hljs-title function_">trackRefValue</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-comment">// 2. 返回值</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span><br>  &#125;<br><br>  <span class="hljs-keyword">set</span> <span class="hljs-title function_">value</span>(<span class="hljs-params">newVal</span>) &#123;<br>    <span class="hljs-comment">// 在设置 实例.value 属性时触发：</span><br>    <span class="hljs-keyword">const</span> useDirectValue =<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">__v_isShallow</span> || <span class="hljs-title function_">isShallow</span>(newVal) || <span class="hljs-title function_">isReadonly</span>(newVal)<br>    newVal = useDirectValue ? newVal : <span class="hljs-title function_">toRaw</span>(newVal)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasChanged</span>(newVal, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_rawValue</span>)) &#123;<br>      <span class="hljs-comment">// 1. 设置 _rawValue 的值</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_rawValue</span> = newVal<br>      <span class="hljs-comment">// 2. 设置 _value 的值</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span> = useDirectValue ? newVal : <span class="hljs-title function_">toReactive</span>(newVal)<br>      <span class="hljs-comment">// 3. 触发依赖</span><br>      <span class="hljs-title function_">triggerRefValue</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-title class_">DirtyLevels</span>.<span class="hljs-property">Dirty</span>, newVal)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：通过核心代码的解析，可以发现调用<code>ref(0)</code>后，最终返回的是个对象，传入的值是放在<code>.value</code>上的，并且通过<code>get|set 函数</code>实现响应式<br>所以这也是为什么<code>const count = ref(0)</code>后，使用&#x2F;设置时要用<code>count.value = 1</code><br>但在<code>&lt;template&gt;</code>里面可以省略<code>.value</code>，因为<code>Vue</code>框架在<code>&lt;template&gt;</code>解析编译时，自动加上了<code>value</code></p><h2 id="Reactive-原理"><a href="#Reactive-原理" class="headerlink" title="Reactive 原理"></a>Reactive 原理</h2><p>完整源码：<a href="https://github.com/vuejs/core/blob/main/packages/reactivity/src/reactive.ts">vue3-reactive.ts</a><br>核心源码解析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> user = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xx&#x27;</span> &#125;)<br><br><span class="hljs-comment">// reactive方法：调用 createReactiveObject 方法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">reactive</span>(<span class="hljs-params">target: object</span>) &#123;<br>  <span class="hljs-comment">// if trying to observe a readonly proxy, return the readonly version.</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isReadonly</span>(target)) &#123;<br>    <span class="hljs-keyword">return</span> target<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">createReactiveObject</span>(<br>    target,<br>    <span class="hljs-literal">false</span>,<br>    mutableHandlers,<br>    mutableCollectionHandlers,<br>    reactiveMap,<br>  )<br>&#125;<br><br><span class="hljs-comment">// createReactiveObject：最核心的代码</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createReactiveObject</span>(<span class="hljs-params"></span><br><span class="hljs-params">  target: Target,</span><br><span class="hljs-params">  isReadonly: boolean,</span><br><span class="hljs-params">  baseHandlers: ProxyHandler&lt;any&gt;,</span><br><span class="hljs-params">  collectionHandlers: ProxyHandler&lt;any&gt;,</span><br><span class="hljs-params">  proxyMap: <span class="hljs-built_in">WeakMap</span>&lt;Target, any&gt;,</span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 边缘检测 --- start</span><br>  <span class="hljs-comment">// 传参不为对象时，警告，原值返回</span><br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isObject</span>(target)) &#123;<br>    <span class="hljs-keyword">if</span> (__DEV__) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">`value cannot be made reactive: <span class="hljs-subst">$&#123;<span class="hljs-built_in">String</span>(target)&#125;</span>`</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> target<br>  &#125;<br>  <span class="hljs-comment">// target is already a Proxy, return it.</span><br>  <span class="hljs-comment">// exception: calling readonly() on a reactive object</span><br>  <span class="hljs-keyword">if</span> (<br>    target[<span class="hljs-title class_">ReactiveFlags</span>.<span class="hljs-property">RAW</span>] &amp;&amp;<br>    !(isReadonly &amp;&amp; target[<span class="hljs-title class_">ReactiveFlags</span>.<span class="hljs-property">IS_REACTIVE</span>])<br>  ) &#123;<br>    <span class="hljs-keyword">return</span> target<br>  &#125;<br>  <span class="hljs-comment">// target already has corresponding Proxy</span><br>  <span class="hljs-keyword">const</span> existingProxy = proxyMap.<span class="hljs-title function_">get</span>(target)<br>  <span class="hljs-keyword">if</span> (existingProxy) &#123;<br>    <span class="hljs-keyword">return</span> existingProxy<br>  &#125;<br>  <span class="hljs-comment">// only specific value types can be observed.</span><br>  <span class="hljs-keyword">const</span> targetType = <span class="hljs-title function_">getTargetType</span>(target) <span class="hljs-comment">// COMMON:Object|Array;COLLECTION:Map|WeekMap|Set|WeekSet</span><br>  <span class="hljs-keyword">if</span> (targetType === <span class="hljs-title class_">TargetType</span>.<span class="hljs-property">INVALID</span>) &#123;<br>    <span class="hljs-keyword">return</span> target<br>  &#125;<br>  <span class="hljs-comment">// 边缘检测 --- end</span><br><br>  <span class="hljs-comment">// 调用 new Proxy，进行数据代理</span><br>  <span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(<br>    target,<br>    targetType === <span class="hljs-title class_">TargetType</span>.<span class="hljs-property">COLLECTION</span> ? collectionHandlers : baseHandlers, <span class="hljs-comment">// handler 函数</span><br>  )<br>  proxyMap.<span class="hljs-title function_">set</span>(target, proxy)<br>  <span class="hljs-keyword">return</span> proxy<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：通过核心代码的解析，可以发现核心在于<code>new Proxy</code>，针对不同的复杂类型，使用不同的<code>handler</code>函数，针对性的处理<code>get|set</code>方法</p><h2 id="依赖收集、触发流程与原理"><a href="#依赖收集、触发流程与原理" class="headerlink" title="依赖收集、触发流程与原理"></a>依赖收集、触发流程与原理</h2><p>当明白了数据能被改为响应式后，则需要研究下数据变化后为什么对应的页面&#x2F;函数会执行呢？<br>这就涉及到<code>依赖的收集与触发</code></p><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><ul><li>副作用函数<ul><li>会产生副作用的函数：使用&#x2F;更改了函数外的变量的函数</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> userInfo = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lisi&#x27;</span> &#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserInfo</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 副作用函数</span><br>  <span class="hljs-keyword">return</span> userInfo.<span class="hljs-property">name</span> <span class="hljs-comment">// 引用了外部变量</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应式数据<ul><li>数据发生变化时，能触发其他使用该数据的同步变化，这种数据就被称为响应式数据</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">conts obj = &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;hello!&#x27;</span> &#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">effect</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = obj.<span class="hljs-property">text</span><br>&#125;<br><br>obj.<span class="hljs-property">text</span> = <span class="hljs-string">&#x27;你好&#x27;</span><br><span class="hljs-comment">// 当重新赋值&#x27;你好&#x27;后，如果该 effect 能自动重新执行，则 obj 就是响应式数据</span><br></code></pre></td></tr></table></figure><h3 id="实现思路（简易代码）"><a href="#实现思路（简易代码）" class="headerlink" title="实现思路（简易代码）"></a>实现思路（简易代码）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">conts obj = &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;hello!&#x27;</span> &#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">effect</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = obj.<span class="hljs-property">text</span><br>&#125;<br><br>obj.<span class="hljs-property">text</span> = <span class="hljs-string">&#x27;你好&#x27;</span><br></code></pre></td></tr></table></figure><p>通过上述例子代码观察可知：</p><ul><li>当副作用函数执行时，可以发现会触发<code>obj.text</code>的<code>读取</code>操作</li><li>当修改<code>obj.text</code>时，会触发<code>obj.text</code>的<code>设置</code>操作</li></ul><p>那我们是不是可以在<code>读取</code>与<code>设置</code>时进行拦截呢？<code>ES6 的 Proxy</code>可以做代理<br>当<code>读取</code>时，把对应的副作用函数收集存起来<br>当<code>设置</code>时，把收集的副作用函数拿出来执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> bucket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(); <span class="hljs-comment">// 存储副作用函数的“桶”</span><br><br><span class="hljs-comment">// 原始数据</span><br><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;hello!&quot;</span> &#125;;<br><br><span class="hljs-comment">// 对原始数据的代理</span><br><span class="hljs-keyword">const</span> data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(obj, &#123;<br>  <span class="hljs-comment">// 拦截读取操作</span><br>  <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key</span>) &#123;<br>    <span class="hljs-comment">// 将副作用函数放入“桶”</span><br>    bucket.<span class="hljs-title function_">add</span>(effect);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ bucket ] &gt;&quot;</span>, bucket);<br>    <span class="hljs-comment">// 返回属性值</span><br>    <span class="hljs-keyword">return</span> target[key];<br>  &#125;,<br>  <span class="hljs-comment">// 拦截设置操作</span><br>  <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, newValue</span>) &#123;<br>    <span class="hljs-comment">// 设置属性值</span><br>    target[key] = newValue;<br>    <span class="hljs-comment">// 将副作用函数拿出“桶”，并执行</span><br>    bucket.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> <span class="hljs-title function_">fn</span>());<br>  &#125;,<br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">effect</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = data.<span class="hljs-property">text</span>;<br>&#125;<br><br><span class="hljs-title function_">effect</span>(); <span class="hljs-comment">// 执行副作用函数，触发读取操作</span><br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  data.<span class="hljs-property">text</span> = <span class="hljs-string">&quot;你好&quot;</span>; <span class="hljs-comment">// 触发设置操作</span><br>&#125;, <span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>上面的代码就是一个简易的可运行的响应式原理(还存在很多设计问题)</p><h3 id="完善的响应式"><a href="#完善的响应式" class="headerlink" title="完善的响应式"></a>完善的响应式</h3><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题 1"></a>问题 1</h4><p>副作用函数的命名被我们固定为<code>effect</code>了，真实情况可能是其他名字或匿名<br>解决：设计一个专门注册副作用函数的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> activeEffect = <span class="hljs-literal">undefined</span> <span class="hljs-comment">// 全局变量：存储被注册的副作用函数</span><br><br><span class="hljs-comment">// 注册副作用函数的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">effect</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-comment">// 存储传入的副作用函数</span><br>  activeEffect = fn<br><br>  <span class="hljs-comment">// 执行该副作用函数</span><br>  <span class="hljs-title function_">activeEffect</span>()<br>&#125;<br><br><span class="hljs-comment">// 注册副作用函数</span><br><span class="hljs-title function_">effect</span>(<br>  <span class="hljs-comment">// 一个匿名的副作用函数</span><br>  <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = data.<span class="hljs-property">text</span>;<br>  &#125;<br>)<br></code></pre></td></tr></table></figure><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题 2"></a>问题 2</h4><p>当给响应式数据设置一个新值时，也会触发副作用函数的执行<br>解决：将副作用的存储与响应式数据的属性关联起来，存储就不能再使用<code>Set</code>了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 观察副作用函数</span><br><span class="hljs-title function_">effect</span>(<br>  <span class="hljs-comment">// 一个匿名的副作用函数</span><br>  <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = data.<span class="hljs-property">text</span>;<br>  &#125;<br>)<br>可以得到一个关系：<br>data<br>  -- text<br>     -- effect<br></code></pre></td></tr></table></figure><p>解决问题 1、问题 2 后的完善代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> activeEffect = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// 全局变量：存储被注册的副作用函数</span><br><br><span class="hljs-comment">// 注册副作用函数的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">effect</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-comment">// 存储传入的副作用函数</span><br>  activeEffect = fn;<br><br>  <span class="hljs-comment">// 执行该副作用函数</span><br>  <span class="hljs-title function_">activeEffect</span>();<br>&#125;<br><br><span class="hljs-keyword">const</span> bucket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>(); <span class="hljs-comment">// 存储副作用函数的</span><br><span class="hljs-comment">// bucket 的数据结构为：&#123;</span><br><span class="hljs-comment">//   [target]: &#123;</span><br><span class="hljs-comment">//     [key]: [effect1, effect2, ...]</span><br><span class="hljs-comment">//     // ...</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// 对 Proxy 的封装</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reactive</span> = (<span class="hljs-params">_obj</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 对原始数据的代理</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(_obj, &#123;<br>    <span class="hljs-comment">// 拦截读取操作</span><br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key</span>) &#123;<br>      <span class="hljs-keyword">if</span> (activeEffect) &#123;<br>        <span class="hljs-keyword">let</span> depsMap = bucket.<span class="hljs-title function_">get</span>(target);<br>        <span class="hljs-keyword">if</span> (!depsMap) &#123;<br>          depsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>          bucket.<span class="hljs-title function_">set</span>(target, depsMap);<br>        &#125;<br><br>        <span class="hljs-keyword">let</span> deps = depsMap.<span class="hljs-title function_">get</span>(key);<br><br>        <span class="hljs-keyword">if</span> (!deps) deps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><br>        deps.<span class="hljs-title function_">add</span>(activeEffect);<br>        depsMap.<span class="hljs-title function_">set</span>(key, deps);<br>      &#125;<br><br>      <span class="hljs-comment">// 返回属性值</span><br>      <span class="hljs-keyword">return</span> target[key];<br>    &#125;,<br>    <span class="hljs-comment">// 拦截设置操作</span><br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, newValue</span>) &#123;<br>      <span class="hljs-comment">// 设置属性值</span><br>      target[key] = newValue;<br><br>      <span class="hljs-keyword">let</span> depsMap = bucket.<span class="hljs-title function_">get</span>(target);<br>      <span class="hljs-keyword">if</span> (!depsMap) <span class="hljs-keyword">return</span>;<br><br>      <span class="hljs-keyword">let</span> deps = depsMap.<span class="hljs-title function_">get</span>(key);<br>      <span class="hljs-keyword">if</span> (!deps) <span class="hljs-keyword">return</span>;<br><br>      deps.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> <span class="hljs-title function_">fn</span>());<br>    &#125;,<br>  &#125;);<br>&#125;;<br><br><span class="hljs-keyword">const</span> data = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;hello!&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span> &#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myEffect1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ myEffect1() ] &gt;&quot;</span>);<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = data.<span class="hljs-property">text</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myEffect2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ myEffect2() ] &gt;&quot;</span>);<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = data.<span class="hljs-property">text</span> + data.<span class="hljs-property">name</span>;<br>&#125;<br><br><span class="hljs-comment">// 注册副作用函数</span><br><span class="hljs-title function_">effect</span>(myEffect1);<br><span class="hljs-title function_">effect</span>(myEffect2);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ setTimeout 3000 ] &gt;&quot;</span>);<br>  data.<span class="hljs-property">pp</span> = <span class="hljs-string">&quot;你好!&quot;</span>; <span class="hljs-comment">// 触发设置操作</span><br>&#125;, <span class="hljs-number">3000</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ setTimeout 5000 ] &gt;&quot;</span>);<br>  data.<span class="hljs-property">text</span> = <span class="hljs-string">&quot;你好!&quot;</span>; <span class="hljs-comment">// 触发设置操作</span><br>&#125;, <span class="hljs-number">5000</span>);<br></code></pre></td></tr></table></figure><p>其中的<code>bucket</code>的数据结构如下：<br><img src="/img/images/2024/1704530449046-690a05cd-df46-40c5-b7d3-0d0c524ed14d.png"><br>在将上述完善后的代码的<code>reactive</code>函数再次完善下，可以得到越来越接近于 Vue3 源码的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ...</span><br><br> <span class="hljs-keyword">const</span> bucket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(); <span class="hljs-comment">// 存储副作用函数的“桶”</span><br><br><span class="hljs-comment">// 依赖收集(追踪)</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">track</span> = (<span class="hljs-params">target, key</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (activeEffect) &#123;<br>    <span class="hljs-keyword">let</span> depsMap = bucket.<span class="hljs-title function_">get</span>(target);<br>    <span class="hljs-keyword">if</span> (!depsMap) &#123;<br>      depsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>      bucket.<span class="hljs-title function_">set</span>(target, depsMap);<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> deps = depsMap.<span class="hljs-title function_">get</span>(key);<br><br>    <span class="hljs-keyword">if</span> (!deps) deps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><br>    deps.<span class="hljs-title function_">add</span>(activeEffect);<br>    depsMap.<span class="hljs-title function_">set</span>(key, deps);<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 依赖触发</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">trigger</span> = (<span class="hljs-params">target, key</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> depsMap = bucket.<span class="hljs-title function_">get</span>(target);<br>  <span class="hljs-keyword">if</span> (!depsMap) <span class="hljs-keyword">return</span>;<br><br>  <span class="hljs-keyword">let</span> deps = depsMap.<span class="hljs-title function_">get</span>(key);<br>  <span class="hljs-keyword">if</span> (!deps) <span class="hljs-keyword">return</span>;<br><br>  deps.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> <span class="hljs-title function_">fn</span>());<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reactive</span> = (<span class="hljs-params">_obj</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 对原始数据的代理</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(_obj, &#123;<br>    <span class="hljs-comment">// 拦截读取操作</span><br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key</span>) &#123;<br>      <span class="hljs-comment">// 依赖收集(追踪)</span><br>      <span class="hljs-title function_">track</span>(target, key);<br><br>      <span class="hljs-comment">// 返回属性值</span><br>      <span class="hljs-keyword">return</span> target[key];<br>    &#125;,<br>    <span class="hljs-comment">// 拦截设置操作</span><br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, newValue</span>) &#123;<br>      <span class="hljs-comment">// 设置属性值</span><br>      target[key] = newValue;<br><br>      <span class="hljs-comment">// 依赖触发</span><br>      <span class="hljs-title function_">trigger</span>(target, key);<br>    &#125;,<br>  &#125;);<br>&#125;;<br><br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><h4 id="问题-3"><a href="#问题-3" class="headerlink" title="问题 3"></a>问题 3</h4><p>当使用过的属性不再使用时，已绑定的依赖项还会触发</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">effect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = obj.<span class="hljs-property">success</span> ? obj.<span class="hljs-property">msg</span> : <span class="hljs-string">&#x27;error&#x27;</span><br>&#125;)<br><span class="hljs-comment">// 当 success 为 true 时，则使用 msg，那对应的依赖项为：</span><br><span class="hljs-title function_">obj</span>(target)<br>  -- <span class="hljs-title function_">success</span>(key)<br>     -- effect<br>  -- <span class="hljs-title function_">msg</span>(key)<br>     -- effect<br><span class="hljs-comment">// 但当 success 为 false 时，则固定显示文本 &#x27;error&#x27;，但 msg 已绑的依赖项未解除</span><br><span class="hljs-comment">// 则如果执行 obj.msg = &#x27;xx&#x27;，则还是会触发 effect 的执行，这完全是多余的</span><br></code></pre></td></tr></table></figure><p>解决：给副作用函数增加一个属性，用于存储相关联的依赖项，在读取副作用时先断开联系，等真正执行副作用时会重新建立联系</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> activeEffect = <span class="hljs-literal">undefined</span><br><br><span class="hljs-comment">// 新增的：clearup 函数，用于断开联系</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">clearup</span>(<span class="hljs-params">effectFn</span>) &#123;<br>  effectFn.<span class="hljs-property">deps</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">deps</span>) =&gt;</span> &#123;<br>    deps.<span class="hljs-title function_">delete</span>(effectFn);<br>  &#125;);<br>  effectFn.<span class="hljs-property">deps</span> = [];<br>&#125;<br><br><span class="hljs-comment">// 注册副作用函数的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">effect</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">effectFn</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><br>    <span class="hljs-title function_">clearup</span>(effectFn); <span class="hljs-comment">// 新增的：clearup 函数，用于断开联系</span><br><br>    <span class="hljs-comment">// 当 effectFn 执行时，将其设置为当前激活的副作用函数</span><br>    activeEffect = effectFn;<br><br>    <span class="hljs-comment">// 执行该副作用函数</span><br>    <span class="hljs-title function_">fn</span>();<br>  &#125;;<br><br>  effectFn.<span class="hljs-property">deps</span> = []; <span class="hljs-comment">// 新增的：deps 数组，用于存储相关联的依赖项</span><br><br>  <span class="hljs-title function_">effectFn</span>();<br>&#125;<br><br><span class="hljs-comment">// 改造 track，用于收集副作用函数的关联依赖项</span><br><span class="hljs-comment">// 依赖收集(追踪)</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">track</span> = (<span class="hljs-params">target, key</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (activeEffect) &#123;<br>    <span class="hljs-keyword">let</span> depsMap = bucket.<span class="hljs-title function_">get</span>(target);<br>    <span class="hljs-keyword">if</span> (!depsMap) &#123;<br>      depsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>      bucket.<span class="hljs-title function_">set</span>(target, depsMap);<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> deps = depsMap.<span class="hljs-title function_">get</span>(key);<br><br>    <span class="hljs-keyword">if</span> (!deps) deps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><br>    deps.<span class="hljs-title function_">add</span>(activeEffect);<br>    depsMap.<span class="hljs-title function_">set</span>(key, deps);<br><br>    activeEffect.<span class="hljs-property">deps</span>.<span class="hljs-title function_">push</span>(deps) <span class="hljs-comment">// 新增的：用于收集该副作用函数的关联依赖项</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 依赖触发</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">trigger</span> = (<span class="hljs-params">target, key</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> depsMap = bucket.<span class="hljs-title function_">get</span>(target);<br>  <span class="hljs-keyword">if</span> (!depsMap) <span class="hljs-keyword">return</span>;<br><br>  <span class="hljs-keyword">let</span> deps = depsMap.<span class="hljs-title function_">get</span>(key);<br>  <span class="hljs-keyword">if</span> (!deps) <span class="hljs-keyword">return</span>;<br><br>  <span class="hljs-keyword">const</span> newDeps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(deps); <span class="hljs-comment">// 新增的：用于避免出现死循环</span><br>  newDeps.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> <span class="hljs-title function_">fn</span>());<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="Vue3-源码内的依赖收集与触发"><a href="#Vue3-源码内的依赖收集与触发" class="headerlink" title="Vue3 源码内的依赖收集与触发"></a>Vue3 源码内的依赖收集与触发</h3><p>以<code>reactive</code>为例，讲述下依赖收集、触发的完整流程<br>reactive 的核心代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reactive</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 调用 new Proxy，进行数据代理</span><br>  <span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(<br>    target,<br>    mutableHandlers, <span class="hljs-comment">// handler 函数</span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">mutableHandlers</span>: <span class="hljs-title class_">ProxyHandler</span>&lt;object&gt; = &#123;<br>  <span class="hljs-attr">get</span>: <span class="hljs-title function_">createGetter</span>(),<br>  <span class="hljs-attr">set</span>: <span class="hljs-title function_">createSetter</span>(),<br>  deleteProperty,<br>  has,<br>  ownKeys<br>&#125;<br><br><span class="hljs-keyword">const</span> enum <span class="hljs-title class_">TrackOpTypes</span> &#123;<br>  <span class="hljs-variable constant_">GET</span> = <span class="hljs-string">&#x27;get&#x27;</span>,<br>  <span class="hljs-variable constant_">HAS</span> = <span class="hljs-string">&#x27;has&#x27;</span>,<br>  <span class="hljs-variable constant_">ITERATE</span> = <span class="hljs-string">&#x27;iterate&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> enum <span class="hljs-title class_">TriggerOpTypes</span> &#123;<br>  <span class="hljs-variable constant_">SET</span> = <span class="hljs-string">&#x27;set&#x27;</span>,<br>  <span class="hljs-variable constant_">ADD</span> = <span class="hljs-string">&#x27;add&#x27;</span>,<br>  <span class="hljs-variable constant_">DELETE</span> = <span class="hljs-string">&#x27;delete&#x27;</span>,<br>  <span class="hljs-variable constant_">CLEAR</span> = <span class="hljs-string">&#x27;clear&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createGetter</span>(<span class="hljs-params">isReadonly = <span class="hljs-literal">false</span>, shallow = <span class="hljs-literal">false</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">target: Target, key: string | symbol, receiver: object</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, key, receiver)<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// ⭐️ 依赖收集</span><br>    <span class="hljs-title function_">track</span>(target, <span class="hljs-title class_">TrackOpTypes</span>.<span class="hljs-property">GET</span>, key)<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-keyword">return</span> res<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createSetter</span>(<span class="hljs-params">shallow = <span class="hljs-literal">false</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">set</span>(<span class="hljs-params"></span><br><span class="hljs-params">    target: object,</span><br><span class="hljs-params">    key: string | symbol,</span><br><span class="hljs-params">    value: unknown,</span><br><span class="hljs-params">    receiver: object</span><br><span class="hljs-params">  </span>): boolean &#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-keyword">const</span> result = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, key, value, receiver)<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// ⭐️ 依赖触发</span><br>    <span class="hljs-title function_">trigger</span>(target, <span class="hljs-title class_">TriggerOpTypes</span>.<span class="hljs-property">SET</span>, key, value, oldValue)<br><br>    <span class="hljs-keyword">return</span> result<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="依赖收集"><a href="#依赖收集" class="headerlink" title="依赖收集"></a>依赖收集</h4><p>通过<code>getter</code>实现依赖的收集</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ⭐️ 依赖收集</span><br><span class="hljs-title function_">track</span>(target, <span class="hljs-title class_">TrackOpTypes</span>.<span class="hljs-property">GET</span>, key)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">type <span class="hljs-title class_">KeyToDepMap</span> = <span class="hljs-title class_">Map</span>&lt;any, <span class="hljs-title class_">Dep</span>&gt;<br><span class="hljs-keyword">const</span> targetMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>&lt;any, <span class="hljs-title class_">KeyToDepMap</span>&gt;()<br><span class="hljs-comment">// targetMap = &#123;</span><br><span class="hljs-comment">//   [target]: &#123;</span><br><span class="hljs-comment">//     [key]: []</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-keyword">let</span> activeEffect = <span class="hljs-literal">null</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">track</span>(<span class="hljs-params">target, type, key</span>) &#123;<br>  <span class="hljs-keyword">let</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target)<br><br>  <span class="hljs-keyword">if</span>(!depsMap) &#123;<br>    depsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>    targetMap.<span class="hljs-title function_">set</span>(target, depsMap)<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> dep = depsMap.<span class="hljs-title function_">get</span>(key)<br><br>  <span class="hljs-keyword">if</span>(!dep) &#123;<br>    dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br>    depsMap.<span class="hljs-title function_">set</span>(key, dep)<br>  &#125;<br><br>  <span class="hljs-title function_">trackEffects</span>(dep)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">trackEffects</span>(<span class="hljs-params">dep</span>) &#123;<br>  dep.<span class="hljs-title function_">add</span>(activeEffect)<br>  activeEffect!.<span class="hljs-property">deps</span>.<span class="hljs-title function_">push</span>(dep)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="依赖触发"><a href="#依赖触发" class="headerlink" title="依赖触发"></a>依赖触发</h4><p>通过<code>setter</code>实现依赖的收集</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ⭐️ 依赖触发</span><br><span class="hljs-title function_">trigger</span>(target, <span class="hljs-title class_">TriggerOpTypes</span>.<span class="hljs-property">SET</span>, key, value, oldValue)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">trigger</span>(<span class="hljs-params">target, type, key, value, oldValue</span>) &#123;<br>  <span class="hljs-keyword">let</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target)<br><br>  <span class="hljs-keyword">if</span>(!depsMap) <span class="hljs-keyword">return</span><br><br>  <span class="hljs-keyword">let</span> deps = depsMap.<span class="hljs-title function_">get</span>(key)<br><br>  <span class="hljs-title function_">triggerEffects</span>(deps)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">triggerEffects</span>(<span class="hljs-params">deps</span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> dep <span class="hljs-keyword">of</span> deps) &#123;<br>    <span class="hljs-title function_">dep</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="渲染流程"><a href="#渲染流程" class="headerlink" title="渲染流程"></a>渲染流程</h1><p>模板 -编译-&gt; 渲染函数 -&gt; 虚拟 DOM -&gt; 渲染器 -&gt; 真实 DOM</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>大致跟 Vue2 一样的：编译 -&gt; 运行时</p><ol><li>编译<ol><li><code>&lt;template&gt;</code>转为<code>模板 AST 树(用来描述模板的)</code></li><li>将<code>模板 AST 树</code>转换为<code>JS AST 树(用来描述渲染函数的)</code><ol><li>期间会打上<code>patchFlag(值为 number)</code>，用于精确化标记每个节点，只要打上了<code>patchFlag</code>则一定是动态的节点；没有打上的就是静态节点</li><li>并且还会额外使用<code>dynamicChildren</code>数组来储存打标的节点，直接用该数据进行 diff</li></ol></li><li>基于<code>JS AST 树</code>生成<code>render</code>字符串</li><li>最后基于<code>render</code>字符串生成<code>render</code>函数<br><img src="/img/images/2024/1704377572240-9a68948c-6ff5-4d92-9ad5-16fba0b63352.png"></li></ol></li><li>渲染时<ol><li>运行实例的<code>render</code>函数，生成<code>vnode</code><ol><li><code>vnode</code>一种用来描述真实 DOM 的 JS 对象</li></ol></li><li>基于<code>vnode</code>进行渲染到页面<ol><li><code>vnode</code>是通过<code>renderer</code>渲染器转化为真实 DOM</li><li>期间会经历 diff 算法，实现最优的方式转化为真实 DOM</li><li><code>renderer</code>渲染器就是一堆<code>DOM 的操作</code>：<code>createElement/addEventListener/...</code></li></ol></li></ol></li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>编译的主入口：<a href="https://github.com/vuejs/core/blob/0275dd329d241bdd84ce3ca0c7fc07211cb21751/packages/compiler-core/src/compile.ts#L65">Compile.ts</a>，触发条件：<code>.mount(&#39;#app&#39;)</code>函数的调用，并完成首次页面的渲染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">baseCompile</span>(<span class="hljs-params"></span><br><span class="hljs-params">  template: string | RootNode,</span><br><span class="hljs-params">  options: CompilerOptions = &#123;&#125;</span><br><span class="hljs-params"></span>): <span class="hljs-title class_">CodegenResult</span> &#123;<br> <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-comment">// ⭐️ &lt;template&gt; 转为模板 AST 树(用来描述模板的)</span><br>  <span class="hljs-keyword">const</span> ast = <span class="hljs-title function_">isString</span>(template) ? <span class="hljs-title function_">baseParse</span>(template, options) : template<br><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-comment">// ⭐️ 将模板 AST 树转换为 JS AST 树(用来描述渲染函数的)</span><br>  <span class="hljs-title function_">transform</span>(<br>    ast,<br>    <span class="hljs-title function_">extend</span>(&#123;&#125;, options, &#123;<br>      prefixIdentifiers,<br>      <span class="hljs-attr">nodeTransforms</span>: [<br>        ...nodeTransforms,<br>        ...(options.<span class="hljs-property">nodeTransforms</span> || []) <span class="hljs-comment">// user transforms</span><br>      ],<br>      <span class="hljs-attr">directiveTransforms</span>: <span class="hljs-title function_">extend</span>(<br>        &#123;&#125;,<br>        directiveTransforms,<br>        options.<span class="hljs-property">directiveTransforms</span> || &#123;&#125; <span class="hljs-comment">// user transforms</span><br>      )<br>    &#125;)<br>  )<br><br>  <span class="hljs-comment">// ⭐️ 基于 JS AST 树生成 render 字符串</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">generate</span>(<br>    ast,<br>    <span class="hljs-title function_">extend</span>(&#123;&#125;, options, &#123;<br>      prefixIdentifiers<br>    &#125;)<br>  )<br>&#125;<br><br><span class="hljs-comment">// ...</span><br><span class="hljs-comment">// ⭐️ 基于 render 字符串生成 render 函数</span><br><span class="hljs-keyword">const</span> render = (<br>  __GLOBAL__ ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(code)() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">&#x27;Vue&#x27;</span>, code)(runtimeDom)<br>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">RenderFunction</span><br></code></pre></td></tr></table></figure><h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><p>渲染时的主入口：无固定，触发条件：某个响应的数据的改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 若为 ref() 的值的改变，触发页面的重新渲染</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RefImpl</span>&lt;T&gt; &#123;<br>  private <span class="hljs-attr">_value</span>: T<br>  private <span class="hljs-attr">_rawValue</span>: T<br><br>  public dep?: <span class="hljs-title class_">Dep</span> = <span class="hljs-literal">undefined</span><br>  public readonly __v_isRef = <span class="hljs-literal">true</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value: T, public readonly __v_isShallow: boolean</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_rawValue</span> = __v_isShallow ? value : <span class="hljs-title function_">toRaw</span>(value)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span> = __v_isShallow ? value : <span class="hljs-title function_">toReactive</span>(value)<br>  &#125;<br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">value</span>() &#123;<br>    <span class="hljs-title function_">trackRefValue</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span><br>  &#125;<br><br>  <span class="hljs-keyword">set</span> <span class="hljs-title function_">value</span>(<span class="hljs-params">newVal</span>) &#123;<br>    <span class="hljs-keyword">const</span> useDirectValue =<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">__v_isShallow</span> || <span class="hljs-title function_">isShallow</span>(newVal) || <span class="hljs-title function_">isReadonly</span>(newVal)<br>    newVal = useDirectValue ? newVal : <span class="hljs-title function_">toRaw</span>(newVal)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasChanged</span>(newVal, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_rawValue</span>)) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_rawValue</span> = newVal<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span> = useDirectValue ? newVal : <span class="hljs-title function_">toReactive</span>(newVal)<br>      <span class="hljs-comment">// ⭐️ 依赖变更通知函数</span><br>      <span class="hljs-title function_">triggerRefValue</span>(<span class="hljs-variable language_">this</span>, newVal)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">triggerRefValue</span>(<span class="hljs-params">ref: RefBase&lt;any&gt;, newVal?: any</span>) &#123;<br>  ref = <span class="hljs-title function_">toRaw</span>(ref)<br>  <span class="hljs-keyword">if</span> (ref.<span class="hljs-property">dep</span>) &#123;<br>    <span class="hljs-keyword">if</span> (__DEV__) &#123;<br>      <span class="hljs-title function_">triggerEffects</span>(ref.<span class="hljs-property">dep</span>, &#123;<br>        <span class="hljs-attr">target</span>: ref,<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">TriggerOpTypes</span>.<span class="hljs-property">SET</span>,<br>        <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;value&#x27;</span>,<br>        <span class="hljs-attr">newValue</span>: newVal<br>      &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">triggerEffects</span>(ref.<span class="hljs-property">dep</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">triggerEffects</span>(<span class="hljs-params"></span><br><span class="hljs-params">  dep: Dep | ReactiveEffect[],</span><br><span class="hljs-params">  debuggerEventExtraInfo?: DebuggerEventExtraInfo</span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// spread into array for stabilization</span><br>  <span class="hljs-keyword">const</span> effects = <span class="hljs-title function_">isArray</span>(dep) ? dep : [...dep]<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> effect <span class="hljs-keyword">of</span> effects) &#123;<br>    <span class="hljs-keyword">if</span> (effect.<span class="hljs-property">computed</span>) &#123;<br>      <span class="hljs-title function_">triggerEffect</span>(effect, debuggerEventExtraInfo)<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> effect <span class="hljs-keyword">of</span> effects) &#123;<br>    <span class="hljs-keyword">if</span> (!effect.<span class="hljs-property">computed</span>) &#123;<br>      <span class="hljs-title function_">triggerEffect</span>(effect, debuggerEventExtraInfo)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">triggerEffect</span>(<span class="hljs-params"></span><br><span class="hljs-params">  effect: ReactiveEffect,</span><br><span class="hljs-params">  debuggerEventExtraInfo?: DebuggerEventExtraInfo</span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (effect !== activeEffect || effect.<span class="hljs-property">allowRecurse</span>) &#123;<br>    <span class="hljs-keyword">if</span> (__DEV__ &amp;&amp; effect.<span class="hljs-property">onTrigger</span>) &#123;<br>      effect.<span class="hljs-title function_">onTrigger</span>(<span class="hljs-title function_">extend</span>(&#123; effect &#125;, debuggerEventExtraInfo))<br>    &#125;<br>    <span class="hljs-keyword">if</span> (effect.<span class="hljs-property">scheduler</span>) &#123;<br>      effect.<span class="hljs-title function_">scheduler</span>()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      effect.<span class="hljs-title function_">run</span>()<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// ...</span><br><br>effect.<span class="hljs-title function_">run</span>()<br><br><span class="hljs-comment">// ...</span><br><br><br><span class="hljs-title function_">patch</span>(...)<br></code></pre></td></tr></table></figure><p>完整的流程图<br><img src="/img/images/2024/1704697708445-0fd36914-6c9d-49e7-a210-dc737001b7f4.png"></p><h1 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h1><h2 id="虚拟-DOM"><a href="#虚拟-DOM" class="headerlink" title="虚拟 DOM"></a>虚拟 DOM</h2><p>一种用来描述真实 DOM 的 JS 对象<br>Vue 的组件本质也是可以用虚拟 DOM 来描述的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 普通元素</span><br><span class="hljs-keyword">const</span> vnode = &#123;<br>  <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;div&#x27;</span>,<br>  <span class="hljs-attr">props</span>: &#123;<br>   <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>  &#125;,<br>  <span class="hljs-attr">children</span>: <span class="hljs-string">&#x27;click me&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// Vue 组件</span><br><span class="hljs-comment">// Vue 组件的定义也不是固定的</span><br><span class="hljs-comment">// MyComponent 可以是函数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyComponent</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123; <span class="hljs-comment">// 返回一个虚拟 DOM</span><br>    <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;div&#x27;</span>,<br>    <span class="hljs-attr">props</span>: &#123;<br>     <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">children</span>: <span class="hljs-string">&#x27;click me&#x27;</span><br>  &#125;<br>&#125;<br><span class="hljs-comment">// MyComponent 也可以是对象</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyComponent</span> = &#123;<br> <span class="hljs-title function_">render</span>() () &#123; <span class="hljs-comment">// 定义一个 render 方法</span><br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-comment">// 返回一个虚拟 DOM</span><br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;div&#x27;</span>,<br>      <span class="hljs-attr">props</span>: &#123;<br>       <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>      &#125;,<br>      <span class="hljs-attr">children</span>: <span class="hljs-string">&#x27;click me&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> vnode = &#123;<br>  <span class="hljs-attr">tag</span>: <span class="hljs-title class_">MyComponent</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="渲染函数、渲染器"><a href="#渲染函数、渲染器" class="headerlink" title="渲染函数、渲染器"></a>渲染函数、渲染器</h2><p>渲染函数：用于生成虚拟 DOM 的函数，因为手动写虚拟 DOM 的结构太麻烦了，所以封装成一个函数<br>每个组件有自己的渲染函数，在渲染器里面会用到它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> h = (tag, props) &#123;<br> <span class="hljs-keyword">return</span> &#123;<br>    tag,<br>    props,<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;h1&#x27;</span>, &#123; <span class="hljs-attr">onClick</span>: handler &#125;) <span class="hljs-comment">// 返回一个虚拟 DOM</span><br></code></pre></td></tr></table></figure><p>渲染器：用于将虚拟 DOM 生成为真实 DOM 的函数。仅一个，要渲染的时候调用它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">// vnode：虚拟 DOM 对象。</span><br><span class="hljs-comment">// container：一个真实 DOM 元素，作为挂载点，渲染器会把虚拟 DOM 渲染到该挂载点下</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderer</span>(<span class="hljs-params">vnode, container</span>) &#123;<br>  <span class="hljs-comment">// 使用 vnode.tag 作为标签名称创建 DOM 元素</span><br>  <span class="hljs-keyword">const</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(vnode.<span class="hljs-property">tag</span>);<br>  <span class="hljs-comment">// 遍历 vnode.props，将属性、事件添加到 DOM 元素</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> vnode.<span class="hljs-property">props</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^on/</span>.<span class="hljs-title function_">test</span>(key)) &#123;<br>      <span class="hljs-comment">// 如果 key 以 on 开头，说明它是事件</span><br>      el.<span class="hljs-title function_">addEventListener</span>(<br>        key.<span class="hljs-title function_">substr</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">toLowerCase</span>(), <span class="hljs-comment">// 事件名称 onClick ---&gt; click</span><br>        vnode.<span class="hljs-property">props</span>[key] <span class="hljs-comment">// 事件处理函数</span><br>      );<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 处理 children</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> vnode.<span class="hljs-property">children</span> === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    <span class="hljs-comment">// 如果 children 是字符串，说明它是元素的文本子节点</span><br>    el.<span class="hljs-title function_">appendChild</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(vnode.<span class="hljs-property">children</span>));<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(vnode.<span class="hljs-property">children</span>)) &#123;<br>    <span class="hljs-comment">// 递归地调用 renderer 函数渲染子节点，使用当前元素 el 作为挂载点</span><br>    vnode.<span class="hljs-property">children</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">child</span>) =&gt;</span> <span class="hljs-title function_">renderer</span>(child, el));<br>  &#125;<br>  <span class="hljs-comment">// 将元素添加到挂载点下</span><br>  container.<span class="hljs-title function_">appendChild</span>(el);<br>&#125;<br><br><span class="hljs-title function_">renderer</span>(vnode, <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>); <span class="hljs-comment">// body 作为挂载点</span><br></code></pre></td></tr></table></figure><h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><p>作用：将模板(<code>&lt;template&gt;</code>)编译为渲染函数<br><img src="/img/images/2024/1704694807257-3415ca1c-a026-4333-8852-678e1a000cdc.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// xxx.vue</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handlerClick&quot;</span>&gt;</span></span><br><span class="language-xml">    click me</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">/*...*/</span> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">handlerClick</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">/*...*/</span> &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="hljs-comment">// 经过编译器处理后，为：</span><br><br><span class="hljs-comment">// 编译器会把模板内容(&lt;template&gt;内的)编译成渲染函数并添加到 &lt;script&gt; 标签块的组件对象 render 上</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">/*...*/</span> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">handlerClick</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">/*...*/</span> &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;div&#x27;</span>, &#123; <span class="hljs-attr">onClick</span>: handlerClick &#125;, <span class="hljs-string">&#x27;click me&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>一个完整的编译流程<br><img src="/img/images/2024/1704694776204-39425aeb-8ba8-43a5-a709-c2b5a54e92ff.png"></p><h2 id="编译优化"><a href="#编译优化" class="headerlink" title="编译优化"></a>编译优化</h2><p>为了让渲染器能够快速的找到要更新的点，所以在编译期间做了一些优化：</p><ul><li>PatchFlag 与 Block<ul><li>编译时，可进行打标：动态、静态</li><li>然后再收集这些动态节点，被称为 Block</li><li>后续就可以从 Block 里找节点更新</li></ul></li><li>静态提升<ul><li>将静态的节点创建放到渲染函数之外，这样只需要调用一次静态节点的创建</li></ul></li><li>预字符串化<ul><li>基于[静态提升]，将大量静态节点的创建规律化，最终变成一个静态节点的创建</li></ul></li><li>缓存内联函数(@click&#x3D;”a+b”)</li></ul><h2 id="浅响应、深响应"><a href="#浅响应、深响应" class="headerlink" title="浅响应、深响应"></a>浅响应、深响应</h2><p><code>reactive</code>默认是深响应的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">foo</span>: &#123; <span class="hljs-attr">bar</span>: <span class="hljs-number">1</span> &#125; &#125;)<br><br><span class="hljs-title function_">effect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">foo</span>.<span class="hljs-property">bar</span>)<br>&#125;)<br><span class="hljs-comment">// 修改 obj.foo.bar 的值，能触发响应</span><br>obj.<span class="hljs-property">foo</span>.<span class="hljs-property">bar</span> = <span class="hljs-number">2</span><br><br><span class="hljs-comment">// 实现原理：</span><br><span class="hljs-comment">// 在 new Proxy 的 get 里面处理</span><br><span class="hljs-comment">// shallow: true(浅)/false(深)</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reactive</span>(<span class="hljs-params">_obj, shallow</span>) &#123;<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(_obj, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key, receiver</span>) &#123;<br>      <span class="hljs-title function_">track</span>(target, key)<br><br>      <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, key, receiver)<br>      <span class="hljs-keyword">if</span>(shallow) <span class="hljs-keyword">return</span> res <span class="hljs-comment">// 浅响应</span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> res === <span class="hljs-string">&#x27;object&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-title function_">reactive</span>(res) <span class="hljs-comment">// 深响应</span><br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="浅只读、深只读"><a href="#浅只读、深只读" class="headerlink" title="浅只读、深只读"></a>浅只读、深只读</h2><p>只读的实现也是在 new Proxy 的 get、set 里面处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 实现原理：</span><br><span class="hljs-comment">// 在 new Proxy 的 get 里面处理</span><br><span class="hljs-comment">// shallow: true(浅)/false(深)</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reactive</span>(<span class="hljs-params">_obj, shallow, isReadonly</span>) &#123;<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(_obj, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key, receiver</span>) &#123;<br>      <span class="hljs-keyword">if</span>(!isReadonly) <span class="hljs-title function_">track</span>(target, key)<br><br>      <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, key, receiver)<br>      <span class="hljs-keyword">if</span>(shallow) <span class="hljs-keyword">return</span> res<br>      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> res === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">reactive</span>(res, shallow, isReadonly)<br>      &#125;<br><br>      <span class="hljs-comment">// ...</span><br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key</span>) &#123;<br>      <span class="hljs-keyword">if</span>(isReadonly) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><br>      <span class="hljs-comment">// ...</span><br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代理数组、Set、-Map"><a href="#代理数组、Set、-Map" class="headerlink" title="代理数组、Set、 Map"></a>代理数组、Set、 Map</h2><h3 id="代理数组解决以下响应式的问题"><a href="#代理数组解决以下响应式的问题" class="headerlink" title="代理数组解决以下响应式的问题"></a>代理数组解决以下响应式的问题</h3><ul><li>arr[大于长度] &#x3D; xx 或 arr.length &#x3D; x<ul><li>关键点：在<code>Proxy 的 get</code>函数里面判断数组的长度</li></ul></li><li>for…in<ul><li>关键点：使用<code>Proxy 的 ownKeys</code>函数，判断是否为数组还是对象</li></ul></li><li>for…of<ul><li>关键点：该循环的实现是与数组的长度、索引有关的，读取了数组的 Symbol.iterator 属性</li></ul></li><li>一些查找方法：includes、indexOf、lastIndexOf<ul><li>关键点：重写了这些方法</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arrayInstrumentations = &#123;&#125;<br>[<span class="hljs-string">&#x27;includes&#x27;</span>, <span class="hljs-string">&#x27;indexOf&#x27;</span>, <span class="hljs-string">&#x27;lastIndexOf&#x27;</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">method</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> originMethod = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[method]<br>  arrayInstrumentations[method] = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-comment">// this 是代理对象，先在代理对象中查找，将结果存储到 res 中</span><br>    <span class="hljs-keyword">let</span> res = originMethod.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>    <span class="hljs-keyword">if</span> (res === <span class="hljs-literal">false</span> || res === -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// res 为 false 说明没找到，通过 this.raw 拿到原始数组，再去其中</span><br>      <span class="hljs-comment">// 查找，并更新 res 值</span><br>      res = originMethod.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">raw</span>, args)<br>    &#125;<br>    <span class="hljs-comment">// 返回最终结果</span><br>    <span class="hljs-keyword">return</span> res<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="代理-Set-解决以下响应式的问题"><a href="#代理-Set-解决以下响应式的问题" class="headerlink" title="代理 Set 解决以下响应式的问题"></a>代理 Set 解决以下响应式的问题</h3><p>因为<code>Set</code>的操作方法跟普通对象操作方法不一致，所以会代理处理</p><h2 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h2><h3 id="CSR"><a href="#CSR" class="headerlink" title="CSR"></a>CSR</h3><p>client-side rendering，客户端渲染，在客户端完成[数据获取+HTML]的拼装，最终在客户端渲染<br><img src="/img/images/2024/1704696381129-7d831935-7c2c-4b84-9415-63dec538e062.png"><br>优点：进行页面跳转后，不会刷新，是通过前端路由的方式动态地渲染页面，用户交互体验友好<br>缺点：会产生白屏问题，对 SEO（搜索引擎优化）也不友好</p><h3 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h3><p>server-side rendering，服务端渲染，在服务端完成[数据获取+HTML]的拼装，最终在客户端渲染<br><img src="/img/images/2024/1704696370066-f4ff490f-2698-4d5b-a23f-4460bd600517.png"><br>优点：不会产生白屏问题，对 SEO（搜索引擎优化）友好<br>缺点：进行页面跳转，会重复上述 5 个步骤，用户体验非常差；缺少响应式</p><h3 id="CSR-vs-SSR"><a href="#CSR-vs-SSR" class="headerlink" title="CSR vs SSR"></a>CSR vs SSR</h3><p><img src="/img/images/2024/1704696611859-54502d89-2a64-47b9-aaff-9f850238d566.png"></p><h3 id="同构渲染"><a href="#同构渲染" class="headerlink" title="同构渲染"></a>同构渲染</h3><p>分为首次与非首次渲染。<br>“同构”指：同一套代码即可在服务端运行，也可以在客户端运行。<br>同构渲染中的首次渲染与 SSR 的工作流程是一致的。当首次访问或者刷新页面时，整个页面的内容是在服务端完成渲染的，浏览器最终得到的是渲染好的 HTML 页面。<br>但是该页面是静态的，这意味着用户还不能与页面进行任何交互，因为整个应用程序的脚本还没有加载和执行。另外，该静态的 HTML 页面中也会包含<code>&lt;link&gt;、&lt;script&gt;</code>等标签。<br>同构渲染中的非首次渲染与 CSR 的工作流程是一致的。当浏览器已经接收到初次渲染的静态 HTML 页面，接下来浏览器会解析并渲染该页面。在解析过程中，浏览器会发现 HTML 代码中存在<code>&lt;link&gt;</code>和<code>&lt;script&gt;</code>标签，于是会从 CDN 或服务器获取相应的资源(这一步与 CSR 一致)。当 JavaScript 资源加载完毕后，会进行激活操作。激活完成后，后续操作都会按照 CSR 应用程序的流程来执行。<br><img src="/img/images/2024/1704696987747-032c8eaf-2495-432f-9ed3-ead7594bf105.png"><br>一句话总结：代码会在服务端和客户端分别执行一次。在服务端会被渲染为静态的 HTML 字符串，然后发送给浏览器，浏览器再把这段纯静态的 HTML 渲染出来，并补齐响应式、事件绑定等(这也称为“激活”)</p><h4 id="Vue-中的同构原理"><a href="#Vue-中的同构原理" class="headerlink" title="Vue 中的同构原理"></a>Vue 中的同构原理</h4><p>服务端原理：基于虚拟 DOM 将其转为 HTML 字符串，使用的库为<code>vue-server-renderer</code><br>因为服务端不存在真实 DOM，所以只能转为 HTLM 字符串，客户端获取后可直接进行渲染<br>所以本质就是一个“虚拟 DOM 转 HTML 字符串”的函数，主要功能：字符串的拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 普通元素</span><br><span class="hljs-keyword">const</span> vnode = &#123;<br>  <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;div&#x27;</span>,<br>  <span class="hljs-attr">props</span>: &#123;<br>   <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>  &#125;,<br>  <span class="hljs-attr">children</span>: <span class="hljs-string">&#x27;click me&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// 将虚拟 DOM 转为 HTML 字符串的伪函数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">renderElementVNode</span> = (<span class="hljs-params">vnode</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; tag, props, children &#125; = vnode<br>  <span class="hljs-keyword">let</span> html = <span class="hljs-string">`&lt;<span class="hljs-subst">$&#123;tag&#125;</span>`</span><br>  <span class="hljs-keyword">if</span>(props) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>  html += <span class="hljs-string">&#x27;&gt;&#x27;</span><br><br>  <span class="hljs-keyword">if</span>(children) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> children === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>      <span class="hljs-comment">// ...</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// ...</span><br>    &#125;<br>  &#125;<br><br>  html += <span class="hljs-string">`&lt;<span class="hljs-subst">$&#123;tag&#125;</span>&gt;`</span><br>&#125;<br><br><span class="hljs-title function_">renderElementVNode</span>(vnode) <span class="hljs-comment">// &quot;&lt;div onclick=&quot;alert(&#x27;hello&#x27;)&quot;&gt;click me&lt;/div&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>客户端原理：将虚拟 DOM 与已渲染的真实 DOM 进行关联，补齐响应式&#x2F;事项等(这也称为“激活”)<br>所以本质也是通过一个函数来建立关联</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 服务端到客户端的模拟流程</span><br><br><span class="hljs-comment">// html 代表由服务端返回的 HTML 字符串</span><br><span class="hljs-keyword">const</span> html = <span class="hljs-title function_">renderComponentVNode</span>(compVNode)<br><br><span class="hljs-comment">// 获取挂载点</span><br><span class="hljs-keyword">const</span> container = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br><span class="hljs-comment">// 设置挂载点的 innerHTML = 由服务端返回的内容</span><br>container.<span class="hljs-property">innerHTML</span> = html<br><br><span class="hljs-comment">// 接着调用 hydrate 函数完成激活</span><br>renderer.<span class="hljs-title function_">hydrate</span>(<span class="hljs-title class_">VNode</span>, container)<br><br><span class="hljs-comment">// VNode:代表当前</span><br>renderer.<span class="hljs-property">hydrate</span> = <span class="hljs-function">(<span class="hljs-params">VNode, container</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 从容器元素的第一个子节点开始</span><br> <span class="hljs-title function_">hydrateNode</span>(container.<span class="hljs-property">firstChild</span>, vnode)<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">hydrateNode</span> = (<span class="hljs-params">node, vnode</span>) =&gt; &#123;<br>  <span class="hljs-comment">// node：真实 DOM</span><br>  <span class="hljs-comment">// vnode：虚拟 DOM</span><br><br>  <span class="hljs-keyword">const</span> &#123; type &#125; = vnode<br> <span class="hljs-comment">// 1. 让 vnode.el 引用真实 DOM</span><br> vnode.<span class="hljs-property">el</span> = node<br><br>  <span class="hljs-comment">// 其他细节...</span><br><br>  <span class="hljs-comment">// 5. 重要：hydrateNode 函数需要返回当前节点的下一个兄弟节点，以便继续进行后续的激活操作</span><br> <span class="hljs-keyword">return</span> node.<span class="hljs-property">nextSibling</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="同构导致的编码问题"><a href="#同构导致的编码问题" class="headerlink" title="同构导致的编码问题"></a>同构导致的编码问题</h4><p>部分 API&#x2F;库 使用的时候需要判断环境(服务端&#x2F;客户端)，否则会报错；或者使用双端支持的 API&#x2F;库 （axios）</p><h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="如何获取复杂数据的具体类型？"><a href="#如何获取复杂数据的具体类型？" class="headerlink" title="如何获取复杂数据的具体类型？"></a>如何获取复杂数据的具体类型？</h2><p>比如：</p><ul><li><code>&#123; a: 1 &#125;</code>，期望返回类型为<code>object</code></li><li><code>[&#123; a: 1 &#125;]</code>，期望返回类型为<code>array</code></li><li><code>const a = function () &#123;&#125;</code>，期望返回类型为<code>function</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> objectType = (<span class="hljs-attr">obj</span>: object): <span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> fullTypeString = <span class="hljs-title class_">Object</span>.<span class="hljs-property">prootype</span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(obj) <span class="hljs-comment">// &#x27;[object Array]&#x27;</span><br>  <span class="hljs-keyword">const</span> typeString = fullTypeString.<span class="hljs-title function_">slice</span>(<span class="hljs-number">8</span>, -<span class="hljs-number">1</span>) <span class="hljs-comment">// Array</span><br>  <span class="hljs-keyword">return</span> typeString.<span class="hljs-title function_">toLocaleLowerCase</span>() <span class="hljs-comment">// array</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Map、WeakMap、Set、WeakSet"><a href="#Map、WeakMap、Set、WeakSet" class="headerlink" title="Map、WeakMap、Set、WeakSet"></a>Map、WeakMap、Set、WeakSet</h2><p>Map：类似于<code>object</code>的，采用键值对存储数据，键可以是任意类型的(基础&#x2F;复杂类型都可以)，可以使用<code>forEach</code>遍历，并且按照<code>set</code>顺序返回</p><p>WeakMap：虚弱版的<code>Map</code>，键必须为<strong>复杂类型</strong>，弱引用当复杂类型设为<strong>null</strong>后，WeakMap 里面的值也会自动垃圾回收，变为<strong>undefined</strong>，不支持<code>forEach</code>遍历</p><p>Set：类似于<code>array</code>的，里面的值不允许重复，值是任意类型的(基础&#x2F;复杂类型都可以)，无法通过索引取值，只能<code>forof</code>循环取值</p><p>WeakSet：虚弱版的<code>Set</code>，值必须为复杂类型，弱引用当复杂类型设为<strong>null</strong>后，WeakSet 里面的值也会自动垃圾回收，变为<strong>undefined</strong>，不支持<code>forof</code>遍历</p><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handle);<br><br><span class="hljs-comment">// target: 目标对象</span><br><span class="hljs-comment">// property: 属性名</span><br><span class="hljs-comment">// value: 新值</span><br><span class="hljs-comment">// receiver: 最初接收赋值的对象，通常是 proxy 本身</span><br><br><span class="hljs-keyword">const</span> handle = &#123;<br>  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, property, receiver</span>) &#123;&#125;,<br>  <span class="hljs-title function_">set</span>(<span class="hljs-params">target, property, value, receiver</span>) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="手写一份-Vue3-的响应式"><a href="#手写一份-Vue3-的响应式" class="headerlink" title="手写一份 Vue3 的响应式"></a>手写一份 Vue3 的响应式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">let</span> activeEffect = <span class="hljs-literal">undefined</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">effect</span> = fn =&gt; &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">effectFn</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    activeEffect = effectFn<br>    <span class="hljs-title function_">fn</span>()<br>  &#125;<br><br>  <span class="hljs-title function_">effectFn</span>()<br>&#125;<br><br><span class="hljs-keyword">const</span> targetMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>()<br><br><span class="hljs-comment">// 依赖收集</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">track</span> = (<span class="hljs-params">target, key, receiver</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target)<br><br>  <span class="hljs-keyword">if</span>(!depsMap) &#123;<br>    depsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>    targetMap.<span class="hljs-title function_">set</span>(target, depsMap)<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> depMap = depsMap.<span class="hljs-title function_">get</span>(key)<br><br>  <span class="hljs-keyword">if</span>(!deps) deps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br><br>  deps.<span class="hljs-title function_">add</span>(activeEffect)<br><br>  depsMap.<span class="hljs-title function_">set</span>(key, deps)<br>&#125;<br><br><span class="hljs-comment">// 依赖触发</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">trigger</span> = (<span class="hljs-params">target, key, receiver</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target)<br><br>  <span class="hljs-keyword">if</span>(!depsMap) <span class="hljs-keyword">return</span><br><br>  <span class="hljs-keyword">let</span> depMap = depsMap.<span class="hljs-title function_">get</span>(key)<br><br> <span class="hljs-keyword">if</span>(!depMap) <span class="hljs-keyword">return</span><br><br> depMap.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> <span class="hljs-title function_">fn</span>())<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reactive</span> = _obj =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(_obj, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key, receiver</span>) &#123;<br>      <span class="hljs-title function_">track</span>(target, key, receiver)<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, key, receiver)<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, newValue, receiver</span>) &#123;<br>      <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, key, newValue,receiver)<br>      <span class="hljs-title function_">trigger</span>(target, key, receiver)<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><p><a href="https://www.yuque.com/attachments/yuque/0/2024/pdf/164458/1704377655222-ac30e626-89df-4b3c-bf9d-95413c6cc947.pdf?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2024/pdf/164458/1704377655222-ac30e626-89df-4b3c-bf9d-95413c6cc947.pdf%22,%22name%22:%22Vue.js%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.pdf%22,%22size%22:20405656,%22ext%22:%22pdf%22,%22source%22:%22%22,%22status%22:%22done%22,%22download%22:true,%22taskId%22:%22u2dfb5b14-267d-488a-b5d2-e14e0af3cca%22,%22taskType%22:%22upload%22,%22type%22:%22application/pdf%22,%22__spacing%22:%22both%22,%22mode%22:%22title%22,%22id%22:%22u4d6ddb03%22,%22margin%22:%7B%22top%22:true,%22bottom%22:true%7D,%22card%22:%22file%22%7D">Vue.js 设计与实现.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-4、Vue2-核心源码讲解</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/3-4%E3%80%81Vue2%20%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/3-4%E3%80%81Vue2%20%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>Vue2 源码仓库：<a href="https://github.com/vuejs/vue">https://github.com/vuejs/vue</a></p><blockquote><p>为什么还要看 vue2 的源码：<br>因为 vue3 结构比较最新的，并且细节很多，不利于了解核心的东西</p></blockquote><h1 id="源码入口"><a href="#源码入口" class="headerlink" title="源码入口"></a>源码入口</h1><p>查找顺序：</p><ol><li><a href="https://github.com/vuejs/vue/blob/main/package.json">https://github.com/vuejs/vue/blob/main/package.json</a><ol><li>可以看到<code>dev:*</code>的命令都是<code>Rollup</code>打包逻辑，我们重点跟踪<code>dev</code>命令</li></ol></li><li><a href="https://github.com/vuejs/vue/blob/main/scripts/config.js">https://github.com/vuejs/vue/blob/main/scripts/config.js</a><ol><li>该文件主要是处理、生成<code>rollup</code>打包的配置项，<code>dev</code>命令对应的配置为<code>full-dev</code></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;full-dev&#x27;</span>: &#123;<br>  <span class="hljs-comment">// 入口配置</span><br>  <span class="hljs-attr">entry</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;web/entry-runtime-with-compiler.ts&#x27;</span>),<br>  <span class="hljs-attr">dest</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;dist/vue.js&#x27;</span>),<br>  <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;umd&#x27;</span>,<br>  <span class="hljs-attr">env</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>  <span class="hljs-attr">alias</span>: &#123; <span class="hljs-attr">he</span>: <span class="hljs-string">&#x27;./entity-decoder&#x27;</span> &#125;,<br>  banner<br>&#125;,<br></code></pre></td></tr></table></figure><ol start="3"><li><a href="https://github.com/vuejs/vue/blob/main/src/platforms/web/entry-runtime-with-compiler.ts">https://github.com/vuejs/vue/blob/main/src/platforms/web/entry-runtime-with-compiler.ts</a><ol><li>该文件完整代码如下：</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./runtime-with-compiler&#x27;</span> <span class="hljs-comment">// 关键代码</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> vca <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;v3&#x27;</span><br><span class="hljs-keyword">import</span> &#123; extend &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;shared/util&#x27;</span><br><br><span class="hljs-title function_">extend</span>(<span class="hljs-title class_">Vue</span>, vca)<br><br><span class="hljs-keyword">import</span> &#123; effect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;v3/reactivity/effect&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">effect</span> = effect<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Vue</span><br></code></pre></td></tr></table></figure><ol start="4"><li><a href="https://github.com/vuejs/vue/blob/main/src/platforms/web/runtime-with-compiler.ts">https://github.com/vuejs/vue/blob/main/src/platforms/web/runtime-with-compiler.ts</a><ol><li>该文件里面主要定义<code>$mount</code>，关键代码如下：</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./runtime/index&#x27;</span><br><br><span class="hljs-comment">// .....</span><br><br><span class="hljs-keyword">const</span> mount = <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$mount</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$mount</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">/* ... */</span>&#125;<br><br><span class="hljs-comment">// .....</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">GlobalAPI</span><br></code></pre></td></tr></table></figure><ol start="5"><li><a href="https://github.com/vuejs/vue/blob/main/src/platforms/web/runtime/index.ts">https://github.com/vuejs/vue/blob/main/src/platforms/web/runtime/index.ts</a><ol><li>该文件也是一些<code>Vue</code>的配置，关键代码如下：</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;core/index&#x27;</span><br><br><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Vue</span><br></code></pre></td></tr></table></figure><ol start="6"><li><a href="https://github.com/vuejs/vue/blob/main/src/core/index.ts">https://github.com/vuejs/vue/blob/main/src/core/index.ts</a><ol><li>该文件是<code>Vue.prototype</code>的配置，关键代码如下：</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./instance/index&#x27;</span><br><br><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Vue</span><br></code></pre></td></tr></table></figure><ol start="7"><li><a href="https://github.com/vuejs/vue/blob/main/src/core/instance/index.ts">https://github.com/vuejs/vue/blob/main/src/core/instance/index.ts</a><ol><li>该文件为<code>new Vue</code>时调用的</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 完整代码</span><br><span class="hljs-keyword">import</span> &#123; initMixin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./init&#x27;</span><br><span class="hljs-keyword">import</span> &#123; stateMixin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./state&#x27;</span><br><span class="hljs-keyword">import</span> &#123; renderMixin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./render&#x27;</span><br><span class="hljs-keyword">import</span> &#123; eventsMixin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./events&#x27;</span><br><span class="hljs-keyword">import</span> &#123; lifecycleMixin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./lifecycle&#x27;</span><br><span class="hljs-keyword">import</span> &#123; warn &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../util/index&#x27;</span><br><span class="hljs-keyword">import</span> type &#123; <span class="hljs-title class_">GlobalAPI</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;types/global-api&#x27;</span><br><br><span class="hljs-comment">// 构造函数 Vue，这也是为什么我们在使用时用的为：new Vue(...)</span><br><span class="hljs-comment">// 因为 Vue 本质就是个构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Vue</span>(<span class="hljs-params">options</span>) &#123;<br>  <span class="hljs-keyword">if</span> (__DEV__ &amp;&amp; !(<span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Vue</span>)) &#123;<br>    <span class="hljs-title function_">warn</span>(<span class="hljs-string">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>)<br>  &#125;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_init</span>(options) <span class="hljs-comment">// ⭐️ 初始化的核心代码，执行 _init 方法，传参为：配置项</span><br>&#125;<br><br><span class="hljs-comment">//@ts-expect-error Vue has function type</span><br><span class="hljs-title function_">initMixin</span>(<span class="hljs-title class_">Vue</span>) <span class="hljs-comment">// ⭐️ 调用 initMixin 函数，将 _init 方法挂载到 Vue.prototype 上</span><br><span class="hljs-comment">//@ts-expect-error Vue has function type</span><br><span class="hljs-title function_">stateMixin</span>(<span class="hljs-title class_">Vue</span>)<br><span class="hljs-comment">//@ts-expect-error Vue has function type</span><br><span class="hljs-title function_">eventsMixin</span>(<span class="hljs-title class_">Vue</span>)<br><span class="hljs-comment">//@ts-expect-error Vue has function type</span><br><span class="hljs-title function_">lifecycleMixin</span>(<span class="hljs-title class_">Vue</span>)<br><span class="hljs-comment">//@ts-expect-error Vue has function type</span><br><span class="hljs-title function_">renderMixin</span>(<span class="hljs-title class_">Vue</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">as</span> unknown <span class="hljs-keyword">as</span> <span class="hljs-title class_">GlobalAPI</span><br></code></pre></td></tr></table></figure><ol start="8"><li><a href="https://github.com/vuejs/vue/blob/main/src/core/instance/init.ts">https://github.com/vuejs/vue/blob/main/src/core/instance/init.ts</a><ol><li>该文件为<code>new Vue</code>时执行的<code>_init</code>方法的定义(真正的入口)：</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ...</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">options?: Record&lt;string, any&gt;</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>我们在使用 Vue 时，是这样初始化的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">addCount</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>现在我们开始学习源码后，那要关注下<code>new Vue</code>到底做了什么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Vue</span>(<span class="hljs-params">options</span>) &#123;<br>  <span class="hljs-keyword">if</span> (__DEV__ &amp;&amp; !(<span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Vue</span>)) &#123;<br>    <span class="hljs-title function_">warn</span>(<span class="hljs-string">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>)<br>  &#125;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_init</span>(options) <span class="hljs-comment">// 执行 _init 方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="init-代码解析"><a href="#init-代码解析" class="headerlink" title="_init 代码解析"></a>_init 代码解析</h2><p>完整源码：<a href="https://github.com/vuejs/vue/blob/main/src/core/instance/init.ts">https://github.com/vuejs/vue/blob/main/src/core/instance/init.ts</a><br>核心源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ...</span><br><br><span class="hljs-comment">// 在 Vue 原型上定义一个 _init 方法，用于初始化实例。</span><br><span class="hljs-comment">// 这个方法接收一个可选参数 options，类型为记录（Record）类型，键为字符串，值为任意类型</span><br><span class="hljs-comment">// 通常用来传入组件的选项对象。</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">options?: Record&lt;string, any&gt;</span>) &#123;<br>  <span class="hljs-comment">// 定义一个常量 vm，类型为 Component，指向当前正在创建的 Vue 实例。</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">vm</span>: <span class="hljs-title class_">Component</span> = <span class="hljs-variable language_">this</span><br>  <span class="hljs-comment">// 给每个 Vue 实例设置一个唯一的 _uid 标识符，用以区分不同的实例。</span><br>  vm.<span class="hljs-property">_uid</span> = uid++<br><br>  <span class="hljs-keyword">let</span> startTag, endTag<br>  <span class="hljs-comment">/* istanbul ignore if */</span><br>  <span class="hljs-keyword">if</span> (__DEV__ &amp;&amp; config.<span class="hljs-property">performance</span> &amp;&amp; mark) &#123;<br>    <span class="hljs-comment">// 如果处于开发环境 (__DEV__) 并且支持性能标记(config.performance &amp;&amp; mark)</span><br>    <span class="hljs-comment">// 则进行 Vue 初始化性能检测的相关操作。</span><br>    startTag = <span class="hljs-string">`vue-perf-start:<span class="hljs-subst">$&#123;vm._uid&#125;</span>`</span><br>    endTag = <span class="hljs-string">`vue-perf-end:<span class="hljs-subst">$&#123;vm._uid&#125;</span>`</span><br>    <span class="hljs-title function_">mark</span>(startTag)<br>  &#125;<br><br>  <span class="hljs-comment">// 设置 _isVue 属性为 true，表明这是一个 Vue 实例。</span><br>  vm.<span class="hljs-property">_isVue</span> = <span class="hljs-literal">true</span><br>  <span class="hljs-comment">// 避免 Vue 监听器观察到此实例。</span><br>  vm.<span class="hljs-property">__v_skip</span> = <span class="hljs-literal">true</span><br>  <span class="hljs-comment">// 创建一个新的副作用作用域（EffectScope），用于追踪和执行副作用函数，如计算属性、watcher 等。</span><br>  <span class="hljs-comment">// 这里指定为独立作用域，即不受父作用域的影响。</span><br>  vm.<span class="hljs-property">_scope</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EffectScope</span>(<span class="hljs-literal">true</span> <span class="hljs-comment">/* detached */</span>)<br>  <span class="hljs-comment">// 设置 Vue 实例的副作用作用域的父级为 undefined</span><br>  vm.<span class="hljs-property">_scope</span>.<span class="hljs-property">parent</span> = <span class="hljs-literal">undefined</span><br>  <span class="hljs-comment">// 以及标识其与 Vue 实例关联。</span><br>  vm.<span class="hljs-property">_scope</span>.<span class="hljs-property">_vm</span> = <span class="hljs-literal">true</span><br><br>  <span class="hljs-keyword">if</span> (options &amp;&amp; options.<span class="hljs-property">_isComponent</span>) &#123;<br>    <span class="hljs-comment">// 如果是内部组件，则调用 initInternalComponent 进行优化</span><br>    <span class="hljs-title function_">initInternalComponent</span>(vm, options <span class="hljs-keyword">as</span> any)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// ⭐️ 否则通过 mergeOptions 合并构造函数的默认选项和用户传入的选项</span><br>    <span class="hljs-comment">// 并将结果赋值给 $options。</span><br>    vm.<span class="hljs-property">$options</span> = <span class="hljs-title function_">mergeOptions</span>(<br>      <span class="hljs-title function_">resolveConstructorOptions</span>(vm.<span class="hljs-property">constructor</span> <span class="hljs-keyword">as</span> any),<br>      options || &#123;&#125;,<br>      vm<br>    )<br>  &#125;<br>  <span class="hljs-comment">/* istanbul ignore else */</span><br>  <span class="hljs-keyword">if</span> (__DEV__) &#123;<br>    <span class="hljs-comment">// 如果在开发环境下，调用 initProxy 函数来设置代理访问实例数据的逻辑</span><br>    <span class="hljs-title function_">initProxy</span>(vm)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 非开发环境下，直接设置 _renderProxy 指向自身。</span><br>    vm.<span class="hljs-property">_renderProxy</span> = vm<br>  &#125;<br>  <span class="hljs-comment">// 将实例自身暴露给实例自身的 _self 属性。</span><br>  vm.<span class="hljs-property">_self</span> = vm<br>  <span class="hljs-comment">// 调用内部方法初始化 生命周期</span><br>  <span class="hljs-title function_">initLifecycle</span>(vm)<br>  <span class="hljs-comment">// 调用内部方法初始化 事件系统</span><br>  <span class="hljs-title function_">initEvents</span>(vm)<br>  <span class="hljs-comment">// 调用内部方法初始化 渲染相关</span><br>  <span class="hljs-title function_">initRender</span>(vm)<br>  <span class="hljs-comment">// ⭐️ 调用钩子函数 beforeCreate</span><br>  <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&#x27;beforeCreate&#x27;</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-literal">false</span> <span class="hljs-comment">/* setContext */</span>)<br>  <span class="hljs-comment">// 在解析[数据/props]之前解析依赖项（injections）。</span><br>  <span class="hljs-title function_">initInjections</span>(vm)<br>  <span class="hljs-comment">// ⭐️ 初始化实例的状态：包括 data、props、methods、computed、watch</span><br>  <span class="hljs-title function_">initState</span>(vm)<br>  <span class="hljs-comment">// 在解析[数据/props]之后解析提供项（provide）。</span><br>  <span class="hljs-title function_">initProvide</span>(vm)<br>  <span class="hljs-comment">// ⭐️ 调用钩子函数 created</span><br>  <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&#x27;created&#x27;</span>)<br><br>  <span class="hljs-comment">/* istanbul ignore if */</span><br>  <span class="hljs-keyword">if</span> (__DEV__ &amp;&amp; config.<span class="hljs-property">performance</span> &amp;&amp; mark) &#123;<br>    <span class="hljs-comment">// 开发环境下完成性能标记，记录 Vue 初始化过程的时间消耗，并给实例设置名称。</span><br>    vm.<span class="hljs-property">_name</span> = <span class="hljs-title function_">formatComponentName</span>(vm, <span class="hljs-literal">false</span>)<br>    <span class="hljs-title function_">mark</span>(endTag)<br>    <span class="hljs-title function_">measure</span>(<span class="hljs-string">`vue <span class="hljs-subst">$&#123;vm._name&#125;</span> init`</span>, startTag, endTag)<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (vm.<span class="hljs-property">$options</span>.<span class="hljs-property">el</span>) &#123;<br>    <span class="hljs-comment">// ⭐️ 如果实例的选项中包含 el（元素挂载点），则调用 $mount 方法挂载 Vue 实例到指定 DOM 元素。</span><br>    vm.$mount(vm.<span class="hljs-property">$options</span>.<span class="hljs-property">el</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><h3 id="mergeOptions-方法"><a href="#mergeOptions-方法" class="headerlink" title="mergeOptions 方法"></a>mergeOptions 方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mergeOptions</span>(<span class="hljs-params"> <span class="hljs-comment">// 合并[构造函数上的 options]与[实例的 options]</span></span><br><span class="hljs-params">  parent: Record&lt;string, any&gt;, <span class="hljs-comment">// Vue实例构造函数上的 options</span></span><br><span class="hljs-params">  child: Record&lt;string, any&gt;, <span class="hljs-comment">// new Vue(...) 传入的 options</span></span><br><span class="hljs-params">  vm?: Component | <span class="hljs-literal">null</span> <span class="hljs-comment">// 实例本身</span></span><br><span class="hljs-params"></span>): <span class="hljs-title class_">ComponentOptions</span> &#123;<br>  <span class="hljs-comment">// parent = &#123;</span><br>  <span class="hljs-comment">//   components:&#123;&#125;,</span><br>  <span class="hljs-comment">//   directives: &#123;&#125;,</span><br>  <span class="hljs-comment">//   filters: &#123;&#125;,</span><br>  <span class="hljs-comment">//   _base: Vue</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-comment">// child = &#123; el: &#x27;#app&#x27;, data: &#123; count: 1 &#125; &#125;</span><br>  <span class="hljs-keyword">if</span> (__DEV__) &#123;<br>    <span class="hljs-title function_">checkComponents</span>(child) <span class="hljs-comment">// 检测组件名称是否合法</span><br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isFunction</span>(child)) &#123;<br>    <span class="hljs-comment">// @ts-expect-error</span><br>    child = child.<span class="hljs-property">options</span> <span class="hljs-comment">// 如果 child 是函数，则取 child.options 作为 child</span><br>  &#125;<br><br>  <span class="hljs-comment">// 把 props 属性转为对象形式(标准结构)</span><br>  <span class="hljs-comment">// props: [&quot;count&quot;, &quot;a-name&quot;] =&gt; props: &#123; count: &#123; type: null &#125;, aName: &#123; type: null &#125; &#125;</span><br>  <span class="hljs-comment">// props: &#123; count: &quot;number&quot; &#125; =&gt; props: &#123; count: &#123; type: &quot;number&quot; &#125; &#125;</span><br>  <span class="hljs-title function_">normalizeProps</span>(child, vm)<br><br>  <span class="hljs-comment">// 把 inject 属性转为对象形式(标准结构)</span><br>  <span class="hljs-title function_">normalizeInject</span>(child, vm)<br><br>  <span class="hljs-comment">// 把 directives 属性转为对象形式(标准结构)</span><br>  <span class="hljs-title function_">normalizeDirectives</span>(child)<br><br>  <span class="hljs-comment">// Apply extends and mixins on the child options,</span><br>  <span class="hljs-comment">// but only if it is a raw options object that isn&#x27;t</span><br>  <span class="hljs-comment">// the result of another mergeOptions call.</span><br>  <span class="hljs-comment">// Only merged options has the _base property.</span><br>  <span class="hljs-keyword">if</span> (!child.<span class="hljs-property">_base</span>) &#123;<br>    <span class="hljs-keyword">if</span> (child.<span class="hljs-property">extends</span>) &#123;<br>      <span class="hljs-comment">// 当存在 child.extends 属性时，则调用 mergeOptions 实现合并</span><br>      parent = <span class="hljs-title function_">mergeOptions</span>(parent, child.<span class="hljs-property">extends</span>, vm)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (child.<span class="hljs-property">mixins</span>) &#123;<br>      <span class="hljs-comment">// 当存在 child.mixins 属性时，则循环调用 mergeOptions 实现合并</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, l = child.<span class="hljs-property">mixins</span>.<span class="hljs-property">length</span>; i &lt; l; i++) &#123;<br>        parent = <span class="hljs-title function_">mergeOptions</span>(parent, child.<span class="hljs-property">mixins</span>[i], vm)<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">options</span>: <span class="hljs-title class_">ComponentOptions</span> = &#123;&#125; <span class="hljs-keyword">as</span> any<br>  <span class="hljs-keyword">let</span> key<br>  <span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> parent) &#123;<br>    <span class="hljs-title function_">mergeField</span>(key)<br>  &#125;<br>  <span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> child) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">hasOwn</span>(parent, key)) &#123;<br>      <span class="hljs-title function_">mergeField</span>(key)<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">mergeField</span>(<span class="hljs-params">key: any</span>) &#123;<br>    <span class="hljs-comment">// const defaultStrat = function (parentVal: any, childVal: any): any &#123;</span><br>    <span class="hljs-comment">//   return childVal === undefined ? parentVal : childVal</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// defaultStrat 逻辑为：优先取 child 的值，没有再取 parent 的值</span><br><br>    <span class="hljs-comment">// const strats = config.optionMergeStrategies</span><br>    <span class="hljs-keyword">const</span> strat = strats[key] || defaultStrat<br>    options[key] = <span class="hljs-title function_">strat</span>(parent[key], child[key], vm, key)<br>  &#125;<br>  <span class="hljs-keyword">return</span> options<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1704204031353-2dec07d5-7b8c-4031-8e95-56698d627506.png"></p><h2 id="init-的核心逻辑"><a href="#init-的核心逻辑" class="headerlink" title="_init 的核心逻辑"></a>_init 的核心逻辑</h2><ol><li>传入的配置项与默认配置项合并</li><li>初始化该实例的生命周期、事件系统、渲染逻辑</li><li>调用该实例的<code>beforeCreated</code>钩子</li><li>初始化该实例的状态：data、props 等</li><li>调用该实例的<code>created</code>钩子</li><li><code>el</code>存在则执行该实例的挂载<code>$mount</code>逻辑</li></ol><h1 id="数据观测"><a href="#数据观测" class="headerlink" title="数据观测"></a>数据观测</h1><p>vue 是数据驱动的，数据改变则视图也跟着变化。核心方式是<code>Object.defineProperty()</code>实现数据的劫持<br>vue 的数据观测核心机制是<strong>观察者模式</strong><br>数据是<strong>被观察</strong>的一方，当数据发生变化时通知所有<strong>观察者</strong>，这样观察者就能做出响应(比如:重新渲染视图)<br>我们将<strong>观察者</strong>称为<code>watcher</code>，关系为<code>data -&gt; watcher</code><br>一个数据可以有多个<strong>观察者</strong>，通过中间对象<code>dep</code>来记录这种依赖关系<code>data -&gt; dep -&gt; watcher</code><br>dep 的数据结构为<code>&#123; id: uuid, subs: []&#125;</code>，其中的<code>subs</code>用于存放所有观察者<br>源码分析：<br>代码为 <a href="https://github.com/vuejs/vue/blob/main/src/core/instance/init.ts">init.ts</a> 里面的<code>initState</code>方法里面的<code>initData</code>方法<br>核心代码的展示与组合：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// initData 方法：</span><br><span class="hljs-comment">// vm：当前实例</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">initData</span>(<span class="hljs-params">vm: Component</span>) &#123;<br>  <span class="hljs-comment">// 获取实例上的 data 值</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">data</span>: any = vm.<span class="hljs-property">$options</span>.<span class="hljs-property">data</span><br>  <span class="hljs-comment">// 当 data 为函数时，则执行它并获取它的返回值，否则直接用 data</span><br>  data = vm.<span class="hljs-property">_data</span> = <span class="hljs-title function_">isFunction</span>(data) ? <span class="hljs-title function_">getData</span>(data, vm) : data || &#123;&#125;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isPlainObject</span>(data)) &#123;<br>    <span class="hljs-comment">// 当 data 不是对象时，报警告</span><br>    data = &#123;&#125;<br>    __DEV__ &amp;&amp;<br>      <span class="hljs-title function_">warn</span>(<br>        <span class="hljs-string">&#x27;data functions should return an object:\n&#x27;</span> +<br>          <span class="hljs-string">&#x27;https://v2.vuejs.org/v2/guide/components.html#data-Must-Be-a-Function&#x27;</span>,<br>        vm<br>      )<br>  &#125;<br>  <span class="hljs-comment">// proxy data on instance</span><br>  <span class="hljs-keyword">const</span> keys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(data) <span class="hljs-comment">// 获取 data 对象的 key 数组</span><br>  <span class="hljs-keyword">const</span> props = vm.<span class="hljs-property">$options</span>.<span class="hljs-property">props</span> <span class="hljs-comment">// 获取实例的 props 值</span><br>  <span class="hljs-keyword">const</span> methods = vm.<span class="hljs-property">$options</span>.<span class="hljs-property">methods</span> <span class="hljs-comment">// 获取实例的 methods 值</span><br>  <span class="hljs-keyword">let</span> i = keys.<span class="hljs-property">length</span> <span class="hljs-comment">// data 的 key 数组长度</span><br>  <span class="hljs-keyword">while</span> (i--) &#123; <span class="hljs-comment">// 递减循环，即从数组的后往前循环</span><br>    <span class="hljs-keyword">const</span> key = keys[i] <span class="hljs-comment">// 获取具体的 key</span><br>    <span class="hljs-keyword">if</span> (__DEV__) &#123;<br>      <span class="hljs-keyword">if</span> (methods &amp;&amp; <span class="hljs-title function_">hasOwn</span>(methods, key)) &#123;<br>        <span class="hljs-comment">// data 的 key 与 methods 的 key重复时，报警告</span><br>        <span class="hljs-title function_">warn</span>(<span class="hljs-string">`Method &quot;<span class="hljs-subst">$&#123;key&#125;</span>&quot; has already been defined as a data property.`</span>, vm)<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (props &amp;&amp; <span class="hljs-title function_">hasOwn</span>(props, key)) &#123;<br>      <span class="hljs-comment">// data 的 key 与 props 的 key重复时，报警告</span><br>      __DEV__ &amp;&amp;<br>        <span class="hljs-title function_">warn</span>(<br>          <span class="hljs-string">`The data property &quot;<span class="hljs-subst">$&#123;key&#125;</span>&quot; is already declared as a prop. `</span> +<br>            <span class="hljs-string">`Use prop default value instead.`</span>,<br>          vm<br>        )<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isReserved</span>(key)) &#123;<br>      <span class="hljs-comment">/**</span><br><span class="hljs-comment">      //  * Check if a string starts with $ or _</span><br><span class="hljs-comment">      //  */</span><br>      <span class="hljs-comment">// export function isReserved(str: string): boolean &#123;</span><br>      <span class="hljs-comment">//   const c = (str + &#x27;&#x27;).charCodeAt(0)</span><br>      <span class="hljs-comment">//   return c === 0x24 || c === 0x5f</span><br>      <span class="hljs-comment">// &#125;</span><br>      <span class="hljs-comment">// ⭐️ 调用 proxy 函数，传参为：</span><br>      <span class="hljs-comment">//  vm-实例</span><br>      <span class="hljs-comment">//  &#x27;_data&#x27;-固定属性键，等同于 data = vm._data</span><br>      <span class="hljs-comment">//  key-当前 data 的属性键</span><br>      <span class="hljs-comment">// 将 this._data.xx 代理为 this.xx</span><br>      <span class="hljs-title function_">proxy</span>(vm, <span class="hljs-string">`_data`</span>, key)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// ⭐️ 进行 data 数据的观察逻辑，响应式的核心代码</span><br>  <span class="hljs-keyword">const</span> ob = <span class="hljs-title function_">observe</span>(data)<br>  ob &amp;&amp; ob.<span class="hljs-property">vmCount</span>++<br>&#125;<br><br><span class="hljs-comment">// target：vm 实例</span><br><span class="hljs-comment">// sourceKey：固定值 _data</span><br><span class="hljs-comment">// key：当前 data 的属性键</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">proxy</span>(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, sourceKey: string, key: string</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">noop</span>(<span class="hljs-params">a?: any, b?: any, c?: any</span>) &#123;&#125;<br><br>  <span class="hljs-keyword">const</span> sharedPropertyDefinition = &#123;<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否可枚举</span><br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否可更改与删除</span><br>    <span class="hljs-attr">get</span>: noop,<br>    <span class="hljs-attr">set</span>: noop<br>  &#125;<br><br>  <span class="hljs-comment">// 定义具体的 get 函数</span><br>  sharedPropertyDefinition.<span class="hljs-property">get</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">proxyGetter</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// this 等价于 target</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>[sourceKey][key] <span class="hljs-comment">// 等价于 target._data[key]</span><br>  &#125;<br>  <span class="hljs-comment">// 定义具体的 set 函数</span><br>  sharedPropertyDefinition.<span class="hljs-property">set</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">proxySetter</span>(<span class="hljs-params">val</span>) &#123;<br>    <span class="hljs-comment">// this 等价于 target</span><br>    <span class="hljs-variable language_">this</span>[sourceKey][key] = val <span class="hljs-comment">// 等价于 target._data[key] = val</span><br>  &#125;<br>  <span class="hljs-comment">// 属性劫持</span><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(target, key, sharedPropertyDefinition)<br>&#125;<br><br><span class="hljs-comment">// ⭐️ observe 函数：响应式的核心代码</span><br><span class="hljs-comment">// value：为实例的 data</span><br><span class="hljs-comment">// shallow：undefined</span><br><span class="hljs-comment">// ssrMockReactivity：undefined</span><br><span class="hljs-comment">// 返回值为：new Observe(...) 后的实例</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">observe</span>(<span class="hljs-params"></span><br><span class="hljs-params">  value: any,</span><br><span class="hljs-params">  shallow?: boolean,</span><br><span class="hljs-params">  ssrMockReactivity?: boolean</span><br><span class="hljs-params"></span>): <span class="hljs-title class_">Observer</span> | <span class="hljs-keyword">void</span> &#123;<br>  <span class="hljs-comment">// 当已经被观察后，则直接返回</span><br>  <span class="hljs-keyword">if</span> (value &amp;&amp; <span class="hljs-title function_">hasOwn</span>(value, <span class="hljs-string">&#x27;__ob__&#x27;</span>) &amp;&amp; value.<span class="hljs-property">__ob__</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Observer</span>) &#123;<br>    <span class="hljs-keyword">return</span> value.<span class="hljs-property">__ob__</span><br>  &#125;<br><br>  <span class="hljs-comment">// 一系列的判断，可以忽略，直接看里面执行的逻辑</span><br>  <span class="hljs-keyword">if</span> (<br>    shouldObserve &amp;&amp;<br>    (ssrMockReactivity || !<span class="hljs-title function_">isServerRendering</span>()) &amp;&amp;<br>    (<span class="hljs-title function_">isArray</span>(value) || <span class="hljs-title function_">isPlainObject</span>(value)) &amp;&amp;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isExtensible</span>(value) &amp;&amp;<br>    !value.<span class="hljs-property">__v_skip</span> <span class="hljs-comment">/* ReactiveFlags.SKIP */</span> &amp;&amp;<br>    !<span class="hljs-title function_">isRef</span>(value) &amp;&amp;<br>    !(value <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">VNode</span>)<br>  ) &#123;<br>    <span class="hljs-comment">// ⭐️ new 调用 Observer 构造函数，参数为：</span><br>    <span class="hljs-comment">// value：为实例的 data</span><br>    <span class="hljs-comment">// shallow：undefined</span><br>    <span class="hljs-comment">// ssrMockReactivity：undefined</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(value, shallow, ssrMockReactivity)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>  <span class="hljs-attr">dep</span>: <span class="hljs-title class_">Dep</span><br>  <span class="hljs-attr">vmCount</span>: number <span class="hljs-comment">// number of vms that have this object as root $data</span><br><br>  <span class="hljs-comment">// value：为实例的 data</span><br>  <span class="hljs-comment">// shallow：false</span><br> <span class="hljs-comment">// mock：false</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">public value: any, public shallow = <span class="hljs-literal">false</span>, public mock = <span class="hljs-literal">false</span></span>) &#123;<br>    <span class="hljs-comment">// dep = &#123; id: uuid, subs: [] &#125;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dep</span> = mock ? mockDep : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dep</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">vmCount</span> = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Define a property.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">def</span>(<span class="hljs-params">obj: <span class="hljs-built_in">Object</span>, key: string, val: any, enumerable?: boolean</span>) &#123;<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, key, &#123;<br>        <span class="hljs-attr">value</span>: val,<br>        <span class="hljs-attr">enumerable</span>: !!enumerable,<br>        <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span><br>      &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">// 在实例的 data 里面新增 __ob__ 属性，其值为 Observer 实例</span><br>    <span class="hljs-comment">// 暂存一份数据</span><br>    <span class="hljs-title function_">def</span>(value, <span class="hljs-string">&#x27;__ob__&#x27;</span>, <span class="hljs-variable language_">this</span>)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isArray</span>(value)) &#123;<br>      <span class="hljs-comment">// 当实例的 data 为数组时</span><br>      <span class="hljs-keyword">if</span> (!mock) &#123;<br>        <span class="hljs-keyword">if</span> (hasProto) &#123;<br>          <span class="hljs-comment">/* eslint-disable no-proto */</span><br>          ;(value <span class="hljs-keyword">as</span> any).<span class="hljs-property">__proto__</span> = arrayMethods<br>          <span class="hljs-comment">/* eslint-enable no-proto */</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, l = arrayKeys.<span class="hljs-property">length</span>; i &lt; l; i++) &#123;<br>            <span class="hljs-keyword">const</span> key = arrayKeys[i]<br>            <span class="hljs-title function_">def</span>(value, key, arrayMethods[key])<br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (!shallow) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">observeArray</span>(value)<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">/**</span><br><span class="hljs-comment">       * Walk through all properties and convert them into</span><br><span class="hljs-comment">       * getter/setters. This method should only be called when</span><br><span class="hljs-comment">       * value type is Object.</span><br><span class="hljs-comment">       */</span><br>      <span class="hljs-keyword">const</span> keys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(value)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; keys.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">const</span> key = keys[i]<br>        <span class="hljs-comment">// ⭐️ 调用 defineReactive，传参为：</span><br>        <span class="hljs-comment">//  value：实例的 data</span><br>        <span class="hljs-comment">//  key：实例的 data 的每个 key</span><br>        <span class="hljs-comment">//  NO_INITIAL_VALUE = &#123;&#125;</span><br>        <span class="hljs-comment">//  undefined</span><br>        <span class="hljs-comment">//  shallow：false</span><br>       <span class="hljs-comment">//  mock：false</span><br>        <span class="hljs-title function_">defineReactive</span>(value, key, <span class="hljs-variable constant_">NO_INITIAL_VALUE</span>, <span class="hljs-literal">undefined</span>, shallow, mock)<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Observe a list of Array items.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">observeArray</span>(<span class="hljs-params">value: any[]</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, l = value.<span class="hljs-property">length</span>; i &lt; l; i++) &#123;<br>      <span class="hljs-title function_">observe</span>(value[i], <span class="hljs-literal">false</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">mock</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Define a reactive property on an Object.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// ⭐️ 调用 defineReactive，接受到的参数为：</span><br><span class="hljs-comment">//  obj：实例的 data</span><br><span class="hljs-comment">//  key：实例的 data 的每个 key</span><br><span class="hljs-comment">//  val：&#123;&#125;</span><br><span class="hljs-comment">//  customSetter： undefined</span><br><span class="hljs-comment">//  shallow：false</span><br><span class="hljs-comment">//  mock：false</span><br><span class="hljs-comment">//  observeEvenIfShallow：undefined</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">defineReactive</span>(<span class="hljs-params"></span><br><span class="hljs-params">  obj: object,</span><br><span class="hljs-params">  key: string,</span><br><span class="hljs-params">  val?: any,</span><br><span class="hljs-params">  customSetter?: <span class="hljs-built_in">Function</span> | <span class="hljs-literal">null</span>,</span><br><span class="hljs-params">  shallow?: boolean,</span><br><span class="hljs-params">  mock?: boolean,</span><br><span class="hljs-params">  observeEvenIfShallow = <span class="hljs-literal">false</span></span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// dep = &#123; id: uuid, subs: [] &#125;</span><br>  <span class="hljs-keyword">const</span> dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dep</span>()<br><br>  <span class="hljs-keyword">const</span> property = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(obj, key)<br>  <span class="hljs-keyword">if</span> (property &amp;&amp; property.<span class="hljs-property">configurable</span> === <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br><br>  <span class="hljs-comment">// cater for pre-defined getter/setters</span><br>  <span class="hljs-keyword">const</span> getter = property &amp;&amp; property.<span class="hljs-property">get</span><br>  <span class="hljs-keyword">const</span> setter = property &amp;&amp; property.<span class="hljs-property">set</span><br>  <span class="hljs-keyword">if</span> (<br>    (!getter || setter) &amp;&amp;<br>    (val === <span class="hljs-variable constant_">NO_INITIAL_VALUE</span> || <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> === <span class="hljs-number">2</span>)<br>  ) &#123;<br>    val = obj[key] <span class="hljs-comment">// 取值，等价于 data[key]</span><br>  &#125;<br><br>  <span class="hljs-comment">// 将取得的值，再次递归调用 observe</span><br>  <span class="hljs-keyword">let</span> childOb = shallow ? val &amp;&amp; val.<span class="hljs-property">__ob__</span> : <span class="hljs-title function_">observe</span>(val, <span class="hljs-literal">false</span>, mock)<br><br>  <span class="hljs-comment">// ⭐️ 使用 Object.defineProperty 实现属性拦截</span><br>  <span class="hljs-comment">//  obj：实例的 data</span><br>  <span class="hljs-comment">//  key：实例的 data 的每个 key</span><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, key, &#123;<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">reactiveGetter</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">const</span> value = getter ? getter.<span class="hljs-title function_">call</span>(obj) : val<br><br>      <span class="hljs-comment">// ⭐️ dep.depend() 实现依赖的采集</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>) &#123;<br>        <span class="hljs-keyword">if</span> (__DEV__) &#123;<br>          dep.<span class="hljs-title function_">depend</span>(&#123;<br>            <span class="hljs-attr">target</span>: obj,<br>            <span class="hljs-attr">type</span>: <span class="hljs-title class_">TrackOpTypes</span>.<span class="hljs-property">GET</span>,<br>            key<br>          &#125;)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          dep.<span class="hljs-title function_">depend</span>()<br>        &#125;<br>        <span class="hljs-keyword">if</span> (childOb) &#123;<br>          childOb.<span class="hljs-property">dep</span>.<span class="hljs-title function_">depend</span>() <span class="hljs-comment">// 孩子的依赖采集</span><br>          <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isArray</span>(value)) &#123;<br>            <span class="hljs-title function_">dependArray</span>(value)<br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">isRef</span>(value) &amp;&amp; !shallow ? value.<span class="hljs-property">value</span> : value<br>    &#125;,<br>    <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">reactiveSetter</span>(<span class="hljs-params">newVal</span>) &#123;<br>      <span class="hljs-keyword">const</span> value = getter ? getter.<span class="hljs-title function_">call</span>(obj) : val<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">hasChanged</span>(value, newVal)) &#123;<br>        <span class="hljs-keyword">return</span><br>      &#125;<br>      <span class="hljs-keyword">if</span> (__DEV__ &amp;&amp; customSetter) &#123;<br>        <span class="hljs-title function_">customSetter</span>()<br>      &#125;<br>      <span class="hljs-keyword">if</span> (setter) &#123;<br>        setter.<span class="hljs-title function_">call</span>(obj, newVal)<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (getter) &#123;<br>        <span class="hljs-comment">// #7981: for accessor properties without setter</span><br>        <span class="hljs-keyword">return</span><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!shallow &amp;&amp; <span class="hljs-title function_">isRef</span>(value) &amp;&amp; !<span class="hljs-title function_">isRef</span>(newVal)) &#123;<br>        value.<span class="hljs-property">value</span> = newVal<br>        <span class="hljs-keyword">return</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        val = newVal<br>      &#125;<br>      childOb = shallow ? newVal &amp;&amp; newVal.<span class="hljs-property">__ob__</span> : <span class="hljs-title function_">observe</span>(newVal, <span class="hljs-literal">false</span>, mock)<br><br>      <span class="hljs-comment">// ⭐️ dep.notify() 实现观察者的通知</span><br>      <span class="hljs-keyword">if</span> (__DEV__) &#123;<br>        dep.<span class="hljs-title function_">notify</span>(&#123;<br>          <span class="hljs-attr">type</span>: <span class="hljs-title class_">TriggerOpTypes</span>.<span class="hljs-property">SET</span>,<br>          <span class="hljs-attr">target</span>: obj,<br>          key,<br>          <span class="hljs-attr">newValue</span>: newVal,<br>          <span class="hljs-attr">oldValue</span>: value<br>        &#125;)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        dep.<span class="hljs-title function_">notify</span>()<br>      &#125;<br>    &#125;<br>  &#125;)<br><br>  <span class="hljs-keyword">return</span> dep<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dep</span> &#123;<br>  <span class="hljs-keyword">static</span> target?: <span class="hljs-title class_">DepTarget</span> | <span class="hljs-literal">null</span><br>  <span class="hljs-attr">id</span>: number<br>  <span class="hljs-attr">subs</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">DepTarget</span> | <span class="hljs-literal">null</span>&gt;<br>  <span class="hljs-comment">// pending subs cleanup</span><br>  _pending = <span class="hljs-literal">false</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = uid++<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span> = []<br>  &#125;<br><br>  <span class="hljs-title function_">addSub</span>(<span class="hljs-params">sub: DepTarget</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">push</span>(sub)<br>  &#125;<br><br>  <span class="hljs-title function_">removeSub</span>(<span class="hljs-params">sub: DepTarget</span>) &#123;<br>    <span class="hljs-comment">// #12696 deps with massive amount of subscribers are extremely slow to</span><br>    <span class="hljs-comment">// clean up in Chromium</span><br>    <span class="hljs-comment">// to workaround this, we unset the sub for now, and clear them on</span><br>    <span class="hljs-comment">// next scheduler flush.</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">indexOf</span>(sub)] = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">_pending</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_pending</span> = <span class="hljs-literal">true</span><br>      pendingCleanupDeps.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">depend</span>(<span class="hljs-params">info?: DebuggerEventExtraInfo</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>) &#123;<br>      <span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>.<span class="hljs-title function_">addDep</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">// ⭐️ 新增依赖的观察者</span><br>      <span class="hljs-keyword">if</span> (__DEV__ &amp;&amp; info &amp;&amp; <span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>.<span class="hljs-property">onTrack</span>) &#123;<br>        <span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>.<span class="hljs-title function_">onTrack</span>(&#123;<br>          <span class="hljs-attr">effect</span>: <span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>,<br>          ...info<br>        &#125;)<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">notify</span>(<span class="hljs-params">info?: DebuggerEventExtraInfo</span>) &#123;<br>    <span class="hljs-comment">// stabilize the subscriber list first</span><br>    <span class="hljs-keyword">const</span> subs = <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">s</span> =&gt;</span> s) <span class="hljs-keyword">as</span> <span class="hljs-title class_">DepTarget</span>[]<br>    <span class="hljs-keyword">if</span> (__DEV__ &amp;&amp; !config.<span class="hljs-property">async</span>) &#123;<br>      <span class="hljs-comment">// subs aren&#x27;t sorted in scheduler if not running async</span><br>      <span class="hljs-comment">// we need to sort them now to make sure they fire in correct</span><br>      <span class="hljs-comment">// order</span><br>      subs.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a.<span class="hljs-property">id</span> - b.<span class="hljs-property">id</span>)<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, l = subs.<span class="hljs-property">length</span>; i &lt; l; i++) &#123;<br>      <span class="hljs-keyword">const</span> sub = subs[i]<br>      <span class="hljs-keyword">if</span> (__DEV__ &amp;&amp; info) &#123;<br>        sub.<span class="hljs-property">onTrigger</span> &amp;&amp;<br>          sub.<span class="hljs-title function_">onTrigger</span>(&#123;<br>            <span class="hljs-attr">effect</span>: subs[i],<br>            ...info<br>          &#125;)<br>      &#125;<br>      sub.<span class="hljs-title function_">update</span>() <span class="hljs-comment">// ⭐️ 通知观察者有更新</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>官方文档：<a href="https://v2.cn.vuejs.org/v2/guide/reactivity.html">https://v2.cn.vuejs.org/v2/guide/reactivity.html</a><br><img src="/img/images/2024/1704271869099-e41bf1bd-348f-40bc-b280-b70ad489ced3.png"></p><h2 id="watch-的一些属性"><a href="#watch-的一些属性" class="headerlink" title="watch 的一些属性"></a>watch 的一些属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">user</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xxx&#x27;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">30</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 当 immediate 为 false 时，无法触发对应的 watch</span><br>    <span class="hljs-comment">// 当 immediate 为 true 时，可以触发对应的 watch</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">changeUserName</span>()<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">changeUserName</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 当 deep 为 false 时，无法触发对应的 watch</span><br>      <span class="hljs-comment">// 当 deep 为 true 时，可以触发对应的 watch</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;yyy&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-attr">user</span>: &#123;<br>      <span class="hljs-title function_">handler</span>(<span class="hljs-params">newVal, oldVal</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`watched <span class="hljs-subst">$&#123;oldVal&#125;</span> -&gt; <span class="hljs-subst">$&#123;newVal&#125;</span>`</span>)<br>      &#125;,<br>      <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 watch 的源码，可以看到<code>deep、immediate</code>的具体实现<br><code>immediate</code>核心源代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$watch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span><br><span class="hljs-params">  expOrFn: string | (() =&gt; any),</span><br><span class="hljs-params">  cb: any,</span><br><span class="hljs-params">  options?: Record&lt;string, any&gt;</span><br><span class="hljs-params"></span>): <span class="hljs-title class_">Function</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">vm</span>: <span class="hljs-title class_">Component</span> = <span class="hljs-variable language_">this</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isPlainObject</span>(cb)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createWatcher</span>(vm, expOrFn, cb, options)<br>  &#125;<br>  options = options || &#123;&#125;<br>  options.<span class="hljs-property">user</span> = <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">const</span> watcher = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>(vm, expOrFn, cb, options)<br>  <span class="hljs-keyword">if</span> (options.<span class="hljs-property">immediate</span>) &#123; <span class="hljs-comment">// ⭐️ immediate 为 true 时</span><br>    <span class="hljs-keyword">const</span> info = <span class="hljs-string">`callback for immediate watcher &quot;<span class="hljs-subst">$&#123;watcher.expression&#125;</span>&quot;`</span><br>    <span class="hljs-title function_">pushTarget</span>()<br>    <span class="hljs-comment">// ⭐️ 执行对应的回调函数并且捕获错误</span><br>    <span class="hljs-title function_">invokeWithErrorHandling</span>(cb, vm, [watcher.<span class="hljs-property">value</span>], vm, info)<br>    <span class="hljs-title function_">popTarget</span>()<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">unwatchFn</span>(<span class="hljs-params"></span>) &#123;<br>    watcher.<span class="hljs-title function_">teardown</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>deep</code>核心源代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_traverse</span>(<span class="hljs-params">val: any, seen: SimpleSet</span>) &#123;<br>  <span class="hljs-keyword">let</span> i, keys<br>  <span class="hljs-keyword">const</span> isA = <span class="hljs-title function_">isArray</span>(val)<br>  <span class="hljs-keyword">if</span> (<br>    (!isA &amp;&amp; !<span class="hljs-title function_">isObject</span>(val)) ||<br>    val.<span class="hljs-property">__v_skip</span> <span class="hljs-comment">/* ReactiveFlags.SKIP */</span> ||<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(val) ||<br>    val <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">VNode</span><br>  ) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (val.<span class="hljs-property">__ob__</span>) &#123;<br>    <span class="hljs-keyword">const</span> depId = val.<span class="hljs-property">__ob__</span>.<span class="hljs-property">dep</span>.<span class="hljs-property">id</span><br>    <span class="hljs-keyword">if</span> (seen.<span class="hljs-title function_">has</span>(depId)) &#123;<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    seen.<span class="hljs-title function_">add</span>(depId)<br>  &#125;<br>  <span class="hljs-keyword">if</span> (isA) &#123;<br>    i = val.<span class="hljs-property">length</span><br>    <span class="hljs-keyword">while</span> (i--) <span class="hljs-title function_">_traverse</span>(val[i], seen)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isRef</span>(val)) &#123;<br>    <span class="hljs-title function_">_traverse</span>(val.<span class="hljs-property">value</span>, seen)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// ⭐️ 针对对象，获取所有的 keys，然后循环递归处理依赖的监听</span><br>    keys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(val)<br>    i = keys.<span class="hljs-property">length</span><br>    <span class="hljs-keyword">while</span> (i--) <span class="hljs-title function_">_traverse</span>(val[keys[i]], seen)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Diff-算法"><a href="#Diff-算法" class="headerlink" title="Diff 算法"></a>Diff 算法</h1><p>虚拟 DOM：用来描述真实 DOM 的一个 JS 对象<br>diff 算法：对比新、旧虚拟 DOM 差异的算法<br>patch(打补丁)：把新旧节点的差异应用到真实 DOM 上的操作<br>当数据更新后，会重新生成 VDOM，通过 DIFF 算法找到新旧 VDOM 的差异，最后通过 patch 进行页面更新<br>虚拟 DOM 结构(伪代码)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// html 代码</span><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, Virtual DOM!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;paragraph&quot;</span>&gt;</span>This is a paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-comment">// 对应的虚拟 DOM 结构(简化的伪代码)</span><br><span class="hljs-keyword">const</span> vnode = &#123;<br>  <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;div&#x27;</span>, <span class="hljs-comment">// 节点的标签名</span><br>  <span class="hljs-attr">props</span>: &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;app&#x27;</span> &#125;, <span class="hljs-comment">// 节点的属性</span><br>  <span class="hljs-attr">children</span>: [ <span class="hljs-comment">// 子节点数组</span><br>    &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;h1&#x27;</span>,<br>      <span class="hljs-attr">children</span>: [<span class="hljs-string">&#x27;Hello, Virtual DOM!&#x27;</span>]<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;p&#x27;</span>,<br>      <span class="hljs-attr">props</span>: &#123; <span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;paragraph&#x27;</span> &#125;,<br>      <span class="hljs-attr">children</span>: [<span class="hljs-string">&#x27;This is a paragraph.&#x27;</span>]<br>    &#125;<br>  ]<br>&#125;;<br></code></pre></td></tr></table></figure><p>虚拟 DOM 源码：<a href="https://github.com/vuejs/vue/blob/main/src/core/vdom/vnode.ts">https://github.com/vuejs/vue/blob/main/src/core/vdom/vnode.ts</a></p><h2 id="Diff-算法核心"><a href="#Diff-算法核心" class="headerlink" title="Diff 算法核心"></a>Diff 算法核心</h2><p>总结：递归、同级、双端<br>先比较新旧 VDOM 的根节点，然后一层层往下进行同级比较，同级比较时会采用首尾双端来加快对比<br>diff 流程的源码解析：<a href="https://github.com/vuejs/vue/blob/main/src/core/vdom/patch.ts">https://github.com/vuejs/vue/blob/main/src/core/vdom/patch.ts</a><br><code>patch</code>函数的核心流程为：<code>patchVnode -&gt; updateChildren</code><br><code>updateChildren</code>里面进行 diff 并且进行 dom 的更新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createPatchFunction</span>(<span class="hljs-params">backend</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateChildren</span>(<span class="hljs-params"></span><br><span class="hljs-params">    parentElm,</span><br><span class="hljs-params">    oldCh,</span><br><span class="hljs-params">    newCh,</span><br><span class="hljs-params">    insertedVnodeQueue,</span><br><span class="hljs-params">    removeOnly</span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-keyword">let</span> oldStartIdx = <span class="hljs-number">0</span> <span class="hljs-comment">// 旧-首 下标</span><br>    <span class="hljs-keyword">let</span> newStartIdx = <span class="hljs-number">0</span> <span class="hljs-comment">// 新-首 下标</span><br>    <span class="hljs-keyword">let</span> oldEndIdx = oldCh.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>  <span class="hljs-comment">// 旧-尾 下标</span><br>    <span class="hljs-keyword">let</span> oldStartVnode = oldCh[<span class="hljs-number">0</span>] <span class="hljs-comment">// 旧-首 节点</span><br>    <span class="hljs-keyword">let</span> oldEndVnode = oldCh[oldEndIdx] <span class="hljs-comment">// 旧-尾 节点</span><br>    <span class="hljs-keyword">let</span> newEndIdx = newCh.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>  <span class="hljs-comment">// 新-尾 下标</span><br>    <span class="hljs-keyword">let</span> newStartVnode = newCh[<span class="hljs-number">0</span>]  <span class="hljs-comment">// 新-首 节点</span><br>    <span class="hljs-keyword">let</span> newEndVnode = newCh[newEndIdx]  <span class="hljs-comment">// 新-尾 节点</span><br>    <span class="hljs-keyword">let</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm<br><br>    <span class="hljs-comment">// removeOnly is a special flag used only by &lt;transition-group&gt;</span><br>    <span class="hljs-comment">// to ensure removed elements stay in correct relative positions</span><br>    <span class="hljs-comment">// during leaving transitions</span><br>    <span class="hljs-keyword">const</span> canMove = !removeOnly<br><br>    <span class="hljs-keyword">if</span> (__DEV__) &#123;<br>      <span class="hljs-title function_">checkDuplicateKeys</span>(newCh)<br>    &#125;<br><br>    <span class="hljs-comment">// ⭐️ 核心 diff 算法：双指针对比</span><br>    <span class="hljs-keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;<br>      <span class="hljs-comment">// 当旧-首下标小于尾下标 &amp;&amp; 新-首下标小于尾下标，则表明还未对比完，将继续</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isUndef</span>(oldStartVnode)) &#123;<br>        <span class="hljs-comment">// 旧-首 节点不存在时，则往右移一个</span><br>        oldStartVnode = oldCh[++oldStartIdx] <span class="hljs-comment">// Vnode has been moved left</span><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isUndef</span>(oldEndVnode)) &#123;<br>        <span class="hljs-comment">// 旧-尾 节点不存在时，则往左移一个</span><br>        oldEndVnode = oldCh[--oldEndIdx]<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">sameVnode</span>(oldStartVnode, newStartVnode)) &#123;<br>        <span class="hljs-comment">// 旧-首 节点 与 新-首 节点 相同时：表明首 节点位置未变</span><br>        <span class="hljs-comment">// 调用 patchVnode 函数，进行它俩的子节点对比</span><br>        <span class="hljs-title function_">patchVnode</span>(<br>          oldStartVnode,<br>          newStartVnode,<br>          insertedVnodeQueue,<br>          newCh,<br>          newStartIdx<br>        )<br>        <span class="hljs-comment">// 旧-首 节点则往右移一个</span><br>        oldStartVnode = oldCh[++oldStartIdx]<br>        <span class="hljs-comment">// 新-首 节点则往右移一个</span><br>        newStartVnode = newCh[++newStartIdx]<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">sameVnode</span>(oldEndVnode, newEndVnode)) &#123;<br>        <span class="hljs-comment">// 旧-尾 节点 与 新-尾 节点 相同时：表明尾 节点位置未变</span><br>        <span class="hljs-comment">// 调用 patchVnode 函数，进行它俩的子节点对比</span><br>        <span class="hljs-title function_">patchVnode</span>(<br>          oldEndVnode,<br>          newEndVnode,<br>          insertedVnodeQueue,<br>          newCh,<br>          newEndIdx<br>        )<br>        <span class="hljs-comment">// 旧-尾 节点则往左移一个</span><br>        oldEndVnode = oldCh[--oldEndIdx]<br>        <span class="hljs-comment">// 新-尾 节点则往左移一个</span><br>        newEndVnode = newCh[--newEndIdx]<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">sameVnode</span>(oldStartVnode, newEndVnode)) &#123;<br>        <span class="hljs-comment">// 旧-首 节点 与 新-尾 节点 相同时：表明该节点位置往左移了</span><br>        <span class="hljs-comment">// 调用 patchVnode 函数，进行它俩的子节点对比</span><br>        <span class="hljs-title function_">patchVnode</span>(<br>          oldStartVnode,<br>          newEndVnode,<br>          insertedVnodeQueue,<br>          newCh,<br>          newEndIdx<br>        )<br>        canMove &amp;&amp;<br>          nodeOps.<span class="hljs-title function_">insertBefore</span>(<br>            parentElm,<br>            oldStartVnode.<span class="hljs-property">elm</span>,<br>            nodeOps.<span class="hljs-title function_">nextSibling</span>(oldEndVnode.<span class="hljs-property">elm</span>)<br>          )<br>        <span class="hljs-comment">// 旧-首 节点则往右移一个</span><br>        oldStartVnode = oldCh[++oldStartIdx]<br>        <span class="hljs-comment">// 新-尾 节点则往左移一个</span><br>        newEndVnode = newCh[--newEndIdx]<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">sameVnode</span>(oldEndVnode, newStartVnode)) &#123;<br>        <span class="hljs-comment">// Vnode moved left</span><br>        <span class="hljs-comment">// 旧-尾 节点 与 新-首 节点 相同时：表明该节点位置往右移了</span><br>        <span class="hljs-comment">// 调用 patchVnode 函数，进行它俩的子节点对比</span><br>        <span class="hljs-title function_">patchVnode</span>(<br>          oldEndVnode,<br>          newStartVnode,<br>          insertedVnodeQueue,<br>          newCh,<br>          newStartIdx<br>        )<br>        canMove &amp;&amp;<br>          nodeOps.<span class="hljs-title function_">insertBefore</span>(parentElm, oldEndVnode.<span class="hljs-property">elm</span>, oldStartVnode.<span class="hljs-property">elm</span>)<br>        <span class="hljs-comment">// 旧-尾 节点则往左移一个</span><br>        oldEndVnode = oldCh[--oldEndIdx]<br>        <span class="hljs-comment">// 新-首 节点则往右移一个</span><br>        newStartVnode = newCh[++newStartIdx]<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isUndef</span>(oldKeyToIdx))<br>          oldKeyToIdx = <span class="hljs-title function_">createKeyToOldIdx</span>(oldCh, oldStartIdx, oldEndIdx)<br>        idxInOld = <span class="hljs-title function_">isDef</span>(newStartVnode.<span class="hljs-property">key</span>)<br>          ? oldKeyToIdx[newStartVnode.<span class="hljs-property">key</span>]<br>          : <span class="hljs-title function_">findIdxInOld</span>(newStartVnode, oldCh, oldStartIdx, oldEndIdx)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isUndef</span>(idxInOld)) &#123;<br>          <span class="hljs-comment">// 当 新-首 节点的 key 不在 旧节点的 keys 内，则表明要走新增逻辑</span><br>          <span class="hljs-comment">// New element</span><br>          <span class="hljs-title function_">createElm</span>(<br>            newStartVnode,<br>            insertedVnodeQueue,<br>            parentElm,<br>            oldStartVnode.<span class="hljs-property">elm</span>,<br>            <span class="hljs-literal">false</span>,<br>            newCh,<br>            newStartIdx<br>          )<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 当 新-首 节点的 key 在 旧节点的 keys 内，则表明是位置移动了</span><br>          vnodeToMove = oldCh[idxInOld]<br>          <span class="hljs-keyword">if</span> (<span class="hljs-title function_">sameVnode</span>(vnodeToMove, newStartVnode)) &#123;<br>            <span class="hljs-comment">// 如果相同 key 对应的新旧节点[相同]时</span><br><br>            <span class="hljs-comment">// 调用 patchVnode 函数，进行它俩的子节点对比</span><br>            <span class="hljs-title function_">patchVnode</span>(<br>              vnodeToMove,<br>              newStartVnode,<br>              insertedVnodeQueue,<br>              newCh,<br>              newStartIdx<br>            )<br>            <span class="hljs-comment">// 旧节点该 key 的值充值为 undefined</span><br>            oldCh[idxInOld] = <span class="hljs-literal">undefined</span><br>            canMove &amp;&amp;<br>              nodeOps.<span class="hljs-title function_">insertBefore</span>(<br>                parentElm,<br>                vnodeToMove.<span class="hljs-property">elm</span>,<br>                oldStartVnode.<span class="hljs-property">elm</span><br>              )<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果相同 key 对应的新旧节点[不相同]时，则表明要走新增逻辑</span><br>            <span class="hljs-comment">// same key but different element. treat as new element</span><br>            <span class="hljs-title function_">createElm</span>(<br>              newStartVnode,<br>              insertedVnodeQueue,<br>              parentElm,<br>              oldStartVnode.<span class="hljs-property">elm</span>,<br>              <span class="hljs-literal">false</span>,<br>              newCh,<br>              newStartIdx<br>            )<br>          &#125;<br>        &#125;<br>        <span class="hljs-comment">// 新-首 节点则往右移一个</span><br>        newStartVnode = newCh[++newStartIdx]<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (oldStartIdx &gt; oldEndIdx) &#123;<br>      <span class="hljs-comment">// 当[旧-首 下标] &gt; [旧-尾 下标]，则要补充节点</span><br>      refElm = <span class="hljs-title function_">isUndef</span>(newCh[newEndIdx + <span class="hljs-number">1</span>]) ? <span class="hljs-literal">null</span> : newCh[newEndIdx + <span class="hljs-number">1</span>].<span class="hljs-property">elm</span><br>      <span class="hljs-title function_">addVnodes</span>(<br>        parentElm,<br>        refElm,<br>        newCh,<br>        newStartIdx,<br>        newEndIdx,<br>        insertedVnodeQueue<br>      )<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newStartIdx &gt; newEndIdx) &#123;<br>      <span class="hljs-comment">// 当[新-首 下标] &gt; [新-尾 下标]，则要删除节点</span><br>      <span class="hljs-title function_">removeVnodes</span>(oldCh, oldStartIdx, oldEndIdx)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">patchVnode</span>(<span class="hljs-params"></span><br><span class="hljs-params">    oldVnode,</span><br><span class="hljs-params">    vnode,</span><br><span class="hljs-params">    insertedVnodeQueue,</span><br><span class="hljs-params">    ownerArray,</span><br><span class="hljs-params">    index,</span><br><span class="hljs-params">    removeOnly?: any</span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-comment">// ....</span><br><br>    <span class="hljs-title function_">updateChildren</span>(elm, oldCh, ch, insertedVnodeQueue, removeOnly)<br><br>    <span class="hljs-comment">// ....</span><br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">isUndef</span>(<span class="hljs-params">v: any</span>): v is <span class="hljs-literal">undefined</span> | <span class="hljs-literal">null</span> &#123;<br>    <span class="hljs-keyword">return</span> v === <span class="hljs-literal">undefined</span> || v === <span class="hljs-literal">null</span><br>  &#125;<br><br>  <span class="hljs-keyword">function</span> isDef&lt;T&gt;(<span class="hljs-attr">v</span>: T): v is <span class="hljs-title class_">NonNullable</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">return</span> v !== <span class="hljs-literal">undefined</span> &amp;&amp; v !== <span class="hljs-literal">null</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">patch</span>(<span class="hljs-params">oldVnode, vnode, hydrating, removeOnly</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isUndef</span>(vnode)) &#123; <span class="hljs-comment">// 新的 Vnode 没有时</span><br>    <span class="hljs-comment">// 旧的 Vnode 有时，则需要进行销毁操作</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isDef</span>(oldVnode)) <span class="hljs-title function_">invokeDestroyHook</span>(oldVnode)<br>    <span class="hljs-keyword">return</span><br>  &#125;<br><br>  <span class="hljs-keyword">let</span> isInitialPatch = <span class="hljs-literal">false</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">insertedVnodeQueue</span>: any[] = []<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isUndef</span>(oldVnode)) &#123;<br>    <span class="hljs-comment">// 如果新的 Vnode 存在，旧的 Vnode 不存在，则需要进行创建操作</span><br>    <span class="hljs-comment">// empty mount (likely as component), create new root element</span><br>    isInitialPatch = <span class="hljs-literal">true</span><br>    <span class="hljs-title function_">createElm</span>(vnode, insertedVnodeQueue)<br>  &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 新旧 Vnode 都存在时则需要执行的核心逻辑 ⭐️</span><br>    <span class="hljs-comment">// isRealElement：是否为真正存在的元素</span><br>    <span class="hljs-keyword">const</span> isRealElement = <span class="hljs-title function_">isDef</span>(oldVnode.<span class="hljs-property">nodeType</span>)<br>    <span class="hljs-keyword">if</span> (!isRealElement &amp;&amp; <span class="hljs-title function_">sameVnode</span>(oldVnode, vnode)) &#123;<br>      <span class="hljs-comment">// ⭐️ 不是真正存在的元素 &amp;&amp; 新旧 Vnode 相同时</span><br>      <span class="hljs-comment">// ⭐️ patch existing root node</span><br>      <span class="hljs-title function_">patchVnode</span>(oldVnode, vnode, insertedVnodeQueue, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, removeOnly)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 是真正存在的元素 || 新旧 Vnode 不相同时</span><br>      <span class="hljs-keyword">if</span> (isRealElement) &#123;<br>        <span class="hljs-comment">// 是真正存在的元素时</span><br>        <span class="hljs-comment">// mounting to a real element</span><br>        <span class="hljs-comment">// check if this is server-rendered content and if we can perform</span><br>        <span class="hljs-comment">// a successful hydration.</span><br>        <span class="hljs-keyword">if</span> (oldVnode.<span class="hljs-property">nodeType</span> === <span class="hljs-number">1</span> &amp;&amp; oldVnode.<span class="hljs-title function_">hasAttribute</span>(<span class="hljs-variable constant_">SSR_ATTR</span>)) &#123;<br>          <span class="hljs-comment">// 服务端渲染</span><br>          oldVnode.<span class="hljs-title function_">removeAttribute</span>(<span class="hljs-variable constant_">SSR_ATTR</span>)<br>          hydrating = <span class="hljs-literal">true</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isTrue</span>(hydrating)) &#123;<br>          <span class="hljs-comment">// 混合渲染</span><br>          <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hydrate</span>(oldVnode, vnode, insertedVnodeQueue)) &#123;<br>            <span class="hljs-title function_">invokeInsertHook</span>(vnode, insertedVnodeQueue, <span class="hljs-literal">true</span>)<br>            <span class="hljs-keyword">return</span> oldVnode<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (__DEV__) &#123;<br>            <span class="hljs-title function_">warn</span>(<br>              <span class="hljs-string">&#x27;The client-side rendered virtual DOM tree is not matching &#x27;</span> +<br>                <span class="hljs-string">&#x27;server-rendered content. This is likely caused by incorrect &#x27;</span> +<br>                <span class="hljs-string">&#x27;HTML markup, for example nesting block-level elements inside &#x27;</span> +<br>                <span class="hljs-string">&#x27;&lt;p&gt;, or missing &lt;tbody&gt;. Bailing hydration and performing &#x27;</span> +<br>                <span class="hljs-string">&#x27;full client-side render.&#x27;</span><br>            )<br>          &#125;<br>        &#125;<br>        <span class="hljs-comment">// 既不是服务端渲染，又不是混合渲染</span><br>        <span class="hljs-comment">// 则基于 oldVnode 创建一个空的 Vnode，并替换它</span><br>        oldVnode = <span class="hljs-title function_">emptyNodeAt</span>(oldVnode)<br>      &#125;<br><br>      <span class="hljs-comment">// replacing existing element</span><br>      <span class="hljs-keyword">const</span> oldElm = oldVnode.<span class="hljs-property">elm</span><br>      <span class="hljs-keyword">const</span> parentElm = nodeOps.<span class="hljs-title function_">parentNode</span>(oldElm)<br><br>      <span class="hljs-comment">// create new node</span><br>      <span class="hljs-title function_">createElm</span>(<br>        vnode,<br>        insertedVnodeQueue,<br>        <span class="hljs-comment">// extremely rare edge case: do not insert if old element is in a</span><br>        <span class="hljs-comment">// leaving transition. Only happens when combining transition +</span><br>        <span class="hljs-comment">// keep-alive + HOCs. (#4590)</span><br>        oldElm.<span class="hljs-property">_leaveCb</span> ? <span class="hljs-literal">null</span> : parentElm,<br>        nodeOps.<span class="hljs-title function_">nextSibling</span>(oldElm)<br>      )<br><br>      <span class="hljs-comment">// update parent placeholder node element, recursively</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isDef</span>(vnode.<span class="hljs-property">parent</span>)) &#123;<br>        <span class="hljs-keyword">let</span> ancestor = vnode.<span class="hljs-property">parent</span><br>        <span class="hljs-keyword">const</span> patchable = <span class="hljs-title function_">isPatchable</span>(vnode)<br>        <span class="hljs-keyword">while</span> (ancestor) &#123;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; cbs.<span class="hljs-property">destroy</span>.<span class="hljs-property">length</span>; ++i) &#123;<br>            cbs.<span class="hljs-property">destroy</span>[i](ancestor)<br>          &#125;<br>          ancestor.<span class="hljs-property">elm</span> = vnode.<span class="hljs-property">elm</span><br>          <span class="hljs-keyword">if</span> (patchable) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; cbs.<span class="hljs-property">create</span>.<span class="hljs-property">length</span>; ++i) &#123;<br>              cbs.<span class="hljs-property">create</span>[i](emptyNode, ancestor)<br>            &#125;<br>            <span class="hljs-comment">// #6513</span><br>            <span class="hljs-comment">// invoke insert hooks that may have been merged by create hooks.</span><br>            <span class="hljs-comment">// e.g. for directives that uses the &quot;inserted&quot; hook.</span><br>            <span class="hljs-keyword">const</span> insert = ancestor.<span class="hljs-property">data</span>.<span class="hljs-property">hook</span>.<span class="hljs-property">insert</span><br>            <span class="hljs-keyword">if</span> (insert.<span class="hljs-property">merged</span>) &#123;<br>              <span class="hljs-comment">// start at index 1 to avoid re-invoking component mounted hook</span><br>              <span class="hljs-comment">// clone insert hooks to avoid being mutated during iteration.</span><br>              <span class="hljs-comment">// e.g. for customed directives under transition group.</span><br>              <span class="hljs-keyword">const</span> cloned = insert.<span class="hljs-property">fns</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)<br>              <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; cloned.<span class="hljs-property">length</span>; i++) &#123;<br>                cloned[i]()<br>              &#125;<br>            &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">registerRef</span>(ancestor)<br>          &#125;<br>          ancestor = ancestor.<span class="hljs-property">parent</span><br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// destroy old node</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isDef</span>(parentElm)) &#123;<br>        <span class="hljs-title function_">removeVnodes</span>([oldVnode], <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isDef</span>(oldVnode.<span class="hljs-property">tag</span>)) &#123;<br>        <span class="hljs-title function_">invokeDestroyHook</span>(oldVnode)<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">invokeInsertHook</span>(vnode, insertedVnodeQueue, isInitialPatch)<br>  <span class="hljs-keyword">return</span> vnode.<span class="hljs-property">elm</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="渲染流程"><a href="#渲染流程" class="headerlink" title="渲染流程"></a>渲染流程</h1><p>写在<code>&lt;template&gt; / template选项</code>里面的代码渲染到页面中，有两个阶段：编译、渲染</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>触发编译的逻辑为：调用 <code>实例.$mount()</code>函数<br>入口为<code>compileToFunctions</code>函数</p><ol><li>调用<code>compile</code>函数最终生成<code>ast、render、staticRenderFns</code><ol><li>将<code>&lt;template&gt; / template选项</code>的代码，通过<code>parse</code>函数解析生成为<code>ast</code></li></ol></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;div&gt;</span><br><span class="hljs-string">      &lt;h1&gt;你好呀&lt;/h1&gt;</span><br><span class="hljs-string">      &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">      &lt;p if=&quot;array.length&quot;&gt;&#123;&#123; array.length &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  `</span>,<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello, my children&#x27;</span>, <span class="hljs-attr">array</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>] &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// ast 结构：</span><br>&#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;div&#x27;</span>,<br>  <span class="hljs-attr">attrsList</span>: [],<br>  <span class="hljs-attr">attrsMap</span>: &#123;&#125;,<br>  <span class="hljs-attr">rawAttrsMap</span>: &#123;&#125;,<br>  <span class="hljs-attr">parent</span>: <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-attr">children</span>: [<br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;h1&#x27;</span>,<br>      <span class="hljs-attr">attrsList</span>: [],<br>      <span class="hljs-attr">attrsMap</span>: &#123;&#125;,<br>      <span class="hljs-attr">rawAttrsMap</span>: &#123;&#125;,<br>      <span class="hljs-attr">parent</span>: [<span class="hljs-title class_">Circular</span> *<span class="hljs-number">1</span>],<br>      <span class="hljs-attr">children</span>: [<span class="hljs-title class_">Array</span>],<br>      <span class="hljs-attr">start</span>: <span class="hljs-number">20</span>,<br>      <span class="hljs-attr">end</span>: <span class="hljs-number">32</span>,<br>      <span class="hljs-attr">plain</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    &#123; <span class="hljs-attr">type</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-attr">start</span>: <span class="hljs-number">32</span>, <span class="hljs-attr">end</span>: <span class="hljs-number">47</span> &#125;,<br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;p&#x27;</span>,<br>      <span class="hljs-attr">attrsList</span>: [],<br>      <span class="hljs-attr">attrsMap</span>: &#123;&#125;,<br>      <span class="hljs-attr">rawAttrsMap</span>: &#123;&#125;,<br>      <span class="hljs-attr">parent</span>: [<span class="hljs-title class_">Circular</span> *<span class="hljs-number">1</span>],<br>      <span class="hljs-attr">children</span>: [<span class="hljs-title class_">Array</span>],<br>      <span class="hljs-attr">start</span>: <span class="hljs-number">47</span>,<br>      <span class="hljs-attr">end</span>: <span class="hljs-number">63</span>,<br>      <span class="hljs-attr">plain</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    &#123; <span class="hljs-attr">type</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-attr">start</span>: <span class="hljs-number">63</span>, <span class="hljs-attr">end</span>: <span class="hljs-number">78</span> &#125;,<br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;p&#x27;</span>,<br>      <span class="hljs-attr">attrsList</span>: [<span class="hljs-title class_">Array</span>],<br>      <span class="hljs-attr">attrsMap</span>: [<span class="hljs-title class_">Object</span>],<br>      <span class="hljs-attr">rawAttrsMap</span>: [<span class="hljs-title class_">Object</span>],<br>      <span class="hljs-attr">parent</span>: [<span class="hljs-title class_">Circular</span> *<span class="hljs-number">1</span>],<br>      <span class="hljs-attr">children</span>: [<span class="hljs-title class_">Array</span>],<br>      <span class="hljs-attr">start</span>: <span class="hljs-number">78</span>,<br>      <span class="hljs-attr">end</span>: <span class="hljs-number">121</span>,<br>      <span class="hljs-attr">plain</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">attrs</span>: [<span class="hljs-title class_">Array</span>]<br>    &#125;<br>  ],<br>  <span class="hljs-attr">start</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">end</span>: <span class="hljs-number">140</span>,<br>  <span class="hljs-attr">plain</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>根据生成的<code>ast</code>，调用<code>optimize</code>进行优化：静态节点标记(static:true)</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;div&#x27;</span>,<br>  <span class="hljs-attr">attrsList</span>: [],<br>  <span class="hljs-attr">attrsMap</span>: &#123;&#125;,<br>  <span class="hljs-attr">rawAttrsMap</span>: &#123;&#125;,<br>  <span class="hljs-attr">parent</span>: <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-attr">children</span>: [<br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;h1&#x27;</span>,<br>      <span class="hljs-attr">attrsList</span>: [],<br>      <span class="hljs-attr">attrsMap</span>: &#123;&#125;,<br>      <span class="hljs-attr">rawAttrsMap</span>: &#123;&#125;,<br>      <span class="hljs-attr">parent</span>: [<span class="hljs-title class_">Circular</span> *<span class="hljs-number">1</span>],<br>      <span class="hljs-attr">children</span>: [<span class="hljs-title class_">Array</span>],<br>      <span class="hljs-attr">start</span>: <span class="hljs-number">20</span>,<br>      <span class="hljs-attr">end</span>: <span class="hljs-number">32</span>,<br>      <span class="hljs-attr">plain</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">static</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// ⭐️ 静态节点的标记</span><br>      <span class="hljs-attr">staticInFor</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// ⭐️ 静态节点的标记</span><br>      <span class="hljs-attr">staticRoot</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// ⭐️ 静态节点的标记</span><br>    &#125;,<br>    &#123; <span class="hljs-attr">type</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-attr">start</span>: <span class="hljs-number">32</span>, <span class="hljs-attr">end</span>: <span class="hljs-number">47</span>, <span class="hljs-attr">static</span>: <span class="hljs-literal">true</span> &#125;,<br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;p&#x27;</span>,<br>      <span class="hljs-attr">attrsList</span>: [],<br>      <span class="hljs-attr">attrsMap</span>: &#123;&#125;,<br>      <span class="hljs-attr">rawAttrsMap</span>: &#123;&#125;,<br>      <span class="hljs-attr">parent</span>: [<span class="hljs-title class_">Circular</span> *<span class="hljs-number">1</span>],<br>      <span class="hljs-attr">children</span>: [<span class="hljs-title class_">Array</span>],<br>      <span class="hljs-attr">start</span>: <span class="hljs-number">47</span>,<br>      <span class="hljs-attr">end</span>: <span class="hljs-number">63</span>,<br>      <span class="hljs-attr">plain</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">static</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">staticRoot</span>: <span class="hljs-literal">false</span><br>    &#125;,<br>    &#123; <span class="hljs-attr">type</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-attr">start</span>: <span class="hljs-number">63</span>, <span class="hljs-attr">end</span>: <span class="hljs-number">78</span>, <span class="hljs-attr">static</span>: <span class="hljs-literal">true</span> &#125;,<br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;p&#x27;</span>,<br>      <span class="hljs-attr">attrsList</span>: [<span class="hljs-title class_">Array</span>],<br>      <span class="hljs-attr">attrsMap</span>: [<span class="hljs-title class_">Object</span>],<br>      <span class="hljs-attr">rawAttrsMap</span>: [<span class="hljs-title class_">Object</span>],<br>      <span class="hljs-attr">parent</span>: [<span class="hljs-title class_">Circular</span> *<span class="hljs-number">1</span>],<br>      <span class="hljs-attr">children</span>: [<span class="hljs-title class_">Array</span>],<br>      <span class="hljs-attr">start</span>: <span class="hljs-number">78</span>,<br>      <span class="hljs-attr">end</span>: <span class="hljs-number">121</span>,<br>      <span class="hljs-attr">plain</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">attrs</span>: [<span class="hljs-title class_">Array</span>],<br>      <span class="hljs-attr">static</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">staticRoot</span>: <span class="hljs-literal">false</span><br>    &#125;<br>  ],<br>  <span class="hljs-attr">start</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">end</span>: <span class="hljs-number">140</span>,<br>  <span class="hljs-attr">plain</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">static</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">staticRoot</span>: <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>根据<code>ast</code>，调用<code>generate</code>函数生成<code>render</code>字符串和<code>staticRenderFns</code>数组</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// generate 函数的返回值</span><br>&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-string">`with (this) &#123;</span><br><span class="hljs-string">      return _c(&#x27;div&#x27;, [</span><br><span class="hljs-string">        _c(&#x27;h1&#x27;, [_v(&#x27;你好呀&#x27;)]),</span><br><span class="hljs-string">        _v(&#x27; &#x27;),</span><br><span class="hljs-string">        _c(&#x27;p&#x27;, [_v(_s(msg))]),</span><br><span class="hljs-string">        _v(&#x27; &#x27;),</span><br><span class="hljs-string">        _c(</span><br><span class="hljs-string">          &#x27;p&#x27;,</span><br><span class="hljs-string">          &#123;</span><br><span class="hljs-string">            attrs: &#123;</span><br><span class="hljs-string">              if: &#x27;array.length&#x27;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">          &#125;,</span><br><span class="hljs-string">          [_v(_s(array.length))]</span><br><span class="hljs-string">        )</span><br><span class="hljs-string">      ])</span><br><span class="hljs-string">    &#125;`</span>,<br>    <span class="hljs-attr">staticRenderFns</span>: []<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>调用<code>createFunction</code>函数，将其生成<code>render</code>函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createFunction</span>(<span class="hljs-params">code, errors</span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(code)<br>  &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-attr">err</span>: any) &#123;<br>    errors.<span class="hljs-title function_">push</span>(&#123; err, code &#125;)<br>    <span class="hljs-keyword">return</span> noop<br>  &#125;<br>&#125;<br>$options.<span class="hljs-property">render</span> = <span class="hljs-title function_">createFunction</span>(render)<br></code></pre></td></tr></table></figure><ol start="3"><li><code>render</code>函数最终被挂载到实例的<code>$options.render</code>上</li></ol><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ol><li>调用实例挂载的<code>render</code>函数生成<code>vnode</code></li><li>若在浏览器端则再调用<code>patch</code>函数，进行 diff 与 dom 的更新</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ⭐️ 入口代码</span><br>vm.<span class="hljs-title function_">_update</span>(vm.<span class="hljs-title function_">_render</span>())<br><br><span class="hljs-comment">// 原型对象上的 _render 函数主要功能：调用实例的 render 函数，并将其返回值作为 Vnode 返回</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_render</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>): <span class="hljs-title class_">VNode</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">vm</span>: <span class="hljs-title class_">Component</span> = <span class="hljs-variable language_">this</span><br>  <span class="hljs-keyword">const</span> &#123; render &#125; = vm.<span class="hljs-property">$options</span><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">let</span> vnode = render.<span class="hljs-title function_">call</span>(vm.<span class="hljs-property">_renderProxy</span>, vm.<span class="hljs-property">$createElement</span>)<br><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">return</span> vnode<br>&#125;<br><br><span class="hljs-comment">// 空函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">noop</span>(<span class="hljs-params">a?: any, b?: any, c?: any</span>) &#123;&#125;<br><br><span class="hljs-comment">// 原型对象上的 __patch__ 属性：根据平台进行初始化</span><br><span class="hljs-comment">// patch 就是我们《Diff 算法核心》那块</span><br><span class="hljs-comment">//   源码：https://github.com/vuejs/vue/blob/main/src/core/vdom/patch.ts</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__patch__</span> = inBrowser ? patch : noop<br><br><span class="hljs-comment">// 原型对象上的 _update 函数主要功能：调用实例的 __patch__ 函数进行 diff 与 dom 的更新</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_update</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">vnode: VNode, hydrating?: boolean</span>) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">vm</span>: <span class="hljs-title class_">Component</span> = <span class="hljs-variable language_">this</span><br><br>  <span class="hljs-comment">// ...</span><br><br>  vm.<span class="hljs-property">$el</span> = vm.<span class="hljs-title function_">__patch__</span>(prevVnode, vnode)<br><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>将<code>template</code>编译为<code>render</code>函数，在运行时执行<code>render</code>函数生成<code>vnode</code>，进行<code>diff</code>后再渲染到页面</p><h2 id="Vue-中的数据结构"><a href="#Vue-中的数据结构" class="headerlink" title="Vue 中的数据结构"></a>Vue 中的数据结构</h2><p>v-dom：<br><img src="/img/images/2024/vue2-vnode.png"></p><h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h2><p>打包工具，将小的、松散耦合的模块(主要为 js 代码)组合成更大型的应用程序或库，支持 ES6 模块，适用于前端库和组件<br>与之相应的<code>webpack</code>则适用于应用程序，单应用、多应用等等，支持各种模块加载(css&#x2F;js&#x2F;图片等)、按需引入等等功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// rollup.config.js</span><br><span class="hljs-keyword">import</span> resolve <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@rollup/plugin-node-resolve&#x27;</span>;<br><span class="hljs-keyword">import</span> commonjs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@rollup/plugin-commonjs&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">input</span>: <span class="hljs-string">&#x27;src/index.js&#x27;</span>, <span class="hljs-comment">// 指定入口文件</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">file</span>: <span class="hljs-string">&#x27;dist/my-lib.js&#x27;</span>, <span class="hljs-comment">// 输出的 bundle 文件路径</span><br>    <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;umd&#x27;</span>, <span class="hljs-comment">// 输出格式：UMD，可以在浏览器全局作用域下运行，也支持 CommonJS 和 AMD 模块系统</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;MyLib&#x27;</span>, <span class="hljs-comment">// 全局变量名称，用于在非模块化环境中引用该库</span><br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">resolve</span>(), <span class="hljs-comment">// 解析第三方模块的绝对路径</span><br>    <span class="hljs-title function_">commonjs</span>(), <span class="hljs-comment">// 将 CommonJS 模块转换为 ES6 模块供 Rollup 处理</span><br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Vue2-源码调试"><a href="#Vue2-源码调试" class="headerlink" title="Vue2 源码调试"></a>Vue2 源码调试</h2><ul><li>下载源码</li><li>安装依赖：<code>pnpm i</code></li><li>在需要的地方加上打印<ul><li><img src="/img/images/2024/1704201013614-57368fc6-6eb2-4e5e-b35d-56d3533b0040.png"></li></ul></li><li>运行：<code>pnpm test:unit</code>将跑所有的单测，这时候控制台就不停的打印，等运行完毕后，再看结果<ul><li><img src="/img/images/2024/1704201093072-5f09d517-7249-47cc-97d8-066e99303571.png"></li></ul></li><li>如果觉得打印的实在太多了，则可以新增一个命令：<ul><li><code>&quot;test:unit:newvue&quot;: &quot;vitest run test/unit/modules/vdom/create-component.spec.ts&quot;</code></li><li>然后命令行运行：<code>pnpm test:unit:newvue</code></li><li>这也会执行<code>new Vue(...)</code>的操作，并且打印的数据更少</li></ul></li></ul><h2 id="Vue2-中直接通过下标修改数组元素不会触发视图原因是？"><a href="#Vue2-中直接通过下标修改数组元素不会触发视图原因是？" class="headerlink" title="Vue2 中直接通过下标修改数组元素不会触发视图原因是？"></a>Vue2 中直接通过下标修改数组元素不会触发视图原因是？</h2><p>Vue2 使用 Object.defineProperty 来实现对对象属性的响应式追踪<br>Object.defineProperty 只能应用于对象属性，而无法直接应用于数组的索引（因为数组索引不是标准意义上的对象属性）<br>Vue2 对于数组的响应式处理是通过重写数组的几个可变方法（如 push()、pop() 、shift()等）来间接实现的<br>以下为数组部分方法重写的源代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * not type checking this file because flow doesn&#x27;t play well with</span><br><span class="hljs-comment"> * dynamically accessing methods on Array prototype</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TriggerOpTypes</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../v3&#x27;</span><br><span class="hljs-keyword">import</span> &#123; def &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../util/index&#x27;</span><br><br><span class="hljs-keyword">const</span> arrayProto = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> arrayMethods = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(arrayProto)<br><br><span class="hljs-keyword">const</span> methodsToPatch = [<br>  <span class="hljs-string">&#x27;push&#x27;</span>,<br>  <span class="hljs-string">&#x27;pop&#x27;</span>,<br>  <span class="hljs-string">&#x27;shift&#x27;</span>,<br>  <span class="hljs-string">&#x27;unshift&#x27;</span>,<br>  <span class="hljs-string">&#x27;splice&#x27;</span>,<br>  <span class="hljs-string">&#x27;sort&#x27;</span>,<br>  <span class="hljs-string">&#x27;reverse&#x27;</span><br>]<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Define a property.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">def</span>(<span class="hljs-params">obj: <span class="hljs-built_in">Object</span>, key: string, val: any, enumerable?: boolean</span>) &#123;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, key, &#123;<br>    <span class="hljs-attr">value</span>: val,<br>    <span class="hljs-attr">enumerable</span>: !!enumerable,<br>    <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span><br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Intercept mutating methods and emit events</span><br><span class="hljs-comment"> */</span><br>methodsToPatch.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">method</span>) &#123;<br>  <span class="hljs-comment">// cache original method</span><br>  <span class="hljs-keyword">const</span> original = arrayProto[method]<br>  <span class="hljs-title function_">def</span>(arrayMethods, method, <span class="hljs-keyword">function</span> <span class="hljs-title function_">mutator</span>(<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-keyword">const</span> result = original.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>    <span class="hljs-keyword">const</span> ob = <span class="hljs-variable language_">this</span>.<span class="hljs-property">__ob__</span><br>    <span class="hljs-keyword">let</span> inserted<br>    <span class="hljs-keyword">switch</span> (method) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;push&#x27;</span>:<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;unshift&#x27;</span>:<br>        inserted = args<br>        <span class="hljs-keyword">break</span><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;splice&#x27;</span>:<br>        inserted = args.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">break</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (inserted) ob.<span class="hljs-title function_">observeArray</span>(inserted)<br>    <span class="hljs-comment">// notify change</span><br>    <span class="hljs-keyword">if</span> (__DEV__) &#123;<br>      ob.<span class="hljs-property">dep</span>.<span class="hljs-title function_">notify</span>(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">TriggerOpTypes</span>.<span class="hljs-property">ARRAY_MUTATION</span>,<br>        <span class="hljs-attr">target</span>: <span class="hljs-variable language_">this</span>,<br>        <span class="hljs-attr">key</span>: method<br>      &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ob.<span class="hljs-property">dep</span>.<span class="hljs-title function_">notify</span>()<br>    &#125;<br>    <span class="hljs-keyword">return</span> result<br>  &#125;)<br>&#125;)<br><br></code></pre></td></tr></table></figure><h1 id="课后参考"><a href="#课后参考" class="headerlink" title="课后参考"></a>课后参考</h1><p><a href="https://www.imooc.com/article/29087">人人都能懂的 Vue 源码系列(一)—Vue 源码目录结构_慕课手记</a></p>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-3、Vue cli 详解</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/3-3%E3%80%81Vue%20cli%20%E8%AF%A6%E8%A7%A3/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/3-3%E3%80%81Vue%20cli%20%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>前端脚手架：快速创建项目的基础代码框架和配置的工具</p><p>Vue cli 目前处于<strong>维护状态</strong>：</p><p>使用介绍：<a href="https://cli.vuejs.org/zh/guide/">介绍 | Vue CLI</a></p><p>官方源码：<a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue">https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue</a></p><p>Vue3.0 推荐使用 <a href="https://github.com/vuejs/create-vue">create-vue</a> 来创建项目</p><h1 id="Vue-cli-使用流程"><a href="#Vue-cli-使用流程" class="headerlink" title="Vue cli 使用流程"></a>Vue cli 使用流程</h1><p>创建项目 &#x3D;&gt; 选择配置 &#x3D;&gt; 安装依赖</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 创建项目</span><br>$ vue create yourProjectName<br><br><span class="hljs-comment">// 选择模板</span><br><span class="hljs-title class_">Vue</span> <span class="hljs-variable constant_">CLI</span> v5<span class="hljs-number">.0</span><span class="hljs-number">.8</span><br>? <span class="hljs-title class_">Please</span> pick a <span class="hljs-attr">preset</span>: (<span class="hljs-title class_">Use</span> arrow keys)<br>❯ <span class="hljs-title class_">Default</span> ([<span class="hljs-title class_">Vue</span> <span class="hljs-number">3</span>] babel, eslint)<br>  <span class="hljs-title class_">Default</span> ([<span class="hljs-title class_">Vue</span> <span class="hljs-number">2</span>] babel, eslint)<br>  <span class="hljs-title class_">Manually</span> select features<br><br><span class="hljs-comment">// 手动配置</span><br><span class="hljs-title class_">Vue</span> <span class="hljs-variable constant_">CLI</span> v5<span class="hljs-number">.0</span><span class="hljs-number">.8</span><br>? <span class="hljs-title class_">Please</span> pick a <span class="hljs-attr">preset</span>: <span class="hljs-title class_">Manually</span> select features<br>? <span class="hljs-title class_">Check</span> the features needed <span class="hljs-keyword">for</span> your <span class="hljs-attr">project</span>: (<span class="hljs-title class_">Press</span> &lt;space&gt; to select, &lt;a&gt; to<br>toggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to proceed)<br>❯◉ <span class="hljs-title class_">Babel</span><br> ◯ <span class="hljs-title class_">TypeScript</span><br> ◯ <span class="hljs-title class_">Progressive</span> <span class="hljs-title class_">Web</span> <span class="hljs-title class_">App</span> (<span class="hljs-variable constant_">PWA</span>) <span class="hljs-title class_">Support</span><br> ◯ <span class="hljs-title class_">Router</span><br> ◯ <span class="hljs-title class_">Vuex</span><br> ◯ <span class="hljs-variable constant_">CSS</span> <span class="hljs-title class_">Pre</span>-processors<br> ◉ <span class="hljs-title class_">Linter</span> / <span class="hljs-title class_">Formatter</span><br> ◯ <span class="hljs-title class_">Unit</span> <span class="hljs-title class_">Testing</span><br> ◯ <span class="hljs-variable constant_">E2E</span> <span class="hljs-title class_">Testing</span><br><br><span class="hljs-comment">// 拉取项目并安装依赖</span><br><span class="hljs-title class_">Vue</span> <span class="hljs-variable constant_">CLI</span> v5<span class="hljs-number">.0</span><span class="hljs-number">.8</span><br>✨  <span class="hljs-title class_">Creating</span> project <span class="hljs-keyword">in</span> /<span class="hljs-title class_">Users</span>/hzq/code/mianshi/<span class="hljs-number">3</span>-<span class="hljs-number">1</span> <span class="hljs-title class_">Vue</span> 基础/v2-project.<br>🗃  <span class="hljs-title class_">Initializing</span> git repository...<br>⚙️  <span class="hljs-title class_">Installing</span> <span class="hljs-variable constant_">CLI</span> plugins. <span class="hljs-title class_">This</span> might take a <span class="hljs-keyword">while</span>...<br><br>🚀  <span class="hljs-title class_">Invoking</span> generators...<br>📦  <span class="hljs-title class_">Installing</span> additional dependencies...<br><br>⚓  <span class="hljs-title class_">Running</span> completion hooks...<br><br>📄  <span class="hljs-title class_">Generating</span> <span class="hljs-variable constant_">README</span>.<span class="hljs-property">md</span>...<br><br>🎉  <span class="hljs-title class_">Successfully</span> created project v2-project.<br>👉  <span class="hljs-title class_">Get</span> started <span class="hljs-keyword">with</span> the following <span class="hljs-attr">commands</span>:<br><br> $ cd v2-project<br> $ pnpm run serve<br><br><span class="hljs-comment">// 运行项目</span><br> $ pnpm run serve<br></code></pre></td></tr></table></figure><h1 id="Vue-cli-基础原理"><a href="#Vue-cli-基础原理" class="headerlink" title="Vue cli 基础原理"></a>Vue cli 基础原理</h1><blockquote><p>vue 指令是如何提供的？<br>如何实现与用户交互的？<br>如何生成代码文件的？</p></blockquote><h2 id="Vue-cli-2-x-版本"><a href="#Vue-cli-2-x-版本" class="headerlink" title="Vue cli 2.x 版本"></a>Vue cli 2.x 版本</h2><p>项目目录：<br><img src="/img/images/2023/1703603693629-dde0684b-9bbd-4f8c-afe1-545681df7c98.png"></p><p>首先<code>vue</code>命令是在哪里注入到全局的呢？</p><p><code>package.json</code>代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">&quot;bin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bin/vue&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 这里将 vue 注入到全局</span><br>    <span class="hljs-attr">&quot;vue-init&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bin/vue-init&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vue-list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bin/vue-list&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>所以我们才可以直接用<code>vue</code>命令，比如<code>vue -h、vue -V</code></p><p>其次<code>bin/vue</code>里面定义了更多的子命令，代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">#!/usr/bin/env node</span><br><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;commander&#x27;</span>)<br>  .<span class="hljs-title function_">version</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../package&#x27;</span>).<span class="hljs-property">version</span>)<br>  .<span class="hljs-title function_">usage</span>(<span class="hljs-string">&#x27;&lt;command&gt; [options]&#x27;</span>)<br>  .<span class="hljs-title function_">command</span>(<span class="hljs-string">&#x27;init&#x27;</span>, <span class="hljs-string">&#x27;generate a new project from a template&#x27;</span>)<br>  .<span class="hljs-title function_">command</span>(<span class="hljs-string">&#x27;list&#x27;</span>, <span class="hljs-string">&#x27;list available official templates&#x27;</span>)<br>  .<span class="hljs-title function_">command</span>(<span class="hljs-string">&#x27;build&#x27;</span>, <span class="hljs-string">&#x27;prototype a new project&#x27;</span>)<br>  .<span class="hljs-title function_">parse</span>(process.<span class="hljs-property">argv</span>)<br></code></pre></td></tr></table></figure><p><code>bin/vue</code>代码解析：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">#!/user/bin/env node // 特殊注释，告诉操作系统使用 node 来执行该文件</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;commander&#x27;</span>) <span class="hljs-comment">// 引入 commander 库，用于解析命令行参数</span><br> .<span class="hljs-title function_">version</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../package&#x27;</span>).<span class="hljs-property">version</span>) <span class="hljs-comment">// 设置版本</span><br> .<span class="hljs-title function_">usage</span>(<span class="hljs-string">&#x27;&lt;command&gt; [options]&#x27;</span>) <span class="hljs-comment">// 定义默认信息，用户输入 -h 时显示这个信息</span><br> .<span class="hljs-title function_">commnad</span>(<span class="hljs-string">&#x27;init&#x27;</span>, <span class="hljs-string">&#x27;generate a new project from a template&#x27;</span>) <span class="hljs-comment">// 定义 init 子命令，后面的是它的描述</span><br> .<span class="hljs-title function_">command</span>(<span class="hljs-string">&#x27;list&#x27;</span>, <span class="hljs-string">&#x27;list available official templates&#x27;</span>) <span class="hljs-comment">// 定义 list 子命令，后面的是它的描述</span><br>  .<span class="hljs-title function_">command</span>(<span class="hljs-string">&#x27;build&#x27;</span>, <span class="hljs-string">&#x27;prototype a new project&#x27;</span>) <span class="hljs-comment">// 定义 build 子命令，后面的是它的描述</span><br> .<span class="hljs-title function_">parse</span>(process.<span class="hljs-property">argv</span>) <span class="hljs-comment">// 使用 parse 解析命令行参数，process.argv 是包含命令行参数的数组</span><br><span class="hljs-comment">// 最后 commander 会设置全局变量来反映这些参数</span><br><br><span class="hljs-comment">// 总的来说，这段代码定义了一个简单的命令行工具，它有三个子命令：init, list, 和 build，</span><br><span class="hljs-comment">// 并为每个子命令提供了简短的描述。用户可以通过这些子命令和相关的选项与工具进行交互。</span><br></code></pre></td></tr></table></figure><h3 id="主流程"><a href="#主流程" class="headerlink" title="主流程"></a>主流程</h3><p>主流程代码是在<code>bin/vue-init</code>里面</p><p>对应代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">#!/usr/bin/env node</span><br><span class="hljs-comment">// npm 包依赖项 -- start</span><br><span class="hljs-comment">// download: 下载 git 仓库代码工具，类似于 git clone xxx</span><br><span class="hljs-keyword">const</span> download = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;download-git-repo&quot;</span>);<br><span class="hljs-comment">// program: 命令行工具: 定义命令和选项，并自动生成帮助和用法信息</span><br><span class="hljs-keyword">const</span> program = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;commander&quot;</span>);<br><span class="hljs-comment">// fs: 文件系统(File System)内置模块，可操作本地文件的读取、写入、创建、删除、复制等</span><br><span class="hljs-keyword">const</span> exists = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>).<span class="hljs-property">existsSync</span>;<br><span class="hljs-comment">// path: 内置模块，处理文件路径，可拼接、解析、转换和格式化文件路径</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-comment">// ora: 在命令行界面（CLI）中显示加载动画的</span><br><span class="hljs-keyword">const</span> ora = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;ora&quot;</span>);<br><span class="hljs-comment">// user-home: 用于获取用户根目录</span><br><span class="hljs-keyword">const</span> home = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;user-home&quot;</span>);<br><span class="hljs-comment">// tildify: 用于将绝对路径转换为使用波浪符（~）表示的相对路径。</span><br><span class="hljs-keyword">const</span> tildify = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tildify&quot;</span>);<br><span class="hljs-comment">// chalk: 命令行高亮工具</span><br><span class="hljs-keyword">const</span> chalk = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;chalk&quot;</span>);<br><span class="hljs-comment">// inquirer: 命令行交互式问答工具，可以用来向用户提问并获取输入。</span><br><span class="hljs-keyword">const</span> inquirer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;inquirer&quot;</span>);<br><span class="hljs-comment">// rm: 用于删除文件和目录</span><br><span class="hljs-keyword">const</span> rm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;rimraf&quot;</span>).<span class="hljs-property">sync</span>;<br><span class="hljs-comment">// npm 包依赖项 -- end</span><br><br><span class="hljs-comment">// 本地依赖项 --  start</span><br><span class="hljs-comment">// logger: 打印工具</span><br><span class="hljs-keyword">const</span> logger = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../lib/logger&quot;</span>);<br><span class="hljs-comment">// generate: 代码生成工具: 基于模板生成本地代码/文件</span><br><span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../lib/generate&quot;</span>);<br><span class="hljs-comment">// check-version: 检测版本工具: 1、检查 node 版本；2、提示更新 cli 版本(通过拉取npm包的版本对比得出)</span><br><span class="hljs-keyword">const</span> checkVersion = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../lib/check-version&quot;</span>);<br><span class="hljs-comment">// warnings: 警告提示工具</span><br><span class="hljs-keyword">const</span> warnings = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../lib/warnings&quot;</span>);<br><span class="hljs-comment">// local-path: 路径工具</span><br><span class="hljs-keyword">const</span> localPath = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../lib/local-path&quot;</span>);<br><span class="hljs-comment">// 是否为本地路径方法</span><br><span class="hljs-keyword">const</span> isLocalPath = localPath.<span class="hljs-property">isLocalPath</span>;<br><span class="hljs-comment">// 获取本地模板路径方法</span><br><span class="hljs-keyword">const</span> getTemplatePath = localPath.<span class="hljs-property">getTemplatePath</span>;<br><span class="hljs-comment">// 本地依赖项 -- end</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Usage.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 定义该命令的使用格式，若用户只输入 vue init</span><br><span class="hljs-comment">// 则会提示：</span><br><span class="hljs-comment">// Usage: vue init &lt;template-name&gt; [project-name]</span><br><span class="hljs-comment">// Commands:</span><br><span class="hljs-comment">//  -c, --clone   use git clone</span><br><span class="hljs-comment">//  --offline    use cached template</span><br>program<br>  .<span class="hljs-title function_">usage</span>(<span class="hljs-string">&quot;&lt;template-name&gt; [project-name]&quot;</span>)<br>  .<span class="hljs-title function_">option</span>(<span class="hljs-string">&quot;-c, --clone&quot;</span>, <span class="hljs-string">&quot;use git clone&quot;</span>)<br>  .<span class="hljs-title function_">option</span>(<span class="hljs-string">&quot;--offline&quot;</span>, <span class="hljs-string">&quot;use cached template&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Help.</span><br><span class="hljs-comment"> */</span><br><br>program.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;--help&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;  Examples:&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>    chalk.<span class="hljs-title function_">gray</span>(<span class="hljs-string">&quot;    # create a new project with an official template&quot;</span>)<br>  );<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;    $ vue init webpack my-project&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>    chalk.<span class="hljs-title function_">gray</span>(<span class="hljs-string">&quot;    # create a new project straight from a github template&quot;</span>)<br>  );<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;    $ vue init username/repo my-project&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br>&#125;);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Help.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">help</span>(<span class="hljs-params"></span>) &#123;<br>  program.<span class="hljs-title function_">parse</span>(process.<span class="hljs-property">argv</span>);<br>  <span class="hljs-keyword">if</span> (program.<span class="hljs-property">args</span>.<span class="hljs-property">length</span> &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> program.<span class="hljs-title function_">help</span>();<br>&#125;<br><span class="hljs-title function_">help</span>();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Settings.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 根据输入的命令行，进行模板名称、文件名称等边缘检测与处理</span><br><span class="hljs-comment">// program.args 返回命令行输入的参数数组</span><br><span class="hljs-comment">// 模板名称</span><br><span class="hljs-keyword">let</span> template = program.<span class="hljs-property">args</span>[<span class="hljs-number">0</span>];<br><span class="hljs-comment">// hasSlash: 是否包含斜杠 =&gt; 模板名称是否包含路径层级 =&gt; 本质是判断是否为 github 的第三方模板</span><br><span class="hljs-comment">// 因为 github 的第三方模板名称格式为：username/repo</span><br><span class="hljs-keyword">const</span> hasSlash = template.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;/&quot;</span>) &gt; -<span class="hljs-number">1</span>;<br><span class="hljs-comment">// 项目名称</span><br><span class="hljs-keyword">const</span> rawName = program.<span class="hljs-property">args</span>[<span class="hljs-number">1</span>];<br><span class="hljs-comment">// 输入空的项目名称 =&gt; 表明创建的文件需要平铺在当前文件夹下</span><br><span class="hljs-keyword">const</span> inPlace = !rawName || rawName === <span class="hljs-string">&quot;.&quot;</span>;<br><span class="hljs-comment">// 文件夹名称：如果 inPlace 为 true，则 ../ 回退一级，否则继续使用 rawName</span><br><span class="hljs-keyword">const</span> name = inPlace ? path.<span class="hljs-title function_">relative</span>(<span class="hljs-string">&quot;../&quot;</span>, process.<span class="hljs-title function_">cwd</span>()) : rawName;<br><span class="hljs-comment">// 生成的文件夹路径</span><br><span class="hljs-keyword">const</span> to = path.<span class="hljs-title function_">resolve</span>(rawName || <span class="hljs-string">&quot;.&quot;</span>);<br><span class="hljs-keyword">const</span> clone = program.<span class="hljs-property">clone</span> || <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 拼接本地模板的存放路径，都放在本地根路径下的 .vue-templates 文件夹内</span><br><span class="hljs-keyword">const</span> tmp = path.<span class="hljs-title function_">join</span>(home, <span class="hljs-string">&quot;.vue-templates&quot;</span>, template.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\//g</span>, <span class="hljs-string">&quot;-&quot;</span>));<br><span class="hljs-keyword">if</span> (program.<span class="hljs-property">offline</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`&gt; Use cached template at <span class="hljs-subst">$&#123;chalk.yellow(tildify(tmp))&#125;</span>`</span>);<br>  template = tmp;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Padding.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br>process.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;exit&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br>&#125;);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_">exists</span>(to)) &#123;<br>  <span class="hljs-comment">// 要生成的项目名已存在时：</span><br>  inquirer<br>    .<span class="hljs-title function_">prompt</span>([<br>      &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;confirm&quot;</span>,<br>        <span class="hljs-attr">message</span>: inPlace<br>          ? <span class="hljs-string">&quot;Generate project in current directory?&quot;</span><br>          : <span class="hljs-string">&quot;Target directory exists. Continue?&quot;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;ok&quot;</span>,<br>      &#125;,<br>    ])<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">answers</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (answers.<span class="hljs-property">ok</span>) &#123;<br>        <span class="hljs-title function_">run</span>();<br>      &#125;<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(logger.<span class="hljs-property">fatal</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-title function_">run</span>();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Check, download and generate the project.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 核心代码：处理使用本地还是远程模板</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// isLocalPath：通过输入的模板名称来判断是否为本地的模板</span><br>  <span class="hljs-comment">// 比如输入的完整命令为：vue init ../.local/code/mianshi/vue-template vue2Project，则就是用本地的模板</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isLocalPath</span>(template)) &#123;<br>    <span class="hljs-comment">// 根据模板名称获取完整的模板地址</span><br>    <span class="hljs-keyword">const</span> templatePath = <span class="hljs-title function_">getTemplatePath</span>(template);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">exists</span>(templatePath)) &#123;<br>      <span class="hljs-comment">// 存在该地址，则使用它去生成代码文件</span><br>      <span class="hljs-comment">// name: 命令行输入的项目名称</span><br>      <span class="hljs-comment">// templatePath: 本地模板的地址</span><br>      <span class="hljs-comment">// to: 项目生成的地址</span><br>      <span class="hljs-title function_">generate</span>(name, templatePath, to, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) logger.<span class="hljs-title function_">fatal</span>(err);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br>        logger.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;Generated &quot;%s&quot;.&#x27;</span>, name);<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 本地模板没找到</span><br>      logger.<span class="hljs-title function_">fatal</span>(<span class="hljs-string">&#x27;Local template &quot;%s&quot; not found.&#x27;</span>, template);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 非本地模板时</span><br>   <span class="hljs-comment">// 比如输入的完整命令为：vue init vue-template vue2Project，则就是用远程的模板</span><br>    <span class="hljs-title function_">checkVersion</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!hasSlash) &#123;<br>        <span class="hljs-comment">// 模板名不带/时，则代表使用的是官方模板</span><br>        <span class="hljs-comment">// 使用官方模板名称：vuejs-templates 开头</span><br>        <span class="hljs-keyword">const</span> officialTemplate = <span class="hljs-string">&quot;vuejs-templates/&quot;</span> + template;<br>        <span class="hljs-keyword">if</span> (template.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;#&quot;</span>) !== -<span class="hljs-number">1</span>) &#123;<br>          <span class="hljs-comment">// 模板名带#时，表明模板可用</span><br>          <span class="hljs-title function_">downloadAndGenerate</span>(officialTemplate);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 模板名不带#时，可能是老版本、不可用、废弃等</span><br>          <span class="hljs-keyword">if</span> (template.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;-2.0&quot;</span>) !== -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 模板名带-2.0时，会显示警告，该版本已被废弃等....</span><br>            warnings.<span class="hljs-title function_">v2SuffixTemplatesDeprecated</span>(template, inPlace ? <span class="hljs-string">&quot;&quot;</span> : name);<br>            <span class="hljs-keyword">return</span>;<br>          &#125;<br><br>          <span class="hljs-comment">// warnings.v2BranchIsNowDefault(template, inPlace ? &#x27;&#x27; : name)</span><br>          <span class="hljs-comment">// 表明不是废弃版本，即可能是老版本，就继续下载&amp;生成</span><br>          <span class="hljs-title function_">downloadAndGenerate</span>(officialTemplate);<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 模板名带/时，则代表使用的是 github 的第三方模板</span><br>        <span class="hljs-title function_">downloadAndGenerate</span>(template);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Download a generate from a template repo.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">String</span>&#125; <span class="hljs-variable">template</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 核心代码：使用远程模板生成代码文件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">downloadAndGenerate</span>(<span class="hljs-params">template</span>) &#123;<br>  <span class="hljs-comment">// 命令行 loading</span><br>  <span class="hljs-keyword">const</span> spinner = <span class="hljs-title function_">ora</span>(<span class="hljs-string">&quot;downloading template&quot;</span>);<br>  spinner.<span class="hljs-title function_">start</span>();<br>  <span class="hljs-comment">// Remove if local template exists</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">exists</span>(tmp)) <span class="hljs-title function_">rm</span>(tmp);<br>  <span class="hljs-comment">// download()：下载远程模板代码</span><br>  <span class="hljs-comment">// template：远程的模板名称</span><br>  <span class="hljs-comment">// tmp：官方模板本地存储位置</span><br>  <span class="hljs-title function_">download</span>(template, tmp, &#123; clone &#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    spinner.<span class="hljs-title function_">stop</span>();<br>    <span class="hljs-keyword">if</span> (err)<br>      logger.<span class="hljs-title function_">fatal</span>(<br>        <span class="hljs-string">&quot;Failed to download repo &quot;</span> + template + <span class="hljs-string">&quot;: &quot;</span> + err.<span class="hljs-property">message</span>.<span class="hljs-title function_">trim</span>()<br>      );<br>    <span class="hljs-comment">// generate()：生成代码文件</span><br>    <span class="hljs-comment">// name: 命令行输入的项目名称</span><br>    <span class="hljs-comment">// tmp: 刚刚下载的官方模板的本地地址</span><br>    <span class="hljs-comment">// to: 项目生成的地址</span><br>    <span class="hljs-title function_">generate</span>(name, tmp, to, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (err) logger.<span class="hljs-title function_">fatal</span>(err);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br>      logger.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;Generated &quot;%s&quot;.&#x27;</span>, name);<br>    &#125;);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="/img/images/2023/1703689153892-fb66470d-ae26-4ab2-969d-0f4aa3bf34f3.jpeg"></p><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><h4 id="脚手架的版本检测"><a href="#脚手架的版本检测" class="headerlink" title="脚手架的版本检测"></a>脚手架的版本检测</h4><p>vue cli 的版本检测代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;request&#x27;</span>)<br><span class="hljs-keyword">const</span> semver = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;semver&#x27;</span>) <span class="hljs-comment">// 用于处理和解析语义化版本号</span><br><span class="hljs-keyword">const</span> chalk = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;chalk&#x27;</span>)<br><span class="hljs-keyword">const</span> packageConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../package.json&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function"><span class="hljs-params">done</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// --- 系统的 nodejs 版本与脚手架指定的版本比较 ---(标准版)</span><br>  <span class="hljs-comment">// semver.satisfies(): 是否满足</span><br>  <span class="hljs-comment">// process.version: 当前运行的 node 版本</span><br>  <span class="hljs-comment">// packageConfig.engines.node: cli 指定的 node 版本</span><br>  <span class="hljs-keyword">if</span> (!semver.<span class="hljs-title function_">satisfies</span>(process.<span class="hljs-property">version</span>, packageConfig.<span class="hljs-property">engines</span>.<span class="hljs-property">node</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chalk.<span class="hljs-title function_">red</span>(<br>      <span class="hljs-string">&#x27;  You must upgrade node to &gt;=&#x27;</span> + packageConfig.<span class="hljs-property">engines</span>.<span class="hljs-property">node</span> + <span class="hljs-string">&#x27;.x to use vue-cli&#x27;</span><br>    ))<br>  &#125;<br><br>  <span class="hljs-comment">// --- 系统的脚手架版本与最新脚手架的版本比较 ---</span><br>  <span class="hljs-comment">// 请求远程 npmjs 上的 vue-cli 包的最新版本号</span><br>  <span class="hljs-comment">//         vs</span><br>  <span class="hljs-comment">// 当前系统已安装的 vue-cli 包源代码的 package.json 的版本</span><br>  <span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://registry.npmjs.org/vue-cli&#x27;</span>,<br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span><br>  &#125;, <span class="hljs-function">(<span class="hljs-params">err, res, body</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!err &amp;&amp; res.<span class="hljs-property">statusCode</span> === <span class="hljs-number">200</span>) &#123;<br>      <span class="hljs-keyword">const</span> latestVersion = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(body)[<span class="hljs-string">&#x27;dist-tags&#x27;</span>].<span class="hljs-property">latest</span><br>      <span class="hljs-keyword">const</span> localVersion = packageConfig.<span class="hljs-property">version</span><br>      <span class="hljs-comment">// semver.lt(): 是否低于</span><br>      <span class="hljs-keyword">if</span> (semver.<span class="hljs-title function_">lt</span>(localVersion, latestVersion)) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chalk.<span class="hljs-title function_">yellow</span>(<span class="hljs-string">&#x27;  A newer version of vue-cli is available.&#x27;</span>))<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>()<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;  latest:    &#x27;</span> + chalk.<span class="hljs-title function_">green</span>(latestVersion))<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;  installed: &#x27;</span> + chalk.<span class="hljs-title function_">red</span>(localVersion))<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>()<br>      &#125;<br>    &#125;<br>    <span class="hljs-title function_">done</span>()<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="vue-list-命令"><a href="#vue-list-命令" class="headerlink" title="vue list 命令"></a>vue list 命令</h2><p><code>vue-list.js</code>对应代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">#!/usr/bin/env node</span><br><br><span class="hljs-keyword">const</span> logger = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../lib/logger&quot;</span>); <span class="hljs-comment">// 自定义打印方法</span><br><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;request&quot;</span>); <span class="hljs-comment">// HTTP 请求库</span><br><span class="hljs-keyword">const</span> chalk = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;chalk&quot;</span>); <span class="hljs-comment">// 命令行高亮工具</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Padding.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br>process.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;exit&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br>&#125;);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * List repos.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 通过 request 库，去拉取 github 上面的官方模板数据，不会展示本地缓存的模板数据</span><br><span class="hljs-title function_">request</span>(<br>  &#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://api.github.com/users/vuejs-templates/repos&quot;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;vue-cli&quot;</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">err, res, body</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) logger.<span class="hljs-title function_">fatal</span>(err); <span class="hljs-comment">// 请求有错误时，打印展示错误</span><br>    <span class="hljs-keyword">const</span> requestBody = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(body);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(requestBody)) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;  Available official templates:&quot;</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br>      requestBody.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">repo</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 请求的模板数据循环，然后展示到命令行内</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>          <span class="hljs-string">&quot;  &quot;</span> +<br>          chalk.<span class="hljs-title function_">yellow</span>(<span class="hljs-string">&quot;★&quot;</span>) +<br>          <span class="hljs-string">&quot;  &quot;</span> +<br>          chalk.<span class="hljs-title function_">blue</span>(repo.<span class="hljs-property">name</span>) +<br>          <span class="hljs-string">&quot; - &quot;</span> +<br>          repo.<span class="hljs-property">description</span><br>        );<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(requestBody.<span class="hljs-property">message</span>);<br>    &#125;<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h1 id="Vue-cli-进阶知识"><a href="#Vue-cli-进阶知识" class="headerlink" title="Vue cli 进阶知识"></a>Vue cli 进阶知识</h1><h2 id="代码生成逻辑"><a href="#代码生成逻辑" class="headerlink" title="代码生成逻辑"></a>代码生成逻辑</h2><p><code>generate.js</code>文件里面是最核心的生成逻辑，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// npm 包依赖项 -- start</span><br><span class="hljs-comment">// chalk: 命令行高亮工具</span><br><span class="hljs-keyword">const</span> chalk = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;chalk&quot;</span>);<br><span class="hljs-comment">// metalsmith: 一个静态内容生成器,用于处理文件和目录。</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Metalsmith</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;metalsmith&quot;</span>);<br><span class="hljs-comment">// handlebars: 基于 JavaScript 的模板引擎，用于生成动态 HTML 或其他格式的文本文件。</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Handlebars</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;handlebars&quot;</span>);<br><span class="hljs-comment">// async: 一个提供了许多异步操作辅助函数的库，如 eachSeries、waterfall 等。</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">async</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;async&quot;</span>);<br><span class="hljs-comment">// consolidate: 是一个用于在 Express 中使用多种模板引擎的库。导入了 consolidate 库中的 handlebars 渲染函数。</span><br><span class="hljs-keyword">const</span> render = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;consolidate&quot;</span>).<span class="hljs-property">handlebars</span>.<span class="hljs-property">render</span>;<br><span class="hljs-comment">// path: 内置模块，处理文件路径，可拼接、解析、转换和格式化文件路径</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-comment">// multimatch: 多条件匹配工具</span><br><span class="hljs-keyword">const</span> multimatch = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;multimatch&quot;</span>);<br><span class="hljs-comment">// npm 包依赖项 -- end</span><br><br><span class="hljs-comment">// 本地依赖项 --  start</span><br><span class="hljs-comment">// getOptions: 用于获取或解析命令行选项</span><br><span class="hljs-keyword">const</span> getOptions = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./options&quot;</span>);<br><span class="hljs-comment">// ask: 用于向用户提问并获取输入</span><br><span class="hljs-keyword">const</span> ask = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./ask&quot;</span>);<br><span class="hljs-comment">// filter: 过滤或处理文件列表</span><br><span class="hljs-keyword">const</span> filter = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./filter&quot;</span>);<br><span class="hljs-comment">// logger: 打印工具</span><br><span class="hljs-keyword">const</span> logger = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./logger&quot;</span>);<br><span class="hljs-comment">// 本地依赖项 -- end</span><br><br><span class="hljs-comment">// register handlebars helper</span><br><span class="hljs-title class_">Handlebars</span>.<span class="hljs-title function_">registerHelper</span>(<span class="hljs-string">&quot;if_eq&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, opts</span>) &#123;<br>  <span class="hljs-keyword">return</span> a === b ? opts.<span class="hljs-title function_">fn</span>(<span class="hljs-variable language_">this</span>) : opts.<span class="hljs-title function_">inverse</span>(<span class="hljs-variable language_">this</span>);<br>&#125;);<br><br><span class="hljs-title class_">Handlebars</span>.<span class="hljs-title function_">registerHelper</span>(<span class="hljs-string">&quot;unless_eq&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, opts</span>) &#123;<br>  <span class="hljs-keyword">return</span> a === b ? opts.<span class="hljs-title function_">inverse</span>(<span class="hljs-variable language_">this</span>) : opts.<span class="hljs-title function_">fn</span>(<span class="hljs-variable language_">this</span>);<br>&#125;);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Generate a template given a `src` and `dest`.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">String</span>&#125; name 命令行输入的项目名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">String</span>&#125; src 下载的官方模板的本地地址(某个模板的线上地址: https://github.com/vuejs-templates/webpack)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">String</span>&#125; dest 项目生成的地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Function</span>&#125; done 完成的回调函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">name, src, dest, done</span>) &#123;<br>  <span class="hljs-comment">// 1. 读取配置项，读取模板内的 meta.json || meta.js</span><br>  <span class="hljs-keyword">const</span> opts = <span class="hljs-title function_">getOptions</span>(name, src);<br>  <span class="hljs-comment">// 2. 使用 Metalsmith 初始化数据，拿到模板里面的 template 文件(里面的内容就是生成出来的代码文件)</span><br>  <span class="hljs-keyword">const</span> metalsmith = <span class="hljs-title class_">Metalsmith</span>(path.<span class="hljs-title function_">join</span>(src, <span class="hljs-string">&quot;template&quot;</span>));<br>  <span class="hljs-comment">// 3. 配置项合并: metalsmith.metadata 的元数据 与 手动定义的数据 进行合并</span><br>  <span class="hljs-keyword">const</span> data = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(metalsmith.<span class="hljs-title function_">metadata</span>(), &#123;<br>    <span class="hljs-attr">destDirName</span>: name,<br>    <span class="hljs-attr">inPlace</span>: dest === process.<span class="hljs-title function_">cwd</span>(),<br>    <span class="hljs-attr">noEscape</span>: <span class="hljs-literal">true</span>,<br>  &#125;);<br>  <span class="hljs-comment">// 4. 注册 handlebars 的 helper</span><br>  opts.<span class="hljs-property">helpers</span> &amp;&amp;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(opts.<span class="hljs-property">helpers</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      <span class="hljs-title class_">Handlebars</span>.<span class="hljs-title function_">registerHelper</span>(key, opts.<span class="hljs-property">helpers</span>[key]);<br>    &#125;);<br><br>  <span class="hljs-keyword">const</span> helpers = &#123; chalk, logger &#125;;<br><br>  <span class="hljs-comment">// 5. 调用 before 钩子函数</span><br>  <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">metalsmith</span> &amp;&amp; <span class="hljs-keyword">typeof</span> opts.<span class="hljs-property">metalsmith</span>.<span class="hljs-property">before</span> === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>    opts.<span class="hljs-property">metalsmith</span>.<span class="hljs-title function_">before</span>(metalsmith, opts, helpers);<br>  &#125;<br><br>  metalsmith<br>    .<span class="hljs-title function_">use</span>(<span class="hljs-title function_">askQuestions</span>(opts.<span class="hljs-property">prompts</span>)) <span class="hljs-comment">// 问询主流程: name|description|author|router|lint ...</span><br>    .<span class="hljs-title function_">use</span>(<span class="hljs-title function_">filterFiles</span>(opts.<span class="hljs-property">filters</span>)) <span class="hljs-comment">// 根据问询结果过滤掉不需要的文件</span><br>    .<span class="hljs-title function_">use</span>(<span class="hljs-title function_">renderTemplateFiles</span>(opts.<span class="hljs-property">skipInterpolation</span>)); <span class="hljs-comment">// 最后生成模板文件</span><br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> opts.<span class="hljs-property">metalsmith</span> === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>    <span class="hljs-comment">// 执行</span><br>    opts.<span class="hljs-title function_">metalsmith</span>(metalsmith, opts, helpers);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">metalsmith</span> &amp;&amp; <span class="hljs-keyword">typeof</span> opts.<span class="hljs-property">metalsmith</span>.<span class="hljs-property">after</span> === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>    <span class="hljs-comment">// 调用 after 钩子函数</span><br>    opts.<span class="hljs-property">metalsmith</span>.<span class="hljs-title function_">after</span>(metalsmith, opts, helpers);<br>  &#125;<br><br>  <span class="hljs-comment">// 结尾</span><br>  metalsmith<br>    .<span class="hljs-title function_">clean</span>(<span class="hljs-literal">false</span>)<br>    .<span class="hljs-title function_">source</span>(<span class="hljs-string">&quot;.&quot;</span>) <span class="hljs-comment">// start from template root instead of `./src` which is Metalsmith&#x27;s default for `source`</span><br>    .<span class="hljs-title function_">destination</span>(dest)<br>    .<span class="hljs-title function_">build</span>(<span class="hljs-function">(<span class="hljs-params">err, files</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">done</span>(err);<br>      <span class="hljs-comment">// 调用 complete 钩子函数: 依赖排序、安装依赖、运行 lint、打印最终信息</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> opts.<span class="hljs-property">complete</span> === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>        <span class="hljs-keyword">const</span> helpers = &#123; chalk, logger, files &#125;;<br>        opts.<span class="hljs-title function_">complete</span>(data, helpers);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">logMessage</span>(opts.<span class="hljs-property">completeMessage</span>, data);<br>      &#125;<br>    &#125;);<br><br>  <span class="hljs-keyword">return</span> data;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Create a middleware for asking questions.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object</span>&#125; <span class="hljs-variable">prompts</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">Function</span>&#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">askQuestions</span>(<span class="hljs-params">prompts</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">files, metalsmith, done</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">ask</span>(prompts, metalsmith.<span class="hljs-title function_">metadata</span>(), done);<br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Create a middleware for filtering files.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object</span>&#125; <span class="hljs-variable">filters</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">Function</span>&#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">filterFiles</span>(<span class="hljs-params">filters</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">files, metalsmith, done</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">filter</span>();<br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Template in place plugin.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object</span>&#125; <span class="hljs-variable">files</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Metalsmith</span>&#125; <span class="hljs-variable">metalsmith</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Function</span>&#125; <span class="hljs-variable">done</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderTemplateFiles</span>(<span class="hljs-params">skipInterpolation</span>) &#123;<br>  skipInterpolation =<br>    <span class="hljs-keyword">typeof</span> skipInterpolation === <span class="hljs-string">&quot;string&quot;</span><br>      ? [skipInterpolation]<br>      : skipInterpolation;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">files, metalsmith, done</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> keys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(files);<br>    <span class="hljs-keyword">const</span> metalsmithMetadata = metalsmith.<span class="hljs-title function_">metadata</span>();<br>    <span class="hljs-comment">// 异步处理[模板/template]下的每一个文件</span><br>    <span class="hljs-keyword">async</span>.<span class="hljs-title function_">each</span>(<br>      keys,<br>      <span class="hljs-function">(<span class="hljs-params">file, next</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// skipping files with skipInterpolation option</span><br>        <span class="hljs-keyword">if</span> (<br>          skipInterpolation &amp;&amp;<br>          <span class="hljs-title function_">multimatch</span>([file], skipInterpolation, &#123; <span class="hljs-attr">dot</span>: <span class="hljs-literal">true</span> &#125;).<span class="hljs-property">length</span> <span class="hljs-comment">// 多重匹配，满足 [file], skipInterpolation, &#123; dot: true &#125; 时</span><br>        ) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title function_">next</span>();<br>        &#125;<br>        <span class="hljs-comment">// 获取文件内容字符串</span><br>        <span class="hljs-keyword">const</span> str = files[file].<span class="hljs-property">contents</span>.<span class="hljs-title function_">toString</span>();<br>        <span class="hljs-comment">// do not attempt to render files that do not have mustaches</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/&#123;&#123;([^&#123;&#125;]+)&#125;&#125;/g</span>.<span class="hljs-title function_">test</span>(str)) &#123;<br>          <span class="hljs-comment">// 当文件内容字符串里面没有 &#123;&#123;&#125;&#125; 时，直接跳过</span><br>          <span class="hljs-keyword">return</span> <span class="hljs-title function_">next</span>();<br>        &#125;<br><br>        <span class="hljs-comment">// 结合模板文件内容、元数据 完成自定义的改造渲染</span><br>        <span class="hljs-title function_">render</span>(str, metalsmithMetadata, <span class="hljs-function">(<span class="hljs-params">err, res</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (err) &#123;<br>            err.<span class="hljs-property">message</span> = <span class="hljs-string">`[<span class="hljs-subst">$&#123;file&#125;</span>] <span class="hljs-subst">$&#123;err.message&#125;</span>`</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">next</span>(err);<br>          &#125;<br>          files[file].<span class="hljs-property">contents</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Buffer</span>(res);<br>          <span class="hljs-title function_">next</span>();<br>        &#125;);<br>      &#125;,<br>      done<br>    );<br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Display template complete message.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">String</span>&#125; <span class="hljs-variable">message</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object</span>&#125; <span class="hljs-variable">data</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">logMessage</span>(<span class="hljs-params">message, data</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!message) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-title function_">render</span>(message, data, <span class="hljs-function">(<span class="hljs-params">err, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<br>        <span class="hljs-string">&quot;\n   Error when rendering template complete message: &quot;</span> +<br>          err.<span class="hljs-property">message</span>.<span class="hljs-title function_">trim</span>()<br>      );<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>        <span class="hljs-string">&quot;\n&quot;</span> +<br>          res<br>            .<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/\r?\n/g</span>)<br>            .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">line</span>) =&gt;</span> <span class="hljs-string">&quot;   &quot;</span> + line)<br>            .<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br>      );<br>    &#125;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h2><p><img src="/img/images/2023/1703692005634-473ca13c-0f99-47bf-8b07-8d66e500aff6.jpeg"></p><h1 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h1><h2 id="语义化版本号"><a href="#语义化版本号" class="headerlink" title="语义化版本号"></a>语义化版本号</h2><p>语义化版本号：Semantic Versioning，简称 SemVer，是一种版本控制规范，它定义了版本号的格式和版本间的兼容性规则。</p><p>SemVer 版本号通常由三部分组成：主版本号、次版本号和补丁版本号，格式为<code>MAJOR.MINOR.PATCH</code></p><p><a href="https://www.npmjs.com/package/semver">semver 库</a>提供了一系列函数和方法来比较、解析、验证和操作 SemVer 版本号。</p><h1 id="面试点"><a href="#面试点" class="headerlink" title="面试点"></a>面试点</h1><h2 id="命令配置"><a href="#命令配置" class="headerlink" title="命令配置"></a>命令配置</h2><p>主命令：在<code>package.json</code>的<code>bin</code>配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// ....</span><br><br>  <span class="hljs-attr">&quot;bin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;vue-init&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./bin/vue-init.js&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>副命令：在对应的 JS 代码里面通过<code>commander 库</code>实现</p><p><code>/bin/vue-init.js</code>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">#! /usr/bin/env node</span><br><span class="hljs-keyword">const</span> program = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;commander&#x27;</span>)<br>program.<span class="hljs-title function_">version</span>(<span class="hljs-string">&#x27;1.0&#x27;</span>)<br>  .<span class="hljs-title function_">usage</span>(<span class="hljs-string">&quot;&lt;template-name&gt; [project-name]&quot;</span>)<br> .<span class="hljs-title function_">option</span>(<span class="hljs-string">&#x27;-c, --clone&#x27;</span>, <span class="hljs-string">&#x27;use git clone&quot;&#x27;</span>)<br> .<span class="hljs-title function_">parse</span>(program.<span class="hljs-property">argv</span>)<br></code></pre></td></tr></table></figure><p><code>vue-init vue-template vue2Project --clone</code>：将进行初始化项目</p><h2 id="命令行参数获取"><a href="#命令行参数获取" class="headerlink" title="命令行参数获取"></a>命令行参数获取</h2><p>命令行输入：<code>vue-init vue-template vue2Project --clone</code></p><ul><li><code>option</code>定义命令行参数<ul><li>可以通过<code>program.key</code>获取</li><li>比如：<ul><li><code>program.clone</code>返回为<code>boolean 的 true</code>，判断是否输入了<code>clone</code>，</li></ul></li></ul></li><li>非<code>option</code>定义命令行参数<ul><li>可以通过<code>program.args[index]</code>获取，<code>index</code>为数组下标</li><li>比如：<ul><li><code>program.args[0]</code>返回<code>vue-init</code>后的第一个，即<code>vue-template</code></li><li><code>program.args[1]</code>返回<code>vue-init</code>后的第二个，即<code>vue2Project</code></li></ul></li></ul></li></ul><h2 id="命令行交互"><a href="#命令行交互" class="headerlink" title="命令行交互"></a>命令行交互</h2><p>可以通过<code>inquirer 库</code>实现命令行的各种问询、选择等交互</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> inquirer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;inquirer&#x27;</span>)<br><br><br><span class="hljs-keyword">const</span> promatList = [<br>  &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-comment">// 输入类型的交互</span><br>    <span class="hljs-attr">messgae</span>: <span class="hljs-string">&#x27;项目名称&#x27;</span>, <span class="hljs-comment">// 提示信息</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-comment">// 输入的值存的 key</span><br>    <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;project&#x27;</span> <span class="hljs-comment">// 默认值</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;list&#x27;</span>, <span class="hljs-comment">//  单选选择类型的交互</span><br>    <span class="hljs-attr">messgae</span>: <span class="hljs-string">&#x27;构建工具&#x27;</span>, <span class="hljs-comment">// 提示信息</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-comment">// 输入的值存的 key</span><br>    <span class="hljs-attr">choices</span>: [<span class="hljs-string">&#x27;cli2&#x27;</span>, <span class="hljs-string">&#x27;cli3&#x27;</span>], <span class="hljs-comment">// 可选项</span><br>    <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;cli2&#x27;</span> <span class="hljs-comment">// 默认值</span><br>  &#125;<br>]<br>inquirer.<span class="hljs-title function_">promat</span>(promatList) <span class="hljs-comment">// 进行交互</span><br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">answerObj</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// answerObj：返回用户输入的答案对象，其中的 key 为 promatList 里面的 name</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="脚手架版本检测"><a href="#脚手架版本检测" class="headerlink" title="脚手架版本检测"></a>脚手架版本检测</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 脚手架与 nodejs 的版本检测，一般用满足(类似于&gt;=)</span><br><span class="hljs-keyword">const</span> semver = <span class="hljs-title function_">reqiure</span>(<span class="hljs-string">&#x27;semver&#x27;</span>)<br><br><span class="hljs-keyword">const</span> baseNodejsVersion = <span class="hljs-string">&quot;&gt;=6.0&quot;</span><br><br><span class="hljs-keyword">if</span>(!semver.<span class="hljs-title function_">satisfies</span>(process.<span class="hljs-property">version</span>, baseNodejsVersion)) &#123;<br>  consoe.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;当前 nodejs 的版本不满足该脚手架，最低版本为&#x27;</span> + baseNodejsVersion)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-2、Vue 进阶</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/3-2%E3%80%81Vue%20%E8%BF%9B%E9%98%B6/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/3-2%E3%80%81Vue%20%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><p>Vue2：<a href="https://cn.vuejs.org/guide/components/slots.html#slots">插槽 Slots | Vue.js</a></p><p>Vue3：<a href="https://cn.vuejs.org/guide/components/slots.html#slots">插槽 Slots | Vue.js</a></p><p>作用：HTML 内容的传递</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// FancyButton.vue</span><br>&lt;button <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;saveBtn&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br>&lt;/button&gt;<br><br><span class="hljs-comment">// Index.vue</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FancyButton</span>&gt;</span></span><br><span class="language-xml">  保存</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">FancyButton</span>&gt;</span></span><br><br><span class="hljs-comment">// 最终渲染出来的 DOM 为：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;saveBtn&quot;</span>&gt;</span></span><br><span class="language-xml">  保存</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>渲染逻辑如下：<br><img src="/img/images/2023/1703505632708-3a42cb56-1bc7-4d90-9f86-aa41096a055c.png"></p><p>其中的<code>&lt;slot&gt;</code>标签标示了父元素提供的插槽内容 (slot content) 将在哪里被渲染。</p><p>上述代码，类比如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 父元素传入插槽内容</span><br><span class="hljs-title class_">FancyButton</span>(<span class="hljs-string">&#x27;保存&#x27;</span>)<br><br><span class="hljs-comment">// FancyButton 在自己的模板中渲染插槽内容</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">FancyButton</span>(<span class="hljs-params">slotContent</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;button class=&quot;saveBtn&quot;&gt;</span><br><span class="hljs-string">      <span class="hljs-subst">$&#123;slotContent&#125;</span></span><br><span class="hljs-string">    &lt;/button&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure><p>插槽内容可以是任意合法的模板内容，不局限于文本，可以是 HTML、组件 等</p><h2 id="默认内容"><a href="#默认内容" class="headerlink" title="默认内容"></a>默认内容</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// FancyButton.vue</span><br>&lt;button <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;saveBtn&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br>&lt;/button&gt;<br><br><span class="hljs-comment">// Index.vue</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FancyButton</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">FancyButton</span>&gt;</span></span><br><br><span class="hljs-comment">// 最终渲染出来的 DOM 为：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;saveBtn&quot;</span>&gt;</span></span><br><span class="language-xml">  提交</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>当无插槽内容时，可以展示<code>&lt;slot&gt;</code>内的内容</p><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p><code>&lt;slot&gt;</code>标签可以<code>name</code>属性，用来标记插槽内容的展示</p><p>name 的值可以自定义，默认为<code>default</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// FancyButton.vue</span><br>&lt;button <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;saveBtn&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span> <span class="hljs-comment">// 等价于&lt;slot name=&quot;defalut&quot;&gt;提交&lt;/slot&gt;</span><br>&lt;/button&gt;<br></code></pre></td></tr></table></figure><p> 当<code>name=&quot;defalut&quot;</code>时，则称为默认插槽，用来承载父元素的所有无名插槽</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Content.vue</span><br>&lt;div&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;header&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;default&quot;</span> /&gt;</span> // 等价于 <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-comment">// Index.vue</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Content</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:header</span>&gt;</span> // v-slot:header 等价于 #header</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>&gt;</span> // #default 可以省略不要</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是主要内容 xxxxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是底部内容 xxxxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Content</span>&gt;</span></span><br><br><span class="hljs-comment">// 最终渲染出来的 DOM 为：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是主要内容 xxxxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是底部内容 xxxxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>渲染逻辑如下：<br><img src="/img/images/2023/1703506806709-650bbb8c-6162-465f-92df-d55ffe866a88.png"><br>上述代码，类比如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">Content</span>(&#123;<br>  <span class="hljs-attr">default</span>: &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;,<br>  <span class="hljs-attr">header</span>: &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;,<br>  <span class="hljs-attr">footer</span>: &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;,<br>&#125;)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Content</span>(<span class="hljs-params">slots</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">      &lt;div&gt;</span><br><span class="hljs-string">        &lt;header&gt;</span><br><span class="hljs-string">          <span class="hljs-subst">$&#123;slots.header&#125;</span></span><br><span class="hljs-string">        &lt;/header&gt;</span><br><span class="hljs-string">        &lt;section&gt;</span><br><span class="hljs-string">          <span class="hljs-subst">$&#123;slots.<span class="hljs-keyword">default</span>&#125;</span></span><br><span class="hljs-string">        &lt;/section&gt;</span><br><span class="hljs-string">        &lt;footer&gt;</span><br><span class="hljs-string">          <span class="hljs-subst">$&#123;slots.footer&#125;</span></span><br><span class="hljs-string">        &lt;/footer&gt;</span><br><span class="hljs-string">      &lt;/div&gt;</span><br><span class="hljs-string">  `</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态插槽名"><a href="#动态插槽名" class="headerlink" title="动态插槽名"></a>动态插槽名</h3><p>支持插槽内容的名称为变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Content.vue</span><br>&lt;div&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;header&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;default&quot;</span> /&gt;</span> // 等价于 <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-comment">// Index.vue</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Content</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:</span>[<span class="hljs-attr">headerName</span>]&gt;</span> // v-slot:[headerName] 等价于 #[headerName]</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是主要内容 xxxxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #[<span class="hljs-attr">footerName</span>]&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是底部内容 xxxxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Content</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> headerName = <span class="hljs-string">&quot;header&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> footerName = <span class="hljs-string">&quot;footer&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="渲染作用域"><a href="#渲染作用域" class="headerlink" title="渲染作用域"></a>渲染作用域</h2><p>插槽内容仅能访问其定义时作用域的数据，不能访问子组件的数据</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// FancyButton.vue</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;saveBtn&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> count = <span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="hljs-comment">// Index.vue</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">FancyButton</span>&gt;</span></span><br><span class="language-xml">    &#123;&#123; flag ? &#x27;提交&#x27; : &#x27;暂存&#x27; &#125;&#125; // &#x27;提交&#x27;</span><br><span class="language-xml">    &#123;&#123; count &#125;&#125; // 报错，count 是子组件的数据，无法在该作用域下访问</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">FancyButton</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> flag = <span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><br><span class="hljs-comment">// 最终渲染出来的 DOM 为：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;saveBtn&quot;</span>&gt;</span></span><br><span class="language-xml">  提交</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>如果想要插槽内容访问子组件的数据，可以通过<code>&lt;slot&gt;</code>标签回传值<br>传出语法：<code>&lt;slot :propKey1=&quot;propValue1&quot; :propKey2=&quot;propValue2&quot; ... /&gt;</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Content.vue</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">      // 具名插槽传值</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;header&quot;</span> <span class="hljs-attr">:contentHeaderString</span>=<span class="hljs-string">&quot;contentHeaderString&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">      // 默认插槽传值</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;default&quot;</span> <span class="hljs-attr">:contentDefaultString</span>=<span class="hljs-string">&quot;contentDefaultString&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> contentHeaderString = <span class="hljs-string">&#x27;我是 Content 组件内的 contentHeaderString 变量&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> contentDefaultString = <span class="hljs-string">&#x27;我是 Content 组件内的 contentDefaultString 变量&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>默认插槽接受传参语法：<code>&lt;组件名 v-slot=&quot;slotProps&quot;&gt; ... &lt;/组件名&gt;</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Index.vue</span><br>&lt;<span class="hljs-title class_">Content</span> v-slot=<span class="hljs-string">&quot;defaultSlotProps&quot;</span>&gt; <span class="hljs-comment">// 默认插槽接受传参</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是主要内容 xxxxxxx：&#123;&#123; defaultSlotProps.contentDefaultString &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Content</span>&gt;<br></code></pre></td></tr></table></figure><p>具名插槽接受传参语法：<code>&lt;template v-slot:slotName=&quot;slotProps&quot;&gt; ... &lt;/template&gt;</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Index.vue</span><br>&lt;<span class="hljs-title class_">Content</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:header</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span> // 可简写为 #header=&quot;slotProps&quot;，具名插槽接受传参</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是标题：&#123;&#123; slotProps.contentHeaderString &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Content</span>&gt;<br></code></pre></td></tr></table></figure><p>当存在其他命名槽时，默认槽必须在自定义元素上使用“＜template＞”</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Index.vue</span><br>&lt;<span class="hljs-title class_">Content</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:header</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span> // 可简写为 #header=&quot;slotProps&quot;，具名插槽接受传参</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是标题：&#123;&#123; slotProps.contentHeaderString &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;defaultSlotProps&quot;</span>&gt;</span> // 默认插槽接受传参，必须使用 ＜template＞</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是主要内容 xxxxxxx：&#123;&#123; defaultSlotProps.contentDefaultString &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是底部内容 xxxxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Content</span>&gt;<br></code></pre></td></tr></table></figure><p>渲染逻辑如下：<br><img src="/img/images/2023/1703510136031-0c72566a-226d-43d5-b0fa-16229f2d3321.png"><br>上述代码，类比如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">Content</span>(&#123;<br>  <span class="hljs-title function_">default</span>(<span class="hljs-params">slotProps</span>) &#123;<br>    <span class="hljs-comment">// slotProps = &#123; contentHeaderString &#125;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;div&gt;我是主要内容 xxxxxxx：<span class="hljs-subst">$&#123; slotProps.contentDefaultString &#125;</span>&lt;/div&gt;`</span><br>  &#125;,<br>  <span class="hljs-title function_">header</span>(<span class="hljs-params">slotProps</span>) &#123;<br>    <span class="hljs-comment">// slotProps = &#123; contentHeaderString &#125;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;div&gt;我是标题：<span class="hljs-subst">$&#123; slotProps.contentHeaderString &#125;</span>&lt;/div&gt;`</span><br>  &#125;,<br>  <span class="hljs-attr">footer</span>: &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;,<br>&#125;)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Content</span>(<span class="hljs-params">slots</span>) &#123;<br>  <span class="hljs-keyword">const</span> contentHeaderString = <span class="hljs-string">&#x27;我是 Content 组件内的 contentHeaderString 变量&#x27;</span><br> <span class="hljs-keyword">const</span> contentDefaultString = <span class="hljs-string">&#x27;我是 Content 组件内的 contentDefaultString 变量&#x27;</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">      &lt;div&gt;</span><br><span class="hljs-string">        &lt;header&gt;</span><br><span class="hljs-string">          <span class="hljs-subst">$&#123;slots.header(&#123; contentHeaderString &#125;)&#125;</span></span><br><span class="hljs-string">        &lt;/header&gt;</span><br><span class="hljs-string">        &lt;section&gt;</span><br><span class="hljs-string">          <span class="hljs-subst">$&#123;slots.<span class="hljs-keyword">default</span>(&#123; contentDefaultString &#125;)&#125;</span></span><br><span class="hljs-string">        &lt;/section&gt;</span><br><span class="hljs-string">        &lt;footer&gt;</span><br><span class="hljs-string">          <span class="hljs-subst">$&#123;slots.footer&#125;</span></span><br><span class="hljs-string">        &lt;/footer&gt;</span><br><span class="hljs-string">      &lt;/div&gt;</span><br><span class="hljs-string">  `</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><p>Vue3 已不支持</p><p>Vue2：<a href="https://v2.cn.vuejs.org/v2/guide/filters.html#ad">过滤器 — Vue.js</a></p><p>在模板里面对数据的二次加工</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; message | capitalize &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;id | capitalize&quot;</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;div-1&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">filters</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">capitalize</span>(<span class="hljs-params">value</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> value[<span class="hljs-number">0</span>].<span class="hljs-title function_">toUpperCase</span>() + value.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="hljs-comment">// 最终渲染出来的是：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Div-1&quot;</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注意：过滤器内部的 this 不会自动绑定到 Vue 实例上，其值为<code>undefined</code></p><p>原因是：过滤器本质是纯函数(对进来的数据处理然后返回结果)，所以设计时就不应该跟 Vue 实例挂钩</p><h1 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>全称：JavaScript XML，是一种在 JavaScript 中嵌入类似 HTML 语法的扩展语法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Hello</span> = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Hello, World!~<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>看起来像 HTML，本质还是 JS 代码，最终会编译为 JS 代码(代表了对应的 DOM&#x2F;VDOM)，最后使用框架的能力渲染到页面上</p><p>上述代码经过编译后为(React 举例)：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; jsx <span class="hljs-keyword">as</span> _jsx &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react/jsx-runtime&quot;</span>;<br><span class="hljs-comment">/*#__PURE__*/</span><span class="hljs-title function_">_jsx</span>(<span class="hljs-string">&quot;div&quot;</span>, &#123;<br>  <span class="hljs-attr">children</span>: <span class="hljs-string">&quot;Hello, world!~&quot;</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>Vue2 中 JSX 写法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">money</span>: <span class="hljs-number">100</span>,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">MoneyDom</span> =<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">money</span> &gt; <span class="hljs-number">99</span> ? <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>99+ 元<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span> : <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;this.money&#125; 元<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">MoneyDom</span>;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br><span class="hljs-comment">// 最终渲染出来的是：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>99+ 元<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>Vue3 中 JSX 写法(需要配置)：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; defineComponent, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> money = <span class="hljs-title function_">ref</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">MoneyDom</span> = money.<span class="hljs-property">value</span> &gt; <span class="hljs-number">99</span> ? <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>99+ 元<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span> : <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;money.value&#125; 元<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">MoneyDom</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="语法糖实现"><a href="#语法糖实现" class="headerlink" title="语法糖实现"></a>语法糖实现</h2><p>v-model：事件绑定</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; defineComponent, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">const</span> inputValue = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleOnInput</span> = (<span class="hljs-params">event</span>) =&gt; &#123;<br>      inputValue.<span class="hljs-property">value</span> = event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&#123;handleOnInput&#125;/</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>输入的内容是：&#123; inputValue &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>v-if：三目运算</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; defineComponent, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">const</span> isAdd = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>&#123; isAdd ? &#x27;新建&#x27; : &#x27;保存&#x27; &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>v-for：循环</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; defineComponent, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">const</span> userList = [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lisi&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">39</span> &#125;]<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;</span><br><span class="language-xml">            userList.map(item =&gt; &#123;</span><br><span class="language-xml">              return <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.name&#125;</span>&gt;</span></span><br><span class="language-xml">                      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>姓名：&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>年龄：&#123;item. age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                   <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            &#125;)</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>好处：更加灵活</p><p>坏处：结构不够清晰</p><h1 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h1><p>Vue2：<a href="https://v2.cn.vuejs.org/v2/guide/mixins.html">混入 — Vue.js</a></p><p>Vue3(不再推荐使用)：<a href="https://cn.vuejs.org/api/options-composition.html#mixins">混入 | Vue.js</a></p><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><p>一种组合组件中的可复用功能的方式。更关注于组合</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> mixin = &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>      <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;abc&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">mixins</span>: [mixin],<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;你好&#x27;</span>,<br>      <span class="hljs-attr">bar</span>: <span class="hljs-string">&#x27;def&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$data</span>)<br>    <span class="hljs-comment">// &#123; message: &quot;你好&quot;, foo: &quot;abc&quot;, bar: &quot;def&quot; &#125;</span><br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h2><h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><p>同名时，先调用混入的，后调用组件的</p><p>类似于：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript">最终生命周期函数 = [<br>  mixin1.生命周期函数,<br>  mixin2.生命周期函数,<br>  ...<br>  组件.生命周期函数<br>].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> <span class="hljs-title function_">fn</span>())<br></code></pre></td></tr></table></figure><h3 id="其他的"><a href="#其他的" class="headerlink" title="其他的"></a>其他的</h3><p>同名时，使用组件的</p><p>类似于：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript">最终 data = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assgin</span>(<br>  mixin1.<span class="hljs-title function_">data</span>(),<br>  mixin2.<span class="hljs-title function_">data</span>(),<br>  ...<br>  组件.$data()<br>)<br><br>最终 methods = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assgin</span>(<br>  mixin1.<span class="hljs-property">methods</span>,<br>  mixin2.<span class="hljs-property">methods</span>,<br>  ...<br>  组件.<span class="hljs-property">methods</span><br>)<br><br><span class="hljs-comment">// 其他等......</span><br></code></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>Vue2：<a href="https://v2.cn.vuejs.org/v2/api/#extends">继承 | Vue.js</a></p><p>Vue3(不再推荐使用)：<a href="https://cn.vuejs.org/api/options-composition.html#extends">继承 | Vue.js</a></p><p>一种继承组件中的可复用功能的方式。更关注于继承</p><p>写法与顺序都跟<code>混入</code>一样，关键词为<code>extends: extendObj</code>即可</p><p>当<code>extends 与 mixins</code>共存时，<code>extends</code>优先级更高</p><p>类似于：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript">最终生命周期函数 = [<br>  <span class="hljs-keyword">extends</span>.生命周期函数,<br>  mixin1.生命周期函数,<br>  mixin2.生命周期函数,<br>  ...<br>  组件.生命周期函数<br>].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> <span class="hljs-title function_">fn</span>())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-1、Vue 基础</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/3-1%E3%80%81Vue%20%E5%9F%BA%E7%A1%80/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/3-1%E3%80%81Vue%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><p>M：Model-数据和业务逻辑<br>V：View-界面<br>VM：View Model-桥梁，同步 View 与 Model 之间的数据以及处理用户交互<br>这种模式下，UI 与业务是分开的</p><h2 id="Vue-是如何利用-MVVM-思想进行开发的呢？"><a href="#Vue-是如何利用-MVVM-思想进行开发的呢？" class="headerlink" title="Vue 是如何利用 MVVM 思想进行开发的呢？"></a>Vue 是如何利用 MVVM 思想进行开发的呢？</h2><p>双向绑定</p><ol><li>使用<code>&#123;&#123;&#125;&#125;</code>构建数据与视图的双向绑定</li><li>支持视图绑定事件来更改数据</li></ol><h1 id="Vue-工程项目"><a href="#Vue-工程项目" class="headerlink" title="Vue 工程项目"></a>Vue 工程项目</h1><p>每一个<code>.vue</code>文件就是一个<code>vue 实例</code>，里面分为<code>tcs</code>：template、css(style)、script<br>项目入口处是对 Vue 的实例化</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-comment">// ......</span><br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>建立：beforeCreate &#x3D;&gt; created &#x3D;&gt; beforeMount &#x3D;&gt; mounted<br>更新：beforeUpdate &#x3D;&gt; updated<br>销毁：<br>Vue2：beforeDestroy &#x3D;&gt; destroyed<br>Vue3：beforeUnmount &#x3D;&gt; unmounted<br><a href="https://v2.cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA">Vue2 生命周期图</a>：<br><a href="https://v2.cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90">生命周期 API —— Vue2.js</a><br><img src="/img/images/2024/1705726062605-1cc97d87-a3d6-433e-9fbe-9a2091023ad6.jpeg" alt="e4dffbd1508c4669bbe55d1bf25eebf3.jpg"><br><a href="https://cn.vuejs.org/guide/essentials/lifecycle.html#lifecycle-diagram">Vue3 生命周期图</a>：<br><a href="https://cn.vuejs.org/api/composition-api-lifecycle.html">生命周期 API —— Vue3.js</a><br><img src="/img/images/2023/1703337854170-c7626a85-0c25-4b2f-8654-3fe9fa65ea65.png"><br>beforeCreate：数据&#x2F;事件初始化之前。常用于设置默认数据、初始化事件监听器</p><p>created：数据&#x2F;事件初始化之后，挂载之前，可以通过<code>this</code>拿到<code>data、props、methods</code>等值，常用于获取接口数据、设置计时器等</p><p>beforeMounted：模板编译之后，DOM 挂载之前，在此可以操作模板&#x2F;vDom 或获取接口数据</p><blockquote><p>vDom：虚拟 DOM，是一个 JS 对象，用来模拟真实 DOM，主要是为了最小化的进行页面渲染<br>Vue 中获取虚拟 DOM：this._vnode</p></blockquote><p>mounted：DOM 挂载之后，在此可以操作 DOM</p><p>beforeUpdate：vDom 更新后，DOM 更新前，可以操作数据</p><p>updated：DOM 更新后，谨慎操作数据，容易出现死循环</p><p>beforeDestroy：实例销毁之前，还可以用<code>this</code></p><p>destroyed：实例销毁之后，不可以用<code>this</code><br><img src="/img/images/2024/1704082609002-248824ff-6191-4ffb-831d-adc80d2c3d40.png"></p><h1 id="定向监听"><a href="#定向监听" class="headerlink" title="定向监听"></a>定向监听</h1><p>以下两个都是用于响应数据变化的，当依赖发生改变时会触发</p><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><p>一般用于复杂的计算，并且其值可以直接用<code>this.xx</code>获取，但不支持异步操作</p><p>多入单出：监听多个依赖，但产出一个变化的值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> + <span class="hljs-number">1</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>一般用于异步操作：获取数据等</p><p>单入多出：监听一个依赖，可以触发多个值的改变</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-attr">watch</span>: &#123;<br>  <span class="hljs-title function_">count</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> + <span class="hljs-number">1</span><br>  &#125;,<br>  <span class="hljs-string">&#x27;obj.key1&#x27;</span>(newValue, oldValue) &#123; <span class="hljs-comment">// 复杂类型的监听</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">obj</span>.<span class="hljs-property">key</span> + <span class="hljs-number">1</span><br>  &#125;,<br>  <span class="hljs-string">&#x27;obj.key2&#x27;</span>: &#123; <span class="hljs-comment">// 复杂类型的监听</span><br>    <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">obj</span>.<span class="hljs-property">key</span> + <span class="hljs-number">1</span><br>    &#125;,<br>    <span class="hljs-attr">imediate</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 是否在该监听器绑定的时候(组件实例初始化阶段)立即执行一次回调函数，默认为 false。</span><br>    <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 是否深度监听（即监听对象内部属性的改变），默认为 false。</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>v-if、v-else-if、v-else、v-show</p><p>v-if：当为 false 时，DOM 不会渲染到 HTML 中，所以就隐藏了。当值变化不频繁时，用它更好</p><p>v-show：当为 false 时，DOM 会渲染到 HTML 中，然后再用 display: none，才隐藏了。当值变化频繁时，用它更好</p><p>v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>v-for…in + key</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;num in 10&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;num&quot;</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span> &lt;!-- num 为：<span class="hljs-number">0</span>-<span class="hljs-number">9</span> --&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, key) in obj&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span>&#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, index) in array&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123; index &#125;&#125;: &#123;&#123; value &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>v-once：只渲染一次，渲染后就当成静态节点处理</p><p>v-text：作为纯内容，替换节点内容</p><p>v-html：作为 html，替换节点内容</p><p>v-bind：属性绑定，简写<code>:</code></p><p>v-on：事件绑定，简写<code>@</code>，支持修饰符<code>.stop、.prevent、.capture、.self、.once</code>等</p><p>v-model：双向绑定，常用于表单控件上，支持修饰符<code>.trim、.number、.lazy</code>等，通过<code>:value + @input</code>实现</p><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><p>HTML5：是 HTML 规范的一个版本</p><p>HTML5 里面新增</p><ul><li>语义标签：<code>&lt;header&gt;、&lt;footer&gt;、&lt;section&gt;</code> 等标签</li><li>多媒体标签：<code>&lt;video&gt;(视频)、&lt;audio&gt;(音频)</code></li><li>图形绘制：Canvas、SVG</li><li>Web 存储：LocalStorage、SessionStorage</li></ul><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="v-for-与-v-if-的优先级"><a href="#v-for-与-v-if-的优先级" class="headerlink" title="v-for 与 v-if 的优先级"></a>v-for 与 v-if 的优先级</h2><p>Vue2 中：当<code>v-if</code>与<code>v-for</code>一起使用时，<code>v-for</code>具有比<code>v-if</code>更高的优先级。</p><p>Vue3 中：当<code>v-if</code>与<code>v-for</code>一起使用时，<code>v-if</code>具有比<code>v-for</code>更高的优先级。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in list&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;index === 9&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">list</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]   <span class="hljs-comment">//需要遍历的数据</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在 Vue2 中实际情况如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span>(index === <span class="hljs-number">9</span>) &#123;<br>    <span class="hljs-keyword">return</span> item<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// 所以我们只想渲染下标为 9 的，但每次数据改变时都会将整个数据循环一遍，开销大。推荐使用计算过的</span><br><span class="hljs-comment">// 数据去渲染(可以通过 computed 实现)</span><br></code></pre></td></tr></table></figure><p>在 Vue3 中实际情况如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">if</span>(index === <span class="hljs-number">9</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> item<br>  &#125;<br>&#125;)<br><span class="hljs-comment">// 并且 Vue 报警告</span><br>[<span class="hljs-title class_">Vue</span> warn]: <span class="hljs-title class_">Property</span> <span class="hljs-string">&quot;index&quot;</span> was accessed during render but is not defined on instance.<br></code></pre></td></tr></table></figure><p>官方推荐写法：分开写！！！</p><h2 id="Vue-中-key-的作用"><a href="#Vue-中-key-的作用" class="headerlink" title="Vue 中 key 的作用"></a>Vue 中 key 的作用</h2><p>提高渲染性能，通过唯一的 key 可以更快速的分辨哪些改变了，哪些没改变，这样最大程度的减少和复用 DOM 操作。</p><h2 id="Vue-中写-JSX-与模板有什么区别？"><a href="#Vue-中写-JSX-与模板有什么区别？" class="headerlink" title="Vue 中写 JSX 与模板有什么区别？"></a>Vue 中写 JSX 与模板有什么区别？</h2><p><strong>模板</strong>编译原理是：template &#x3D;&gt; 语法匹配 – 生成 AST(标记静态&#x2F;动态) – 可执行方法 &#x3D;&gt; render() &#x3D;&gt; dom<br>在 template 到 render() 之间，Vue 会去做相应的编译优化</p><p><strong>JSX</strong>编译原理是：render() &#x3D;&gt; dom<br>直接写 JSX 是没有任何优化的，这样只要其中的一个变量变化了，整个 render 函数都会重新执行</p><h2 id="vue2-的-data-为什么是个函数？"><a href="#vue2-的-data-为什么是个函数？" class="headerlink" title="vue2 的 data 为什么是个函数？"></a>vue2 的 data 为什么是个函数？</h2><p>在 Vue 2 中，data 是一个函数，主要是出于以下几个原因：</p><h3 id="1-组件的复用"><a href="#1-组件的复用" class="headerlink" title="1. 组件的复用"></a>1. <strong>组件的复用</strong></h3><p>当你要在多个地方使用同一个组件时，如果你把 data 直接定义为对象，那么每次实例化这个组件时都会复用该对象，这就意味着所有实例都会共享同一个数据对象，一个组件的更改会影响到所有使用这个组件的地方。而通过把 data 定义为函数，每次实例化组件时都会调用这个函数，从而返回一个新的独立的数据对象，这样就能保证每个实例都有自己的数据，互不干扰。</p><h3 id="2-更好的封装"><a href="#2-更好的封装" class="headerlink" title="2. 更好的封装"></a>2. <strong>更好的封装</strong></h3><p>通过将 data 定义为函数，你可以隐藏组件的内部状态，使其更难被外部修改。这对于封装和隐藏实现细节非常有帮助。</p><h3 id="3-代码的整洁"><a href="#3-代码的整洁" class="headerlink" title="3. 代码的整洁"></a>3. <strong>代码的整洁</strong></h3><p>将 data 定义为函数可以让你将相关的逻辑（例如数据的初始化和设置）集中在一个地方，这样代码会更加整洁和易于维护。</p><h3 id="4-响应性系统"><a href="#4-响应性系统" class="headerlink" title="4. 响应性系统"></a>4. <strong>响应性系统</strong></h3><p>Vue 的响应性系统依赖于对数据对象的依赖关系。</p><p>通过将 data 定义为函数，可以确保每次返回一个新的数据对象时，Vue 的响应性系统都能正确地检测到变化并更新相关的视图。</p><p>总的来说，将 data 定义为函数是为了实现更好的组件封装、复用性、代码整洁以及与 Vue 的响应性系统更好地配合<br>（文心大模型 3.5 生成）</p>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-4、ES6 实战</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/2-4%E3%80%81ES6%20%E5%AE%9E%E6%88%98/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/2-4%E3%80%81ES6%20%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>背景：真实的 vue 项目实战</p><h1 id="树形组件"><a href="#树形组件" class="headerlink" title="树形组件"></a>树形组件</h1><p>一个可展开的树形组件，功能样式可参考<a href="https://element-plus.org/zh-CN/component/tree.html">Tree 树形控件 | Element Plus</a><br><img src="/img/images/2023/1703259788805-f9721564-525c-408c-b47c-39a9244df5a0.png"><br>思路：树形组件是典型的面向对象编程，面向的是<code>node节点</code>，根节点是特殊的节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// tree.vue</span><br>&lt;script&gt;<br>  <span class="hljs-keyword">import</span> itemNode <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./itemNode.vue&#x27;</span><br>  <span class="hljs-keyword">import</span> refs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./refs.js&#x27;</span><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;treeNode&#x27;</span>,<br><br>    <span class="hljs-attr">components</span>: &#123;<br>      itemNode<br>    &#125;,<br><br>    <span class="hljs-comment">// 接受参数</span><br>    <span class="hljs-attr">props</span>: &#123;<br>      <span class="hljs-attr">options</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">Array</span>,<br>        <span class="hljs-title function_">default</span>(<span class="hljs-params"></span>)&#123;<br>          <span class="hljs-keyword">return</span> []<br>        &#125;<br>      &#125;,<br>    &#125;<br><br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;v_tree&#x27;</span><br>      &#125;<br>    &#125;,<br><br>   <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>      ref.<span class="hljs-title function_">init</span>(&#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span><br>      &#125;, <span class="hljs-variable language_">this</span>)<br>    &#125;,<br><br>    <span class="hljs-title function_">destroyed</span>(<span class="hljs-params"></span>) &#123;<br>      ref.<span class="hljs-title function_">destroy</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>    &#125;,<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tree&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;vue-tree&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;</span><br><span class="language-xml">              this.options.map((itemData, index) =&gt; &#123;</span><br><span class="language-xml">                return (</span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">item-node</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;this.name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                   <span class="hljs-attr">option</span>=<span class="hljs-string">&#123;itemData&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">this.name</span>&#125;<span class="hljs-attr">_</span>$&#123;<span class="hljs-attr">itemData.value</span>&#125;<span class="hljs-attr">_</span>$&#123;<span class="hljs-attr">index</span>&#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">                  /&gt;</span></span><br><span class="language-xml">                )</span><br><span class="language-xml">              &#125;)</span><br><span class="language-xml">            &#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>      )<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// itemNode.vue</span><br>&lt;script&gt;<br>  <span class="hljs-keyword">import</span> refs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./refs.js&#x27;</span><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;itemNode&#x27;</span>,<br><br>    <span class="hljs-comment">// 接受参数</span><br>    <span class="hljs-attr">props</span>: &#123;<br>      <span class="hljs-attr">option</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,<br>        <span class="hljs-title function_">default</span>(<span class="hljs-params"></span>)&#123;<br>          <span class="hljs-keyword">return</span> &#123;&#125;<br>        &#125;<br>      &#125;,<br><br>      <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>    &#125;<br><br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">let</span> cid = <span class="hljs-variable language_">this</span>.<span class="hljs-property">cid</span> || (<span class="hljs-string">&#x27;item&#x27;</span> + ++count)<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">expand</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">level</span>: (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$parent</span>.<span class="hljs-property">level</span> || <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">indent</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">checked</span>:  <span class="hljs-literal">false</span>,<br>        cid<br>      &#125;<br>    &#125;,<br><br>    <span class="hljs-attr">computed</span>: &#123;<br>      <span class="hljs-title function_">hasChild</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> !!<span class="hljs-variable language_">this</span>.<span class="hljs-property">option</span>.<span class="hljs-property">children</span><br>      &#125;<br>    &#125;,<br><br>    <span class="hljs-attr">methods</span>: &#123;<br>      <span class="hljs-title function_">handleClickExpand</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">expand</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">expand</span><br>      &#125;,<br>      <span class="hljs-title function_">handleClickItem</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span><br>      &#125;,<br>      <span class="hljs-title function_">setDefault</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> tree = refs.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cid</span>)<br>        <span class="hljs-keyword">let</span> _value = tree.<span class="hljs-property">value</span><br><br>        <span class="hljs-keyword">if</span>(_value.<span class="hljs-title function_">indexOf</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">option</span>.<span class="hljs-property">value</span> &gt; -<span class="hljs-number">1</span>)) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span> = <span class="hljs-literal">true</span><br>        &#125;<br>      &#125;<br>    &#125;,<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#123;[</span></span></span><br><span class="hljs-tag"><span class="language-xml">          &#x27;<span class="hljs-attr">tree-item</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">this.checked</span> &amp;&amp; &#x27;<span class="hljs-attr">is-checked</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">        ]&#125;&gt;</span></span><br><span class="language-xml">          // 展开箭头</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">           <span class="hljs-attr">class</span>=<span class="hljs-string">&#123;[</span></span></span><br><span class="hljs-tag"><span class="language-xml">            &#x27;<span class="hljs-attr">arrow</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">this.expand</span> ? &#x27;<span class="hljs-attr">expand</span>&#x27; <span class="hljs-attr">:</span> &#x27;&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">           ]&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">display:</span> <span class="hljs-attr">this.hasChild</span> ? &#x27;<span class="hljs-attr">block</span>&#x27; <span class="hljs-attr">:</span> &#x27;&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">            &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">           <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClickExpand&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">         &gt;</span>+<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">          // 节点-标题</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">class</span>=<span class="hljs-string">&#123;[</span>&#x27;<span class="hljs-attr">v-tree__title</span>&#x27;]&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">paddingLeft:</span> (<span class="hljs-attr">this.level</span> * <span class="hljs-attr">this.indent</span>) + &#x27;<span class="hljs-attr">px</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">            &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClickItem&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          &gt;</span></span><br><span class="language-xml">            &#123;this.option.text&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">          // 子节点</span><br><span class="language-xml">          &#123;</span><br><span class="language-xml">            this.hasChild &amp;&amp; (</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">ul</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;v-tree__child&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                  <span class="hljs-attr">display:</span> <span class="hljs-attr">this.expand</span> ? &#x27;<span class="hljs-attr">block</span>&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">node</span>&#x27;</span></span><br><span class="hljs-tag"><span class="language-xml">                &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">              &gt;</span></span><br><span class="language-xml">                &#123;</span><br><span class="language-xml">                  this.option.children.map((itemData, index) =&gt; &#123;</span><br><span class="language-xml">                    return <span class="hljs-tag">&lt;<span class="hljs-name">item-node</span></span></span><br><span class="hljs-tag"><span class="language-xml">                      <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;this.name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                      <span class="hljs-attr">option</span>=<span class="hljs-string">&#123;itemData&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                      <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">this.name</span>&#125;<span class="hljs-attr">_</span>$&#123;<span class="hljs-attr">itemData.value</span>&#125;<span class="hljs-attr">_</span>$&#123;<span class="hljs-attr">index</span>&#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">                    /&gt;</span></span><br><span class="language-xml">                  &#125;)</span><br><span class="language-xml">                &#125;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            )</span><br><span class="language-xml">          &#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      )</span><br><span class="language-xml">    &#125;</span><br><span class="language-xml">  &#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// refs.js</span><br><span class="hljs-comment">// 做树交互逻辑的：父级选中联动子级选中</span><br><br><span class="hljs-comment">// 对整棵树进行抽象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ref</span> &#123;<br>  <span class="hljs-comment">// options: 配置项</span><br>  <span class="hljs-comment">// tree: 树本身</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options, tree</span>) &#123;<br>    <span class="hljs-keyword">let</span> name = <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = options.<span class="hljs-property">name</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tree</span> = tree<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span> = &#123;&#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>[name] = <span class="hljs-variable language_">this</span><br>  &#125;<br><br>  <span class="hljs-comment">// 根据 id 获取节点或树</span><br>  <span class="hljs-title function_">get</span>(<span class="hljs-params">tid</span>) &#123;<br>    <span class="hljs-keyword">return</span> tid ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>[tid] : <span class="hljs-variable language_">this</span>.<span class="hljs-property">tree</span><br>  &#125;<br><br>  <span class="hljs-comment">// 添加节点实例</span><br>  <span class="hljs-title function_">set</span>(<span class="hljs-params">vm</span>) &#123;<br>    <span class="hljs-keyword">let</span> cid = vm.<span class="hljs-property">cid</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>[cid] = vm<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 一整颗树</span><br><span class="hljs-keyword">let</span> refs = &#123;&#125;<br><br><span class="hljs-comment">// 初始化工厂函数</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">init</span> = (<span class="hljs-params">options, tree</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> name = options.<span class="hljs-property">name</span><br><br>  <span class="hljs-keyword">if</span>(!refs[name]) &#123;<br>    <span class="hljs-comment">// 如果 refs[name] 没值，则生成一颗树</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ref</span>(options, tree)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> refs[name]<br>&#125;<br><br><span class="hljs-comment">// 销毁实例</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">destroy</span> = (<span class="hljs-params">name</span>) =&gt; &#123;<br>  refs[name] &amp;&amp; <span class="hljs-keyword">delete</span> refs[name]<br>&#125;<br><br><span class="hljs-comment">// 获取</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">get</span> = (<span class="hljs-params">name, cid</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> refs[name] &amp;&amp; refs[name].<span class="hljs-title function_">get</span>(cid)<br>&#125;<br><br><span class="hljs-comment">// 设置</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">set</span> = (<span class="hljs-params">name, vm</span>) =&gt; &#123;<br>  refs[name] &amp;&amp; refs[name].<span class="hljs-title function_">set</span>(vm)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  init,<br>  destroy,<br>  get,<br>  set<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-3、ES6 详解</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/2-3%E3%80%81ES6%20%E8%AF%A6%E8%A7%A3/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/2-3%E3%80%81ES6%20%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>用于定义常量的，初始化时必须赋值<br>特点：</p><ol><li>不允许重复赋值<ol><li>对于基础类型后续的值不可更改</li><li>对于复杂类型后续的引用地址不可更改，但其中的值可以更改</li></ol></li><li>有块级作用域</li><li>存在暂时性死区</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">LIMIT</span> = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">OBJ_MAP</span> = &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">10</span>,<br>  <span class="hljs-attr">y</span>: <span class="hljs-number">20</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">OBJ_ARRAY</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br><span class="hljs-comment">// LIMIT = 20; // Uncaught TypeError: Assignment to constant variable.</span><br><span class="hljs-variable constant_">OBJ_MAP</span>.<span class="hljs-property">z</span> = <span class="hljs-number">30</span>; <span class="hljs-comment">// &#123;&quot;x&quot;:10,&quot;y&quot;:20,&quot;z&quot;:30&#125;</span><br><span class="hljs-variable constant_">OBJ_ARRAY</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>); <span class="hljs-comment">// [1, 2, 3, 4]</span><br><span class="hljs-variable constant_">OBJ_MAP</span> = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">10</span> &#125;; <span class="hljs-comment">// Uncaught TypeError: Assignment to constant variable.</span><br><span class="hljs-variable constant_">OBJ_ARRAY</span> = [<span class="hljs-number">9</span>]; <span class="hljs-comment">// Uncaught TypeError: Assignment to constant variable.</span><br></code></pre></td></tr></table></figure><h2 id="面试点"><a href="#面试点" class="headerlink" title="面试点"></a>面试点</h2><h3 id="在-ES5-中，如何模拟一个常量的-不允许重复赋值"><a href="#在-ES5-中，如何模拟一个常量的-不允许重复赋值" class="headerlink" title="在 ES5 中，如何模拟一个常量的[不允许重复赋值]"></a>在 ES5 中，如何模拟一个常量的[不允许重复赋值]</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">NUMBER</span> = <span class="hljs-number">10</span>;<br><span class="hljs-variable constant_">NUMBER</span> = <span class="hljs-number">20</span>; <span class="hljs-comment">// 不报错，代码有效的</span><br><br><span class="hljs-comment">// 模拟操作 - Object.defineProperty(...)</span><br><br><span class="hljs-comment">// 无报错版</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">window</span>, <span class="hljs-string">&quot;NUMBER2&quot;</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">10</span>,<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ NUMBER2 ] &gt;&quot;</span>, <span class="hljs-title class_">NUMBER2</span>); <span class="hljs-comment">// 10</span><br><br><span class="hljs-title class_">NUMBER2</span> = <span class="hljs-number">20</span>; <span class="hljs-comment">// 不报错</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ NUMBER2 ] &gt;&quot;</span>, <span class="hljs-title class_">NUMBER2</span>); <span class="hljs-comment">// 10</span><br><br><span class="hljs-comment">// 有报错版</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">window</span>, <span class="hljs-string">&quot;NUMBER3&quot;</span>, &#123;<br>  <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>  &#125;,<br>  <span class="hljs-title function_">set</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Assignment to constant variable&quot;</span>);<br>  &#125;,<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ NUMBER3 ] &gt;&quot;</span>, <span class="hljs-title class_">NUMBER3</span>); <span class="hljs-comment">// 10</span><br><br><span class="hljs-title class_">NUMBER3</span> = <span class="hljs-number">20</span>; <span class="hljs-comment">// 报错: Uncaught Error: Assignment to constant variable</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ NUMBER3 ] &gt;&quot;</span>, <span class="hljs-title class_">NUMBER3</span>); <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure><h3 id="在-ES5-中，如何模拟块级作用域"><a href="#在-ES5-中，如何模拟块级作用域" class="headerlink" title="在 ES5 中，如何模拟块级作用域"></a>在 ES5 中，如何模拟块级作用域</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-keyword">var</span> xsdw = <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ xsdw ] &gt;&quot;</span>, xsdw); <span class="hljs-comment">// 10</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-keyword">const</span> ghnm = <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ ghnm ] &gt;&quot;</span>, ghnm); <span class="hljs-comment">// 报错：Uncaught ReferenceError: ghnm is not defined</span><br><br><span class="hljs-comment">// 模拟操作 - IFEE</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> iws = <span class="hljs-number">10</span>;<br>  &#125;)();<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ iws ] &gt;&quot;</span>, iws); <span class="hljs-comment">// 报错：Uncaught ReferenceError: iws is not defined</span><br></code></pre></td></tr></table></figure><h3 id="对于复杂类型，是用-const-还是-let？"><a href="#对于复杂类型，是用-const-还是-let？" class="headerlink" title="对于复杂类型，是用 const 还是 let？"></a>对于复杂类型，是用 const 还是 let？</h3><p>答案：const<br>对于复杂类型，用 const 后将不允许对其重新覆盖(引用地址不可变)，但不会限制值的更改<br>一句话：<code>能用 const 的坚决不用 let</code></p><h3 id="如何对复杂类型常量化"><a href="#如何对复杂类型常量化" class="headerlink" title="如何对复杂类型常量化"></a>如何对复杂类型常量化</h3><p>考察点：<code>Object.freeze(obj)</code><br>官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">Object.freeze() - JavaScript | MDN</a><br>被冻结的对象不能再被更改：不能添加新的属性，不能移除现有的属性，不能更改它们的可枚举性、可配置性、可写性或值，对象的原型也不能被重新指定<br>缺点：只能冻结根层属性，对内嵌的复杂类型无法冻结<br>解决方案：针对多层嵌套的复杂类型，手动循环冻结</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepFreeze</span>(<span class="hljs-params">_obj</span>) &#123;<br>  <span class="hljs-keyword">const</span> _freeze = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(_obj);<br><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(_freeze).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (_freeze[key] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>) &#123;<br>      _freeze[key] = <span class="hljs-title function_">deepFreeze</span>(_freeze[key]);<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> _freeze;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h1><p>解开结构<br>对象解构：{}<br>数组解构: []</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lisi&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> &#125;<br><span class="hljs-keyword">const</span> &#123; name, age &#125; = obj<br><span class="hljs-comment">// name: &#x27;lisi&#x27;</span><br><span class="hljs-comment">// age: 25</span><br><br><span class="hljs-keyword">const</span> &#123; name, ...obj2 &#125; = obj <span class="hljs-comment">// 剩余解构：剩余的以对象形式的放到 obj2 内，不再包含原型链</span><br><span class="hljs-comment">// name: &#x27;lisi&#x27;</span><br><span class="hljs-comment">// obj2: &#123; age: 25 &#125;</span><br><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>]<br><span class="hljs-keyword">const</span> [a, b, c] = arr<br><span class="hljs-comment">// a: 100</span><br><span class="hljs-comment">// b: 200</span><br><span class="hljs-comment">// c: 300</span><br><br><span class="hljs-keyword">const</span> [a, ...b] = arr <span class="hljs-comment">// 剩余解构：剩余的以数组形式的放到 b 内，不再包含原型链</span><br><span class="hljs-comment">// a: 100</span><br><span class="hljs-comment">// b: [200, 300]</span><br></code></pre></td></tr></table></figure><p>解构操作的本质算是取值的语法糖</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> &#123; name, age &#125; = obj<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">const</span> name = obj.<span class="hljs-property">name</span><br><span class="hljs-keyword">const</span> age = obj.<span class="hljs-property">age</span><br><br><span class="hljs-keyword">const</span> &#123; name, ...obj2 &#125; = obj<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">const</span> name = obj.<span class="hljs-property">name</span><br><span class="hljs-keyword">const</span> obj2 = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(&#123;&#125;)<br>obj2.<span class="hljs-property">age</span> = obj.<span class="hljs-property">age</span><br><span class="hljs-comment">// 更多属性...</span><br><br><span class="hljs-keyword">const</span> [a, b, c] = arr<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">const</span> a = arr[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">const</span> b = arr[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">const</span> c = arr[<span class="hljs-number">2</span>]<br><br><span class="hljs-keyword">const</span> [a, ...b] = arr<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">const</span> a = arr[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">const</span> b = arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>数组解构能很方便的进行变量交换</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 以前的逻辑</span><br><span class="hljs-keyword">let</span> hj = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> jh = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">let</span> _c = <span class="hljs-number">0</span>;<br>_c = hj;<br>hj = jh;<br>jh = _c;<br><br><span class="hljs-comment">// 运用数组解构后</span><br><span class="hljs-keyword">let</span> kj = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> jk = <span class="hljs-number">2</span>;<br>[kj, jk] = [jk, kj];<br></code></pre></td></tr></table></figure><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 普通函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>) &#123;<br> <span class="hljs-keyword">return</span> x + y<br>&#125;<br><span class="hljs-keyword">const</span> add = <span class="hljs-keyword">function</span>(<span class="hljs-params">x, y</span>) &#123;<br> <span class="hljs-keyword">return</span> x + y<br>&#125;<br><br><span class="hljs-comment">// 箭头函数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">x, y</span>) =&gt; &#123;<br> <span class="hljs-keyword">return</span> x + y<br>&#125;<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">x, y</span>) =&gt; x + y<br></code></pre></td></tr></table></figure><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>没有自己的 this，它的 this 取决于定义时上下文<ol><li>所以就不能用于构造函数</li></ol></li><li>没有内置的 arguments</li></ol><h1 id="class"><a href="#class" class="headerlink" title="class"></a>class</h1><h2 id="基础-2"><a href="#基础-2" class="headerlink" title="基础"></a>基础</h2><p>常用语法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// class 声明</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">10</span> <span class="hljs-comment">// 属性</span><br>  <span class="hljs-title function_">getX</span>(<span class="hljs-params"></span>)&#123;&#125; <span class="hljs-comment">// 方法</span><br>&#125;<br><br><span class="hljs-comment">// class 表达式</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Person2</span> = <span class="hljs-keyword">class</span> &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">10</span> <span class="hljs-comment">// 属性</span><br>  <span class="hljs-title function_">getX</span>(<span class="hljs-params"></span>)&#123;&#125; <span class="hljs-comment">// 方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>完整语法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// class 声明：不允许再次声明已经存在的类；不可以提升</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">name</span> [<span class="hljs-keyword">extends</span> otherClassName] &#123;<br>  <span class="hljs-comment">// class body</span><br>  [key]: value <span class="hljs-comment">// 属性，将作为实例本身的属性</span><br>  [key]() &#123;&#125; <span class="hljs-comment">// 方法，，将作为实例原型上的方法，实例本身不具备该的方法</span><br> <span class="hljs-keyword">static</span> [key]: <span class="hljs-built_in">any</span> <span class="hljs-comment">// 静态[属性/方法](不可枚举)，作为类本身的[属性/方法]</span><br>&#125;<br><br><br><span class="hljs-comment">// class 表达式：可以是命名的，也可以是匿名的；允许你重新定义类</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyClass</span> = <span class="hljs-keyword">class</span> [className] [<span class="hljs-keyword">extends</span> otherClassName] &#123;<br>  <span class="hljs-comment">// class body</span><br>  [key]: value <span class="hljs-comment">// 属性，将作为实例本身的属性</span><br>  [key]() &#123;&#125; <span class="hljs-comment">// 方法，，将作为实例原型上的方法，实例本身不具备该的方法</span><br> <span class="hljs-keyword">static</span> [key]: <span class="hljs-built_in">any</span> <span class="hljs-comment">// 静态[属性/方法](不可枚举)，作为类本身的[属性/方法]</span><br>&#125;<br></code></pre></td></tr></table></figure><p>场景模拟</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// class 时代</span><br><span class="hljs-comment">// 类声明</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Course</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">teacher, course</span>) &#123;<br>    <span class="hljs-comment">// 作为实例的属性</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">teacher</span> = teacher;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">course</span> = course;<br>  &#125;<br><br>  <span class="hljs-comment">// 作为实例的属性</span><br>  age = <span class="hljs-number">29</span><br><br>  <span class="hljs-comment">// 作为实例原型链上的方法</span><br>  <span class="hljs-title function_">getCourse</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">teacher</span> + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">course</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 作为类的方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getXX</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><span class="hljs-comment">// 实例 1</span><br><span class="hljs-keyword">const</span> course3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Course</span>(<span class="hljs-string">&quot;xx&quot;</span>, <span class="hljs-string">&quot;ES6&quot;</span>);<br><span class="hljs-comment">// 实例 2</span><br><span class="hljs-keyword">const</span> course4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Course</span>(<span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-string">&quot;ES7&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ course3.getCourse() ] &gt;&quot;</span>, course3.<span class="hljs-title function_">getCourse</span>()); <span class="hljs-comment">// xx:ES6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ course4.getCourse() ] &gt;&quot;</span>, course4.<span class="hljs-title function_">getCourse</span>()); <span class="hljs-comment">// yy:ES7</span><br><br><span class="hljs-comment">// function 时代</span><br><span class="hljs-comment">// 构造函数声明</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Course</span>(<span class="hljs-params">teacher, course</span>) &#123;<br>  <span class="hljs-comment">// 作为实例的属性</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">teacher</span> = teacher;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">course</span> = course;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = <span class="hljs-number">29</span><br>&#125;<br><span class="hljs-comment">// 作为实例原型链上的方法</span><br><span class="hljs-title class_">Course</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getCourse</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">teacher</span> + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">course</span>;<br>&#125;;<br><span class="hljs-comment">// 作为构造函数的方法</span><br><span class="hljs-title class_">Course</span>.<span class="hljs-property">getXX</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-comment">// 实例 1</span><br><span class="hljs-keyword">const</span> course1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Course</span>(<span class="hljs-string">&quot;xx&quot;</span>, <span class="hljs-string">&quot;ES6&quot;</span>);<br><span class="hljs-comment">// 实例 2</span><br><span class="hljs-keyword">const</span> course2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Course</span>(<span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-string">&quot;ES7&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ course1.getCourse() ] &gt;&quot;</span>, course1.<span class="hljs-title function_">getCourse</span>()); <span class="hljs-comment">// xx:ES6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ course2.getCourse() ] &gt;&quot;</span>, course2.<span class="hljs-title function_">getCourse</span>()); <span class="hljs-comment">// yy:ES7</span><br></code></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>适配器模式，封装核心</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Utils</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">core</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_main</span> = core;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span> = <span class="hljs-string">&quot;my_utils_name&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">name</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">_main</span>.<span class="hljs-property">name</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">core</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_main</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 封装了下 lodash</span><br><span class="hljs-keyword">const</span> utils = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Utils</span>(_);<br></code></pre></td></tr></table></figure><h2 id="面试点-1"><a href="#面试点-1" class="headerlink" title="面试点"></a>面试点</h2><h3 id="class-的类型是什么？"><a href="#class-的类型是什么？" class="headerlink" title="class 的类型是什么？"></a>class 的类型是什么？</h3><p><code>typeof class</code> 为 <code>&#39;function&#39;</code></p><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>处理异步的一种方式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Promise 的 A+ 标准源码</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PENDING</span> = <span class="hljs-string">&quot;PENDING&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">REJECTED</span> = <span class="hljs-string">&quot;REJECTED&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">FULFILLED</span> = <span class="hljs-string">&quot;FULFILLED&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myPromise</span> &#123;<br>  value = <span class="hljs-literal">null</span>;<br>  error = <span class="hljs-literal">null</span>;<br>  status = <span class="hljs-variable constant_">PENDING</span>;<br><br>  onFulfilledCallbacks = [];<br>  onRejectedCallbacks = [];<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">executor</span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">resolve</span> = (<span class="hljs-params">value</span>) =&gt; &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> = <span class="hljs-variable constant_">FULFILLED</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">onFulfilledCallbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> <span class="hljs-title function_">fn</span>());<br>    &#125;;<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">reject</span> = (<span class="hljs-params">error</span>) =&gt; &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">error</span> = error;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> = <span class="hljs-variable constant_">REJECTED</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedCallbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> <span class="hljs-title function_">fn</span>());<br>    &#125;;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-title function_">executor</span>(resolve, reject);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      <span class="hljs-title function_">reject</span>(err);<br>    &#125;<br>  &#125;<br><br>  then = <span class="hljs-function">(<span class="hljs-params">onFulfilled, onRejected</span>) =&gt;</span> &#123;<br>    onFulfilled = <span class="hljs-keyword">typeof</span> onFulfilled === <span class="hljs-string">&quot;function&quot;</span> ? onFulfilled : <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> v;<br>    onRejected =<br>      <span class="hljs-keyword">typeof</span> onRejected === <span class="hljs-string">&quot;function&quot;</span><br>        ? onRejected<br>        : <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">throw</span> error;<br>          &#125;;<br><br>    <span class="hljs-keyword">const</span> promise2 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">myPromise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">FULFILLED</span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">const</span> x = <span class="hljs-title function_">onFulfilled</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>            <span class="hljs-title function_">resolvePromise</span>(promise2, x, resolve, reject);<br>          &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>            <span class="hljs-title function_">reject</span>(err);<br>          &#125;<br>        &#125;, <span class="hljs-number">0</span>);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">REJECTED</span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">const</span> x = <span class="hljs-title function_">onRejected</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>);<br>            <span class="hljs-title function_">resolvePromise</span>(promise2, x, resolve, reject);<br>          &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>            <span class="hljs-title function_">reject</span>(err);<br>          &#125;<br>        &#125;, <span class="hljs-number">0</span>);<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">PENDING</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">onFulfilledCallbacks</span>.<span class="hljs-title function_">push</span>(<br>          <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>              <span class="hljs-keyword">const</span> x = <span class="hljs-title function_">onFulfilled</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>              <span class="hljs-title function_">resolvePromise</span>(promise2, x, resolve, reject);<br>            &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>              <span class="hljs-title function_">reject</span>(err);<br>            &#125;<br>          &#125;, <span class="hljs-number">0</span>)<br>        );<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedCallbacks</span>.<span class="hljs-title function_">push</span>(<br>          <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>              <span class="hljs-keyword">const</span> x = <span class="hljs-title function_">onFulfilled</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>              <span class="hljs-title function_">resolvePromise</span>(promise2, x, resolve, reject);<br>            &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>              <span class="hljs-title function_">reject</span>(err);<br>            &#125;<br>          &#125;, <span class="hljs-number">0</span>)<br>        );<br>      &#125;<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> promise2;<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">resolvePromise</span>(<span class="hljs-params">promise2, x, resolve, reject</span>) &#123;<br>  <span class="hljs-keyword">if</span> (promise2 === x) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&quot;循环引用&quot;</span>));<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> called = <span class="hljs-literal">false</span>;<br><br>  <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">typeof</span> x === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; x !== <span class="hljs-literal">null</span>) || <span class="hljs-keyword">typeof</span> x === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">let</span> then = x.<span class="hljs-property">then</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> then === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>        then.<span class="hljs-title function_">call</span>(<br>          x,<br>          <span class="hljs-function">(<span class="hljs-params">y</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (called) <span class="hljs-keyword">return</span>;<br>            called = <span class="hljs-literal">true</span>;<br><br>            <span class="hljs-title function_">resolvePromise</span>(promise2, y, resolve, reject);<br>          &#125;,<br>          <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (called) <span class="hljs-keyword">return</span>;<br>            called = <span class="hljs-literal">true</span>;<br><br>            <span class="hljs-title function_">reject</span>(r);<br>          &#125;<br>        );<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(x);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      <span class="hljs-keyword">if</span> (called) <span class="hljs-keyword">return</span>;<br>      called = <span class="hljs-literal">true</span>;<br><br>      <span class="hljs-title function_">reject</span>(e);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">resolve</span>(x);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title function_">myPromise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;);<br></code></pre></td></tr></table></figure><p>ES6（ECMAScript 2015）新增的数组和对象方法有很多，以下是一些常用的方法：</p><h1 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h1><p>官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">Array - JavaScript | MDN</a><br>ES6（ECMAScript 2015）新增的数组些常用的方法：</p><ol><li><code>Array.from()</code>: 用于将类数组对象或可遍历对象转为真正的数组。</li><li><code>Array.of()</code>: 用于将一组值转为数组。<ol><li><code>Array.of(&#39;foo&#39;, 2, &#39;bar&#39;, true);// [&quot;foo&quot;, 2, &quot;bar&quot;, true]</code></li></ol></li><li><code>copyWithin()</code>: 用于在当前数组内部，将指定位置的成员复制到其他位置。</li><li><code>fill()</code>: 用于填充数组。</li><li><code>find()</code>: 返回数组中第一个满足条件的元素。</li><li><code>findIndex()</code>: 返回数组中第一个满足条件的元素的下标。</li><li><code>includes()</code>: 检索数组是否包含某个值，返回布尔值。</li><li><code>entries()</code>: 帮助数组遍历每一个 key 值与 value 值。</li><li><code>keys()</code>: 帮助数组遍历所有的 key 值。</li><li><code>values()</code>: 帮助数组遍历所有的 value 值。</li></ol><h1 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h1><p>官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object">Object - JavaScript | MDN</a><br>ES6（ECMAScript 2015）新增的对象常用的方法：</p><ol><li><code>Object.assign()</code>: 用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。</li><li><code>Object.keys()</code>: 返回一个由给定对象的自身可枚举属性组成的数组。</li><li><code>Object.getOwnPropertyNames()</code>: 返回一个由指定对象的所有自身属性（包括不可枚举属性但不包括 Symbol 值作为名称的属性）的属性名（包括不可枚举属性）组成的数组。</li><li><code>Object.getOwnPropertySymbols()</code>: 返回一个由指定对象的所有自身 Symbol 属性值的属性名组成的 Array。</li><li><code>Object.is()</code>: 用来检测两个值是否是同一个对象</li><li><code>Object.setPrototypeOf()</code>: 设置一个对象的内部[[Prototype]]链接。</li><li><code>Object.values()</code>: 返回一个由给定对象的所有自身属性的值组成的数组。</li><li><code>Object.entries()</code>: 返回一个由给定对象的所有自身属性的键值对组成的数组。</li><li><code>Object.get()</code>: 获取对象的属性值。</li><li><code>Object.set()</code>: 设置对象的属性值并返回该对象。</li><li><code>Object.create()</code>: 使用给定的原型和可选的属性描述符创建一个新的对象。</li><li><code>Object.defineProperty()</code>: 在对象上定义一个新的属性，或修改一个对象的现有属性，并返回这个对象。</li><li><code>Object.defineProperties()</code>: 在一个对象上定义一个直接以该对象为基础的对象的新属性和&#x2F;或修改对象的现有属性的性质。</li><li><code>Object.freeze()</code>: 防止对象的属性被更改，并防止对象被扩展。</li><li><code>Object.seal()</code>: 防止对象的属性被删除，并防止新的属性被添加到对象中。</li><li><code>Object.preventExtensions()</code>: 防止新属性添加到对象中，但允许现有属性的修改。</li></ol><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a>尾调用</h2><p>一个函数执行结果作为另一个函数的返回值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">A</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">B</span>(<span class="hljs-params"><span class="hljs-built_in">number</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">A</span>(<span class="hljs-built_in">number</span>)<br>&#125;<br><span class="hljs-keyword">const</span> num = <span class="hljs-title function_">B</span>(<span class="hljs-number">1</span>)<br><span class="hljs-comment">// 一个函数执行结果(A)作为另一个函数(B)的返回值(return)</span><br></code></pre></td></tr></table></figure><p>尾调用场景</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 斐波那契函数 - 递归尾调用</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">return</span> n;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">fib</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-title function_">fib</span>(n - <span class="hljs-number">2</span>); <span class="hljs-comment">// 递归 + 计算</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 由于是[递归 + 计算]，调用时会存在 压栈 的情况</span><br><span class="hljs-comment">// fib 每次调用时，都会进栈，等 fib 执行完毕再后出栈，但由于是递归调用的，如果 n 很大</span><br><span class="hljs-comment">// 则栈中存在大量的 fib，则形成了 压栈</span><br><span class="hljs-comment">// 改成如下形式则可以优化</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">fibImpl</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, n)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fibImpl</span>(<span class="hljs-params">a, b, n</span>) &#123;<br>  <span class="hljs-keyword">if</span>(a === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> a<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">fibImpl</span>(b, a + b, n - <span class="hljs-number">1</span>) <span class="hljs-comment">// 自递归，JS 会进行尾调用优化</span><br>&#125;<br><br><span class="hljs-comment">// 尾调用优化</span><br><span class="hljs-comment">// 如果是单纯的自递归，没有计算的话，JS 就会自己进行尾调用优化，优化如下：</span><br><span class="hljs-comment">// 递归调用不会保留任何状态或局部变量，因此可以重用当前的调用栈帧，而无需创建新的栈帧</span><br><span class="hljs-comment">// 即 重复使用一个栈帧</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-2、TS 实战</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/2-2%E3%80%81TS%20%E5%AE%9E%E6%88%98/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/2-2%E3%80%81TS%20%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><p>定义：描述数据的数据<br>通过给类、方法指定&#x2F;定义属性进一步丰富它的形态<br>元数据的使用范围通常为对象、类、方法<br>作用：</p><ul><li>扩展已有的属性形态</li><li>不改变本身的代码逻辑</li></ul><p>场景举例：<br>在实际业务中，存在老业务的迭代或扩展，这种情况下可以使用<code>元数据</code>进行扩展</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 老业务：course 函数返回一个字符串，代表课程名称</span><br><span class="hljs-keyword">let</span> course = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ts 实战&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// 新业务：course 函数要拥有课程时长、上课老师等属性</span><br><br></code></pre></td></tr></table></figure><p>扩展方法：</p><ol><li>采用原型链的思路来实现，通过 Function.prototype 实现<ol><li>隐蔽性太高，不易查找</li><li>维护成本大，协作效率低</li><li>对象的操作不统一</li></ol></li></ol><p>在 JS 中，对象的操作一直都是不统一的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 创建对象</span><br><span class="hljs-keyword">let</span> obj = &#123;&#125;<br><br><span class="hljs-comment">// 新增属性</span><br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;lisi&#x27;</span><br><br><span class="hljs-comment">// 更改属性</span><br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span><br><br><span class="hljs-comment">// 删除属性</span><br><span class="hljs-keyword">delete</span> obj.<span class="hljs-property">name</span><br><br><span class="hljs-comment">// 获取属性</span><br>obj.<span class="hljs-property">name</span><br><br><span class="hljs-comment">// 合并对象</span><br> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(obj1, obj2)<br><br><span class="hljs-comment">// 可以发现，对象的不同操作语法是各式各样的</span><br></code></pre></td></tr></table></figure><p>在 TS 里面，就有一种统一的操作对象的方式：<code>Reflect</code><br>元数据的实现是通过<code>Reflect + metadata</code></p><h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><p>官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">Reflect - JavaScript | MDN</a><br>一种统一的操作对象的方式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> obj = &#123;&#125;<br><br><span class="hljs-comment">// 新增/更改属性；参数：目标对象，属性名称，属性描述；返回值：boolean(是否操作成功)</span><br><span class="hljs-comment">// Reflect.defineProperty(target, propertyKey, attributes)</span><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&#x27;name&#x27;</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;lisi&#x27;</span> &#125;) <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&#x27;age&#x27;</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">27</span> &#125;) <span class="hljs-comment">// true</span><br><span class="hljs-comment">// obj: &#123; name: &#x27;lisi&#x27;, age: 27 &#125;</span><br><span class="hljs-comment">// 其中的 name|age 是不可操作的(configurable 默认为 false)</span><br><br><span class="hljs-comment">// 新增/更改属性；参数：目标对象，属性名称，属性值；返回值：boolean(是否操作成功)</span><br><span class="hljs-comment">// Reflect.set(target, propertyKey, value)</span><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(obj, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;四川成都&#x27;</span>)<br><span class="hljs-comment">// obj: &#123; name: &#x27;lisi&#x27;, age: 27, address: &#x27;四川成都&#x27;&#125;</span><br><span class="hljs-comment">// 其中的 address 是可操作的(configurable 默认为 true)</span><br><br><span class="hljs-comment">// 获取属性；参数：目标对象，属性名称；返回值：属性的值</span><br><span class="hljs-comment">// Reflect.get(target, propertyKey)</span><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(obj, <span class="hljs-string">&#x27;name&#x27;</span>) <span class="hljs-comment">// &#x27;lisi&#x27;</span><br><br><span class="hljs-comment">// 删除属性；参数：目标对象，属性名称；返回值：boolean(是否操作成功)</span><br><span class="hljs-comment">// Reflect.deleteProperty(target, propertyKey)</span><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteProperty</span>(obj, <span class="hljs-string">&#x27;age&#x27;</span>) <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteProperty</span>(obj, <span class="hljs-string">&#x27;address&#x27;</span>) <span class="hljs-comment">// true</span><br><span class="hljs-comment">// obj: &#123; name: &#x27;lisi&#x27;, age: 27&#125;</span><br></code></pre></td></tr></table></figure><p>这样对象的所有操作都统一使用<code>Reflect</code>来完成：<br>增(<code>Reflect.set(...)</code>)、删(<code>Reflect.deleteProperty(...)</code>)、改(<code>Reflect.set(...)</code>)、查(<code>Reflect.get(...)</code>)</p><h2 id="Metadata"><a href="#Metadata" class="headerlink" title="Metadata"></a>Metadata</h2><p>在 TS 中元数据的具体实现，需要引入一个第三方库<br>再次强调元数据的使用范围可以为对象、类、属性(变量&#x2F;方法)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;reflect-metadata&#x27;</span><br></code></pre></td></tr></table></figure><p>用的前提是：tsconfig.json 开启配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;emitDecoratorMetadata&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineMetadata</span>(<br>  <span class="hljs-attr">metadataKey</span>: <span class="hljs-built_in">any</span>,<br>  <span class="hljs-attr">metadataValue</span>: <span class="hljs-built_in">any</span>,<br>  <span class="hljs-attr">target</span>: <span class="hljs-title class_">Object</span>,<br>  <span class="hljs-attr">propertyKey</span>: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span><br>): <span class="hljs-built_in">void</span><br><span class="hljs-comment">// metadataKey：存储 metadata 的 Key，require</span><br><span class="hljs-comment">// metadataValue：存储 metadata 的 值，require</span><br><span class="hljs-comment">// target：metadata 要绑的目标对象，require</span><br><span class="hljs-comment">// propertyKey：目标对象的属性名，optional</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>  <span class="hljs-keyword">static</span> oldName = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">sayYes</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;好的&quot;</span>;<br>  &#125;<br><br>  name = <span class="hljs-string">&quot;lisi&quot;</span>;<br><br>  <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`你好，我是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>;<br>  &#125;<br>&#125;<br><br><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineMetadata</span>(<span class="hljs-string">&quot;Test_metadataKey1&quot;</span>, <span class="hljs-string">&quot;Test_metadataValue1&quot;</span>, <span class="hljs-title class_">Test</span>);<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineMetadata</span>(<br>  <span class="hljs-string">&quot;Test_public_metadataKey2&quot;</span>,<br>  <span class="hljs-string">&quot;Test_public_metadataValue2&quot;</span>,<br>  <span class="hljs-title class_">Test</span>,<br>  <span class="hljs-string">&quot;name&quot;</span><br>);<br><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineMetadata</span>(<br>  <span class="hljs-string">&quot;Test_static_metadataKey2&quot;</span>,<br>  <span class="hljs-string">&quot;Test_static_metadataValue2&quot;</span>,<br>  <span class="hljs-title class_">Test</span>,<br>  <span class="hljs-string">&quot;oldName&quot;</span><br>);<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineMetadata</span>(<br>  <span class="hljs-string">&quot;Test_public_metadataKey3&quot;</span>,<br>  <span class="hljs-string">&quot;Test_public_metadataValue3&quot;</span>,<br>  <span class="hljs-title class_">Test</span>,<br>  <span class="hljs-string">&quot;sayHello&quot;</span><br>);<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineMetadata</span>(<br>  <span class="hljs-string">&quot;Test_static_metadataKey4&quot;</span>,<br>  <span class="hljs-string">&quot;Test_static_metadataValue4&quot;</span>,<br>  <span class="hljs-title class_">Test</span>,<br>  <span class="hljs-string">&quot;sayYes&quot;</span><br>);<br></code></pre></td></tr></table></figure><h4 id="小细节"><a href="#小细节" class="headerlink" title="小细节"></a>小细节</h4><p>当设置<code>元数据</code>的时候，可以有两种写法：</p><ol><li><code>函数调用形式：Reflect.defineMetadata(...)</code></li><li><code>装饰器形式：@Reflect.metatda(...)</code></li></ol><p>这两种写法都能设置<code>元数据</code>，但针对<code>装饰器形式设置的</code>，对应的获取时就存在一些注意事项</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Reflect</span>.<span class="hljs-title function_">metadata</span>(<span class="hljs-string">&quot;Test_metadataKey1&quot;</span>, <span class="hljs-string">&quot;Test_metadataValue1&quot;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;&#125;<br><br><span class="hljs-comment">// @Reflect.metadata 的写法就是 2-1 TS 详解里面的&quot;类装饰器&quot;，其原理代码大致如下：</span><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-property">metadata</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">metadataKey: <span class="hljs-built_in">string</span>, metadataValue: <span class="hljs-built_in">any</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyKey: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-comment">// 具体的逻辑暂且忽略.........</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="操作类本身"><a href="#操作类本身" class="headerlink" title="操作类本身"></a>操作<code>类</code>本身</h5><h6 id="设置-1"><a href="#设置-1" class="headerlink" title="设置"></a>设置</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Reflect.defineMetadata(...) 设置</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;&#125;<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineMetadata</span>(<span class="hljs-string">&quot;Test_metadataKey1&quot;</span>, <span class="hljs-string">&quot;Test_metadataValue1&quot;</span>, <span class="hljs-title class_">Test</span>);<br><br><span class="hljs-comment">// @Reflect.metadata(...) 设置</span><br><span class="hljs-meta">@Reflect</span>.<span class="hljs-title function_">metadata</span>(<span class="hljs-string">&quot;Test_metadataKey1&quot;</span>, <span class="hljs-string">&quot;Test_metadataValue1&quot;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;&#125;<br><br><span class="hljs-comment">// 以上两种方式是等价的，都是设置元数据到&quot;类&quot;</span><br></code></pre></td></tr></table></figure><h6 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 相同取法</span><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getMetadata</span>(<span class="hljs-string">&quot;Test_metadataKey1&quot;</span>, <span class="hljs-title class_">Test</span>); <span class="hljs-comment">// &quot;Test_metadataValue1&quot;</span><br></code></pre></td></tr></table></figure><h5 id="操作类属性"><a href="#操作类属性" class="headerlink" title="操作类属性"></a>操作<code>类</code>属性</h5><h6 id="设置-2"><a href="#设置-2" class="headerlink" title="设置"></a>设置</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Reflect.defineMetadata(...) 设置</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>  <span class="hljs-keyword">static</span> oldName = <span class="hljs-string">&#x27;zhangsan&#x27;</span><br>  name = <span class="hljs-string">&quot;lisi&quot;</span><br>&#125;<br><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineMetadata</span>(<br>  <span class="hljs-string">&quot;Test_public_metadataKey2&quot;</span>,<br>  <span class="hljs-string">&quot;Test_public_metadataValue2&quot;</span>,<br>  <span class="hljs-title class_">Test</span>,<br>  <span class="hljs-string">&quot;name&quot;</span><br>);<br><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineMetadata</span>(<br>  <span class="hljs-string">&quot;Test_static_metadataKey2&quot;</span>,<br>  <span class="hljs-string">&quot;Test_static_metadataValue2&quot;</span>,<br>  <span class="hljs-title class_">Test</span>,<br>  <span class="hljs-string">&quot;oldName&quot;</span><br>);<br><br><span class="hljs-comment">// @Reflect.metadata(...) 设置</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>  <span class="hljs-meta">@Reflect</span>.<span class="hljs-title function_">metadata</span>(<span class="hljs-string">&quot;Test_static_metadataKey2&quot;</span>, <span class="hljs-string">&quot;Test_static_metadataValue2&quot;</span>)<br>  <span class="hljs-keyword">static</span> oldName = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br><br>  <span class="hljs-meta">@Reflect</span>.<span class="hljs-title function_">metadata</span>(<span class="hljs-string">&quot;Test_public_metadataKey2&quot;</span>, <span class="hljs-string">&quot;Test_public_metadataValue2&quot;</span>)<br>  name = <span class="hljs-string">&quot;lisi&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 咋一看操作是一样的，但其取值对象是不一样</span><br></code></pre></td></tr></table></figure><p>给<code>类</code>的<code>静态属性</code>定义了元数据，取值<code>target</code>为<code>类本身</code><br>给<code>类</code>的<code>动态属性</code>定义了元数据，取值<code>target</code>为<code>类的实例</code></p><h6 id="取值-1"><a href="#取值-1" class="headerlink" title="取值"></a>取值</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getMetadata</span>(<br>  <span class="hljs-string">&quot;Test_static_metadataKey2&quot;</span>,<br>  <span class="hljs-title class_">Test</span>, <span class="hljs-comment">// 这里就必须为类，若为类的实例，则取值结果为 undefined</span><br>  <span class="hljs-string">&quot;oldName&quot;</span><br>); <span class="hljs-comment">// &quot;Test_static_metadataValue2&quot;</span><br><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getMetadata</span>(<br>  <span class="hljs-string">&quot;Test_public_metadataKey2&quot;</span>,<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>(), <span class="hljs-comment">// 这里就必须为类的实例，若为类，则取值结果为 undefined</span><br>  <span class="hljs-string">&quot;name&quot;</span><br>); <span class="hljs-comment">// &quot;Test_public_metadataValue2&quot;</span><br></code></pre></td></tr></table></figure><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getMetadata</span>(<br>  <span class="hljs-attr">metadataKey</span>: <span class="hljs-built_in">any</span>,<br>  <span class="hljs-attr">target</span>: <span class="hljs-title class_">Object</span>,<br>  <span class="hljs-attr">propertyKey</span>: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span><br>): <span class="hljs-built_in">any</span><br><span class="hljs-comment">// metadataKey：存储 metadata 的 Key，require</span><br><span class="hljs-comment">// target：metadata 要绑的目标对象，require</span><br><span class="hljs-comment">// propertyKey：目标对象的属性名，optional</span><br><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getMetadata</span>(<span class="hljs-string">&quot;Test_metadataKey1&quot;</span>, <span class="hljs-title class_">Test</span>); <span class="hljs-comment">// &quot;Test_metadataValue1&quot;</span><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getMetadata</span>(<span class="hljs-string">&quot;Test_public_metadataKey2&quot;</span>, <span class="hljs-title class_">Test</span>, <span class="hljs-string">&quot;name&quot;</span>); <span class="hljs-comment">// &quot;Test_public_metadataValue2&quot;</span><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getMetadata</span>(<span class="hljs-string">&quot;Test_static_metadataKey2&quot;</span>, <span class="hljs-title class_">Test</span>, <span class="hljs-string">&quot;oldName&quot;</span>); <span class="hljs-comment">// &quot;Test_static_metadataValue2&quot;</span><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getMetadata</span>(<span class="hljs-string">&quot;Test_public_metadataKey3&quot;</span>, <span class="hljs-title class_">Test</span>, <span class="hljs-string">&quot;sayHello&quot;</span>); <span class="hljs-comment">// &quot;Test_public_metadataValue3&quot;</span><br></code></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteMetadata</span>(<br>  <span class="hljs-attr">metadataKey</span>: <span class="hljs-built_in">any</span>,<br>  <span class="hljs-attr">target</span>: <span class="hljs-title class_">Object</span>,<br>  <span class="hljs-attr">propertyKey</span>: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span><br>): <span class="hljs-built_in">boolean</span><br><span class="hljs-comment">// metadataKey：存储 metadata 的 Key，require</span><br><span class="hljs-comment">// target：metadata 要绑的目标对象，require</span><br><span class="hljs-comment">// propertyKey：目标对象的属性名，optional</span><br><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteMetadata</span>(<span class="hljs-string">&quot;Test_metadataKey1&quot;</span>, <span class="hljs-title class_">Test</span>); <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteMetadata</span>(<span class="hljs-string">&quot;Test_public_metadataKey2&quot;</span>, <span class="hljs-title class_">Test</span>, <span class="hljs-string">&quot;name&quot;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteMetadata</span>(<span class="hljs-string">&quot;Test_static_metadataKey2&quot;</span>, <span class="hljs-title class_">Test</span>, <span class="hljs-string">&quot;oldName&quot;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteMetadata</span>(<span class="hljs-string">&quot;Test_public_metadataKey3&quot;</span>, <span class="hljs-title class_">Test</span>, <span class="hljs-string">&quot;sayHello&quot;</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>通过上面的<code>设置、获取、删除</code>方法，已基本了解了<code>metadata</code>的使用，并且也成功的在不改动原本数据的情况下，扩展了新的属性与值</p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="服务端场景-路由封装"><a href="#服务端场景-路由封装" class="headerlink" title="服务端场景 - 路由封装"></a>服务端场景 - 路由封装</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// app.ts</span><br><br><span class="hljs-comment">// 一个简单的 app.ts</span><br><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;express&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span>;<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/xxxx&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;xxxx&quot;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Server is running at http://localhost:<span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>按照上述的写法，服务端的路由将会无比的多，并且臃肿和不好管理<br>封装思路：使用面向对象写法，进行更好的归类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// user.ts</span><br><span class="hljs-comment">// 封装用户相关的接口</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Get</span>, <span class="hljs-title class_">Post</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../decorators/methods&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Path</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../decorators/path&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>  <span class="hljs-comment">// 用户查询</span><br>  <span class="hljs-meta">@Get</span><br>  <span class="hljs-meta">@Path</span>(<span class="hljs-string">&quot;/user/info&quot;</span>)<br>  <span class="hljs-title function_">info</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 接口逻辑...</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;info&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 用户登录</span><br>  <span class="hljs-meta">@Post</span><br>  <span class="hljs-meta">@Path</span>(<span class="hljs-string">&quot;/user/login&quot;</span>)<br>  <span class="hljs-title function_">login</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 接口逻辑...</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-title function_">logout</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 接口逻辑...</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;logout&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// decorators/methods.ts</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> methodsKey = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;router:methods&quot;</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Get</span> = (<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyKey: <span class="hljs-built_in">string</span></span>) =&gt; &#123;<br>  <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineMetadata</span>(methodsKey, <span class="hljs-string">&quot;get&quot;</span>, target, propertyKey);<br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Post</span> = (<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyKey: <span class="hljs-built_in">string</span></span>) =&gt; &#123;<br>  <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineMetadata</span>(methodsKey, <span class="hljs-string">&quot;post&quot;</span>, target, propertyKey);<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// decorators/path.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;express&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> pathKey = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;router:path&quot;</span>);<br><br><span class="hljs-comment">// Path 装饰器 - 用在 类的方法 上</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">Path</span> = (<span class="hljs-attr">path</span>: <span class="hljs-built_in">string</span>): <span class="hljs-function"><span class="hljs-params">Function</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    target: <span class="hljs-built_in">Object</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    propertyKey: <span class="hljs-built_in">string</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    desicriptor: PropertyDescriptor</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> &#123;<br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineMetadata</span>(pathKey, path, target, propertyKey);<br><br>    <span class="hljs-comment">// 1、获取方法本身，存一份</span><br>    <span class="hljs-keyword">const</span> oldMethod = desicriptor.<span class="hljs-property">value</span>;<br><br>    <span class="hljs-comment">// 2、边缘检测：无值则直接 return</span><br>    <span class="hljs-keyword">if</span> (!oldMethod) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// 3、覆盖原来的方法</span><br>    desicriptor.<span class="hljs-property">value</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">req: Request, res: Response</span>) &#123;<br>      <span class="hljs-comment">// a. 获取到原方法的参数</span><br>      <span class="hljs-keyword">const</span> params = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, req.<span class="hljs-property">body</span>, req.<span class="hljs-property">query</span>);<br><br>      <span class="hljs-comment">// b. 触发原方法的调用</span><br>      <span class="hljs-keyword">const</span> result = oldMethod.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, params);<br><br>      <span class="hljs-comment">// c. 返回给客户端</span><br>      res.<span class="hljs-title function_">send</span>(result);<br>    &#125;;<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// router.ts</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">User</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./user&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123; methodsKey &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../decorators/methods&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; pathKey &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../decorators/path&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (<span class="hljs-attr">app</span>: <span class="hljs-built_in">any</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-title class_">User</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// app.get(path, fun)</span><br><br>    <span class="hljs-keyword">const</span> method = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getMetadata</span>(methodsKey, user, key);<br><br>    <span class="hljs-keyword">const</span> path = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getMetadata</span>(pathKey, user, key);<br><br>    app[method](path, user); <span class="hljs-comment">// 挂载完成路由监听</span><br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>最终实现的<code>user.ts</code>写法已经跟现在的 nodejs 框架<code>nest.js、midday.js</code>等类似了</p><h2 id="客户端场景-倒计时器"><a href="#客户端场景-倒计时器" class="headerlink" title="客户端场景 - 倒计时器"></a>客户端场景 - 倒计时器</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 需求：写一个自定义时间的倒计时器</span><br><span class="hljs-comment">// 比如：从现在起到明天这个时间点的倒计时，11:59:59</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Countdown</span> &#123;<br>  <span class="hljs-comment">// endTime: 倒计时的终点时间</span><br>  <span class="hljs-comment">// step: 倒计时间隔，单位毫秒</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">endTime: <span class="hljs-built_in">number</span>, step: <span class="hljs-built_in">number</span></span>)&#123;<br>    <span class="hljs-comment">// 待补充...</span><br>  &#125;<br><br>  <span class="hljs-comment">// 待补充...</span><br>&#125;<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">const</span> countdown = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Countdown</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">12</span>, <span class="hljs-number">1000</span>)<br><br>countdown.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;running&#x27;</span>, <span class="hljs-function"><span class="hljs-params">time</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 只要倒计时还未结束，则该函数每间隔 X(初始化传入的值) 秒后会执行</span><br><br>  <span class="hljs-comment">// time: 剩余时间</span><br>  <span class="hljs-comment">// hour: 剩余小时</span><br>  <span class="hljs-comment">// minutes: 剩余分钟</span><br>  <span class="hljs-comment">// seconds: 剩余秒数</span><br>  <span class="hljs-comment">// count: 计时次数</span><br>  <span class="hljs-keyword">const</span> &#123; hour, minutes, seconds, count &#125; = time<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`还剩：<span class="hljs-subst">$&#123;hour&#125;</span>:<span class="hljs-subst">$&#123;minutes&#125;</span>:<span class="hljs-subst">$&#123;seconds&#125;</span>`</span>)<br>&#125;)<br><br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// 还剩：11:59:59</span><br><span class="hljs-comment">// 还剩：11:59:58</span><br><span class="hljs-comment">// ...</span><br><span class="hljs-comment">// 还剩：00:09:09</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 需求：写一个自定义时间的倒计时器</span><br><span class="hljs-comment">// 比如：从现在起到明天这个时间点的倒计时，11:59:59</span><br><br><span class="hljs-comment">// 发布订阅用的</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">EventEmitter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;eventemitter3&quot;</span>;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">CountdownEventMap</span> &#123;<br>  [<span class="hljs-title class_">CountdownEventName</span>.<span class="hljs-property">START</span>]: [];<br>  [<span class="hljs-title class_">CountdownEventName</span>.<span class="hljs-property">RUNNING</span>]: [<span class="hljs-title class_">RemainTimeData</span>];<br>  [<span class="hljs-title class_">CountdownEventName</span>.<span class="hljs-property">STOP</span>]: [];<br>&#125;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CountdownEventName</span> &#123;<br>  <span class="hljs-variable constant_">START</span> = <span class="hljs-string">&quot;start&quot;</span>,<br>  <span class="hljs-variable constant_">STOP</span> = <span class="hljs-string">&quot;stop&quot;</span>,<br>  <span class="hljs-variable constant_">RUNNING</span> = <span class="hljs-string">&quot;running&quot;</span>,<br>&#125;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CountdownStatus</span> &#123;<br>  running,<br>  paused,<br>  stoped,<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">RemainTimeData</span> &#123;<br>  <span class="hljs-attr">hours</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">minutes</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">seconds</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">count</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Countdown</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">EventEmitter</span>&lt;<span class="hljs-title class_">CountdownEventMap</span>&gt; &#123;<br>  <span class="hljs-attr">endTime</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">step</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">remainTime</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">count</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">status</span>: <span class="hljs-title class_">CountdownStatus</span> = <span class="hljs-title class_">CountdownStatus</span>.<span class="hljs-property">stoped</span>;<br><br>  <span class="hljs-comment">// endTime: 倒计时的终点时间</span><br>  <span class="hljs-comment">// step: 倒计时间隔，单位毫秒</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">endTime: <span class="hljs-built_in">number</span>, step = <span class="hljs-number">1e3</span></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-comment">// 待补充...</span><br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">endTime</span> = endTime;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">step</span> = step;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">remainTime</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">start</span>();<br>  &#125;<br><br>  <span class="hljs-comment">// 待补充...</span><br>  <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">emit</span>(<span class="hljs-title class_">CountdownEventName</span>.<span class="hljs-property">START</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> = <span class="hljs-title class_">CountdownStatus</span>.<span class="hljs-property">running</span>;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">countdown</span>();<br>  &#125;<br><br>  <span class="hljs-comment">// 计时操作</span><br>  <span class="hljs-title function_">countdown</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-title class_">CountdownStatus</span>.<span class="hljs-property">running</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">remainTime</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">endTime</span> - <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>(), <span class="hljs-number">0</span>);<br><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++;<br><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">emit</span>(<span class="hljs-title class_">CountdownEventName</span>.<span class="hljs-property">RUNNING</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">calcRemainTimeData</span>());<br><br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">remainTime</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">countdown</span>();<br>        &#125;, <span class="hljs-variable language_">this</span>.<span class="hljs-property">step</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">stop</span>();<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">calcRemainTimeData</span>(): <span class="hljs-title class_">RemainTimeData</span> &#123;<br>    <span class="hljs-keyword">let</span> hours, minutes, seconds, count;<br><br>    count = <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>;<br><br>    <span class="hljs-comment">// 创建一个新的 Date 对象</span><br>    <span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">remainTime</span>);<br><br>    <span class="hljs-comment">// 获取小时、分钟和秒</span><br>    hours = date.<span class="hljs-title function_">getHours</span>();<br>    minutes = date.<span class="hljs-title function_">getMinutes</span>();<br>    seconds = date.<span class="hljs-title function_">getSeconds</span>();<br><br>    <span class="hljs-keyword">return</span> &#123; hours, minutes, seconds, count &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">stop</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">emit</span>(<span class="hljs-title class_">CountdownEventName</span>.<span class="hljs-property">STOP</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> = <span class="hljs-title class_">CountdownStatus</span>.<span class="hljs-property">stoped</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">const</span> countdown = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Countdown</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>, <span class="hljs-number">1000</span>);<br><br>countdown.<span class="hljs-title function_">on</span>(<span class="hljs-title class_">CountdownEventName</span>.<span class="hljs-property">RUNNING</span>, <span class="hljs-function">(<span class="hljs-params">remainTimeData: RemainTimeData</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 只要倒计时还未结束，则该函数每间隔 X(初始化传入的值) 秒后会执行</span><br><br>  <span class="hljs-comment">// remainTimeData: 剩余时间</span><br>  <span class="hljs-comment">// hours: 剩余小时</span><br>  <span class="hljs-comment">// minutes: 剩余分钟</span><br>  <span class="hljs-comment">// seconds: 剩余秒数</span><br>  <span class="hljs-comment">// count: 计时次数</span><br>  <span class="hljs-keyword">const</span> &#123; hours, minutes, seconds, count &#125; = remainTimeData;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`还剩：<span class="hljs-subst">$&#123;hours&#125;</span>:<span class="hljs-subst">$&#123;minutes&#125;</span>:<span class="hljs-subst">$&#123;seconds&#125;</span>`</span>, count);<br>&#125;);<br><br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// 还剩：11:59:59</span><br><span class="hljs-comment">// 还剩：11:59:58</span><br><span class="hljs-comment">// ...</span><br><span class="hljs-comment">// 还剩：00:09:09</span><br><br></code></pre></td></tr></table></figure><h1 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h1><h2 id="元编程"><a href="#元编程" class="headerlink" title="元编程"></a>元编程</h2><p>官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Meta_programming">元编程 - JavaScript | MDN</a><br>使用<code>Reflect 和 Proxy</code>，可以实现<code>元级别</code>的编程(可自定义基本语言操作（例如属性查找、赋值、枚举和函数调用等）)</p><h3 id="Reflect-1"><a href="#Reflect-1" class="headerlink" title="Reflect"></a>Reflect</h3><p>官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">Reflect - JavaScript | MDN</a></p><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p>官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy - JavaScript | MDN</a><br>用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等），并且对应的操作也会转发到这个对象上<br>语法：<code>new Proxy(target, handler)</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> obj = &#123;&#125;<br><br><span class="hljs-keyword">const</span> handler = &#123;<br>  <span class="hljs-comment">// 代理 get 操作(取值)</span><br>  <span class="hljs-title function_">get</span>(<span class="hljs-params">target, propertyKey</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Proxy get&#x27;</span>)<br>    <span class="hljs-keyword">return</span> target[propertyKey]<br>  &#125;,<br>  <span class="hljs-comment">// 代理 set 操作(赋值)</span><br>  <span class="hljs-title function_">set</span>(<span class="hljs-params">target, propertyKey, value</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Proxy set&#x27;</span>)<br>    target[propertyKey] = value<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(obj, handler)<br>p.<span class="hljs-property">a</span> = <span class="hljs-number">1</span> <span class="hljs-comment">// 赋值，打印：Proxy set，并且赋值操作也会转发到 obj 上</span><br><span class="hljs-keyword">const</span> a = p.<span class="hljs-property">a</span> <span class="hljs-comment">// 取值，打印：Proxy get</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj) <span class="hljs-comment">// &#123; a:1 &#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-1、TS 详解</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/2-1%E3%80%81TS%20%E8%AF%A6%E8%A7%A3/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/2-1%E3%80%81TS%20%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>TS 是 JS 的超集：它是完全包含的 JS，并扩展了很多功能<br>比较重要的扩展功能：</p><ul><li>可选静态类型</li><li>基于类的面向对象编程</li></ul><p>特点：</p><ul><li>编写项目维度：<ul><li>更利于架构维护</li><li>支持静态、动态类型监测<ul><li>但 TS 并不是强类型语言<ul><li>什么是强类型：不支持任何隐式的转换</li></ul></li></ul></li></ul></li><li>代码编译维度：支持自主检测</li><li>运行流程维度：编译、检测、产出</li><li>复杂特性：支持模块化、泛型、接口……</li></ul><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>TS 的里面写的类型，仅仅用于编译时进行检测，编译完成的产物里面不会存在</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 编译前</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">inEable</span>: boolean = <span class="hljs-literal">true</span><br><br><span class="hljs-comment">// 编译后</span><br><span class="hljs-keyword">const</span> inEable = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><p>《基础类型》官方文档：<a href="https://typescript.bootcss.com/basic-types.html">https://typescript.bootcss.com/basic-types.html</a></p><h3 id="与-JS-一样的"><a href="#与-JS-一样的" class="headerlink" title="与 JS 一样的"></a>与 JS 一样的</h3><p>boolean、number、string、undefined、null</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">a</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">b</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">c</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">d</span>: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">e</span>: <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><h3 id="与-JS-不一样的"><a href="#与-JS-不一样的" class="headerlink" title="与 JS 不一样的"></a>与 JS 不一样的</h3><h4 id="Array-数组"><a href="#Array-数组" class="headerlink" title="Array - 数组"></a>Array - 数组</h4><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 从内到外，先写类型，再写 []</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Array1</span>: number[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br><span class="hljs-comment">// 从外到内，先写 Array，再写类型 - 数组泛型</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Array2</span>: <span class="hljs-title class_">Array</span>&lt;number&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Array3</span>: <span class="hljs-title class_">Array</span>&lt;any&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;32&quot;</span>, <span class="hljs-literal">true</span>];<br></code></pre></td></tr></table></figure><h5 id="只读数组"><a href="#只读数组" class="headerlink" title="只读数组"></a>只读数组</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 通过 ReadonlyArray&lt;类型&gt; 可以声明只读数组</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Array4</span>: <span class="hljs-title class_">ReadonlyArray</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-title class_">Array4</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">7</span> <span class="hljs-comment">// 改值，TS 会报错：类型“readonly number[]”中的索引签名仅允许读取。ts(2542)</span><br><span class="hljs-title class_">Array4</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>); <span class="hljs-comment">// 新增，TS 会报错：类型“readonly any[]”上不存在属性“push”。ts(2339)</span><br><span class="hljs-title class_">Array4</span>.<span class="hljs-property">length</span> = <span class="hljs-number">40</span>; <span class="hljs-comment">// 改长度，TS 会报错：无法为“length”赋值，因为它是只读属性。ts(2540)</span><br><span class="hljs-title class_">Array4</span>.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">// 删除，TS 会报错：类型“readonly any[]”上不存在属性“splice”。ts(2339)</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Array5</span> = [];<br><span class="hljs-title class_">Array5</span> = <span class="hljs-title class_">Array4</span>; <span class="hljs-comment">// 赋值给其他变量，TS 会报错：类型 &quot;readonly any[]&quot; 为 &quot;readonly&quot;，不能分配给可变类型 &quot;any[]&quot;。ts(4104)</span><br><br><span class="hljs-title class_">Array5</span> = <span class="hljs-title class_">Array4</span> <span class="hljs-keyword">as</span> []; <span class="hljs-comment">// 但可以使用断言重写，使赋值成功</span><br></code></pre></td></tr></table></figure><h5 id="编译结果"><a href="#编译结果" class="headerlink" title="编译结果"></a>编译结果</h5><p>没啥特殊的，就是去掉了类型定义</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 从内到外，先写类型，再写 []</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Array1</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br><span class="hljs-comment">// 从外到内，先写 Array，再写类型 - 数组泛型</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Array2</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Array3</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;32&quot;</span>, <span class="hljs-literal">true</span>];<br></code></pre></td></tr></table></figure><h4 id="Tuple-元组"><a href="#Tuple-元组" class="headerlink" title="Tuple - 元组"></a>Tuple - 元组</h4><p>一种特殊的数组类型，它允许你指定一个固定长度的数组，且数组中每个位置的元素可以有不同的类型。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-title class_">Tuple</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>, <span class="hljs-built_in">boolean</span>];<br><span class="hljs-title class_">Tuple</span> = [<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-number">123</span>, <span class="hljs-literal">true</span>];<br></code></pre></td></tr></table></figure><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ol><li>固定长度： 元组有固定的长度，不能在创建后添加或删除元素。</li><li>类型限制： 元组中的每个位置可以有不同的数据类型，但是一旦定义后，类型不能改变。</li></ol><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><p>函数返回多个值时或者处理一些固定长度的数据结构</p><h5 id="编译结果-1"><a href="#编译结果-1" class="headerlink" title="编译结果"></a>编译结果</h5><p>没啥特殊的，就是去掉了类型定义</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-title class_">Tuple</span>;<br><span class="hljs-title class_">Tuple</span> = [<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-number">123</span>, <span class="hljs-literal">true</span>];<br></code></pre></td></tr></table></figure><h4 id="Enum-枚举"><a href="#Enum-枚举" class="headerlink" title="Enum - 枚举"></a>Enum - 枚举</h4><p>用于定义一组有名字的常量。</p><h5 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// --- 基本使用，默认情况下，是数值，并且从 0 自增</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color1</span> &#123;<br>  <span class="hljs-title class_">Red</span>, <span class="hljs-comment">// 等价于 Red = 0</span><br>  <span class="hljs-title class_">Green</span>, <span class="hljs-comment">// 等价于 Green = 1</span><br>  <span class="hljs-title class_">Blue</span>, <span class="hljs-comment">// 等价于 Blue = 2</span><br>&#125;<br><br><span class="hljs-comment">// 枚举取值：Color.X 或 Color[X]</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">myColor1</span>: <span class="hljs-title class_">Color1</span> = <span class="hljs-title class_">Color1</span>.<span class="hljs-property">Red</span>; <span class="hljs-comment">// 取值时拿的是 = 后面的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myColor1); <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">myColor1_1</span>: <span class="hljs-title class_">Color1</span> = <span class="hljs-title class_">Color1</span>[<span class="hljs-string">&#x27;Green&#x27;</span>]; <span class="hljs-comment">// 取值时拿的是 = 后面的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myColor1_1); <span class="hljs-comment">// 1</span><br><br><span class="hljs-comment">// --- 手动指定数值</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color2</span> &#123;<br>  <span class="hljs-title class_">Red</span> = <span class="hljs-number">3</span>,<br>  <span class="hljs-title class_">Green</span> = <span class="hljs-number">6</span>,<br>  <span class="hljs-title class_">Blue</span> = <span class="hljs-number">9</span>,<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">myColor2</span>: <span class="hljs-title class_">Color2</span> = <span class="hljs-title class_">Color2</span>.<span class="hljs-property">Red</span>; <span class="hljs-comment">// 取值时拿的是 = 后面的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myColor2); <span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// --- 手动指定字符串</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color3</span> &#123;<br>  <span class="hljs-title class_">Red</span> = <span class="hljs-string">&quot;Red&quot;</span>,<br>  <span class="hljs-title class_">Green</span> = <span class="hljs-string">&quot;Green&quot;</span>,<br>  <span class="hljs-title class_">Blue</span> = <span class="hljs-string">&quot;Blue&quot;</span>,<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">myColor3</span>: <span class="hljs-title class_">Color3</span> = <span class="hljs-title class_">Color3</span>.<span class="hljs-property">Red</span>; <span class="hljs-comment">// 取值时拿的是 = 后面的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myColor3); <span class="hljs-comment">// &quot;Red&quot;</span><br><br><span class="hljs-comment">// --- 异构：数值与字符串共存，并且交叉定义，则前一个为数值，后一个数值可不写</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color4</span> &#123;<br>  <span class="hljs-title class_">Red</span>, <span class="hljs-comment">// 等价于 Red = 0</span><br>  <span class="hljs-title class_">Green</span> = <span class="hljs-string">&quot;Green&quot;</span>,<br>  <span class="hljs-title class_">Black</span>, <span class="hljs-comment">// TS 报错：枚举成员必须具有初始化表达式。ts(1061)</span><br>  <span class="hljs-title class_">Blue</span> = <span class="hljs-number">9</span>, <span class="hljs-comment">// 字符串后面的数值必须赋值</span><br>  <span class="hljs-title class_">Yellow</span>, <span class="hljs-comment">// 等价于 Yellow = 10(前一个数值 + 1)；特殊要求：前一个必须是数值，才可省写数值，否则报错</span><br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">myColor4</span>: <span class="hljs-title class_">Color4</span> = <span class="hljs-title class_">Color4</span>.<span class="hljs-property">Red</span>; <span class="hljs-comment">// 取值时拿的是 = 后面的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myColor4); <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">myColor4_2</span>: <span class="hljs-title class_">Color4</span> = <span class="hljs-title class_">Color4</span>.<span class="hljs-property">Green</span>; <span class="hljs-comment">// 取值时拿的是 = 后面的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myColor4_2); <span class="hljs-comment">// &quot;Green&quot;</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">myColor4_3</span>: <span class="hljs-title class_">Color4</span> = <span class="hljs-title class_">Color4</span>.<span class="hljs-property">Blue</span>; <span class="hljs-comment">// 取值时拿的是 = 后面的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myColor4_3); <span class="hljs-comment">// 9</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">myColor4_4</span>: <span class="hljs-title class_">Color4</span> = <span class="hljs-title class_">Color4</span>.<span class="hljs-property">Yellow</span>; <span class="hljs-comment">// 取值时拿的是 = 后面的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myColor4_4); <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure><h5 id="反向映射"><a href="#反向映射" class="headerlink" title="反向映射"></a>反向映射</h5><p>通过枚举的值，反向拿 key，写法类似于数组下标取值，即 Color[x]，x 为枚举定义时某个 key ‘&#x3D;’ 后面的值<br>限制：仅支持值为数值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color5</span> &#123;<br>  <span class="hljs-title class_">Red</span>, <span class="hljs-comment">// 等价于 Red = 0</span><br>  <span class="hljs-title class_">Green</span> = <span class="hljs-string">&quot;Green&quot;</span>,<br>  <span class="hljs-title class_">Blue</span> = <span class="hljs-number">9</span>,<br>  <span class="hljs-title class_">Yellow</span>, <span class="hljs-comment">// 等价于 Yellow = 10 = 前一个数值 + 1；特殊要求：前一个必须是数值，否则报错</span><br>  <span class="hljs-title class_">Black</span> = <span class="hljs-string">&quot;black&quot;</span>,<br>&#125;<br><span class="hljs-comment">// Color5[x]，其中的 x 为枚举定义时某个 key &#x27;=&#x27; 后面的值</span><br><br><span class="hljs-keyword">let</span> myColor5 = <span class="hljs-title class_">Color5</span>[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 0 为 Red &#x27;=&#x27; 后面的值，所以取到 &quot;Red&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myColor5); <span class="hljs-comment">// &quot;Red&quot;</span><br><span class="hljs-keyword">let</span> myColor5_2 = <span class="hljs-title class_">Color5</span>[<span class="hljs-string">&quot;Green&quot;</span>]; <span class="hljs-comment">// &quot;Green&quot; 就是 key，可以不算反向映射，所以直接取值 &quot;Green&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myColor5_2); <span class="hljs-comment">// &quot;Green&quot;</span><br><span class="hljs-keyword">let</span> myColor5_3 = <span class="hljs-title class_">Color5</span>[<span class="hljs-number">9</span>]; <span class="hljs-comment">// 9 为 Blue &#x27;=&#x27; 后面的值，所以取到 &quot;Blue&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myColor5_3); <span class="hljs-comment">// &quot;Blue&quot;</span><br><span class="hljs-keyword">let</span> myColor5_4 = <span class="hljs-title class_">Color5</span>[<span class="hljs-number">10</span>]; <span class="hljs-comment">// 10 为 Yellow &#x27;=&#x27; 后面的值，所以取到 &quot;Yellow&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myColor5_4); <span class="hljs-comment">// &quot;Yellow&quot;</span><br><span class="hljs-keyword">let</span> myColor5_5 = <span class="hljs-title class_">Color5</span>[<span class="hljs-string">&quot;black&quot;</span>]; <span class="hljs-comment">// &quot;black&quot; 为 Black &#x27;=&#x27; 后面的值，按理应该取到 &quot;Black&quot;，但 TS 报错</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myColor5_5); <span class="hljs-comment">// TS 报错：元素隐式具有 &quot;any&quot; 类型，因为索引表达式的类型不为 &quot;number&quot;。ts(7015)</span><br></code></pre></td></tr></table></figure><h5 id="编译结果-2"><a href="#编译结果-2" class="headerlink" title="编译结果"></a>编译结果</h5><p>枚举经过 TS 的编译后，本质就是对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Color5</span>;<br>(<span class="hljs-keyword">function</span> (<span class="hljs-params">Color5</span>) &#123;<br>    <span class="hljs-title class_">Color5</span>[<span class="hljs-title class_">Color5</span>[<span class="hljs-string">&quot;Red&quot;</span>] = <span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Red&quot;</span>;<br>    <span class="hljs-title class_">Color5</span>[<span class="hljs-string">&quot;Green&quot;</span>] = <span class="hljs-string">&quot;Green&quot;</span>;<br>    <span class="hljs-title class_">Color5</span>[<span class="hljs-title class_">Color5</span>[<span class="hljs-string">&quot;Blue&quot;</span>] = <span class="hljs-number">9</span>] = <span class="hljs-string">&quot;Blue&quot;</span>;<br>    <span class="hljs-title class_">Color5</span>[<span class="hljs-title class_">Color5</span>[<span class="hljs-string">&quot;Yellow&quot;</span>] = <span class="hljs-number">10</span>] = <span class="hljs-string">&quot;Yellow&quot;</span>;<br>&#125;)(<span class="hljs-title class_">Color5</span> || (<span class="hljs-title class_">Color5</span> = &#123;&#125;));<br><span class="hljs-comment">// Color5[x]，其中的 x 为枚举定义时某个 key &#x27;=&#x27; 后面的值</span><br><span class="hljs-keyword">let</span> myColor5 = <span class="hljs-title class_">Color5</span>[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 0 为 Red &#x27;=&#x27; 后面的值，所以取到 &quot;Red&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myColor5); <span class="hljs-comment">// &quot;Red&quot;</span><br><span class="hljs-keyword">let</span> myColor5_2 = <span class="hljs-title class_">Color5</span>[<span class="hljs-string">&quot;Green&quot;</span>]; <span class="hljs-comment">// &quot;Green&quot; 为 Green &#x27;=&#x27; 后面的值，所以取到 &quot;Green&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myColor5_2); <span class="hljs-comment">// &quot;Green&quot;</span><br><span class="hljs-keyword">let</span> myColor5_3 = <span class="hljs-title class_">Color5</span>[<span class="hljs-number">9</span>]; <span class="hljs-comment">// 9 为 Blue &#x27;=&#x27; 后面的值，所以取到 &quot;Blue&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myColor5_3); <span class="hljs-comment">// &quot;Blue&quot;</span><br><span class="hljs-keyword">let</span> myColor5_4 = <span class="hljs-title class_">Color5</span>[<span class="hljs-number">10</span>]; <span class="hljs-comment">// 10 为 Yellow &#x27;=&#x27; 后面的值，所以取到 &quot;Yellow&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myColor5_4); <span class="hljs-comment">// &quot;Yellow&quot;</span><br><br><span class="hljs-comment">// -------- 补充说明 ------</span><br><span class="hljs-comment">// 枚举经过 TS 的编译后，本质就是普通的对象</span><br><span class="hljs-comment">// 通过该对象的 key 就能明白为啥支持[反向映射与其限制]</span><br><span class="hljs-title class_">Color5</span> = &#123;<br>  <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">&#x27;Red&#x27;</span>,<br>  <span class="hljs-string">&#x27;9&#x27;</span>: <span class="hljs-string">&#x27;Blue&#x27;</span>,<br>  <span class="hljs-string">&#x27;10&#x27;</span>: <span class="hljs-string">&#x27;Yellow&#x27;</span>,<br>  <span class="hljs-title class_">Red</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-title class_">Green</span>: <span class="hljs-string">&#x27;Green&#x27;</span>,<br>  <span class="hljs-title class_">Blue</span>: <span class="hljs-number">9</span>,<br>  <span class="hljs-title class_">Yellow</span>: <span class="hljs-number">10</span>,<br>  <span class="hljs-title class_">Black</span>: <span class="hljs-string">&#x27;black&#x27;</span><br>&#125;<br><br><span class="hljs-title class_">Color5</span>[<span class="hljs-title class_">Color5</span>[<span class="hljs-string">&quot;Red&quot;</span>] = <span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Red&quot;</span>;<br><span class="hljs-comment">// 这段代码会执行两次赋值 Color5[&quot;Red&quot;] = 0; Color5[0] = &quot;Red&quot;; 双 key 赋值</span><br></code></pre></td></tr></table></figure><h5 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h5><ul><li>手写实现一个枚举</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 枚举原始数据(异构的)</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color6</span> &#123;<br>  <span class="hljs-title class_">Red</span>, <span class="hljs-comment">// 等价于 Red = 0</span><br>  <span class="hljs-title class_">Green</span> = <span class="hljs-string">&quot;Green&quot;</span>,<br>  <span class="hljs-title class_">Blue</span> = <span class="hljs-number">9</span>,<br>  <span class="hljs-title class_">Yellow</span>, <span class="hljs-comment">// 等价于 Yellow = 10</span><br>  <span class="hljs-title class_">Black</span> = <span class="hljs-string">&quot;black&quot;</span>,<br>&#125;<br><br><span class="hljs-comment">// 其实答案就是枚举的编译结果</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Enum</span>;<br>(<span class="hljs-keyword">function</span> (<span class="hljs-params">Enum</span>) &#123;<br>  <span class="hljs-title class_">Enum</span>[<span class="hljs-string">&quot;Red&quot;</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-title class_">Enum</span>[<span class="hljs-string">&quot;0&quot;</span>] = <span class="hljs-string">&quot;Red&quot;</span>;<br><br>  <span class="hljs-title class_">Enum</span>[<span class="hljs-string">&quot;Green&quot;</span>] = <span class="hljs-string">&quot;Green&quot;</span>;<br><br>  <span class="hljs-title class_">Enum</span>[<span class="hljs-string">&quot;Blue&quot;</span>] = <span class="hljs-number">9</span>;<br>  <span class="hljs-title class_">Enum</span>[<span class="hljs-string">&quot;9&quot;</span>] = <span class="hljs-string">&quot;Blue&quot;</span>;<br><br>  <span class="hljs-title class_">Enum</span>[<span class="hljs-string">&quot;Yellow&quot;</span>] = <span class="hljs-number">10</span>;<br>  <span class="hljs-title class_">Enum</span>[<span class="hljs-string">&quot;10&quot;</span>] = <span class="hljs-string">&quot;Yellow&quot;</span>;<br><br>  <span class="hljs-title class_">Enum</span>[<span class="hljs-string">&quot;Black&quot;</span>] = <span class="hljs-string">&quot;black&quot;</span>;<br>&#125;)(<span class="hljs-title class_">Enum</span> || (<span class="hljs-title class_">Enum</span> = &#123;&#125;));<br></code></pre></td></tr></table></figure><h4 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h4><p>表示任意类型，可以赋值给任何变量，该变量后续可直接使用，并且该变量可以赋值给其他类型变量，any 变量以后将跳过类型检测</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">anyValue</span>: <span class="hljs-built_in">any</span> = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// 重新赋值其他类型，TS 不会报错</span><br>anyValue = <span class="hljs-string">&quot;xxsw&quot;</span>;<br><br><span class="hljs-comment">// 直接调用该值的方法，TS 不会报错</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anyValue.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">// xsw</span><br><br><span class="hljs-comment">// 将 any 类型赋值其他类型，TS 不会报错</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">numberValue</span>: <span class="hljs-built_in">number</span> = anyValue;<br></code></pre></td></tr></table></figure><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ul><li>JS 迁移到 TS：使用 any 可以快速推进，不用陷入无穷的类型之中，但仅仅是过渡</li><li>不关心传参类型的函数：比如有个自定义打印函数，里面就一段<code>console.log(&#39;自定义打印：&#39;, params)</code>，这时候任何值传进来都直接打印，所以可以给 params 设为 any，因为不关心它具体类型</li></ul><h4 id="Unknown"><a href="#Unknown" class="headerlink" title="Unknown"></a>Unknown</h4><p>表示未知类型(是 any 的安全版本)，可以赋值给任何变量，该变量后续不可直接使用，需要进行类型检测与类型断言后才能使用，并且该变量不可以赋值给其他非<code>unknown或any</code>类型变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-keyword">let</span> <span class="hljs-attr">unknownnValue</span>: <span class="hljs-built_in">unknown</span> = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// 重新赋值其他类型，TS 不会报错</span><br>unknownnValue = <span class="hljs-string">&quot;xxsw&quot;</span>;<br><br><span class="hljs-comment">// 直接调用该值的方法，TS 会报错：“unknownnValue”的类型为“未知”。ts(18046)</span><br><span class="hljs-comment">// console.log(unknownnValue.slice(1));</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> unknownnValue === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>  <span class="hljs-comment">// 类型判断后，再调用该值的方法，TS 不会报错</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(unknownnValue.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">//  xsw</span><br>&#125;<br><br><span class="hljs-comment">// 类型断言后，再调用该值的方法，TS 不会报错</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((unknownnValue <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>).<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">//  xsw</span><br><br><span class="hljs-comment">// 将 unknown 类型赋值其他类型，TS 会报错：不能将类型“unknown”分配给类型“string”。ts(2322)</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">stringValue</span>: <span class="hljs-built_in">string</span> = unknownnValue;<br><br><span class="hljs-comment">// 将 unknown 类型赋值 any 类型，TS 不会报错</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">newAnyValue</span>: <span class="hljs-built_in">any</span> = unknownnValue;<br><br><span class="hljs-comment">// 将 unknown 类型赋值 unknown 类型，TS 不会报错</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">newUnknownnValue</span>: <span class="hljs-built_in">unknown</span> = unknownnValue;<br></code></pre></td></tr></table></figure><h5 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h5><p>任何使用 any 的地方，都应该优先使用 unknown，这样使用时更安全(因为要先类型推断)</p><h4 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h4><p>表示没有类型</p><ul><li>用于函数：表明没有返回值或者返回 undefined</li><li>用于变量：表明只能赋值为 undefined 和 null</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 主动声明 void</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">voidFunction</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;This is a console.log&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 未写 return，则为 void</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">noReturnFunction</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;This is a console.log&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 有 return，但后面未写值，也为 void</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">onlyReturnFunction</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;This is a console.log&quot;</span>);<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">voidValue1</span>: <span class="hljs-built_in">void</span> = <span class="hljs-number">1</span>; <span class="hljs-comment">// TS 会报错：不能将类型“number”分配给类型“void”。ts(2322)</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">voidValue2</span>: <span class="hljs-built_in">void</span>; <span class="hljs-comment">// TS 不会报错</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">voidValue3</span>: <span class="hljs-built_in">void</span> = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// TS 不会报错</span><br></code></pre></td></tr></table></figure><h5 id="为什么无返回值的函数，其返回值类型为-void-而不是-undefined？"><a href="#为什么无返回值的函数，其返回值类型为-void-而不是-undefined？" class="headerlink" title="为什么无返回值的函数，其返回值类型为 void 而不是 undefined？"></a>为什么无返回值的函数，其返回值类型为 void 而不是 undefined？</h5><p>因为更符合直觉，void 表示函数无返回值。<br>虽然无返回值的函数默认返回的是 undefined，但 undefined 本身具有一些歧义：代表该值未定义、属性不存在，若将无返回值的函数类型定为 undefined，则将直面歧义。</p><h4 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h4><p>永远不存在的值的类型，是所有类型的子类型<br>它可以赋值给任何类型，但其他类型(除了 Never)不能赋值给它</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">enum</span> errorLevel &#123;<br>  A,<br>  Z,<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">throwError</span>(<span class="hljs-params">level: errorLevel</span>) &#123;<br>  <span class="hljs-keyword">if</span> (level === errorLevel.<span class="hljs-property">A</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;这个错误是可控抛出的&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (level === errorLevel.<span class="hljs-property">Z</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;这个错误是不可控抛出的&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">let</span> a = level; <span class="hljs-comment">// 此处 a 的类型被推断为 never，因为永远到不了这</span><br><br>    <span class="hljs-comment">// 将其他类型赋值给 never，TS 报错：不能将类型“string”分配给类型“never”。ts(2322)</span><br>    a = <span class="hljs-string">&quot;b&quot;</span>;<br><br>    <span class="hljs-comment">// 将 never 赋值给其他类型，TS 不会报错</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">c</span>: <span class="hljs-built_in">number</span> = a;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h5><ul><li>异常兜底</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 之前的逻辑，TS 不会报错</span><br><span class="hljs-keyword">enum</span> errorLevel &#123;<br>  A,<br>  Z,<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">throwError</span>(<span class="hljs-params">level: errorLevel</span>) &#123;<br>  <span class="hljs-keyword">if</span> (level === errorLevel.<span class="hljs-property">A</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;这个错误是可控抛出的&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (level === errorLevel.<span class="hljs-property">Z</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;这个错误是不可控抛出的&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">let</span> a = level; <span class="hljs-comment">// 此处 a 的类型被推断为 never，因为永远到不了这</span><br>    <span class="hljs-comment">// 等价于 let a:never = level; 并且不会报错</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 若新增了枚举值，但下面未处理</span><br><span class="hljs-keyword">enum</span> errorLevel &#123;<br>  A,<br>  B, <span class="hljs-comment">// 新增了 B</span><br>  Z,<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">throwError</span>(<span class="hljs-params">level: errorLevel</span>) &#123;<br>  <span class="hljs-keyword">if</span> (level === errorLevel.<span class="hljs-property">A</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;这个错误是可控抛出的&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (level === errorLevel.<span class="hljs-property">Z</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;这个错误是不可控抛出的&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>: <span class="hljs-built_in">never</span> = level; <span class="hljs-comment">// 此处 TS 会报错：不能将类型“errorLevel_2”分配给类型“never”</span><br>    <span class="hljs-comment">// 因为未处理 B 的判断，所以代码到这里了，发现将其他类型赋值给 never，则 TS 自动就报错了</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>抛错函数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 因为这个函数会抛出异常，所以也不会返回的</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">crashFunc</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">never</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;this function will crash&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Objetc-对象"><a href="#Objetc-对象" class="headerlink" title="Objetc - 对象"></a>Objetc - 对象</h4><p>TS 里面有三个对象：object | Object | {}</p><h5 id="object：JS-中没有；在-TS-中表示非原始类型，本质是一种类型"><a href="#object：JS-中没有；在-TS-中表示非原始类型，本质是一种类型" class="headerlink" title="object：JS 中没有；在 TS 中表示非原始类型，本质是一种类型"></a>object：JS 中没有；在 TS 中表示非原始类型，本质是一种类型</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">o: <span class="hljs-built_in">object</span></span>): <span class="hljs-built_in">void</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="Object：JS-TS-中都表示-Object-构造函数，本身具有很多属性与方法"><a href="#Object：JS-TS-中都表示-Object-构造函数，本身具有很多属性与方法" class="headerlink" title="Object：JS&#x2F;TS 中都表示 Object 构造函数，本身具有很多属性与方法"></a>Object：JS&#x2F;TS 中都表示 Object 构造函数，本身具有很多属性与方法</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Object.create()</span><br><span class="hljs-comment">// Object.assign()</span><br><span class="hljs-comment">// Object.keys()</span><br><span class="hljs-comment">// 等等...</span><br></code></pre></td></tr></table></figure><h5 id="：JS-中表示基于-Object-的实例；在-TS-中特指没有成员的对象"><a href="#：JS-中表示基于-Object-的实例；在-TS-中特指没有成员的对象" class="headerlink" title="{}：JS 中表示基于 Object 的实例；在 TS 中特指没有成员的对象"></a>{}：JS 中表示基于 Object 的实例；在 TS 中特指没有成员的对象</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> emptyObject = &#123;&#125;; <span class="hljs-comment">// 等价于 const emptyObject = new Object()</span><br><br><span class="hljs-comment">// 若新增属性/方法，则 TS 会报错：类型“&#123;&#125;”上不存在属性“name”/“getName”。ts(2339)</span><br>emptyObject.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;1&quot;</span>;<br>emptyObject.<span class="hljs-property">getName</span> = <span class="hljs-function">() =&gt;</span> &#123;&#125;;<br><br><span class="hljs-comment">// 成功的处理报错方案</span><br><span class="hljs-keyword">const</span> emptyObject2 = &#123;&#125; <span class="hljs-keyword">as</span> &#123; <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; <span class="hljs-attr">getName</span>: <span class="hljs-title class_">Function</span> &#125;; <span class="hljs-comment">// 新增类型断言后</span><br><br><span class="hljs-comment">// 若再新增属性/方法，则 TS 不会报错</span><br>emptyObject2.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;1&quot;</span>;<br>emptyObject2.<span class="hljs-property">getName</span> = <span class="hljs-function">() =&gt;</span> &#123;&#125;;<br><br><span class="hljs-comment">// 错误的处理报错方案</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">emptyObject2</span>: &#123; <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; <span class="hljs-attr">getName</span>: <span class="hljs-title class_">Function</span> &#125; = &#123;&#125;;<br><span class="hljs-comment">// 新增类型后，若还为 &#123;&#125;</span><br><span class="hljs-comment">// 则 TS 报错：类型“&#123;&#125;”缺少类型“&#123; name: string; getName: Function; &#125;”中的以下属性: name, getNamets(2739)</span><br></code></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>当你清楚的知道某个值的类型时，可以进行断言，告知 TS：“相信我，我知道自己在干什么”。<br>断言只是在编译阶段起作用。</p><h4 id="写法-1-尖括号"><a href="#写法-1-尖括号" class="headerlink" title="写法 1 - 尖括号"></a>写法 1 - 尖括号</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-built_in">any</span> = <span class="hljs-string">&#x27;xxx dsad dsad&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">len</span>: <span class="hljs-built_in">number</span> = (&lt;<span class="hljs-built_in">string</span>&gt;str).<span class="hljs-property">length</span><br></code></pre></td></tr></table></figure><h4 id="写法-2-as-语法"><a href="#写法-2-as-语法" class="headerlink" title="写法 2 - as 语法"></a>写法 2 - as 语法</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-built_in">any</span> = <span class="hljs-string">&#x27;xxx dsad dsad&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">len</span>: <span class="hljs-built_in">number</span> = (str <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>).<span class="hljs-property">length</span><br></code></pre></td></tr></table></figure><p>两种写法是等价的，但在 TS 使用 JSX 时，as 才被允许</p><h4 id="用于除去-null-和-undefined-的"><a href="#用于除去-null-和-undefined-的" class="headerlink" title="! - 用于除去 null 和 undefined 的"></a>! - 用于除去 null 和 undefined 的</h4><p><code>identifier!</code>从<code>identifier</code>的类型里去除了<code>null</code>和<code>undefined</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">A</span>: <span class="hljs-built_in">string</span> | <span class="hljs-literal">undefined</span>;<br>A!.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">B</span>: <span class="hljs-built_in">string</span> = A!;<br><span class="hljs-comment">// 这里必须加 !，否则TS 报错：</span><br><span class="hljs-comment">// 不能将类型“string | undefined”分配给类型“string”。</span><br><span class="hljs-comment">//   不能将类型“undefined”分配给类型“string”。ts(2322)</span><br></code></pre></td></tr></table></figure><h2 id="进阶类型"><a href="#进阶类型" class="headerlink" title="进阶类型"></a>进阶类型</h2><h3 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口 - interface"></a>接口 - interface</h3><p>《接口》官方文档：<a href="https://typescript.bootcss.com/interfaces.html">https://typescript.bootcss.com/interfaces.html</a><br>定义：对行为的抽象</p><h4 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">person</span>: person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xx&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>  <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// interface 定义</span><br><span class="hljs-keyword">interface</span> person &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-title function_">sayHello</span>(): <span class="hljs-built_in">void</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><h5 id="只读-readonly"><a href="#只读-readonly" class="headerlink" title="只读 - readonly"></a>只读 - readonly</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> person &#123;<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 只读</span><br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-title function_">sayHello</span>(): <span class="hljs-built_in">void</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">person</span>: person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xx&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>  <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>)<br>  &#125;<br>&#125;<br><br>person.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;lisi&quot;</span>; <span class="hljs-comment">// TS 报错：无法为“name”赋值，因为它是只读属性。ts(2540)</span><br></code></pre></td></tr></table></figure><h5 id="可选"><a href="#可选" class="headerlink" title="可选 - ?"></a>可选 - ?</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> person &#123;<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 只读</span><br>  age?: <span class="hljs-built_in">number</span>; <span class="hljs-comment">// 可选属性，表明该属性可以不存在</span><br>  <span class="hljs-title function_">sayHello</span>(): <span class="hljs-built_in">void</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">person</span>: person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xx&#x27;</span>,<br>  <span class="hljs-comment">// age: 20, // person 里面没有 age 属性时，TS 并不会报错</span><br>  <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>)<br>  &#125;<br>&#125;<br><br>person.<span class="hljs-property">age</span> = <span class="hljs-number">20</span>; <span class="hljs-comment">// 为 age 赋 number 类型，TS 不会报错</span><br>person.<span class="hljs-property">age</span> = <span class="hljs-string">&#x27;20&#x27;</span>; <span class="hljs-comment">// 为 age 赋 string 类型，TS 会报错：不能将类型“string”分配给类型“number”。ts(2322)</span><br></code></pre></td></tr></table></figure><h5 id="可索引类型-key-T-X"><a href="#可索引类型-key-T-X" class="headerlink" title="可索引类型 - [key:T]: X"></a>可索引类型 - [key:T]: X</h5><p>表示当使用 T 类型去索引时会返回 X 类型的值<br>支持<code>字符串、数字、symbol</code>三种索引<br>当<code>字符串、数字</code>共存时，则要求<code>数字</code>索引值的类型必须为<code>字符串</code>索引值的子类型<br>因为使用<code>数字</code>索引，JS 底层还是会转为<code>字符串</code>索引</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> person &#123;<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 只读</span><br>  age?: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-title function_">sayHello</span>(): <span class="hljs-built_in">void</span>;<br>  [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span>; <span class="hljs-comment">// 索引为 string 类型，值为 any 类型</span><br>  [<span class="hljs-attr">key</span>: <span class="hljs-built_in">number</span>]: <span class="hljs-built_in">number</span>; <span class="hljs-comment">// 索引为 number 类型，值为 number 类型</span><br>  [<span class="hljs-attr">key</span>: <span class="hljs-built_in">symbol</span>]: <span class="hljs-built_in">symbol</span>; <span class="hljs-comment">// 索引为 symbol 类型，值为 symbol 类型</span><br>&#125;<br><br><span class="hljs-comment">// 不报错，符合索引，索引为 string 类型，值为 any</span><br>person.<span class="hljs-property">address</span> = <span class="hljs-string">&quot;四川省&quot;</span>;<br><br><span class="hljs-comment">// 不报错，符合索引，索引为 number 类型，值为 number</span><br>person[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// 不报错，符合索引，索引为 symbol 类型，值为 symbol</span><br>person[<span class="hljs-title class_">Symbol</span>()] = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;我是唯一的&quot;</span>);<br><br><span class="hljs-comment">// 报错，不符合索引，索引为 number 类型，值要为 number</span><br>person[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;四川省&quot;</span>; <span class="hljs-comment">// TS 报错：不能将类型“string”分配给类型“number”。ts(2322)</span><br><br><span class="hljs-comment">// 报错，不符合索引，索引为 symbol 类型，值要为 symbol</span><br>person[<span class="hljs-title class_">Symbol</span>()] = <span class="hljs-number">123</span>; <span class="hljs-comment">// TS 报错：不能将类型“number”分配给类型“symbol”。ts(2322)</span><br></code></pre></td></tr></table></figure><p>当使用了<code>字符串</code>索引时，其他属性的定义都要跟<code>字符串</code>索引保持一致</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> person &#123;<br>  [<span class="hljs-attr">key</span>: sting]: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 可以，跟字符串索引一致</span><br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>; <span class="hljs-comment">// 不可以，TS 会报错，值为 number，跟字符串索引的值 string 类型不一致</span><br>&#125;<br></code></pre></td></tr></table></figure><p>索引可以设置为只读</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> person &#123;<br>  <span class="hljs-keyword">readonly</span> [<span class="hljs-attr">key</span>: sting]: <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">person</span>: person = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lisi&#x27;</span> &#125;<br>person.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;zhangsan&#x27;</span> <span class="hljs-comment">// TS 会报错：无法为“name”赋值，因为它是只读属性。ts(2540)</span><br></code></pre></td></tr></table></figure><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><h6 id="接口继承接口"><a href="#接口继承接口" class="headerlink" title="接口继承接口"></a>接口继承接口</h6><p>接口可以互相继承<br>语法：<code>接口名 extends 接口名1,[接口名2, 接口名3, ...]</code><br>一个接口可以继承多个接口，创建出多个接口的合成接口。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-comment">// 单继承</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-title function_">eatFish</span>(): <span class="hljs-built_in">void</span>;<br>&#125;<br><br><span class="hljs-comment">// 多继承</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">JuCat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Cat</span>, <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-title function_">isFat</span>(): <span class="hljs-built_in">boolean</span>;<br>&#125;<br><br><span class="hljs-comment">// 实现</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">XiaoJuCat</span> = &#123;&#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">JuCat</span>;<br><span class="hljs-title class_">XiaoJuCat</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;XiaoJu&quot;</span>;<br><span class="hljs-title class_">XiaoJuCat</span>.<span class="hljs-property">age</span> = <span class="hljs-number">3</span>;<br><span class="hljs-title class_">XiaoJuCat</span>.<span class="hljs-property">eatFish</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ 每天四顿，每顿 2 条鱼 ] &gt;&quot;</span>);<br>&#125;;<br><span class="hljs-title class_">XiaoJuCat</span>.<span class="hljs-property">isFat</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ XiaoJu 非常非常的胖 ] &gt;&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h6 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h6><p>没错，接口是可以继承<code>类</code>的，但只会继承类的成员，但不会继承具体实现，并且该接口只能被这个类或其子类所实现（implement）。<br>语法：<code>接口名 extends 类名</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Control</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">state</span>: <span class="hljs-built_in">any</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">SelectableControl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Control</span> &#123;<br>  <span class="hljs-title function_">select</span>(): <span class="hljs-built_in">void</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Control</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SelectableControl</span> &#123;<br>  <span class="hljs-title function_">select</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TextBox</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Control</span> &#123;&#125;<br><br><span class="hljs-comment">// Error: Property &#x27;state&#x27; is missing in type &#x27;Image&#x27;.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Image</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SelectableControl</span> &#123;<br>  <span class="hljs-title function_">select</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Location</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>在上面的例子里，<code>SelectableControl</code>包含了<code>Control</code>的所有成员，包括私有成员<code>state</code>。 因为<code>state</code>是私有成员，所以只能够是<code>Control</code>的子类们才能实现<code>SelectableControl</code>接口。 因为只有<code>Control</code>的子类才能够拥有一个声明于<code>Control</code>的私有成员<code>state</code>，这对私有成员的兼容性是必需的。<br>在<code>Control</code>类内部，是允许通过<code>SelectableControl</code>的实例来访问私有成员<code>state</code>的。 实际上，<code>SelectableControl</code>就像<code>Control</code>一样，并拥有一个<code>select</code>方法。<code>Button</code>和<code>TextBox</code>类是<code>SelectableControl</code>的子类（因为它们都继承自<code>Control</code>并有<code>select</code>方法），但<code>Image</code>和<code>Location</code>类并不是这样的。</p><h5 id="定义函数类型"><a href="#定义函数类型" class="headerlink" title="定义函数类型"></a>定义函数类型</h5><p>interface 可以将定义类型作用于<code>函数</code><br>定义函数类型时，也可以混合其他类型哦</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyselfDesc</span> &#123;<br>  <span class="hljs-comment">// 函数自身类型：包含参数列表和返回值类型</span><br>  (<span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-comment">// 函数自身的属性</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-comment">// 函数自身的方法</span><br>  <span class="hljs-title function_">sayName</span>(): <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-comment">// 对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配，仅要求对应位置上的参数类型是兼容的</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">myselfDesc</span>: <span class="hljs-title class_">MyselfDesc</span> = (<span class="hljs-attr">n</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span>): <span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`你好，我是<span class="hljs-subst">$&#123;n&#125;</span>，今年<span class="hljs-subst">$&#123;a&#125;</span>岁，很高兴认识你`</span>;<br>&#125;;<br>myselfDesc.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;myselfDesc&#x27;</span><br>myselfDesc.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span><br>&#125;<br><br><span class="hljs-comment">// 由于 myselfDesc 已经被定义为 MyselfDesc ，则可以简化去掉的类型定义，TS 会自动推断的</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">myselfDesc</span>: <span class="hljs-title class_">MyselfDesc</span> = <span class="hljs-function">(<span class="hljs-params">n, a</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`你好，我是<span class="hljs-subst">$&#123;n&#125;</span>，今年<span class="hljs-subst">$&#123;a&#125;</span>岁，很高兴认识你`</span>;<br>&#125;;<br><br><span class="hljs-comment">// 但如果返回值的类型跟定义的不一致，则 TS 会报错</span><br><span class="hljs-comment">// 不能将类型“(n: string, a: number) =&gt; number”分配给类型“MyselfDesc”。</span><br><span class="hljs-comment">//   不能将类型“number”分配给类型“string”。ts(2322)</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">myselfDesc2</span>: <span class="hljs-title class_">MyselfDesc</span> = <span class="hljs-function">(<span class="hljs-params">n, a</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">123</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="定义类类型"><a href="#定义类类型" class="headerlink" title="定义类类型"></a>定义类类型</h5><p>interface 可以将定义类型作用于<code>类</code><br>语法：<code>class 类名 implements 接口名</code><br>接口描述了类的公共部分，而不是公共和私有两部分。它不会帮你检查类是否具有某些私有成员。<br>并且接口的类型最终会落到实例上</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// PersonInterface 负责描述</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PersonInterface</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 属性描述</span><br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>; <span class="hljs-comment">// 属性描述</span><br>  <span class="hljs-title function_">say</span>(<span class="hljs-attr">msg</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">void</span>; <span class="hljs-comment">// 方法描述</span><br>&#125;<br><br><span class="hljs-comment">// Person 负责实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PersonInterface</span> &#123;<br>  name = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 属性实现</span><br>  age = <span class="hljs-number">0</span>; <span class="hljs-comment">// 属性实现</span><br>  <span class="hljs-title function_">say</span>(<span class="hljs-params">msg: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-comment">// 方法实现</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ msg ] &gt;&quot;</span>, msg);<br>  &#125;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>) &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;lisi&#x27;</span>, <span class="hljs-number">30</span>) <span class="hljs-comment">// 实例 p1 的类型为 PersonInterface</span><br></code></pre></td></tr></table></figure><h4 id="编译结果-3"><a href="#编译结果-3" class="headerlink" title="编译结果"></a>编译结果</h4><p>经过 TS 编译后，<code>interface</code>啥都没有，不会在结果代码里面留东西</p><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>《泛型》官方文档：<a href="https://typescript.bootcss.com/generics.html">https://typescript.bootcss.com/generics.html</a><br>考虑重用性而提出的，适用于多种类型</p><h4 id="基础-2"><a href="#基础-2" class="headerlink" title="基础"></a>基础</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 定义一个传啥返回啥的函数</span><br><br><span class="hljs-comment">// 1. 不加类型时，TS 会提醒：参数“arg”隐式具有“any”类型。ts(7006)</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">onlyReturn</span>(<span class="hljs-params">arg</span>) &#123;<br>  <span class="hljs-keyword">return</span> arg<br>&#125;<br><br><span class="hljs-comment">// 若给它加类型，那加什么类型呢？number？string？都不太符合，因为功能传啥返回啥，所以不是固定类型</span><br><span class="hljs-comment">// 所以需要 类型变量，它是一种特殊的变量，只用于表示类型而不是值。</span><br><span class="hljs-keyword">function</span> onlyReturn&lt;T&gt;(<span class="hljs-attr">arg</span>: T): T &#123;<br>  <span class="hljs-keyword">return</span> arg<br>&#125;<br><span class="hljs-comment">// T 就是我们声明的类型变量，它会自动捕获类型</span><br><span class="hljs-comment">// 并且 onlyReturn 被称为 泛型函数</span><br><span class="hljs-comment">// 与普通函数的区别只是：多了个 &lt;T&gt;</span><br></code></pre></td></tr></table></figure><p>约定成俗：<br>T、U、K：键值<br>V：纯值<br>E：节点</p><h4 id="进阶-1"><a href="#进阶-1" class="headerlink" title="进阶"></a>进阶</h4><h5 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 泛型函数接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">OnlyReturn1</span> &#123;<br>  &lt;T&gt;(<span class="hljs-attr">arg</span>: T): T<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">onlyReturn</span>: <span class="hljs-title class_">OnlyReturn1</span> = &lt;T&gt;(<span class="hljs-attr">arg</span>: T): <span class="hljs-function"><span class="hljs-params">T</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> arg<br>&#125;<br><br><span class="hljs-comment">// 泛型接口，使用 &lt;&gt; 括起泛型类型，跟在接口名后面</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">OnlyReturn2</span>&lt;T&gt; &#123;<br>  (<span class="hljs-attr">arg</span>: T): T<br>&#125;<br><br><span class="hljs-comment">// 当使用 OnlyReturn2 时，必须传入类型参数来指定泛型类型</span><br><br><span class="hljs-comment">// 可以是：number</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">onlyReturn</span>: <span class="hljs-title class_">OnlyReturn2</span>&lt;<span class="hljs-built_in">number</span>&gt; = &lt;T&gt;(<span class="hljs-attr">arg</span>: T): <span class="hljs-function"><span class="hljs-params">T</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> arg<br>&#125;<br><br><span class="hljs-comment">// 也可以是：string</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">onlyReturn</span>: <span class="hljs-title class_">OnlyReturn2</span>&lt;<span class="hljs-built_in">string</span>&gt; = &lt;T&gt;(<span class="hljs-attr">arg</span>: T): <span class="hljs-function"><span class="hljs-params">T</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> arg<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 泛型类，使用 &lt;&gt; 括起泛型类型，跟在类名后面</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericNumber</span>&lt;T&gt; &#123;<br>  <span class="hljs-attr">zeroValue</span>: T;<br>  <span class="hljs-attr">add</span>: (<span class="hljs-attr">x</span>: T, <span class="hljs-attr">y</span>: T): =&gt; T<br>&#125;<br><br><span class="hljs-comment">// 当使用时，必须传入类型参数来指定泛型类型</span><br><br><span class="hljs-comment">// 可以是：number</span><br><span class="hljs-keyword">let</span> myGenericNumber = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericNumber</span>&lt;<span class="hljs-built_in">number</span>&gt;()<br>myGenericNumber.<span class="hljs-property">zeroValue</span> = <span class="hljs-number">0</span><br>myGenericNumber.<span class="hljs-property">add</span> = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x + y<br><br><span class="hljs-comment">// 可以是：string</span><br><span class="hljs-keyword">let</span> myGenericNumber = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericNumber</span>&lt;<span class="hljs-built_in">string</span>&gt;()<br>myGenericNumber.<span class="hljs-property">zeroValue</span> = <span class="hljs-string">&#x27;name&#x27;</span><br>myGenericNumber.<span class="hljs-property">add</span> = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x + y<br></code></pre></td></tr></table></figure><h5 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 这个例子想使用 .length 时，TS 会报错，因为传入的类型可能没有 .length</span><br><span class="hljs-keyword">const</span> onlyReturn = &lt;T&gt;(<span class="hljs-attr">arg</span>: T): <span class="hljs-function"><span class="hljs-params">T</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg.<span class="hljs-property">length</span>);  <span class="hljs-comment">// Error: T doesn&#x27;t have .length</span><br>  <span class="hljs-keyword">return</span> arg<br>&#125;<br><br><span class="hljs-comment">// 这种情况我们可以对传入的类型进行约束，确保一定有 length 属性</span><br><br><span class="hljs-comment">// 新增一个约束接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Length</span> &#123;<br>  <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-comment">// 使用约束接口：&lt;T extends Length&gt;</span><br><span class="hljs-keyword">const</span> onlyReturn = &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Length</span>&gt;(<span class="hljs-attr">arg</span>: T): <span class="hljs-function"><span class="hljs-params">T</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg.<span class="hljs-property">length</span>);  <span class="hljs-comment">// TS 不会报错</span><br>  <span class="hljs-keyword">return</span> arg<br>&#125;<br><span class="hljs-comment">// 但使用约束后，将不适用于任意类型了</span><br></code></pre></td></tr></table></figure><h6 id="在泛型约束中使用类型参数"><a href="#在泛型约束中使用类型参数" class="headerlink" title="在泛型约束中使用类型参数"></a>在泛型约束中使用类型参数</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 该函数功能：用属性名从对象里获取这个属性的值</span><br><span class="hljs-keyword">const</span> getObjValue = &lt;T, K&gt;(<span class="hljs-attr">obj</span>: T, <span class="hljs-attr">key</span>: K) &#123;<br>  <span class="hljs-keyword">return</span> obj[key]<br>&#125;<br><br><span class="hljs-comment">// 上述情况下，可能 obj 里面不存在传入 key，这可以加强约束</span><br><span class="hljs-keyword">const</span> getObjValue = &lt;T, K <span class="hljs-keyword">extends</span> keyof T&gt;(<span class="hljs-attr">obj</span>: T, <span class="hljs-attr">key</span>: K) &#123;<br>  <span class="hljs-keyword">return</span> obj[key]<br>&#125;<br><br><span class="hljs-keyword">let</span> x = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">4</span> &#125;;<br><br><span class="hljs-title function_">getObjValue</span>(x, <span class="hljs-string">&quot;a&quot;</span>); <span class="hljs-comment">// okay</span><br><span class="hljs-title function_">getObjValue</span>(x, <span class="hljs-string">&quot;m&quot;</span>); <span class="hljs-comment">// error: Argument of type &#x27;m&#x27; isn&#x27;t assignable to &#x27;a&#x27; | &#x27;b&#x27; | &#x27;c&#x27; | &#x27;d&#x27;.</span><br></code></pre></td></tr></table></figure><h3 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h3><p>《高级类型》官方文档：<a href="https://typescript.bootcss.com/advanced-types.html">https://typescript.bootcss.com/advanced-types.html</a></p><h4 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h4><p>定义：将多个类型合并为一个类型，该类型必须满足所有多类型<br>白话：多个类型取<code>且</code><br>语法：<code>类型1 &amp; 类型2 &amp; ...</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> P &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> E &#123;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-comment">// OO 必须满足 P &amp; E 类型</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">OO</span>: P &amp; E = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;liusan&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>&#125;;<br><br><span class="hljs-comment">// 存在冲突的，合并结果用：且</span><br><span class="hljs-keyword">interface</span> P &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> E &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">PE</span> = P &amp; E <span class="hljs-comment">// 冲突出来的 name 类型为: never(string &amp; number)</span><br></code></pre></td></tr></table></figure><h4 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h4><p>定义：将多个类型合并为一个类型，该类型只需满足多类型之一<br>白话：多个类型取<code>或</code><br>语法：<code>类型1 | 类型2 | ...</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> P &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> E &#123;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-comment">// OO 只需满足 P、E 类型之一</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">OO</span>: P | E = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;liusan&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h5><p>当使用<code>联合类型</code>时，只能确定该类型包含多类型的交集成员，如下代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Bird</span> &#123;<br>  <span class="hljs-title function_">fly</span>(): <span class="hljs-built_in">void</span>;<br>  <span class="hljs-title function_">layEggs</span>(): <span class="hljs-built_in">void</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Fish</span> &#123;<br>  <span class="hljs-title function_">swim</span>(): <span class="hljs-built_in">void</span>;<br>  <span class="hljs-title function_">layEggs</span>(): <span class="hljs-built_in">void</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getSmallPet</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Fish</span> | <span class="hljs-title class_">Bird</span> &#123;<br>  <span class="hljs-keyword">const</span> result = &#123;&#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">Fish</span> | <span class="hljs-title class_">Bird</span>;<br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">let</span> pet = <span class="hljs-title function_">getSmallPet</span>();<br>pet.<span class="hljs-title function_">layEggs</span>(); <span class="hljs-comment">// okay</span><br><br><span class="hljs-comment">// TS 报错：</span><br><span class="hljs-comment">// 类型“Fish | Bird”上不存在属性“swim”。</span><br><span class="hljs-comment">//   类型“Bird”上不存在属性“swim”。ts(2339)</span><br>pet.<span class="hljs-title function_">swim</span>();<br><br><span class="hljs-comment">// TS 报错：</span><br><span class="hljs-comment">// 类型“Fish | Bird”上不存在属性“fly”。</span><br><span class="hljs-comment">//   类型“Fish”上不存在属性“fly”。ts(2339)</span><br>pet.<span class="hljs-title function_">fly</span>();<br><br><span class="hljs-comment">// 针对于这种情况，如果改成这样写，TS 还是报错</span><br><span class="hljs-keyword">if</span> (pet.<span class="hljs-property">swim</span>) &#123;<br>  pet.<span class="hljs-title function_">swim</span>();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pet.<span class="hljs-property">fly</span>) &#123;<br>  pet.<span class="hljs-title function_">fly</span>();<br>&#125;<br><br><span class="hljs-comment">// 为了使代码工作，就只能多次使用类型断言，麻烦</span><br><span class="hljs-keyword">if</span> ((&lt;<span class="hljs-title class_">Fish</span>&gt;pet).<span class="hljs-property">swim</span>) &#123;<br>  (&lt;<span class="hljs-title class_">Fish</span>&gt;pet).<span class="hljs-title function_">swim</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  (&lt;<span class="hljs-title class_">Bird</span>&gt;pet).<span class="hljs-title function_">fly</span>();<br>&#125;<br><br><span class="hljs-comment">// 假若我们一旦检查过类型，就能在之后的每个分支里清楚地知道pet的类型的话就好了。</span><br><span class="hljs-comment">// 这就可以借用 TS 的类型保护机制</span><br></code></pre></td></tr></table></figure><p>类型保护就是一些表达式，它们会在运行时检查以确保在某个作用域里的类型。<br>要定义一个类型保护，我们只要简单地定义一个函数，它的返回值是一个类型谓词</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 类型保护函数定义</span><br><span class="hljs-keyword">const</span> isFish = (<span class="hljs-attr">pet</span>: <span class="hljs-title class_">Fish</span> | <span class="hljs-title class_">Bird</span>): pet is <span class="hljs-title class_">Fish</span> =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (&lt;<span class="hljs-title class_">Fish</span>&gt;pet).<span class="hljs-property">swim</span> !== <span class="hljs-literal">undefined</span>;<br>&#125;<br><br><span class="hljs-comment">// 例子中的 pet is Fish 就是类型谓词</span><br><span class="hljs-comment">// 谓词形式：parameterName is Type，parameterName 必须是当前函数的参数名</span><br><br><span class="hljs-comment">// 类型保护函数使用</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_">isFish</span>(pet)) &#123;<br>  pet.<span class="hljs-title function_">swim</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  pet.<span class="hljs-title function_">fly</span>();<br>&#125;<br><br><span class="hljs-comment">// 使用 类型保护 后，TS 知道在 if 分支里 pet 是 Fish 类型；</span><br><span class="hljs-comment">// 并且它还知道在 else 分支里，一定不是 Fish 类型，一定是 Bird 类型。</span><br></code></pre></td></tr></table></figure><h6 id="编译结果-4"><a href="#编译结果-4" class="headerlink" title="编译结果"></a>编译结果</h6><p>TS 编译后，会留下对应的代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isFish</span>(<span class="hljs-params">pet</span>) &#123;<br>  <span class="hljs-keyword">return</span> pet.<span class="hljs-property">swim</span> !== <span class="hljs-literal">undefined</span>;<br>&#125;<br><br><span class="hljs-comment">// 例子中的 pet is Fish 就是类型谓词</span><br><span class="hljs-comment">// 谓词形式：parameterName is Type，parameterName 必须是当前函数的参数名</span><br><br><span class="hljs-comment">// 使用 类型保护</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_">isFish</span>(pet)) &#123;<br>  pet.<span class="hljs-title function_">swim</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  pet.<span class="hljs-title function_">fly</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="类型别名-type"><a href="#类型别名-type" class="headerlink" title="类型别名 - type"></a>类型别名 - type</h4><p>作用：给一个类型起个新名字<br>类型别名有时和接口很像，但是可以作用于原始值，联合类型，元组以及其它任何你需要手写的类型。<br>起别名不会新建一个类型 - 它创建了一个新名字来引用那个类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Name</span> = <span class="hljs-built_in">string</span>;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">GetName</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">string</span>;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">NameOrGetName</span> = <span class="hljs-title class_">Name</span> | <span class="hljs-title class_">GetName</span>;<br><br><span class="hljs-keyword">const</span> getName = (<span class="hljs-attr">n</span>: <span class="hljs-title class_">NameOrGetName</span>): <span class="hljs-function"><span class="hljs-params">Name</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> n === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> n;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">n</span>();<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 支持泛型</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Tree</span>&lt;T&gt; = &#123;<br>  <span class="hljs-attr">value</span>: T;<br>  <span class="hljs-attr">left</span>: <span class="hljs-title class_">Tree</span>&lt;T&gt;; <span class="hljs-comment">// 支持属性里引用自己</span><br>  <span class="hljs-attr">right</span>: <span class="hljs-title class_">Tree</span>&lt;T&gt;; <span class="hljs-comment">// 支持属性里引用自己</span><br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h5><p>一种从旧类型中创建新类型的一种方式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Readonly</span>&lt;T&gt; = &#123;<br>  <span class="hljs-keyword">readonly</span> [K <span class="hljs-keyword">in</span> keyof T]: T[K];<br>&#125;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Partial</span>&lt;T&gt; = &#123;<br>  [K <span class="hljs-keyword">in</span> keyof T]?: T[K];<br>&#125;<br><br><span class="hljs-comment">// 新类型为：Person 所有的变为只读</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">PersonReadonly</span> = <span class="hljs-title class_">Readonly</span>&lt;<span class="hljs-title class_">Person</span>&gt;<br><br><span class="hljs-comment">// 新类型为：Person 所有的变为可选</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">PersonPartial</span> = <span class="hljs-title class_">Readonly</span>&lt;<span class="hljs-title class_">Person</span>&gt;<br></code></pre></td></tr></table></figure><p>复杂的映射类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 代理函数 proxify 的基础 TS 实现</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Proxy</span>&lt;T&gt; = &#123;<br>  <span class="hljs-title function_">get</span>(): T;<br>  <span class="hljs-title function_">set</span>(<span class="hljs-attr">value</span>: T): <span class="hljs-built_in">void</span>;<br>&#125;;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Proxify</span>&lt;T&gt; = &#123;<br>  [P <span class="hljs-keyword">in</span> keyof T]: <span class="hljs-title class_">Proxy</span>&lt;T[P]&gt;;<br>&#125;;<br><br><span class="hljs-keyword">function</span> proxify&lt;T&gt;(<span class="hljs-attr">o</span>: T): <span class="hljs-title class_">Proxify</span>&lt;T&gt; &#123;<br>  <span class="hljs-keyword">const</span> result = &#123;&#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">Proxify</span>&lt;T&gt;;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> o) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(o, key)) &#123;<br>      result[key] = &#123;<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">return</span> o[key];<br>        &#125;,<br>        <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>) &#123;<br>          o[key] = value;<br>        &#125;,<br>      &#125;;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-keyword">let</span> proxyProps = <span class="hljs-title function_">proxify</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">1</span> &#125;);<br></code></pre></td></tr></table></figure><h5 id="编译结果-5"><a href="#编译结果-5" class="headerlink" title="编译结果"></a>编译结果</h5><p>经过 TS 编译后，<code>interface</code>啥都没有，不会在结果代码里面留东西</p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>《装饰器》官方文档：<a href="https://typescript.bootcss.com/decorators.html">https://typescript.bootcss.com/decorators.html</a><br>装饰器是一种特殊类型的声明，它能够被附加到<a href="https://typescript.bootcss.com/decorators.html#class-decorators">类声明</a>，<a href="https://typescript.bootcss.com/decorators.html#method-decorators">方法</a>，<a href="https://typescript.bootcss.com/decorators.html#accessor-decorators">访问符</a>，<a href="https://typescript.bootcss.com/decorators.html#property-decorators">属性</a>或<a href="https://typescript.bootcss.com/decorators.html#parameter-decorators">参数</a>上。<br>基础语法：@expression，expression 求值后必须为函数，将在运行时被调用<br>使用的前提是：tsconfig.json 开启配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;experimentalDecorators&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="装饰器工厂"><a href="#装饰器工厂" class="headerlink" title="装饰器工厂"></a>装饰器工厂</h4><p>定制装饰器用的，本质是一个返回函数的函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 装饰器工厂示例代码</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Get</span>(<span class="hljs-params">path: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">target, propertyKey: <span class="hljs-built_in">string</span>, decriptor: PropertyDescriptor</span>)&#123;<br>    <span class="hljs-comment">// 定制的业务代码 ...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 多个装饰器使用示例代码</span><br><br><span class="hljs-comment">// 装饰器工厂 1 示例代码</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Get</span>(<span class="hljs-params">path: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Get()&#x27;</span>)<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">target, propertyKey: <span class="hljs-built_in">string</span>, decriptor: PropertyDescriptor</span>)&#123;<br>    <span class="hljs-comment">// 定制的业务代码 ...</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Get() do something&#x27;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 装饰器工厂 2 示例代码</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Post</span>(<span class="hljs-params">path: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Post()&#x27;</span>)<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">target, propertyKey: <span class="hljs-built_in">string</span>, decriptor: PropertyDescriptor</span>)&#123;<br>    <span class="hljs-comment">// 定制的业务代码 ...</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Post() do something&#x27;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>  userName = <span class="hljs-string">&quot;lisi&quot;</span>;<br><br>  <span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;/userinfo&#x27;</span>)<br>  <span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;/userinfo&#x27;</span>)<br>  <span class="hljs-title function_">userinfo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 上述代码的装饰器执行逻辑为：</span><br><span class="hljs-comment">// Get()</span><br><span class="hljs-comment">// Post()</span><br><span class="hljs-comment">// Post() do something</span><br><span class="hljs-comment">// Get() do something</span><br><br><span class="hljs-comment">// 多个装饰器的执行逻辑是：</span><br><span class="hljs-comment">// 1、先从上往下执行(得到装饰器的返回函数)；</span><br><span class="hljs-comment">// 2、再从下往上执行(执行返回函数的调用)</span><br></code></pre></td></tr></table></figure><h5 id="编译结果-6"><a href="#编译结果-6" class="headerlink" title="编译结果"></a>编译结果</h5><p>上述代码经过 TS 编译后，将变成以下 JS 代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> __decorate =<br>  (<span class="hljs-variable language_">this</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">__decorate</span>) ||<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">decorators, target, key, desc</span>) &#123;<br>    <span class="hljs-keyword">var</span> c = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>,<br>      r =<br>        c &lt; <span class="hljs-number">3</span><br>          ? target<br>          : desc === <span class="hljs-literal">null</span><br>          ? (desc = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(target, key))<br>          : desc,<br>      d;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Reflect</span> === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-property">decorate</span> === <span class="hljs-string">&quot;function&quot;</span>)<br>      r = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">decorate</span>(decorators, target, key, desc);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = decorators.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> ((d = decorators[i]))<br>          r = (c &lt; <span class="hljs-number">3</span> ? <span class="hljs-title function_">d</span>(r) : c &gt; <span class="hljs-number">3</span> ? <span class="hljs-title function_">d</span>(target, key, r) : <span class="hljs-title function_">d</span>(target, key)) || r;<br>    <span class="hljs-keyword">return</span> c &gt; <span class="hljs-number">3</span> &amp;&amp; r &amp;&amp; <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(target, key, r), r;<br>  &#125;;<br><br><span class="hljs-comment">// 多个装饰器使用示例代码</span><br><br><span class="hljs-comment">// 装饰器工厂 1 示例代码</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Get</span>(<span class="hljs-params">path</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Get()&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">target, propertyKey, decriptor</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Get() do something&quot;</span>);<br>        <span class="hljs-comment">// 定制的业务代码 ...</span><br>    &#125;;<br>&#125;<br><span class="hljs-comment">// 装饰器工厂 2 示例代码</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Post</span>(<span class="hljs-params">path</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Post()&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">target, propertyKey, decriptor</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Post() do something&quot;</span>);<br>        <span class="hljs-comment">// 定制的业务代码 ...</span><br>    &#125;;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">userName</span> = <span class="hljs-string">&quot;lisi&quot;</span>;<br>    &#125;<br>    <span class="hljs-title function_">userinfo</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br><span class="hljs-title function_">__decorate</span>(<br>  [<span class="hljs-title class_">Get</span>(<span class="hljs-string">&quot;/userinfo&quot;</span>), <span class="hljs-title class_">Post</span>(<span class="hljs-string">&quot;/userinfo&quot;</span>)],<br>  <span class="hljs-title class_">UserService</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>,<br>  <span class="hljs-string">&quot;userinfo&quot;</span>,<br>  <span class="hljs-literal">null</span><br>);<br></code></pre></td></tr></table></figure><p>Reflect.decorate：ECMAScript 2016 标准引入的一个方法，主要用于处理装饰器</p><h4 id="装饰器分类"><a href="#装饰器分类" class="headerlink" title="装饰器分类"></a>装饰器分类</h4><h5 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h5><p>作用于类上的装饰器，可以用来监视，修改或替换类定义。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 类装饰器</span><br><span class="hljs-comment">// 参数仅 1 个：</span><br><span class="hljs-comment">//   constructor 类的构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Sealed</span>(<span class="hljs-params">constructor: <span class="hljs-built_in">Function</span></span>) &#123;<br>  <span class="hljs-comment">// 密封</span><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">seal</span>(constructor)<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">seal</span>(constructor.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br>&#125;<br><br><span class="hljs-meta">@Sealed</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService2</span> &#123;<br>  userName = <span class="hljs-string">&quot;lisi&quot;</span>;<br><br>  <span class="hljs-title function_">userinfo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="编译结果-7"><a href="#编译结果-7" class="headerlink" title="编译结果"></a>编译结果</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> __decorate =<br>  (<span class="hljs-variable language_">this</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">__decorate</span>) ||<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">decorators, target, key, desc</span>) &#123;<br>    <span class="hljs-keyword">var</span> c = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>,<br>      r =<br>        c &lt; <span class="hljs-number">3</span><br>          ? target<br>          : desc === <span class="hljs-literal">null</span><br>          ? (desc = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(target, key))<br>          : desc,<br>      d;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Reflect</span> === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-property">decorate</span> === <span class="hljs-string">&quot;function&quot;</span>)<br>      r = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">decorate</span>(decorators, target, key, desc);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = decorators.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> ((d = decorators[i]))<br>          r = (c &lt; <span class="hljs-number">3</span> ? <span class="hljs-title function_">d</span>(r) : c &gt; <span class="hljs-number">3</span> ? <span class="hljs-title function_">d</span>(target, key, r) : <span class="hljs-title function_">d</span>(target, key)) || r;<br>    <span class="hljs-keyword">return</span> c &gt; <span class="hljs-number">3</span> &amp;&amp; r &amp;&amp; <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(target, key, r), r;<br>  &#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Sealed</span>(<span class="hljs-params">constructor</span>) &#123;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">seal</span>(constructor);<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">seal</span>(constructor.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">UserService2</span> = <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService2</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">userName</span> = <span class="hljs-string">&quot;lisi&quot;</span>;<br>  &#125;<br>  <span class="hljs-title function_">userinfo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>&#125;;<br><span class="hljs-title class_">UserService2</span> = <span class="hljs-title function_">__decorate</span>([<span class="hljs-title class_">Sealed</span>], <span class="hljs-title class_">UserService2</span>);<br></code></pre></td></tr></table></figure><h6 id="实际场景"><a href="#实际场景" class="headerlink" title="实际场景"></a>实际场景</h6><ol><li>重载构造函数</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 类装饰器</span><br><span class="hljs-keyword">function</span> classDecorator&lt;T <span class="hljs-keyword">extends</span> &#123; <span class="hljs-keyword">new</span> (...<span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>[]): &#123;&#125; &#125;&gt;(<br>  <span class="hljs-attr">constructor</span>: T<br>) &#123;<br>  <span class="hljs-comment">// 类装饰器有返回值，则会使用该构造函数来替换类的声明。</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">extends</span> constructor &#123; <span class="hljs-comment">// extends 语法，用来处理原来的原型链</span><br>    newProperty = <span class="hljs-string">&quot;new property&quot;</span>;<br>    hello = <span class="hljs-string">&quot;override&quot;</span>;<br>  &#125;;<br>&#125;<br><br><span class="hljs-meta">@classDecorator</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Greeter</span> &#123;<br>  property = <span class="hljs-string">&quot;property&quot;</span>;<br><br>  <span class="hljs-attr">hello</span>: <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">m: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hello</span> = m;<br>  &#125;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Greeter</span>(<span class="hljs-string">&quot;world&quot;</span>));<br><span class="hljs-comment">// Greeter &#123;</span><br><span class="hljs-comment">//   property: &#x27;property&#x27;,</span><br><span class="hljs-comment">//   hello: &#x27;override&#x27;,</span><br><span class="hljs-comment">//   newProperty: &#x27;new property&#x27;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// 编译结果：</span><br><br><span class="hljs-comment">// __decorate 未变，不赘述</span><br><span class="hljs-keyword">var</span> __decorate =<br>  (<span class="hljs-variable language_">this</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">__decorate</span>) ||<br>  ...<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">classDecorator</span>(<span class="hljs-params">constructor</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">extends</span> constructor &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">super</span>(...<span class="hljs-variable language_">arguments</span>);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">newProperty</span> = <span class="hljs-string">&quot;new property&quot;</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">hello</span> = <span class="hljs-string">&quot;override&quot;</span>;<br>    &#125;<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Greeter</span> = <span class="hljs-keyword">class</span> <span class="hljs-title class_">Greeter</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">m</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">property</span> = <span class="hljs-string">&quot;property&quot;</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hello</span> = m;<br>  &#125;<br>&#125;;<br><br><span class="hljs-title class_">Greeter</span> = <span class="hljs-title function_">__decorate</span>([classDecorator], <span class="hljs-title class_">Greeter</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Greeter</span>(<span class="hljs-string">&quot;world&quot;</span>));<br></code></pre></td></tr></table></figure><ol start="2"><li>针对老业务进行扩展时，很有用</li></ol><p>假如有个场景：之前有个 class，有点复杂，也满足之前的需求。但现在需要加几个属性与方法来支持新业务，则这种情况该怎么处理？</p><ol><li>侵入式：直接改这个 class，强行添加新的属性与方法</li><li>继承式：通过 extends 继承这个类，然后再添加新的属性与方法</li></ol><p>以上两个方法都能解决问题，但都存在对原有类的冲击，容易产生不可预测的影响</p><ol start="3"><li>可以通过<code>类装饰器</code>进行可插拔的更改，并且不会对原来的类产生影响</li></ol><p>代码举例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 原来的类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Course</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><br><span class="hljs-comment">// 采用 类装饰器 扩展</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Version_2_1</span>(<span class="hljs-params">constructor: <span class="hljs-built_in">Function</span></span>) &#123;<br>  constructor.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">startClass</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ let‘s startClass ] &gt;&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">teacher</span>);<br>  &#125;;<br>&#125;<br><br><span class="hljs-meta">@Version_2_1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Course</span> &#123;<br>  teacher = <span class="hljs-string">&quot;lisi&quot;</span>;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> course = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Course</span>();<br>course.<span class="hljs-title function_">startClass</span>(); <span class="hljs-comment">// [ let‘s startClass ] &gt; lisi</span><br></code></pre></td></tr></table></figure><h5 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h5><p>作用于方法的装饰器，可以用来监视，修改或替换方法定义。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 方法装饰器工厂</span><br><span class="hljs-comment">// 参数：可自定义</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Post</span>(<span class="hljs-params">path: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Post()&quot;</span>);<br><br>  <span class="hljs-comment">// 返回函数参数：3 个：</span><br>  <span class="hljs-comment">//   traget：对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</span><br>  <span class="hljs-comment">//   propertyKey：成员的名字</span><br>  <span class="hljs-comment">//   propertyDescriptor：成员的属性描述符(若小于ES5，该会是undefined)</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span><br><span class="hljs-params">    target: <span class="hljs-built_in">any</span>,</span><br><span class="hljs-params">    propertyKey: <span class="hljs-built_in">string</span>,</span><br><span class="hljs-params">    decriptor: PropertyDescriptor</span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Post() do something&quot;</span>);<br><br>    <span class="hljs-comment">// 定制的业务代码 ...</span><br>    decriptor.<span class="hljs-property">enumerable</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 修改属性描述符的 enumerable 属性值为 true</span><br><br>    <span class="hljs-comment">// 打印参数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ target ] &gt;&quot;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(target));<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ propertyKey ] &gt;&quot;</span>, propertyKey);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ decriptor ] &gt;&quot;</span>, decriptor);<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>  userName = <span class="hljs-string">&quot;lisi&quot;</span>;<br><br>  <span class="hljs-meta">@Post</span>(<span class="hljs-string">&quot;/userinfo&quot;</span>)<br>  <span class="hljs-title function_">userinfo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// Post()</span><br><span class="hljs-comment">// Post() do something</span><br><span class="hljs-comment">// [ target ] &gt; &#123;&#125;</span><br><span class="hljs-comment">// [ propertyKey ] &gt; userinfo</span><br><span class="hljs-comment">// [ decriptor ] &gt; &#123;</span><br><span class="hljs-comment">//   value: [Function: userinfo],</span><br><span class="hljs-comment">//   writable: true,</span><br><span class="hljs-comment">//   enumerable: true,</span><br><span class="hljs-comment">//   configurable: true</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><h5 id="访问器装饰器"><a href="#访问器装饰器" class="headerlink" title="访问器装饰器"></a>访问器装饰器</h5><p>作用于访问器(geter&#x2F;seter)的装饰器，可以用来监视，修改或替换访问器定义。<br>不允许同时装饰一个成员的 get 和 set 访问器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 访问器装饰器</span><br><br><span class="hljs-comment">// 参数：可自定义</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">configurable</span>(<span class="hljs-params">value: <span class="hljs-built_in">boolean</span></span>) &#123;<br>  <span class="hljs-comment">// 返回函数参数：3 个：</span><br>  <span class="hljs-comment">//   traget：对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</span><br>  <span class="hljs-comment">//   propertyKey：成员的名字</span><br>  <span class="hljs-comment">//   propertyDescriptor：成员的属性描述符(若小于ES5，该会是undefined)</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span><br><span class="hljs-params">    target: <span class="hljs-built_in">any</span>,</span><br><span class="hljs-params">    propertyKey: <span class="hljs-built_in">string</span>,</span><br><span class="hljs-params">    descriptor: PropertyDescriptor</span><br><span class="hljs-params">  </span>) &#123;<br>    descriptor.<span class="hljs-property">configurable</span> = value;<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-attr">_x</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">_y</span>: <span class="hljs-built_in">number</span>;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_x</span> = x;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_y</span> = y;<br>  &#125;<br><br>  <span class="hljs-meta">@configurable</span>(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">x</span>(): <span class="hljs-built_in">number</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_x</span> + <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@configurable</span>(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">y</span>(): <span class="hljs-built_in">number</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_y</span> + <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> point = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ point ] &gt;&quot;</span>, point);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ point.x ] &gt;&quot;</span>, point.<span class="hljs-property">x</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ point.y ] &gt;&quot;</span>, point.<span class="hljs-property">y</span>);<br><br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// [ point ] &gt; Point &#123; _x: 0, _y: 0 &#125;</span><br><span class="hljs-comment">// [ point.x ] &gt; 1</span><br><span class="hljs-comment">// [ point.y ] &gt; 1</span><br></code></pre></td></tr></table></figure><h6 id="编译结果-8"><a href="#编译结果-8" class="headerlink" title="编译结果"></a>编译结果</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// __decorate 未变，不赘述</span><br><span class="hljs-keyword">var</span> __decorate =<br>  (<span class="hljs-variable language_">this</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">__decorate</span>) ||<br>  ...<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">configurable</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">target, propertyKey, descriptor</span>) &#123;<br>        descriptor.<span class="hljs-property">configurable</span> = value;<br>    &#125;;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_x</span> = x;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_y</span> = y;<br>    &#125;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">x</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_x</span> + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">y</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_y</span> + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-title function_">__decorate</span>([<br>    <span class="hljs-title function_">configurable</span>(<span class="hljs-literal">false</span>)<br>], <span class="hljs-title class_">Point</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-title function_">__decorate</span>([<br>    <span class="hljs-title function_">configurable</span>(<span class="hljs-literal">false</span>)<br>], <span class="hljs-title class_">Point</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">const</span> point = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ point ] &gt;&quot;</span>, point);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ point.x ] &gt;&quot;</span>, point.<span class="hljs-property">x</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ point.y ] &gt;&quot;</span>, point.<span class="hljs-property">y</span>);<br></code></pre></td></tr></table></figure><h5 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h5><p>作用于属性的装饰器，可以用来监视，修改或替换属性定义。<br>一般用于处理这个属性的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Meta_programming">元数据</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;reflect-metadata&quot;</span>;<br><br><span class="hljs-keyword">const</span> formatMetadataKey = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;format&quot;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">format</span>(<span class="hljs-params">formatString: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">target: <span class="hljs-built_in">any</span>, porpertyKey: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">metadata</span>(formatMetadataKey, formatString);<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFormat</span>(<span class="hljs-params">target: <span class="hljs-built_in">any</span>, porpertyKey: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getMetadata</span>(formatMetadataKey, target, porpertyKey);<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Greeter2</span> &#123;<br>  <span class="hljs-meta">@format</span>(<span class="hljs-string">&quot;Hello, %s&quot;</span>)<br>  <span class="hljs-attr">greeting</span>: <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">message: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">greeting</span> = message;<br>  &#125;<br>  <span class="hljs-title function_">greet</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> formatString = <span class="hljs-title function_">getFormat</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;greeting&quot;</span>);<br>    <span class="hljs-keyword">return</span> formatString.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">greeting</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="实际场景-1"><a href="#实际场景-1" class="headerlink" title="实际场景"></a>实际场景</h6><p>属性拦截</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">greetingWraper</span>(<span class="hljs-params">target: <span class="hljs-built_in">any</span>, porpertyKey: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(target, porpertyKey, &#123;<br>    <span class="hljs-comment">// 劫持操作 ...</span><br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Greeter2</span> &#123;<br>  <span class="hljs-meta">@greetingWraper</span><br>  <span class="hljs-attr">greeting</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;111&quot;</span>;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">message: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">greeting</span> = message;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h5><p>作用于参数的装饰器，可以用来监视参数是否传入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> requiredMetadataKey = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;required&quot;</span>);<br><br><span class="hljs-comment">// 参数装饰器</span><br><span class="hljs-comment">// 参数 3 个：</span><br><span class="hljs-comment">// target：对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</span><br><span class="hljs-comment">// propertyKey：成员的名字</span><br><span class="hljs-comment">// index：参数在函数参数列表中的索引</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">required</span>(<span class="hljs-params"></span><br><span class="hljs-params">  target: <span class="hljs-built_in">Object</span>,</span><br><span class="hljs-params">  propertyKey: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span>,</span><br><span class="hljs-params">  parameterIndex: <span class="hljs-built_in">number</span></span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">existingRequiredParameters</span>: <span class="hljs-built_in">number</span>[] =<br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getOwnMetadata</span>(requiredMetadataKey, target, propertyKey) || [];<br>  existingRequiredParameters.<span class="hljs-title function_">push</span>(parameterIndex);<br>  <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineMetadata</span>(<br>    requiredMetadataKey,<br>    existingRequiredParameters,<br>    target,<br>    propertyKey<br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params"></span><br><span class="hljs-params">  target: <span class="hljs-built_in">any</span>,</span><br><span class="hljs-params">  propertyName: <span class="hljs-built_in">string</span>,</span><br><span class="hljs-params">  descriptor: PropertyDescriptor</span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> method = descriptor.<span class="hljs-property">value</span>;<br>  descriptor.<span class="hljs-property">value</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">requiredParameters</span>: <span class="hljs-built_in">number</span>[] = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getOwnMetadata</span>(<br>      requiredMetadataKey,<br>      target,<br>      propertyName<br>    );<br>    <span class="hljs-keyword">if</span> (requiredParameters) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> parameterIndex <span class="hljs-keyword">of</span> requiredParameters) &#123;<br>        <span class="hljs-keyword">if</span> (<br>          parameterIndex &gt;= <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> ||<br>          <span class="hljs-variable language_">arguments</span>[parameterIndex] === <span class="hljs-literal">undefined</span><br>        ) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Missing required argument.&quot;</span>);<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> method!.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GreeterX</span> &#123;<br>  <span class="hljs-attr">greeting</span>: <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">message: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">greeting</span> = message;<br>  &#125;<br><br>  <span class="hljs-meta">@validate</span><br>  <span class="hljs-title function_">greet</span>(<span class="hljs-params"><span class="hljs-meta">@required</span> name: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name + <span class="hljs-string">&quot;, &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">greeting</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><p>官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Meta_programming">元编程 - JavaScript | MDN</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>了解完装饰器后，如果是经常写 nodejs 的人就会发现已经不知不觉用了装饰器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 某个 xxx.controller.ts</span><br><span class="hljs-meta">@ApiOperation</span>(&#123; <span class="hljs-attr">summary</span>: <span class="hljs-string">&#x27;用户登录&#x27;</span> &#125;)<br><span class="hljs-meta">@ApiCreatedResponse</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">UserEntity</span> &#125;)<br><span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;login&#x27;</span>)<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">login</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() loginDto: LoginDto</span>) &#123;<br>  <span class="hljs-comment">// 登录的业务逻辑....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中的<code>@ApiOperation、@ApiCreatedResponse、@Post、@Body</code>等，就是很多 nodejs 框架所提供的装饰器<br>所以装饰器的实际使用场景在<code>nodejs</code>比较广泛，客户端领域可能用的比较少。</p><h1 id="TS-原理解析"><a href="#TS-原理解析" class="headerlink" title="TS 原理解析"></a>TS 原理解析</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// TS 源码</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span><br><br><span class="hljs-comment">// TS 做的事情：</span><br><span class="hljs-comment">// 1. scanner：扫描器，扫描并识别代码与生成数据流(Token)</span><br><span class="hljs-comment">// 2. parser：解析器， 生成语法树(AST)</span><br><span class="hljs-comment">// 3. binder：绑定器，基于语法树创建 symbols，进行类型绑定(判断每个节点用什么类型去检查)</span><br><span class="hljs-comment">// 4. checker：检查器，检查 TS 代码的语法问题</span><br><span class="hljs-comment">// 5. emitter：发射器，根据每个节点的检查结果，翻译为 js</span><br></code></pre></td></tr></table></figure><h1 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h1><h2 id="Object-seal"><a href="#Object-seal" class="headerlink" title="Object.seal()"></a>Object.seal()</h2><p>官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal">Object.seal() - JavaScript | MDN</a><br>作用：密封一个对象。<br>密封后：该对象将【不能添加新属性】、【不能删除现有属性或更改其可枚举性和可配置性】、【不能重新分配其原型】、【现有属性的值是可以更改的】(这是与 freeze 的区别)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zhangsan&#x27;</span> &#125;<br><span class="hljs-keyword">const</span> sealObj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">seal</span>(obj)<br>sealObj === obj <span class="hljs-comment">// true</span><br><br>sealObj.<span class="hljs-property">age</span> = <span class="hljs-number">12</span> <span class="hljs-comment">// 新增属性失败，可能不会报错，age 属性并不会添加进去</span><br><span class="hljs-keyword">delete</span> sealObj.<span class="hljs-property">name</span> <span class="hljs-comment">// 删除属性失败，可能不会报错，name 属性并不会删除</span><br>sealObj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;lisi&#x27;</span> <span class="hljs-comment">// 更改现有属性成功</span><br>obj.<span class="hljs-property">__proto__</span> = &#123;&#125; <span class="hljs-comment">// 更改原型失败，报错：Uncaught TypeError: #&lt;Object&gt; is not extensible(可扩展)</span><br></code></pre></td></tr></table></figure><h2 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze()"></a>Object.freeze()</h2><p>官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">Object.freeze() - JavaScript | MDN</a><br>作用：冻结一个对象<br>冻结后：该对象将【不能添加新的属性】、【不能移除现有的属性】、【不能更改它们的可枚举性、可配置性、可写性或值】、【对象的原型也不能被重新指定】</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zhangsan&#x27;</span> &#125;<br><span class="hljs-keyword">const</span> sealObj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(obj)<br>sealObj === obj <span class="hljs-comment">// true</span><br><br>sealObj.<span class="hljs-property">age</span> = <span class="hljs-number">12</span> <span class="hljs-comment">// 新增属性失败，可能不会报错，age 属性并不会添加进去</span><br><span class="hljs-keyword">delete</span> sealObj.<span class="hljs-property">name</span> <span class="hljs-comment">// 删除属性失败，可能不会报错，name 属性并不会删除</span><br>sealObj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;lisi&#x27;</span> <span class="hljs-comment">// 更改现有属性失败，可能不会报错，name 属性并不能更改</span><br>obj.<span class="hljs-property">__proto__</span> = &#123;&#125; <span class="hljs-comment">// 更改原型失败，报错：Uncaught TypeError: #&lt;Object&gt; is not extensible(可扩展)</span><br></code></pre></td></tr></table></figure><h1 id="面试题-1"><a href="#面试题-1" class="headerlink" title="面试题"></a>面试题</h1><h2 id="interface-VS-type"><a href="#interface-VS-type" class="headerlink" title="interface VS type"></a>interface VS type</h2><table><thead><tr><th></th><th>interface</th><th>type</th></tr></thead><tbody><tr><td>extends</td><td>可以</td><td>不可以</td></tr><tr><td>implements</td><td>可以</td><td>不可以</td></tr><tr><td>联合&#124;交叉</td><td>不可以</td><td>可以</td></tr></tbody></table><p>使用情况：如果你无法通过接口来描述一个类型并且需要使用联合类型或元组类型，这时通常会使用类型别名。</p>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-7、函数式编程</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/1-7%E3%80%81%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/1-7%E3%80%81%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>函数式编程：鼓励使用纯函数（Pure Functions），即对于相同的输入，始终产生相同的输出，并且没有副作用（没有改变外部状态的行为）</p><h1 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h1><p>命令式 &#x3D;&gt; 面向对象 &#x3D;&gt; 面向函数<br>面试题：<br>将数组：[‘process&amp;%coding’, ‘object&amp;%coding’, ‘function&amp;%coding’]<br>转为 JSON：[{ name: ‘Process Coding’}, { name: ‘Object Coding’}, { name: ‘Function Coding’}]<br><code>命令式</code>代码举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&quot;process&amp;%coding&quot;</span>, <span class="hljs-string">&quot;object&amp;%coding&quot;</span>, <span class="hljs-string">&quot;function&amp;%coding&quot;</span>];<br><span class="hljs-keyword">const</span> parseArr = [];<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Parser</span> = (<span class="hljs-params">arr, parseArr</span>) =&gt; &#123;<br>  arr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> newItem = [];<br>      item.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;%&quot;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">_item</span>) =&gt;</span> &#123;<br>      newItem.<span class="hljs-title function_">push</span>(_item[<span class="hljs-number">0</span>].<span class="hljs-title function_">toUpperCase</span>() + _item.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>));<br>      &#125;);<br>      parseArr.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">name</span>: newItem.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot; &quot;</span>) &#125;);<br>  &#125;);<br>&#125;;<br><br><span class="hljs-title class_">Parser</span>(arr, parseArr);<br><br><span class="hljs-comment">// 存在的问题</span><br><span class="hljs-comment">// 1. 有包裹逻辑 - 需要看完整段代码才能明白是在做啥</span><br><span class="hljs-comment">// 2. 存在临时变量，并且首尾封闭 - 拓展/返回临时变量的难度更高</span><br></code></pre></td></tr></table></figure><p><code>对象式</code>代码举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Parser</span> = &#123;<br>  <span class="hljs-title function_">toJson</span>(arr, parseArr) =&gt; &#123;<br>    arr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> newItem = [];<br>        item.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;%&quot;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">_item</span>) =&gt;</span> &#123;<br>        newItem.<span class="hljs-title function_">push</span>(_item[<span class="hljs-number">0</span>].<span class="hljs-title function_">toUpperCase</span>() + _item.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>));<br>        &#125;);<br>        parseArr.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">name</span>: newItem.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot; &quot;</span>) &#125;);<br>    &#125;);<br>  &#125;;<br>&#125;<br><br><span class="hljs-title class_">Parser</span>.<span class="hljs-title function_">toJson</span>(arr, parseArr);<br></code></pre></td></tr></table></figure><p><code>函数式</code>代码举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 需求拆解：</span><br><span class="hljs-comment">// 1. 数组转为 JSON：arrToJSON</span><br><span class="hljs-comment">// 2. arrToJSON = stringFormat + objHelper</span><br><span class="hljs-comment">// 3. stringFormat = split + capitalize + join</span><br><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&quot;process&amp;%coding&quot;</span>, <span class="hljs-string">&quot;object&amp;%coding&quot;</span>, <span class="hljs-string">&quot;function&amp;%coding&quot;</span>];<br><br><span class="hljs-comment">// 原子逻辑:</span><br><span class="hljs-comment">// objHelper: 生成对象</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">createObj</span> = (<span class="hljs-params">key, anyValue</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> obj = &#123;<br>    [key]: anyValue<br>  &#125;<br>  <span class="hljs-keyword">return</span> obj<br>&#125;<br><br><span class="hljs-comment">// strSplit: 按需分割</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">strSplit</span> = (<span class="hljs-params">str, splitKey</span>) =&gt; str.<span class="hljs-title function_">split</span>(splitKey)<br><br><span class="hljs-comment">// capitalize: 首字母大写</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">capitalize</span> = str =&gt; &#123;<br>  <span class="hljs-keyword">return</span> str[<span class="hljs-number">0</span>].<span class="hljs-title function_">toUpperCase</span>() + str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-comment">// 逻辑拼装:</span><br><span class="hljs-comment">// stringFormat: 字符串处理</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">stringFormat</span> = str =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">strSplit</span>(str, <span class="hljs-string">&#x27;&amp;%&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-title function_">capitalize</span>(item)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">objHelper</span> = (<span class="hljs-params">str</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">createObj</span>(<span class="hljs-string">&#x27;name&#x27;</span>, str)<br>&#125;<br><br><span class="hljs-comment">// arrToJSON: 生成 JSON</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">arrToJSON</span> = (<span class="hljs-params">arr</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-title function_">objHelper</span>(<span class="hljs-title function_">stringFormat</span>(item)))<br>&#125;<br><br><span class="hljs-comment">// 好处：</span><br><span class="hljs-comment">// 1、将复杂的逻辑通过合理的拆分，变成简单功能的拼装，利于后期的维护与扩展</span><br></code></pre></td></tr></table></figure><h1 id="函数式编程的原理、特点"><a href="#函数式编程的原理、特点" class="headerlink" title="函数式编程的原理、特点"></a>函数式编程的原理、特点</h1><h2 id="什么是函数式编程？"><a href="#什么是函数式编程？" class="headerlink" title="什么是函数式编程？"></a>什么是函数式编程？</h2><p>将复杂功能“因式分解”，然后使用“加法结合律”组装完成功能的思维形式</p><h2 id="理论思想"><a href="#理论思想" class="headerlink" title="理论思想"></a>理论思想</h2><p>函数是一等公民<br>每个原子功能，就是一个采用命令式编程的函数，并且属于惰性执行(需要的时候才会执行)<br><code>惰性执行</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 非惰性</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createPersonNoLazy</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ createPersonNoLazy person is created ] &gt;&quot;</span>);<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;xx&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br>  &#125;;<br>&#125;<br><span class="hljs-comment">// 每次执行都重新生成新的</span><br><span class="hljs-keyword">const</span> preson1 = <span class="hljs-title function_">createPersonNoLazy</span>();<br><span class="hljs-keyword">const</span> preson2 = <span class="hljs-title function_">createPersonNoLazy</span>();<br><br><span class="hljs-comment">// 惰性</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createPersonLazy</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ createPersonLazy person is created ] &gt;&quot;</span>);<br>  <span class="hljs-keyword">const</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;xx&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br>  &#125;;<br><br>  <span class="hljs-comment">// 函数重写</span><br>  createPersonLazy = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ createPersonLazy person is existed ] &gt;&quot;</span>);<br>    <span class="hljs-keyword">return</span> person;<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> person;<br>&#125;<br><br><span class="hljs-comment">// 第一次执行都生成新的，后续直接返回 person</span><br><span class="hljs-keyword">const</span> person3 = <span class="hljs-title function_">createPersonLazy</span>();<br><span class="hljs-keyword">const</span> person4 = <span class="hljs-title function_">createPersonLazy</span>();<br></code></pre></td></tr></table></figure><h2 id="函数式编程的要求"><a href="#函数式编程的要求" class="headerlink" title="函数式编程的要求"></a>函数式编程的要求</h2><h3 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h3><p>指函数在执行时不依赖或修改外部状态。它的行为仅由输入参数决定，并且对于相同的输入，总是产生相同的输出，不受外部环境的影响。</p><h3 id="无副作用"><a href="#无副作用" class="headerlink" title="无副作用"></a>无副作用</h3><p>指函数在执行过程中不对外部环境产生可观察的影响，即不会对输入的[参数、外部变量]进行修改。</p><h1 id="函数式编程的实际开发"><a href="#函数式编程的实际开发" class="headerlink" title="函数式编程的实际开发"></a>函数式编程的实际开发</h1><h2 id="纯函数改造"><a href="#纯函数改造" class="headerlink" title="纯函数改造"></a>纯函数改造</h2><p>满足无状态 &amp;&amp; 无副作用的函数就是纯函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span><br><br><span class="hljs-comment">// 引入了外部变量，违反了无状态</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = x =&gt; a + x<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">a, x</span>) =&gt; a + x <span class="hljs-comment">// 无状态</span><br><br><span class="hljs-comment">// 改变了参数/外部变量，违反了无副作用</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = obj =&gt; obj.<span class="hljs-property">x</span>++<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = obj =&gt; &#123; ...obj, <span class="hljs-attr">x</span>: obj.<span class="hljs-property">x</span> + <span class="hljs-number">1</span>&#125; <span class="hljs-comment">// 无副作用</span><br></code></pre></td></tr></table></figure><h3 id="函子"><a href="#函子" class="headerlink" title="函子"></a>函子</h3><p>定义：一个<code>类/构造函数</code>，具有<code>map</code>方法，每次调用<code>map</code>会生成新的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Box</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">val</span> = val;<br>&#125;<br><br><span class="hljs-comment">// of 函数：让使用者不必使用 new 来新建对象</span><br><span class="hljs-title class_">Box</span>.<span class="hljs-property">of</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>(val);<br>&#125;<br><span class="hljs-title class_">Box</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">map</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">func</span>) &#123; <span class="hljs-comment">// 必须</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isNull</span>() ? <span class="hljs-title class_">Box</span>.<span class="hljs-title function_">of</span>(<span class="hljs-literal">null</span>) : <span class="hljs-title class_">Box</span>.<span class="hljs-title function_">of</span>(<span class="hljs-title function_">func</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">val</span>));<br>&#125;<br><br><span class="hljs-comment">// 错误处理-函子</span><br><span class="hljs-title class_">Box</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">isNull</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">val</span> === <span class="hljs-literal">null</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">val</span> === <span class="hljs-literal">undefined</span><br><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = x =&gt; x + <span class="hljs-number">1</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">square</span> = x =&gt; x * x<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">setNull</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-literal">null</span><br><br><span class="hljs-title class_">Box</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">map</span>(add).<span class="hljs-title function_">map</span>(setNull).<span class="hljs-title function_">map</span>(square).<span class="hljs-property">val</span> === <span class="hljs-literal">null</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="函子的作用：适合消除副作用"><a href="#函子的作用：适合消除副作用" class="headerlink" title="函子的作用：适合消除副作用"></a>函子的作用：适合消除副作用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Monad</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value;<br>  &#125;<br><br>  <span class="hljs-title function_">bind</span>(<span class="hljs-params">transform</span>) &#123;<br>    <span class="hljs-comment">// `bind` 方法用于将当前 Monad 的值传递给一个函数（transform），并返回一个新的 Monad</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">transform</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// `value` 方法用于获取 Monad 的值</span><br>  <span class="hljs-title function_">value</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用示例</span><br><span class="hljs-keyword">const</span> readFile = <span class="hljs-keyword">function</span> (<span class="hljs-params">filename</span>) &#123;<br>  <span class="hljs-keyword">const</span> content = fs.<span class="hljs-title function_">readFileSync</span>(filename, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Monad</span>(content);<br>&#125;;<br><br><span class="hljs-keyword">const</span> print = <span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Monad</span>(x);<br>&#125;;<br><br><span class="hljs-keyword">const</span> tail = <span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">const</span> lastLine = x.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;\n&#x27;</span>).<span class="hljs-title function_">pop</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Monad</span>(lastLine);<br>&#125;;<br><br><span class="hljs-comment">// 链式操作</span><br><span class="hljs-keyword">const</span> monad = <span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./xxx.txt&#x27;</span>).<span class="hljs-title function_">bind</span>(tail).<span class="hljs-title function_">bind</span>(print);<br><span class="hljs-comment">// 执行操作</span><br>monad.<span class="hljs-title function_">value</span>();  <span class="hljs-comment">// 这里触发整个流程的执行</span><br></code></pre></td></tr></table></figure><p><a href="https://ruanyifeng.com/blog/2015/07/monad.html">图解 Monad - 阮一峰的网络日志</a></p><h2 id="加工-组装"><a href="#加工-组装" class="headerlink" title="加工 &amp; 组装"></a>加工 &amp; 组装</h2><h3 id="加工-柯里化"><a href="#加工-柯里化" class="headerlink" title="加工 - 柯里化"></a>加工 - 柯里化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 未柯里化</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add1</span> = (<span class="hljs-params">x, y, z</span>) =&gt; x + y + z<br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><br><span class="hljs-comment">// 柯里化</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add2</span> = (<span class="hljs-params">x</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">y</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">z</span> =&gt;</span> x + y + z<br>  &#125;<br>&#125;<br><span class="hljs-title function_">add2</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">// 柯里化转换函数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">toKLH</span> = (<span class="hljs-params">fn</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">KLH</span> = (<span class="hljs-params">...arg</span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (arg.<span class="hljs-property">length</span> === fn.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">fn</span>(...arg);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...arg2</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">KLH</span>(...arg.<span class="hljs-title function_">concat</span>(arg2));<br>      &#125;;<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable constant_">KLH</span>;<br>&#125;;<br><br><span class="hljs-comment">// 分批次使用</span><br><span class="hljs-keyword">const</span> add10 = <span class="hljs-title function_">toKLH</span>(add1)(<span class="hljs-number">10</span>) <span class="hljs-comment">// 计算初始值为 10 的加法</span><br><span class="hljs-keyword">const</span> add20 = <span class="hljs-title function_">toKLH</span>(add1)(<span class="hljs-number">20</span>) <span class="hljs-comment">// 计算初始值为 20 的加法</span><br><br><span class="hljs-title function_">add10</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">3</span>)<br><span class="hljs-title function_">add20</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>为什么需要柯里化，为了函数的输入输出单值化(单元函数，更利于组合)，更加方便操作多值函数</p><h3 id="组装-高阶函数"><a href="#组装-高阶函数" class="headerlink" title="组装 - 高阶函数"></a>组装 - 高阶函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">sum1</span> = x =&gt; x + <span class="hljs-number">1</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">sum2</span> = x =&gt; x + <span class="hljs-number">2</span><br><br><span class="hljs-comment">// 函数式</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">compose</span> = (<span class="hljs-params">f, g</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">f</span>(<span class="hljs-title function_">g</span>(x))<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> sum1_2 = <span class="hljs-title function_">compose</span>(sum1, sum2)(value) <span class="hljs-comment">// 4</span><br><br><span class="hljs-comment">// 命令式</span><br><span class="hljs-title function_">sum2</span>(<span class="hljs-title function_">sum1</span>(value))()<br><br><span class="hljs-comment">// 对象式</span><br>valueInstance.<span class="hljs-title function_">sum1</span>().<span class="hljs-title function_">sum2</span>()<br></code></pre></td></tr></table></figure><h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>定义：函数为参的函数<br>黑话：逻辑外壳</p><h2 id="toString-、valueOf"><a href="#toString-、valueOf" class="headerlink" title="toString()、valueOf()"></a>toString()、valueOf()</h2><p>当转为字符串时，先调用 toString()<br>若返回的是基本类型，则直接调用 String()<br>否则再调用 valueOf()，若返回的是基本类型，则再调用 String()，否则就报错<code>Uncaught TypeError: Cannot convert object to primitive value</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-string">&quot;toString&quot;</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1.执行了toString()方法&#x27;</span>);<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;,<br><br>    <span class="hljs-string">&quot;valueOf&quot;</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;2.执行了valueOf()方法&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">12</span>  <span class="hljs-comment">// 基本类型-number</span><br>    &#125;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>(obj));<br><span class="hljs-comment">// 1.执行了toString()方法</span><br><span class="hljs-comment">// 2.执行了valueOf()方法</span><br><span class="hljs-comment">// &#x27;12&#x27;</span><br><br><br><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-string">&quot;toString&quot;</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1.执行了toString()方法&#x27;</span>);<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;,<br><br>    <span class="hljs-string">&quot;valueOf&quot;</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;2.执行了valueOf()方法&#x27;</span>);<br>        <span class="hljs-keyword">return</span> &#123;&#125; <span class="hljs-comment">// 复杂类型-object</span><br>    &#125;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>(obj));<br><span class="hljs-comment">// 1.执行了toString()方法</span><br><span class="hljs-comment">// 2.执行了valueOf()方法</span><br><span class="hljs-comment">// Uncaught TypeError: Cannot convert object to primitive value</span><br><span class="hljs-comment">// at String (&lt;anonymous&gt;)</span><br><span class="hljs-comment">// at &lt;anonymous&gt;:14:13</span><br></code></pre></td></tr></table></figure><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="如何使用正确的遍历"><a href="#如何使用正确的遍历" class="headerlink" title="如何使用正确的遍历"></a>如何使用正确的遍历</h2><p>数组：for、find、findIndex、forEach、map、filter、reduce、sort、some、every<br>对象：for in<br>类数组：for<br>可遍历：for、for of</p><h3 id="为什么数组有这么多的遍历方法？"><a href="#为什么数组有这么多的遍历方法？" class="headerlink" title="为什么数组有这么多的遍历方法？"></a>为什么数组有这么多的遍历方法？</h3><ul><li>for：通用</li><li>find：找到某个值</li><li>findIndex：找到某个值的下标</li><li>forEach：遍历进行逻辑处理</li><li>map：生成新数组，顺带进行逻辑处理</li><li>filter：过滤满足条件的值，并生成新数组</li><li>reduce：累积</li><li>sort：排序</li><li>some：是否 &gt;&#x3D;1 个满足条件</li><li>every：是否所有满足条件</li></ul><p>本质逻辑是：满足函数式编程，让每个函数有自己应该做的事情</p><h2 id="JS-里面的副作用函数有哪些？"><a href="#JS-里面的副作用函数有哪些？" class="headerlink" title="JS 里面的副作用函数有哪些？"></a>JS 里面的副作用函数有哪些？</h2><ul><li>split：不会改变原数据</li><li>slice：不会改变原数据</li><li>splice：会改变原数据</li><li>pop：会改变原数据</li><li>push：会改变原数据</li><li>shift：会改变原数据</li><li>unshift：会改变原数据</li><li>reverse：会改变原数据</li><li>sort：会改变原数据</li><li>…</li></ul><h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 实现一个 add(1)(2)(3)...(n)() 的累加函数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">...args1</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">inner</span> = (<span class="hljs-params">...args2</span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (args2.<span class="hljs-property">length</span>) &#123;<br>      args1.<span class="hljs-title function_">push</span>(...args2);<br>      <span class="hljs-keyword">return</span> inner;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> args1.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">total, curr</span>) =&gt;</span> (total += curr), <span class="hljs-number">0</span>);<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> inner;<br>&#125;<br><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)() <span class="hljs-comment">// 1</span><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)() <span class="hljs-comment">// 3</span><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)() <span class="hljs-comment">// 6</span><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)(<span class="hljs-number">4</span>)() <span class="hljs-comment">// 10</span><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)() <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure><h3 id="柯里化与闭包的关系"><a href="#柯里化与闭包的关系" class="headerlink" title="柯里化与闭包的关系"></a>柯里化与闭包的关系</h3><p>“孪生子”<br>闭包定义：返回函数的函数，其中内部函数使用了外部函数定义的变量，形成了闭包<br>柯里化定义：将多参数的函数转为接受单&#x2F;部分参数的函数，并且返回接受剩余参数和返回结果的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 闭包 ----</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add10</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> num = <span class="hljs-number">10</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> x + num<br>&#125;<br><span class="hljs-keyword">const</span> addInit = <span class="hljs-title function_">add10</span>()<br><span class="hljs-title function_">addInit</span>(<span class="hljs-number">10</span>) <span class="hljs-comment">// 10+10,20</span><br><br><span class="hljs-comment">// 柯里化 ----</span><br><span class="hljs-comment">// 初始函数 add</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add1</span> = (<span class="hljs-params">x, y</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> x + y<br>&#125;<br><span class="hljs-title function_">add1</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)<br><br><span class="hljs-comment">// 初始函数 add 柯里化后</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add2</span> = (<span class="hljs-params">x</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">y</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> x + y<br>  &#125;<br>&#125;<br><span class="hljs-title function_">add2</span>(<span class="hljs-number">10</span>)(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h2 id="柯里化的运用"><a href="#柯里化的运用" class="headerlink" title="柯里化的运用"></a>柯里化的运用</h2><h3 id="防抖、节流"><a href="#防抖、节流" class="headerlink" title="防抖、节流"></a>防抖、节流</h3><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><p>定义：触发后，x 时间后才生效(每次触发都重新计时)，适用于：onresize、输入框搜索等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">debounce</span> = (<span class="hljs-params">fn, delay</span>) =&gt; &#123;<br>  delay = delay || <span class="hljs-number">200</span><br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">clearTimeout</span>(timer)<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>    &#125;, delay)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-title function_">debounce</span>(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;e.type&#x27;</span>, e.<span class="hljs-property">type</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;count&#x27;</span>, ++count)<br>&#125;, <span class="hljs-number">500</span>)<br></code></pre></td></tr></table></figure><h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><p>定义：x 时间内只会触发一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">const</span> <span class="hljs-title function_">throttle</span> = (<span class="hljs-params">fn, delay</span>) =&gt; &#123;<br>  delay = delay || <span class="hljs-number">200</span>;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!timer) &#123;<br>      timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>        timer = <span class="hljs-literal">null</span>;<br>      &#125;, delay);<br>    &#125;<br>  &#125;;<br>&#125;;<br><br><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-title function_">debounce</span>(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;e.type&#x27;</span>, e.<span class="hljs-property">type</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;count&#x27;</span>, ++count)<br>&#125;, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><h3 id="缓存计算"><a href="#缓存计算" class="headerlink" title="缓存计算"></a>缓存计算</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 需求：大数据的计算</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">calculateFn</span> = (<span class="hljs-params">num</span>)=&gt;&#123;<br>  <span class="hljs-keyword">const</span> startTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;num;i++)&#123;<br>    <span class="hljs-comment">// 大数计算.....</span><br>  &#125;<br>  <span class="hljs-keyword">const</span> endTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(endTime - startTime)<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Calculate big numbers&quot;</span><br>&#125;<br><br><span class="hljs-title function_">calculateFn</span>(<span class="hljs-number">10_000_000_000</span>) <span class="hljs-comment">// 耗时 8s</span><br><span class="hljs-title function_">calculateFn</span>(<span class="hljs-number">10_000_000_000</span>) <span class="hljs-comment">// 每次调用都耗时 8s</span><br><span class="hljs-title function_">calculateFn</span>(<span class="hljs-number">10_000_000_000</span>) <span class="hljs-comment">// 每次调用都耗时 8s</span><br><br><span class="hljs-comment">// 柯里化-缓存改造</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">caches</span> = (<span class="hljs-params">fn</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> cacheResult = &#123;&#125;;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!cacheResult[num]) &#123;<br>      cacheResult[num] = <span class="hljs-title function_">fn</span>(num);<br>    &#125;<br>    <span class="hljs-keyword">return</span> cacheResult[num];<br>  &#125;;<br>&#125;;<br><br><span class="hljs-keyword">const</span> calculateCacesFn = <span class="hljs-title function_">caches</span>(calculateFn);<br><br><span class="hljs-title function_">calculateCacesFn</span>(<span class="hljs-number">10_000_000</span>); <span class="hljs-comment">// 首次调用，耗时 8s</span><br><span class="hljs-title function_">calculateCacesFn</span>(<span class="hljs-number">10_000_000</span>); <span class="hljs-comment">// 重复调用，直接拿值</span><br><span class="hljs-title function_">calculateCacesFn</span>(<span class="hljs-number">20_000_000</span>); <span class="hljs-comment">// 首次调用，耗时 8s</span><br><span class="hljs-title function_">calculateCacesFn</span>(<span class="hljs-number">20_000_000</span>); <span class="hljs-comment">// 重复调用，直接拿值</span><br></code></pre></td></tr></table></figure><h3 id="实际业务"><a href="#实际业务" class="headerlink" title="实际业务"></a>实际业务</h3><p>业务需求：某个函数调用 n 次后，不再调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">beforDo</span> = (<span class="hljs-params">deNum, fn</span>) =&gt; &#123;<br> <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">let</span> result<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span>(count &lt; deNum) &#123;<br>      result = fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>      count++<br>    &#125;<br>    <span class="hljs-keyword">return</span> result<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> fn = <span class="hljs-title function_">beforDo</span>(<span class="hljs-number">3</span>, <span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x))<br><span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 1</span><br><span class="hljs-title function_">fn</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// 2</span><br><span class="hljs-title function_">fn</span>(<span class="hljs-number">3</span>) <span class="hljs-comment">// 3</span><br><span class="hljs-title function_">fn</span>(<span class="hljs-number">4</span>) <span class="hljs-comment">// 函数将不再执行</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-6、JS 性能优化</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/1-6%E3%80%81JS%20%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/1-6%E3%80%81JS%20%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h1><h2 id="Performance-Timing-API"><a href="#Performance-Timing-API" class="headerlink" title="Performance Timing API"></a>Performance Timing API</h2><p><img src="/img/images/2023/1701758648344-20da0cb5-69ec-48be-a196-4f6d65ec7db1.png"><br>浏览器的性能指标可以通过 Performance Timing API 来获取，它是一组 API 的集合，常用的有：</p><ol><li>Navigation Timing API：包含了从页面导航开始到页面加载完毕的一系列耗时 API(PerformanceNavigationTiming)，通过<code>window.performance.getEntries()[0]/performance.getEntriesByType(&#39;navigation&#39;)[0]</code>获取</li><li>Resource Timing API：包含网页资源(脚本、样式、图片等)加载的耗时 API(PerformanceResourceTiming)，通过<code>window.performance.getEntries()[*]/performance.getEntriesByType(&#39;resource&#39;)[*]</code>获取</li><li>Paint Timing API：包含网页绘制相关的耗时 API(PerformancePaintTiming)，通过<code>window.performance.getEntries()[*]/performance.getEntriesByType(&#39;paint&#39;)[*]</code></li></ol><p>其中<code>window.performance.getEntries()</code>获取到的是个数组，里面包含一系列 API，并且同时存在多种 API，以下是浏览器打印的结果<br><img src="/img/images/2023/1701257984318-8ae5c3d7-16b5-49b7-ac38-0ee21e61a6f2.png"><br><code>performance.getEntriesByType(&#39;type&#39;)</code> 可根据类型获取到对应 API 数组</p><h3 id="Navigation-Timing-API"><a href="#Navigation-Timing-API" class="headerlink" title="Navigation Timing API"></a>Navigation Timing API</h3><p>官方文档：<a href="https://www.w3.org/TR/navigation-timing-2/#introduction">https://www.w3.org/TR/navigation-timing-2/#introduction</a><br>我们这主要分析<code>Navigation Timing API</code>，记录页面导航到页面 load 加载完毕的一系列事件，其中跟<code>Resource Timing API</code>也有关联<br>通过<code>window.performance.getEntries()[0]</code>获取，浏览器打印结果如下：</p><ul><li>name：地址栏的值</li><li>entryType：值为<code>navigation</code>，表明是一个<code>PerformanceNavigationTiming</code>实例</li><li>startTime：开始时间，毫秒</li><li>duration：总耗时，毫秒，从导航开始到 load 加载完的时间，等价于<code>loadEventEnd - startTime</code></li></ul><p><a href="https://www.w3.org/TR/navigation-timing-2/#sec-PerformanceNavigationTiming">Navigation Timing Level 2</a><br><img src="/img/images/2023/1701258303725-1fa5df58-b6c5-4954-b4e1-73019645eaeb.png"><br>包含的属性很多，但它们之间是存在联系的，图片来自：<a href="https://www.w3.org/TR/navigation-timing-2/#processing-model">Navigation Timing Level 2</a><br><img src="/img/images/2023/1701258718661-0cab995e-0d4b-4215-9886-3d4e54816db1.svg" alt="timestamp-diagram.svg"></p><h3 id="流程解读"><a href="#流程解读" class="headerlink" title="流程解读"></a>流程解读</h3><h4 id="startTime"><a href="#startTime" class="headerlink" title="startTime"></a>startTime</h4><p>开始时间，一般为 0</p><h4 id="Process-Unload-Event"><a href="#Process-Unload-Event" class="headerlink" title="Process Unload Event"></a>Process Unload Event</h4><p>进程解锁事件，一般是执行上一个页面的 unload 事件(若有)，记录两个时间：<code>unloadEventStart/unloadEventEnd</code></p><h4 id="Redirect"><a href="#Redirect" class="headerlink" title="Redirect"></a>Redirect</h4><p>重定向事件，若有重定向则记录两个时间：<code>redirectStart/redirectEnd</code><br>同域名下时，可以直接用该值；若不是同域名，该值不太准确</p><h4 id="Service-Worker-Init"><a href="#Service-Worker-Init" class="headerlink" title="Service Worker Init"></a>Service Worker Init</h4><p>初始化<code>service worker</code>，若有启动，则记录启动时间：<code>workerStart</code></p><h4 id="Service-Worker-Fetch-Init"><a href="#Service-Worker-Fetch-Init" class="headerlink" title="Service Worker Fetch Init"></a>Service Worker Fetch Init</h4><p>初始化<code>service worker 的 fetch</code>，若有启动，则记录启动时间：<code>fetchStart</code><br>一般为浏览器开始获取 HTML 的时间</p><h4 id="HTTP-Cache"><a href="#HTTP-Cache" class="headerlink" title="HTTP Cache"></a>HTTP Cache</h4><p>从缓存里面的找数据，这一步无计时点，但可以通过：<code>domainLookupStart - fetchStart</code>来计算缓存找数据的耗时</p><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>开始进行域名的查找，记录两个时间：<code>domianLookupStart/domainLookupEnd</code></p><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><p>TCP 连接，记录两个时间：<code>connectStart/connectEnd</code><br>若是 HTTPS 协议，则额外有安全连接的开始时间：<code>secureConnectStart</code><br>connectStart 与 domianLookupStart 之间的差值为：类型判断的耗时，因为需要判断是 HTTP&#x2F;HTTPS、短链接&#x2F;长链接 等等</p><h4 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h4><p>发起请求，记录时间：<code>requestStart</code></p><h4 id="Early-Hints"><a href="#Early-Hints" class="headerlink" title="Early Hints"></a>Early Hints</h4><p>早期提示，跟 HTTP 的状态码<code>103</code>挂钩，一般告知浏览器一些子资源(JS&#x2F;CSS 等)，便于提前加载，可以记录的时间有：<code>interimResponseStart</code></p><h4 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h4><p>返回响应，记录时间：<code>responseStart/responseEnd</code></p><h4 id="Processing"><a href="#Processing" class="headerlink" title="Processing"></a>Processing</h4><p>参考：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState">Document: readyState property - Web APIs | MDN</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event">Document: DOMContentLoaded event - Web APIs | MDN</a><br>处理，一般指的是 HTML、CSS、JS 等资源的加载与解析，记录的时间有：<br><code>domInteractive</code>：HTML 加载、解析完成(DOM 树解析完成)，但其他资源可能还在加载<br><code>domContentLoadedEventStart/domContentLoadedEventStart</code>：HTML 加载、解析完成，并且所有延迟 JS(<code>&lt;script defer src=&quot;…&quot;&gt;</code> 和<code>&lt;script type=&quot;module&quot;&gt;</code>) 已下载并执行时触发<br><code>domComplete</code>：HTML 与所有子资源加载完(Render 树解析完成)</p><h4 id="Load"><a href="#Load" class="headerlink" title="Load"></a>Load</h4><p>参考：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event">Window: load event - Web APIs | MDN</a><br>HTML 与所有子资源加载完后触发，记录两个时间：<code>loadEventStart/loadEventEnd</code></p><h3 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h3><p><img src="/img/images/2023/1701590974239-ecc32e2f-a0d4-46ee-bb82-e50e3f198985.png"><br>指标解读：</p><ul><li>Total：总时间，各项指标之合</li><li>DNS：<code>domainLookupEnd - domainLookupStart</code>，DNS 查询花费的时间</li><li>TCP：<code>connectEnd - connectStart</code>，TCP 建立连接花费的时间</li><li>Request：<code>responseStart - requestStart</code>，请求到响应花费的时间</li><li>Response：<code>responseEnd - responseStart</code>，接受响应花费的时间</li><li>Processing：<code>domComplete - domInteractive</code>，渲染页面花费的时间</li><li>Load：<code>loadEventEnd - loadEventStart</code>，load 阶段花费的时间</li></ul><h2 id="CWV：Core-Web-Vitals-核心-Web-指标-谷歌"><a href="#CWV：Core-Web-Vitals-核心-Web-指标-谷歌" class="headerlink" title="CWV：Core Web Vitals - 核心 Web 指标(谷歌)"></a>CWV：Core Web Vitals - 核心 Web 指标(谷歌)</h2><p>谷歌提出的，从：加载、交互、视觉稳定性三个方面衡量</p><h3 id="加载：LCP-Largest-Contentful-Paint"><a href="#加载：LCP-Largest-Contentful-Paint" class="headerlink" title="加载：LCP - Largest Contentful Paint"></a>加载：LCP - Largest Contentful Paint</h3><p>LCP(最大内容渲染) 应该在页面首次加载后 2.5s 内发生，白话：在前 2.5s 内完成最大内容的渲染</p><h4 id="LCP-的定义为"><a href="#LCP-的定义为" class="headerlink" title="LCP 的定义为"></a>LCP 的定义为</h4><ol><li>图像元素的加载： 当<code>&lt;img&gt;/&lt;svg&gt;</code>元素加载并成功渲染到屏幕上。</li><li>背景图像： 如果是通过 CSS 的 background-image 设置的背景图像，当该背景图像被渲染到屏幕上。</li><li>文本元素： 包含大块内嵌内容的块级元素</li></ol><h4 id="LCP-的计算原理"><a href="#LCP-的计算原理" class="headerlink" title="LCP 的计算原理"></a>LCP 的计算原理</h4><p>浏览器有个事件，在每次渲染元素时，去找到当前“渲染面积”最大的元素计算渲染它的耗时，所以浏览器在渲染时，“渲染面积”最大的元素会一直变化。<br>可以通过 PerformanceObserver API 监听 largest-contentful-paint 事件来获取 LCP 值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;performance&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>) &#123;<br>  <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PerformanceObserver</span>(<span class="hljs-function">(<span class="hljs-params">list</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> entry <span class="hljs-keyword">of</span> list.<span class="hljs-title function_">getEntries</span>()) &#123;<br>      <span class="hljs-keyword">if</span> (entry.<span class="hljs-property">entryType</span> === <span class="hljs-string">&#x27;largest-contentful-paint&#x27;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;LCP:&#x27;</span>, entry.<span class="hljs-property">startTime</span>, <span class="hljs-string">&#x27;ms&#x27;</span>);<br>        <span class="hljs-comment">// 如果需要记录或上报 LCP 时间，则在此处处理</span><br>      &#125;<br>    &#125;<br>  &#125;);<br><br>  observer.<span class="hljs-title function_">observe</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;largest-contentful-paint&#x27;</span>, <span class="hljs-attr">buffered</span>: <span class="hljs-literal">true</span> &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.volcengine.com/docs/6431/107442">如何计算 LCP 指标–应用性能监控全链路版-火山引擎</a><br>可以使用：<code>web-vitals 库获取具体 LCP 值</code></p><h4 id="LCP-值低的原因"><a href="#LCP-值低的原因" class="headerlink" title="LCP 值低的原因"></a>LCP 值低的原因</h4><ol><li>资源问题：<ol><li>加载慢：图片&#x2F;背景等都存在依赖外部资源的情况，所以可以先在<code>domContentLoadedEvent</code>内进行埋点，看看是否是服务器资源响应慢导致的</li><li>下载慢：资源很快返回了，但可能由于资源太大&#x2F;链路太长，导致下载慢</li></ol></li><li>渲染问题：<ol><li>渲染被阻断了：一般是 CSS、JavaScript 阻断的</li><li>单纯渲染慢：可能是客户端硬件的影响</li></ol></li></ol><h4 id="针对性改造"><a href="#针对性改造" class="headerlink" title="针对性改造"></a>针对性改造</h4><ol><li>服务器优化<ol><li>缓存 HTML 离线页面：将一样的部分&#x2F;资源进行离线缓存，这样就不需要再通过服务器获取了</li><li>对图片的优化<ol><li>不同场景使用不同格式的图片，降低图片大小，加快请求速度<ol><li>JPEG：有损压缩，网站中的摄影图片、细节丰富的图片等</li><li>PNG：无损压缩，网站图标、LOGO 等</li><li>WebP：有损&#x2F;无损压缩，在支持 WebP 的浏览器中使用</li><li>SVG：矢量图标，图标、LOGO 等</li></ol></li><li>云资源管理</li></ol></li><li>减少文件大小<ol><li>去重、压缩、过滤等操作<ol><li>Webpack、Vite 等工具可提供</li></ol></li><li>CDN - 内容分发网络（Content Delivery Network）<ol><li>物理上接近请求点，减少延迟，提高加载速度</li></ol></li></ol></li></ol></li><li>客户端优化<ol><li>渲染阻断的优化<ol><li>CSS、JS 进行延迟处理<ol><li>初次渲染做很多事情并不是很好的，所以可以先用“骨架屏”完成初次渲染，再去写请求数据之类的逻辑，最后填充数据，这样的 LCP 值更低</li></ol></li><li>首屏优化(单页应用)<ol><li>懒加载<ol><li>页面模块、组织模块等</li></ol></li><li>异步加载<ol><li>组件本身、样式本身等</li></ol></li></ol></li><li>CSS 模块化</li><li>SSR 服务端渲染</li></ol></li></ol></li></ol><h3 id="交互：FID-First-Input-Delay"><a href="#交互：FID-First-Input-Delay" class="headerlink" title="交互：FID - First Input Delay"></a>交互：FID - First Input Delay</h3><h4 id="FID-的定义"><a href="#FID-的定义" class="headerlink" title="FID 的定义"></a>FID 的定义</h4><p>FID(首次输入延迟)：用于衡量用户首次交互到浏览器能够响应的时间<br>指标：页面的 FID 应该小于 100ms</p><h4 id="FID-的计算原理"><a href="#FID-的计算原理" class="headerlink" title="FID 的计算原理"></a>FID 的计算原理</h4><p>FID 发生在 FCP 和 TTI 之间。<br>可以通过 PerformanceObserver API 监听 first-input 事件来获取 FID 值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;performance&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span> &amp;&amp; <span class="hljs-string">&#x27;getEntriesByType&#x27;</span> <span class="hljs-keyword">in</span> performance) &#123;<br>  <span class="hljs-keyword">const</span> entries = performance.<span class="hljs-title function_">getEntriesByType</span>(<span class="hljs-string">&#x27;event&#x27;</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> entry <span class="hljs-keyword">of</span> entries) &#123;<br>    <span class="hljs-keyword">if</span> (entry.<span class="hljs-property">entryType</span> === <span class="hljs-string">&#x27;first-input&#x27;</span>) &#123;<br>      <span class="hljs-comment">// 这里的 entry.duration 就是 FID 值（以毫秒为单位）</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`First Input Delay: <span class="hljs-subst">$&#123;entry.duration&#125;</span> ms`</span>);<br>      <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 只考虑第一个交互事件</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.volcengine.com/docs/6431/107453">如何计算 FID 和 MPFID 指标–应用性能监控全链路版-火山引擎</a><br>可以使用：<code>web-vitals 库获取具体 FID 值</code></p><h4 id="FID-值低的原因"><a href="#FID-值低的原因" class="headerlink" title="FID 值低的原因"></a>FID 值低的原因</h4><ul><li>执行的阻塞</li></ul><h4 id="针对性改造-1"><a href="#针对性改造-1" class="headerlink" title="针对性改造"></a>针对性改造</h4><ul><li>减少 JS 的执行时间，因为 JS 是单线程，执行时会阻塞，大于 50ms 的被称为长任务<ul><li>压缩 JS 文件，可以过滤掉多余打印，提升执行效率</li><li>延迟加载不需要的 JS<ul><li>模块懒加载<ul><li>有些模块在首屏不需要展示时，一开始可以不用去加载</li></ul></li><li>tree shaking<ul><li>用于消除 JavaScript 中未引用代码（dead code）的术语。这个过程类似于摇动一棵树，抖落树上的枯叶，只留下需要的部分。</li><li>最常见的是引入了 xx 库，但只使用了该库一些功能，则打包的时候也应该只打包已使用的功能</li></ul></li></ul></li><li>减少未使用的 polyfill(拦截)<ul><li>通常是为了兼容低版本的浏览器，而所做的弥补性代码</li><li>比如：xx 版本浏览器不支持 includes，则可以这样 polyfill</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Polyfill for Array.prototype.includes</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">includes</span>)&#123;<br>  <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">includes</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">indexof</span>(element) !== -<span class="hljs-number">1</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>   plain   - 建议提前做好浏览器版本判断，高版本的话就不走 polyfill 代码逻辑了</p><ul><li>分解耗时任务<ul><li>减少执行长的逻辑代码<ul><li>比如双重数组循环，分成两个循环(虽然性能会差)，但阻塞更小</li><li>比如：表格-先请求列然后再请求数据<ul><li>若是请求嵌套：先列请求然后在里面请求数据，最后再赋值渲染表格</li><li>若是请求串行：先列请求-赋值渲染空表格，加 loading，再请求数据-赋值渲染表格数据，这样的阻塞更小</li></ul></li></ul></li><li>Worker<ul><li>采用 Worker，去分场景承担耗时任务</li></ul></li></ul></li></ul><h3 id="视觉稳定性：CLS-Cumulative-Layout-Shift"><a href="#视觉稳定性：CLS-Cumulative-Layout-Shift" class="headerlink" title="视觉稳定性：CLS - Cumulative Layout Shift"></a>视觉稳定性：CLS - Cumulative Layout Shift</h3><h4 id="CLS-的定义"><a href="#CLS-的定义" class="headerlink" title="CLS 的定义"></a>CLS 的定义</h4><p>累积布局偏移，衡量页面上元素位置发生变化的频率与程度<br>指标：页面的 CLS 应该小于 0.1<br>简单来说就是页面渲染时，元素的位置是否“稳定”</p><h4 id="CLS-的计算原理"><a href="#CLS-的计算原理" class="headerlink" title="CLS 的计算原理"></a>CLS 的计算原理</h4><p>可以通过 PerformanceObserver API 监听 layout-shift 事件来获取 FID 值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> clsValue = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> clsEntries = [];<br><span class="hljs-keyword">let</span> sessionValue = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> sessionEntries = [];<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">PerformanceObserver</span>(<span class="hljs-function">(<span class="hljs-params">entryList</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> entry <span class="hljs-keyword">of</span> entryList.<span class="hljs-title function_">getEntries</span>()) &#123;<br>        <span class="hljs-comment">// Only count layout shifts without recent user input.</span><br>        <span class="hljs-keyword">if</span> (!entry.<span class="hljs-property">hadRecentInput</span>) &#123;<br>            <span class="hljs-keyword">const</span> firstSessionEntry = sessionEntries[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">const</span> lastSessionEntry = sessionEntries[sessionEntries.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>];<br>        <span class="hljs-comment">// If the entry occurred less than 1 second after the previous entry and</span><br>        <span class="hljs-comment">// less than 5 seconds after the first entry in the session, include the</span><br>        <span class="hljs-comment">// entry in the current session. Otherwise, start a new session.</span><br>         <span class="hljs-keyword">if</span> (sessionValue<br>         &amp;&amp; entry.<span class="hljs-property">startTime</span> - lastSessionEntry.<span class="hljs-property">startTime</span> &lt; <span class="hljs-number">1000</span><br>         &amp;&amp; entry.<span class="hljs-property">startTime</span> - firstSessionEntry.<span class="hljs-property">startTime</span> &lt; <span class="hljs-number">5000</span>) &#123;<br>             sessionValue += entry.<span class="hljs-property">value</span>;<br>             sessionEntries.<span class="hljs-title function_">push</span>(entry);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>              sessionValue = entry.<span class="hljs-property">value</span>;<br>              sessionEntries = [entry];<br>           &#125;<br>           <span class="hljs-comment">// If the current session value is larger than the current CLS value</span><br>           <span class="hljs-comment">// update CLS and the entries contributing to it.</span><br>           <span class="hljs-keyword">if</span> (sessionValue &gt; clsValue) &#123;<br>               clsValue = sessionValue;<br>               clsEntries = sessionEntries;<br>               <span class="hljs-comment">// Log the updated value (and its entries) to the console.</span><br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;CLS:&#x27;</span>, clsValue, clsEntries)<br>           &#125;<br>       &#125;<br>&#125;&#125;).<span class="hljs-title function_">observe</span>(&#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;layout-shift&#x27;</span>, <span class="hljs-attr">buffered</span>: <span class="hljs-literal">true</span>&#125;);<br></code></pre></td></tr></table></figure><p><a href="https://www.volcengine.com/docs/6431/107451">如何计算 CLS 指标–应用性能监控全链路版-火山引擎</a><br>可以使用：<code>web-vitals 库获取具体 CLS 值</code></p><h4 id="CLS-值低的原因"><a href="#CLS-值低的原因" class="headerlink" title="CLS 值低的原因"></a>CLS 值低的原因</h4><ul><li>无尺寸的图片、视频、iframe 等</li><li>动态内容插入</li><li>字体的突然改变</li></ul><h4 id="针对性改造-2"><a href="#针对性改造-2" class="headerlink" title="针对性改造"></a>针对性改造</h4><ul><li>不使用无尺寸元素<ul><li>图片可以使用：srcset &amp; sizes<ul><li>srcset：描述图片资源与其像素宽度</li><li>sizes：设置图片在不同屏幕下要展示的宽度，默认为 100vw</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;1.png&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;1.png 200w,2.png 400w,3.png 800w&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;(max-width: 300px) 200px,</span></span><br><span class="hljs-string"><span class="hljs-tag">         (max-width: 700px) 400px,</span></span><br><span class="hljs-string"><span class="hljs-tag">         (max-width: 1000px) 800px,</span></span><br><span class="hljs-string"><span class="hljs-tag">         100vw&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br><span class="hljs-comment">&lt;!-- srcset 设置后为：(0,200px],(200px,400px],(400px,800px],(800px,∞], --&gt;</span><br><span class="hljs-comment">&lt;!-- 当屏幕最大宽度为 300px 时，sizes 使用 200px，对应 srcset 里面的 1.png--&gt;</span><br><span class="hljs-comment">&lt;!-- 当屏幕最大宽度为 700px 时，sizes 使用 400px，对应 srcset 里面的 2.png--&gt;</span><br><span class="hljs-comment">&lt;!-- 当屏幕最大宽度为 1000px 时，sizes 使用 800px，对应 srcset 里面的 3.png--&gt;</span><br><span class="hljs-comment">&lt;!-- 当屏幕最大宽度大于 1000px 时，sizes 使用 100vw(根据屏幕实际宽度)，</span><br><span class="hljs-comment">最终对应 srcset 里面的还是 3.png--&gt;</span><br></code></pre></td></tr></table></figure><ul><li>整体化内容插入<ul><li>相对集中的去完成内容的插入</li></ul></li><li>减少动态字体插入</li></ul><p>CWV 谷歌浏览器插件：Core Web Vitals Annotations<br><img src="/img/images/2023/1701936119520-fbbf1a71-e146-44d2-ac79-ba0f319ce398.png"></p><h1 id="性能评估-performance"><a href="#性能评估-performance" class="headerlink" title="性能评估- performance"></a>性能评估- performance</h1><p><a href="https://juejin.cn/post/7294088944836968448?searchId=20231207155332D3032A05C2A261A3AD42">前端性能优化 — 保姆级 Performance 工具使用指南 - 掘金</a></p><h1 id="大厂监控体系"><a href="#大厂监控体系" class="headerlink" title="大厂监控体系"></a>大厂监控体系</h1><ol><li>建立<ol><li>埋点上报<ol><li>获取关键节点的时间</li><li>点对点</li><li>信息采集</li></ol></li><li>数据处理<ol><li>数据分类<ol><li>请求类、渲染类、交互类等等</li></ol></li><li>阈值设置</li><li>数据重组&#x2F;分组<ol><li>多维度组装数据，分析对应结果数据的</li></ol></li></ol></li><li>可视化展示<ol><li>自研</li><li>开源：grafana(<a href="https://cloud.tencent.com/developer/article/1807679">Grafana 中文入门教程</a>)…<img src="/img/images/2023/1701937302367-9450fa10-9df2-4899-999a-cf84f5498d69.png" alt="grafana"></li></ol></li></ol></li><li>评估<ol><li>根据数据指标进行数据圈层&#x2F;数据归档</li><li>定位问题</li></ol></li><li>修复<ol><li>告警通知</li><li>分派处理</li></ol></li></ol><h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>基于浏览器的独立线程</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>独立性：与主线程独立，有自己的全局作用域与执行环境</li><li>无法访问 DOM：没法访问主线程的 DOM，适合做纯计算或数据处理</li><li>通信：可以与主线程通信</li></ol><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="注册-Web-Worker-A-js"><a href="#注册-Web-Worker-A-js" class="headerlink" title="注册 Web Worker(A.js)"></a>注册 Web Worker(A.js)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> worker = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(<span class="hljs-string">&#x27;./web-worker.js&#x27;</span>)<br><br><span class="hljs-comment">// 发送消息</span><br>worker.<span class="hljs-title function_">postMessage</span>(&#123; <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;hello web worker&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure><h4 id="定义-Web-Worker-web-worker-js"><a href="#定义-Web-Worker-web-worker-js" class="headerlink" title="定义 Web Worker(web-worker.js)"></a>定义 Web Worker(web-worker.js)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 接收消息</span><br>self.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Message from A.js:&#x27;</span>, event.<span class="hljs-property">data</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实际场景之斐波那契数列计算"><a href="#实际场景之斐波那契数列计算" class="headerlink" title="实际场景之斐波那契数列计算"></a>实际场景之斐波那契数列计算</h3><h4 id="注册-Web-Worker-A-js-1"><a href="#注册-Web-Worker-A-js-1" class="headerlink" title="注册 Web Worker(A.js)"></a>注册 Web Worker(A.js)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> webWorker = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(<span class="hljs-string">&quot;./worker/web-worker.js&quot;</span>);<br>webWorker.<span class="hljs-title function_">postMessage</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;calculateFibonacci&quot;</span>, <span class="hljs-attr">n</span>: <span class="hljs-number">10</span> &#125;);<br><br>webWorker.<span class="hljs-property">onmessage</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; type, result &#125; = event.<span class="hljs-property">data</span>;<br><br>  <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;calculateFibonacci&quot;</span>) &#123;<br>    <span class="hljs-keyword">const</span> calculateFibonacciResult = result;<br><br>    <span class="hljs-comment">// do something...</span><br><br>    <span class="hljs-comment">//   结束 Worker</span><br>    webWorker.<span class="hljs-title function_">terminate</span>();<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="定义-Web-Worker-web-worker-js-1"><a href="#定义-Web-Worker-web-worker-js-1" class="headerlink" title="定义 Web Worker(web-worker.js)"></a>定义 Web Worker(web-worker.js)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">self.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; type, n &#125; = event.<span class="hljs-property">data</span>;<br><br>  <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;calculateFibonacci&quot;</span>) &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">calculateFibonacci</span>(n);<br><br>    self.<span class="hljs-title function_">postMessage</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;calculateFibonacci&quot;</span>, result &#125;);<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">calculateFibonacci</span>(<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> n;<br>  <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">calculateFibonacci</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-title function_">calculateFibonacci</span>(n - <span class="hljs-number">2</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>基于浏览器，但独立于网页的脚本运行容器。</p><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ol><li>独立性：独立于网页的脚本运行，网页关闭也可运行的。</li><li>网络代理：可以拦截和处理浏览器的网络请求</li><li>事件驱动：可以监听浏览器的各种事件</li></ol><p>常用于：消息推送通知、离线缓存、拦截处理网络请求</p><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="注册-Service-Worker-A-js"><a href="#注册-Service-Worker-A-js" class="headerlink" title="注册 Service Worker (A.js)"></a>注册 Service Worker (A.js)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;serviceWorker&#x27;</span> <span class="hljs-keyword">in</span> navigator)&#123;<br>  navigator.<span class="hljs-property">serviceWorker</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;./..../service-worker.js&#x27;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">registration</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;注册 serviceWorker 成功&#x27;</span>, registration)<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;注册 serviceWorker 失败&#x27;</span>, error)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="定义-Service-Worker-service-worker-js"><a href="#定义-Service-Worker-service-worker-js" class="headerlink" title="定义 Service Worker(service-worker.js)"></a>定义 Service Worker(service-worker.js)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 监听安装事件，一般用用于设置浏览器的离线缓存</span><br>self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;install&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// do something ....</span><br>&#125;)<br><br><span class="hljs-comment">// 监听 fetch 事件，一般用于拦截和处理请求</span><br>self.<span class="hljs-title function_">addEventLinstener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// do something ....</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="实际场景之离线缓存"><a href="#实际场景之离线缓存" class="headerlink" title="实际场景之离线缓存"></a>实际场景之离线缓存</h3><h4 id="注册-Service-Worker"><a href="#注册-Service-Worker" class="headerlink" title="注册 Service Worker"></a>注册 Service Worker</h4><p>注册代码和基本使用的一致，不累赘</p><h4 id="定义-Service-Worker"><a href="#定义-Service-Worker" class="headerlink" title="定义 Service Worker"></a>定义 Service Worker</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CACHE_NAME</span> = <span class="hljs-string">&#x27;myCache1&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CACHE_URL</span> = [<span class="hljs-string">&#x27;/script/main.js&#x27;</span>, <span class="hljs-string">&#x27;/script/xxx.js&#x27;</span>, <span class="hljs-string">&#x27;/style/xxx.css&#x27;</span>]<br><br><span class="hljs-comment">// 监听 Service Worker 的“安装”事件：创建新缓存</span><br>self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;install&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// waitUntil表示在异步操作之前不要终止</span><br>  event.<span class="hljs-title function_">waitUntil</span>(<br>    <span class="hljs-comment">// 创建名为 CACHE_NAME 的缓存版本</span><br>    caches.<span class="hljs-title function_">open</span>(<span class="hljs-variable constant_">CACHE_NAME</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">cache</span> =&gt;</span> &#123;<br>      <span class="hljs-comment">// 指定要缓存的地址内容</span><br>      <span class="hljs-keyword">return</span> cache.<span class="hljs-title function_">addAll</span>(<span class="hljs-variable constant_">CACHE_URL</span>)<br>    &#125;)<br>  )<br>&#125;)<br><br><span class="hljs-comment">// 监听 Service Worker 的“激活”事件：清理旧缓存</span><br>self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;activate&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>  event.<span class="hljs-title function_">waitUntil</span>(<br>    caches.<span class="hljs-title function_">keys</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">cacheNames</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(<br>        cacheNames.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">cacheName</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span>(cacheName !== <span class="hljs-variable constant_">CACHE_NAME</span>) &#123;<br>           <span class="hljs-keyword">return</span> caches.<span class="hljs-title function_">delete</span>(cacheName)<br>          &#125;<br>        &#125;)<br>      )<br>    &#125;)<br>  )<br>&#125;)<br><br><span class="hljs-comment">// 监听 Service Worker 的“请求”事件：更新缓存</span><br>self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>  event.<span class="hljs-title function_">respondWith</span>(<br>    caches.<span class="hljs-title function_">match</span>(event.<span class="hljs-property">request</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> response || <span class="hljs-title function_">fetch</span>(event.<span class="hljs-property">request</span>)<br>    &#125;)<br>  )<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="FP-First-Paint"><a href="#FP-First-Paint" class="headerlink" title="FP - First Paint"></a>FP - First Paint</h2><p>首次渲染，衡量白屏的时间<br>Performance 直接获取：<br><img src="/img/images/2024/1708435154568-2cd2d11e-f35c-422d-88e0-9e09c0c8a540.png"><br><a href="https://www.volcengine.com/docs/6431/107441">如何计算 FP 和 FCP 指标–应用性能监控全链路版-火山引擎</a></p><h2 id="FCP-First-Contentful-Paint"><a href="#FCP-First-Contentful-Paint" class="headerlink" title="FCP - First Contentful Paint"></a>FCP - First Contentful Paint</h2><p>首次内容渲染，衡量用户首次看到内容的时间<br>优化点：异步加载 JS、尽早加载关键资源<br>Performance 直接获取：<img src="/img/images/2024/1708435208844-961d6eb6-a003-4d2f-9875-51309f857390.png"><br>也可以使用：<code>web-vitals 库获取具体 FCP 值</code><br><img src="/img/images/2024/1708437232879-4eb369a4-5a8b-49fc-a612-9dbcef2170f5.png"><br><a href="https://www.volcengine.com/docs/6431/107441">如何计算 FP 和 FCP 指标–应用性能监控全链路版-火山引擎</a></p><h2 id="FMP-First-Meaningful-Paint"><a href="#FMP-First-Meaningful-Paint" class="headerlink" title="FMP - First Meaningful Paint"></a>FMP - First Meaningful Paint</h2><p>首次有效绘制，衡量用户首次看到“有效内容”的时间<br>无标准的计算方法，一般用 LCP 代替</p><p>一种计算方式：<br>DOM 结构变化的时间点可以利用 <a href="https://dom.spec.whatwg.org/#mutationobserver">MutationObserver API</a> 来获得。<br>通过 MutationObserver 监听每一次页面整体的 DOM 变化，触发 MutationObserver 的回调，在回调计算出当前 DOM 树的分数，分数变化最剧烈的时刻，即为 FMP 的时间点。</p><p><a href="https://www.volcengine.com/docs/6431/107450">如何计算 FMP 指标–应用性能监控全链路版-火山引擎</a></p><h2 id="TTI-Time-to-Interactive"><a href="#TTI-Time-to-Interactive" class="headerlink" title="TTI - Time to Interactive"></a>TTI - Time to Interactive</h2><p>可交互时间，衡量页面加载完后到用户可以交互的时间值<br>计算方式：<br><img src="/img/images/2024/1708437175933-62cb6328-708c-41db-99d2-f41e3c584781.png"><br>参考上述示意图（图中的 First Consistently Interactive 即为 TTI ）。</p><ol><li>从起始点（一般选择 FCP 或 FMP）时间开始，向前搜索一个不小于 5s 的静默窗口期。静默窗口期：窗口所对应的时间内没有 Long Task，且进行中的网络请求数不超过 2 个。</li><li>找到静默窗口期后，从静默窗口期向后搜索到最近的一个 Long Task，Long Task 的结束时间即为 TTI。</li><li>如果没有找到 Long Task，以起始点时间作为 TTI。</li><li>如果 2、3 步骤得到的 TTI &lt; DOMContentLoadedEventEnd，以 DOMContentLoadedEventEnd 作为 TTI</li></ol><p><a href="https://www.volcengine.com/docs/6431/107446">如何计算 TTI 指标–应用性能监控全链路版-火山引擎</a></p><h2 id="TBT-Total-Blocking-Time"><a href="#TBT-Total-Blocking-Time" class="headerlink" title="TBT - Total Blocking Time"></a>TBT - Total Blocking Time</h2><p>总阻塞时间，衡量从 FCP 到 TTI 之间主线程被阻塞的总时间<br>大于 50ms 的任务被称为长任务。<br>TBT 计算的就是每个任务时长 - 50ms 后，剩余的总和<br><img src="/img/images/2024/1708436954919-59f9725b-1804-4f79-9cd5-b5e62d8a8e30.png"></p><h2 id="TTFT-Time-to-First-Byte"><a href="#TTFT-Time-to-First-Byte" class="headerlink" title="TTFT - Time to First Byte"></a>TTFT - Time to First Byte</h2><p>首次字节时间，衡量从浏览器发送请求到接收到服务器响应的第一个字节所需的时间<br>计算方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取所有资源加载的详细信息</span><br><span class="hljs-keyword">const</span> resourceEntries = performance.<span class="hljs-title function_">getEntriesByType</span>(<span class="hljs-string">&#x27;resource&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> entry <span class="hljs-keyword">of</span> resourceEntries) &#123;<br>  <span class="hljs-keyword">if</span> (entry.<span class="hljs-property">initiatorType</span> === <span class="hljs-string">&#x27;fetch&#x27;</span> &amp;&amp; entry.<span class="hljs-property">name</span> === 页面<span class="hljs-variable constant_">URL</span>) &#123; <span class="hljs-comment">// 或其他匹配条件</span><br>    <span class="hljs-keyword">const</span> ttfb = entry.<span class="hljs-property">responseStart</span> - entry.<span class="hljs-property">fetchStart</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`TTFB for <span class="hljs-subst">$&#123;entry.name&#125;</span>: <span class="hljs-subst">$&#123;ttfb&#125;</span> ms`</span>);<br>    <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 如果只需要主文档的TTFB</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用：<code>web-vitals 库获取具体 TTFT 值</code></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://juejin.cn/post/7052918009555320839?searchId=20240220204945952BFDA3B50B6DB8145D">最全的前端性能定位总结 - 掘金</a><br><a href="https://www.volcengine.com/docs/6431/107445">如何根据页面的 timing 指标计算出各阶段值–应用性能监控全链路版-火山引擎</a><br><a href="https://web.dev/articles/vitals?hl=zh-cn">Google Web Vitals</a></p>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-5、浏览器相关</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/1-5%E3%80%81%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/1-5%E3%80%81%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<p>原理知识：<a href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/1-3%E3%80%81Promise%E7%9F%A5%E8%AF%86%E4%B8%8E%E4%BD%BF%E7%94%A8/" title="1-3、Promise知识与使用">1-3、Promise知识与使用</a><br></p><h1 id="浏览器下的-JS"><a href="#浏览器下的-JS" class="headerlink" title="浏览器下的 JS"></a>浏览器下的 JS</h1><p>包含：</p><ul><li>ECMAScript：基础逻辑与数据处理 <code>const a = [1,2,3].map(i =&gt; i*2)</code></li><li>BOM：对浏览器功能的处理 <code>location.href = &#39;www.a.com&#39;</code></li><li>DOM：HTML 文本的操作 <code>document.title = &#39;hello&#39;</code></li></ul><blockquote><p>JS 与 ES 的区别：ES 是普通话，JS 是方言；<br>官方话术：ECMAScript 是一种语言标准，而 JavaScript 是对这个标准的一种具体实现(额外扩展了一些浏览器交互操作)。</p></blockquote><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><p>与浏览器的地址相关的</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>举例：<br>location.href &#x3D; <code>https://www.yuque.com/u53094/ux9b3x/frct1y9u1fppzpqf?q=1#aXLrY</code></p><h4 id="location-组成"><a href="#location-组成" class="headerlink" title="location 组成"></a>location 组成</h4><ul><li>协议 protocol &#x3D;&gt; location.protocol，<code>https:</code></li><li>域名 host &#x3D;&gt; location.host&#x2F;location.hostname，<code>www.yuque.com</code></li><li>端口 port &#x3D;&gt; location.port，<code>&#39;&#39;</code></li><li>路径 path &#x3D;&gt; location.pathname，<code>/u53094/ux9b3x/frct1y9u1fppzpqf</code></li><li>参数 query &#x3D;&gt; location.search，<code>[?</code>,<code>#)</code>之间的，<code>?q=1</code></li><li>锚点 anchor &#x3D;&gt; location.hash，<code>[#</code>之后的，<code>#aXLrY</code></li></ul><h3 id="进阶知识"><a href="#进阶知识" class="headerlink" title="进阶知识"></a>进阶知识</h3><h4 id="location-assgin-url"><a href="#location-assgin-url" class="headerlink" title="location.assgin(url)"></a>location.assgin(url)</h4><p>跳转到指定页面，会创建新的浏览器历史，跟<code>location.href</code>效果一样</p><h4 id="location-replace-url"><a href="#location-replace-url" class="headerlink" title="location.replace(url)"></a>location.replace(url)</h4><p>跳转到指定页面，不会创建新的浏览器历史，并将之前地址的历史替换为新地址</p><h4 id="location-reload"><a href="#location-reload" class="headerlink" title="location.reload()"></a>location.reload()</h4><p>刷新当前页面</p><h4 id="location-toString"><a href="#location-toString" class="headerlink" title="location.toString()"></a>location.toString()</h4><p>获取当前地址，等价于<code>location.href</code>的值</p><h3 id="面试常问"><a href="#面试常问" class="headerlink" title="面试常问"></a>面试常问</h3><ol><li>location 的 API</li><li>路由相关：跳转、参数、操作等</li><li>实际场景分析：<ol><li>项目路由模式：<ol><li>history：<code>https://www.example.com/user/profile</code>地址不带<code>#</code>；需要服务器支持(因为<code>/user/profile</code>是直接访问服务器资源的，所以需要服务器处理通配让项目只访问主 html 文件)</li><li>hash：<code>https://www.example.com/#/user/profile</code>地址带<code>#</code>；不需要服务器支持(因为<code>#</code>后面的不会发送给服务器，所以可以永远只访问主 html)</li></ol></li></ol></li><li>url 的处理<ol><li>如何将地址参数转为对象？</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getQueryObject</span>(<span class="hljs-params">search = location.search</span>)&#123;<br>    <span class="hljs-keyword">const</span> searchObj = &#123;&#125;<br><br>    <span class="hljs-keyword">if</span>(!search) <span class="hljs-keyword">return</span> searchObj<br><br>    <span class="hljs-keyword">const</span> searchSplitArray = search.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>)<br>    searchSplitArray.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> [key, value] = item.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;=&#x27;</span>)<br>        searchObj[key] = value<br>    &#125;)<br>    <span class="hljs-keyword">return</span> searchObj<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>使用正则判断是否为 url？<ol><li>核心是要知道<code>location</code>的组成，然后一步步判断即可</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isURL</span>(<span class="hljs-params">str</span>) &#123;<br>  <span class="hljs-comment">// 使用正则表达式进行 URL 验证</span><br>  <span class="hljs-comment">// 这个正则表达式并不涵盖所有可能的情况，但对于一般的 URL 验证已经足够</span><br>  <span class="hljs-keyword">const</span> urlRegex = <span class="hljs-regexp">/^(https?|ftp):\/\/[^\s/$.?#].[^\s]*$/</span>;<br>  <span class="hljs-keyword">return</span> urlRegex.<span class="hljs-title function_">test</span>(str);<br>&#125;<br><br><span class="hljs-comment">// 示例用法</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isURL</span>(<span class="hljs-string">&quot;https://www.example.com&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isURL</span>(<span class="hljs-string">&quot;ftp://file.example.com&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isURL</span>(<span class="hljs-string">&quot;invalid-url&quot;</span>)); <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// ^: 开始位置</span><br><span class="hljs-comment">// (https?|ftp): 匹配 &quot;http&quot;, &quot;https&quot;, 或 &quot;ftp&quot;</span><br><span class="hljs-comment">// :\/\/: 匹配 &quot;://&quot;</span><br><span class="hljs-comment">// [^\s/$.?#]: 匹配任何非空白字符、&quot;/&quot;、&quot;$&quot;、&quot;.&quot;、&quot;?&quot;&quot;、&quot;#&quot;</span><br><span class="hljs-comment">// .*: 匹配零个或多个任意字符</span><br><span class="hljs-comment">// $: 结束位置</span><br></code></pre></td></tr></table></figure><h3 id="监听地址的变化"><a href="#监听地址的变化" class="headerlink" title="监听地址的变化"></a>监听地址的变化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;hashchange&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-comment">// 当哈希值变化时执行的代码</span><br>  <span class="hljs-keyword">var</span> newHash = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span>; <span class="hljs-comment">// 获取新的哈希值</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hash changed to: &quot;</span>, newHash);<br><br>  <span class="hljs-comment">// 根据新的哈希值进行相应的操作，如更新菜单状态、滚动到特定位置等</span><br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>与浏览器的地址历史相关的，允许你在浏览器的历史记录中向前和向后导航，以及在历史记录中添加新的条目。</p><h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p><code>history.length</code>返回历史记录的数量，<code>number</code>类型<br><code>history.state</code>返回当前页面状态，<code>object</code>类型，值为<code>null</code>或</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p><code>history.back()</code>跳转到历史记录上一页，等价于浏览器后退一步的操作<br><code>history.forward()</code>跳转到历史记录下一页，等价于浏览器前进一步的操作<br><code>history.go(n)</code>跳转到历史记录的第 n 页，n 为正数表示向前，负数表示向后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">history.<span class="hljs-title function_">go</span>(-<span class="hljs-number">2</span>); <span class="hljs-comment">// 后退两页</span><br>history.<span class="hljs-title function_">go</span>(<span class="hljs-number">3</span>);  <span class="hljs-comment">// 前进三页</span><br></code></pre></td></tr></table></figure><p><code>history.pushState(state, title, url)</code>跳转到指定 url，并新增历史记录。不会触发页面的重新加载，<strong>history 路由模式使用它来进行页面跳转的</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">history.<span class="hljs-title function_">pushState</span>(&#123;<span class="hljs-attr">page</span>: <span class="hljs-number">1</span>&#125;, <span class="hljs-string">&quot;Page 1&quot;</span>, <span class="hljs-string">&quot;/page-1&quot;</span>);<br></code></pre></td></tr></table></figure><p><code>history.replaceState(state, title, url)</code>跳转到指定 url，不会新增历史记录，并将之前地址的历史替换为新地址。不会触发页面的重新加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">history.<span class="hljs-property">history</span>.<span class="hljs-title function_">replaceStat</span>(&#123;<span class="hljs-attr">page</span>: <span class="hljs-number">2</span>&#125;, <span class="hljs-string">&quot;Page 2&quot;</span>, <span class="hljs-string">&quot;/page-1&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="监听地址的变化-1"><a href="#监听地址的变化-1" class="headerlink" title="监听地址的变化"></a>监听地址的变化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// pushState/replaceState 不会触发 popstate</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;popstate&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-comment">// 当浏览器历史记录变化时执行的代码</span><br><br>  <span class="hljs-comment">// 可以获取当前历史状态对象，如果使用了pushState或replaceState方法设置的话</span><br>  <span class="hljs-keyword">var</span> currentState = history.<span class="hljs-property">state</span>;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Navigated to: &quot;</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>);<br><br>  <span class="hljs-comment">// 根据新的URL进行相应的操作，如重新渲染页面内容、更新UI等</span><br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h2><p>包含浏览器信息的对象</p><h3 id="基础知识-2"><a href="#基础知识-2" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><p><code>navigator.userAgent</code>返回浏览器信息，<code>string</code>类型，包含浏览器类型、版本、操作系统信息等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Mozilla</span>/<span class="hljs-number">5.0</span> (<span class="hljs-title class_">Macintosh</span>; <span class="hljs-title class_">Intel</span> <span class="hljs-title class_">Mac</span> <span class="hljs-variable constant_">OS</span> X <span class="hljs-number">10_15_7</span>)<br><span class="hljs-title class_">AppleWebKit</span>/<span class="hljs-number">537.36</span> (<span class="hljs-variable constant_">KHTML</span>, like <span class="hljs-title class_">Gecko</span>) <span class="hljs-title class_">Chrome</span>/<span class="hljs-number">119.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> <span class="hljs-title class_">Safari</span>/<span class="hljs-number">537.36</span><br><span class="hljs-title class_">Edg</span>/<span class="hljs-number">119.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><p><code>navigator.userAgentData</code>返回浏览器信息，<code>object</code>类型，包含浏览器类型、版本、操作系统信息等，<strong>更精确</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;brands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Microsoft Edge&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 浏览器品牌</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;119&quot;</span> <span class="hljs-comment">// 浏览器版本</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Chromium&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;119&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Not?A_Brand&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;24&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mobile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;platform&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;macOS&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>navigator.language</code>返回用户首选语言，<code>string</code>类型，我的值为<code>zh-CN</code><br><code>navigator.platform</code>返回浏览器运行的平台，<code>string</code>类型，我的值为<code>MacIntel</code><br><code>navigator.cookieEnable</code>返回浏览器是否启用了 cookie，<code>boolean</code>类型</p><h3 id="面试常问-1"><a href="#面试常问-1" class="headerlink" title="面试常问"></a>面试常问</h3><ol><li>UA 的获取与解读<ol><li>获取：<code>navigator.userAgent</code>或<code>navigator.userAgentData</code></li><li>解读：按需解读即可，也可以借鉴 <a href="https://github.com/bestiejs/platform.js/">platform.js</a> 库</li></ol></li><li>如何获取剪切板的内容？<ol><li>借用 <code>navigator.clipbord</code>实现读取剪切板：<code>readText()</code></li></ol></li></ol><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><code>navigation</code>通常出现在 Web APIs 中，用于提供有关浏览器导航的信息。一个常见的使用场景是在 Service Worker 中使用</p><h2 id="screen-有可视化经历必问"><a href="#screen-有可视化经历必问" class="headerlink" title="screen(有可视化经历必问)"></a>screen(有可视化经历必问)</h2><p>浏览器设备的屏幕相关的</p><h3 id="基础知识-3"><a href="#基础知识-3" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h4><p><code>screen.height/screen.width</code>：电脑屏幕的宽高，随浏览器设备的分辨率变化<br><code>screen.availHeight/screen.availWidth</code>：电脑屏幕的可用宽高（减去了 mac&#x2F;window 系统的上下任务栏的高度），随浏览器设备的分辨率变化<br><code>screen.orientation</code>：屏幕方向对象，如<code>screen.orientation.type</code>横向（landscape）或纵向（portrait）<br>参考：<a href="https://juejin.cn/post/6901352015222276104">如何在 JavaScript 中获取屏幕，窗口和网页大小 - 掘金</a></p><h3 id="进阶知识-1"><a href="#进阶知识-1" class="headerlink" title="进阶知识"></a>进阶知识</h3><h4 id="获取屏幕的大小有哪些方式？"><a href="#获取屏幕的大小有哪些方式？" class="headerlink" title="获取屏幕的大小有哪些方式？"></a>获取屏幕的大小有哪些方式？</h4><ul><li>使用<code>screen.width/screen.height</code>获取电脑屏幕的宽高，随浏览器设备的分辨率变化</li><li>使用<code>window.innerWidth/window.innerHeight</code>获取浏览器窗口的宽高(包括滚动条)，随浏览器窗口大小而变化</li><li>使用<code>document.documentElement.clientWidth/document.documentElement.clientHeight</code>获取 <strong>html</strong>元素的宽高(不包括滚动条)</li><li>使用<code>document.body.clientWidth/document.body.clientHeight</code>获取 <strong>body</strong> 元素的宽高(不包括滚动条)</li></ul><h4 id="这几个值之间的关系？"><a href="#这几个值之间的关系？" class="headerlink" title="这几个值之间的关系？"></a>这几个值之间的关系？</h4><p><code>1</code>&gt;&#x3D;<code>2</code>&#x3D;&#x3D;<code>3</code>&#x3D;&#x3D;<code>4</code></p><h4 id="这几个值分别受什么影响？"><a href="#这几个值分别受什么影响？" class="headerlink" title="这几个值分别受什么影响？"></a>这几个值分别受什么影响？</h4><p><code>1</code>受设备分辨率影响<br><code>2</code>受浏览器窗口大小影响<br><code>3</code>受给 <strong>html</strong>元素设置的 CSS 宽高影响<br><code>4</code>受给 <strong>body</strong>元素设置的 CSS 宽高影响</p><h4 id="如何监听浏览器的大小变化？"><a href="#如何监听浏览器的大小变化？" class="headerlink" title="如何监听浏览器的大小变化？"></a>如何监听浏览器的大小变化？</h4><p>监听 resize 事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 获取窗口当前的大小</span><br>  <span class="hljs-keyword">const</span> currentWidth = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>;<br>  <span class="hljs-keyword">const</span> currentHeight = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>;<br>  <span class="hljs-comment">// 其他逻辑判...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="offsetWidth-offsetHeight与clientWidth-clientHeight的关系"><a href="#offsetWidth-offsetHeight与clientWidth-clientHeight的关系" class="headerlink" title="offsetWidth/offsetHeight与clientWidth/clientHeight的关系"></a><code>offsetWidth/offsetHeight</code>与<code>clientWidth/clientHeight</code>的关系</h4><p><code>clientWidth/clientHeight</code>&#x3D;元素可视区域的宽&#x2F;高 + padding(若有)-滚动条(若有)<br><img src="/img/images/2023/1700839080722-ef70fbb2-e965-42f3-94c7-37b86e445d94.png"><br><code>offsetWidth/offsetHieght</code>&#x3D;<code>clientWidth/clientHeight</code>+边框(若有)+滚动条(若有)<br><img src="/img/images/2023/1700839577150-7e14fbfc-b484-4ecb-ae97-defecf120f13.png"></p><h4 id="滚动条宽高计算方式有哪些？"><a href="#滚动条宽高计算方式有哪些？" class="headerlink" title="滚动条宽高计算方式有哪些？"></a>滚动条宽高计算方式有哪些？</h4><h5 id="全局入手"><a href="#全局入手" class="headerlink" title="全局入手"></a>全局入手</h5><p><code>window.innerWidth</code>(浏览器宽度+滚动条(若有)) - <code>document.documentElement.clientWidth</code>(浏览器宽度)</p><h5 id="元素入手-1-自己想的"><a href="#元素入手-1-自己想的" class="headerlink" title="元素入手-1(自己想的)"></a>元素入手-1(自己想的)</h5><p>元素(无边框+无 padding+可滚动时).offsetWidth - 元素(无边框+无 padding+可滚动时).clientWidth</p><h5 id="元素入手-2-iView-的做法"><a href="#元素入手-2-iView-的做法" class="headerlink" title="元素入手-2(iView 的做法)"></a>元素入手-2(iView 的做法)</h5><p>元素(可滚动时).offsetWidth - 元素(未滚动前).offsetWidth</p><h4 id="常见的scroll-属性"><a href="#常见的scroll-属性" class="headerlink" title="常见的scroll*属性"></a>常见的<code>scroll*</code>属性</h4><h5 id="scrollWidth-scrollHeight"><a href="#scrollWidth-scrollHeight" class="headerlink" title="scrollWidth/scrollHeight"></a><code>scrollWidth/scrollHeight</code></h5><p>元素的实际宽高，非可视区域的<br>若无滚动条，则等于<code>clientWidth/clientHeight</code><br>若有滚动条，则等于<code>实际内容宽高(一般跟子元素宽高有关)</code>+<code>padding(若有)</code><img src="/img/images/2023/1700838902797-c1c66fe7-c4e8-461f-9f2a-5edddb1a526f.png"></p><h5 id="scrollLeft-scrollTop"><a href="#scrollLeft-scrollTop" class="headerlink" title="scrollLeft/scrollTop"></a><code>scrollLeft/scrollTop</code></h5><p>元素最左端&#x2F;最上端与窗口最左端&#x2F;最上端的距离，即滚动条左&#x2F;上滚的距离<br><img src="/img/images/2023/1700838990916-7580e0bb-2199-45f3-95a8-e0dec0e7da82.png"></p><h5 id="scrollX-scrollY-pageXOffset-pageYOffset"><a href="#scrollX-scrollY-pageXOffset-pageYOffset" class="headerlink" title="scrollX/scrollY&#x3D;&#x3D;&#x3D;pageXOffset/pageYOffset"></a><code>scrollX/scrollY</code>&#x3D;&#x3D;&#x3D;<code>pageXOffset/pageYOffset</code></h5><p>返回元素滚动了的距离<br>举例：<code>window.scrollX</code>&#x3D;&#x3D;&#x3D;<code>pageXOffset</code>&#x3D;&#x3D;&#x3D;<code>document.documentElement.scrollLeft</code></p><h4 id="offsetLeft-offsetTop"><a href="#offsetLeft-offsetTop" class="headerlink" title="offsetLeft/offsetTop"></a><code>offsetLeft/offsetTop</code></h4><p>返回元素的左&#x2F;上端与最近定位元素(默认为 body)的左&#x2F;上边的距离<br><img src="/img/images/2023/1700840240071-0a20d8df-77ed-4ac7-9883-854e4ca063a6.png"></p><h4 id="如何元素监听滚动事件？"><a href="#如何元素监听滚动事件？" class="headerlink" title="如何元素监听滚动事件？"></a>如何元素监听滚动事件？</h4><p>一般滚动的 HTML 结构为：父元素高度小于子元素高度并且父元素允许滚动，这样才能滚动<br>所以监听的滚动事件是设置在父元素上面的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">父元素.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">const</span> &#123; scrollTop &#125; = <span class="hljs-variable language_">this</span><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="如何判断元素是否在可视区域内？"><a href="#如何判断元素是否在可视区域内？" class="headerlink" title="如何判断元素是否在可视区域内？"></a>如何判断元素是否在可视区域内？</h4><h5 id="计算法-父元素为任意元素"><a href="#计算法-父元素为任意元素" class="headerlink" title="计算法-父元素为任意元素"></a>计算法-父元素为任意元素</h5><p>对比<code>父元素.scrollTop</code>与<code>子元素.offsetTop+子元素.offsetHeight(若需要)</code>的差值，大于 0 表明还在，小于 0 表明不在</p><h5 id="计算法-getBoundingClientRect-父元素仅为窗口"><a href="#计算法-getBoundingClientRect-父元素仅为窗口" class="headerlink" title="计算法(getBoundingClientRect)-父元素仅为窗口"></a>计算法(getBoundingClientRect)-父元素仅为窗口</h5><p><code>元素.getBoundingClientRect()</code>获取元素与可视窗口(body 0,0)之间的关系，返回值为<code>object</code>类型</p><ul><li>width：元素宽度</li><li>height：元素高度</li><li>left：元素左边与可视窗口的左边距离</li><li>right：元素右边与可视窗口的左边距离 &#x3D; left + width</li><li>top：元素上边与可视窗口的上边距离</li><li>botton：元素下边与可视窗口的上边距离 &#x3D; top + height</li><li>x：元素鼠标的 X 坐标，等价于 left</li><li>y：元素鼠标的 Y 坐标，等价于 top</li><li>兼容性问题：IE 会多出 2px(边框计算有差异)</li></ul><p>当元素同时满足以下 4 个条件时，则表明在可视窗口内：</p><ol><li><code>元素.left</code> &gt;&#x3D; 0</li><li><code>元素.top</code> &gt;&#x3D; 0</li><li><code>元素.right</code> &lt;&#x3D;<code>窗口宽度(document.body.clientWidth)</code></li><li><code>元素.bottom</code> &lt;&#x3D;<code>窗口高度(document.body.clientHeight)</code></li></ol><h5 id="API-法-IntersectionObserver-性能最好"><a href="#API-法-IntersectionObserver-性能最好" class="headerlink" title="API 法-IntersectionObserver(性能最好)"></a>API 法-IntersectionObserver(性能最好)</h5><p>采用<code>IntersectionObserver</code>来观察两个元素是否重叠<br>基本语法：<code>new IntersectionObserver(callback, options)</code>，其中的 callback 将会在满足和不满足重叠时分别调用一次</p><blockquote><p>官网文档：<br>Intersection Observer API：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API">Intersection Observer API - Web API 接口参考 | MDN</a><br>IntersectionObserver：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver">IntersectionObserver - Web API 接口参考 | MDN</a><br>entry 对象：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserverEntry">IntersectionObserverEntry - Web API 接口参考 | MDN</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Observer</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(<span class="hljs-function">(<span class="hljs-params">entries, oberver</span>) =&gt;</span>&#123;<br>  <span class="hljs-comment">// entries：所有子元素的数组，下面 observe() 每次调用时，该数组就会新增长度</span><br>  <span class="hljs-comment">// oberver：完整的 options 对象</span><br>  entries.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">entry</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123;<br>      isIntersecting <span class="hljs-comment">// 是否满足设置的 threshold 重叠，返回 boolean 值</span><br>    &#125; = entry<br><br>    <span class="hljs-keyword">if</span>(isIntersecting) &#123;<br>      <span class="hljs-comment">// do something....</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// do otherthing....</span><br>    &#125;<br>  &#125;)<br>&#125;,<br>&#123;<br>  <span class="hljs-attr">root</span>: <span class="hljs-literal">null</span> <span class="hljs-comment">// 监听的父元素，默认为视口，null||ElementDom</span><br>  <span class="hljs-attr">threshold</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 表示两个元素的重叠比例，number||number[]</span><br>&#125;)<br><br><span class="hljs-title class_">Observer</span>.<span class="hljs-title function_">observe</span>(childrenEl) <span class="hljs-comment">// 调用 observe 触发观察，参数为 ElementDom 类型</span><br></code></pre></td></tr></table></figure><h3 id="面试常问-2"><a href="#面试常问-2" class="headerlink" title="面试常问"></a>面试常问</h3><h4 id="如何-Tab-实现吸顶效果"><a href="#如何-Tab-实现吸顶效果" class="headerlink" title="如何 Tab 实现吸顶效果"></a>如何 Tab 实现吸顶效果</h4><p>思路：监听父元素的滚动事件，实时判断父元素的 scrollTop 是否大于 Tab 的 offsetTop 高度，若大于则说明该 Tab 将滚出可视区域了，所以马上设置固定定位，定位的 Top&#x2F;Left 需要根据父元素的 offsetLeft&#x2F;offsetTop</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">parentEl.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;scroll&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; scrollTop &#125; = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-keyword">const</span> &#123; offsetTop &#125; = tabEl;<br><br>  <span class="hljs-keyword">if</span> (scrollTop &gt;= offsetTop) &#123;<br>    tabEl.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&quot;fixed&quot;</span>;<br>    tabEl.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = element.<span class="hljs-property">offsetTop</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>    tabEl.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = element.<span class="hljs-property">offsetLeft</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    tabEl.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&quot;relative&quot;</span>;<br>    tabEl.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = <span class="hljs-number">0</span>;<br>    tabEl.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h1><blockquote><p>常说的事件队列、EventLoop 是 JS 语言的机制</p></blockquote><h2 id="普通浏览器"><a href="#普通浏览器" class="headerlink" title="普通浏览器"></a>普通浏览器</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>而这里的浏览器事件模型讲的是：浏览器处理事件传播的方式，分为三个阶段</p><ul><li>捕获：先从文档根节点向下传播到目标元素</li><li>目标：到达目标元素，触发其绑定的事件(若有)</li><li>冒泡：最后再从目标元素向上传播到文档根节点</li></ul><h3 id="事件注册"><a href="#事件注册" class="headerlink" title="事件注册"></a>事件注册</h3><p>使用 DOM Level 0 事件处理程序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">element.<span class="hljs-property">onclick</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123; <span class="hljs-comment">// event 事件对象</span><br>  <span class="hljs-comment">// 这里的 this 指向全局对象（window）</span><br>  <span class="hljs-comment">// event 参数是通过函数参数传递的事件对象(包含事件类型、触发元素、按键等)</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);   <span class="hljs-comment">// 输出全局对象（window）</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);  <span class="hljs-comment">// 输出事件对象</span><br><br>  <span class="hljs-comment">// do something.....</span><br>&#125;<br><br><span class="hljs-comment">// 优点：</span><br><span class="hljs-comment">// 1、简单粗暴的赋值</span><br><br><span class="hljs-comment">// 缺点：</span><br><span class="hljs-comment">// 1、this 指向 window，因为是作为普通函数在全局声明的，this 就被指向 window，无法通过 this</span><br><span class="hljs-comment">// 直接获取到触发的元素，需要加形参表示事件对象</span><br><span class="hljs-comment">// 2、只支持冒泡</span><br></code></pre></td></tr></table></figure><p>使用 DOM Level 2 事件处理程序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">element.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 这里的 this 指向触发的元素(dom)</span><br>  <span class="hljs-comment">// event 参数是通过函数参数传递的事件对象(包含事件类型、触发元素、按键等)</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);   <span class="hljs-comment">// 输出触发的元素(dom)</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);   <span class="hljs-comment">// 输出事件对象</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span> === <span class="hljs-variable language_">this</span>);   <span class="hljs-comment">// 输出 true</span><br><br>  <span class="hljs-comment">// do something.....</span><br><br>&#125;, <span class="hljs-literal">false</span>) <span class="hljs-comment">// true：捕获时触发，false：冒泡时触发(不传默认)</span><br><br><span class="hljs-comment">// 优点：</span><br><span class="hljs-comment">// 1、同一个元素可以绑定多个相同事件</span><br><span class="hljs-comment">// 2、第三个参数可以控制事件的触发阶段：冒泡或捕获</span><br></code></pre></td></tr></table></figure><h3 id="事件解绑"><a href="#事件解绑" class="headerlink" title="事件解绑"></a>事件解绑</h3><p>使用 DOM Level 0 事件处理程序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">element.<span class="hljs-property">onclick</span> = <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>使用 DOM Level 2 事件处理程序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">element.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, callback)<br><span class="hljs-comment">// callback 必须与 addEventListener 的一致，否则将无法解绑</span><br><br><span class="hljs-comment">// 为了避免这种请情况，一般将 callback 单独抽出来写</span><br></code></pre></td></tr></table></figure><h3 id="阻止事件传播"><a href="#阻止事件传播" class="headerlink" title="阻止事件传播"></a>阻止事件传播</h3><h4 id="event-stopPropagation"><a href="#event-stopPropagation" class="headerlink" title="event.stopPropagation()"></a><code>event.stopPropagation()</code></h4><p>阻止当前元素上的所有本事件的传播，不在触发捕获与冒泡，但已注册未执行的事件都会按序触发<br>白话：我自己执行完后，只是断掉传播，别人的还是能执行<br>假设：一个元素上绑定了 3 个 click 事件，若在之一写了<code>event.stopPropagation()</code>，其他两个的 click 事件会正常触发，但都没法传播了，但其他事件(scroll)不受影响</p><h4 id="event-stopImmediatePropagation"><a href="#event-stopImmediatePropagation" class="headerlink" title="event.stopImmediatePropagation()"></a><code>event.stopImmediatePropagation()</code></h4><p>阻止当前元素上的所有本事件的传播，不在触发捕获与冒泡，并且已注册未执行的事件不会再触发<br>白话：我自己执行完后，不仅要断掉传播，并且让别人也没法执行，做事更绝。<br>假设：一个元素上绑定了 3 个 click 事件，若在之一写了<code>event.stopImmediatePropagation()</code>，其他未执行的 click 事件不会正常触发，并且从我开始阻断传播，但其他事件(scroll)不受影响</p><h2 id="IE-浏览器-了解即可"><a href="#IE-浏览器-了解即可" class="headerlink" title="IE 浏览器(了解即可)"></a>IE 浏览器(了解即可)</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li>IE 8 及更早版本只支持事件冒泡，不支持事件捕获。</li><li>IE 9 及之后的版本开始支持事件冒泡和捕获</li></ul><h3 id="事件注册-1"><a href="#事件注册-1" class="headerlink" title="事件注册"></a>事件注册</h3><p><code>element.attachEvent(&#39;onclick&#39;, callback)</code>，必须带上<code>on</code><br>attachEvent 是后绑定先执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">element.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;onclick&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> event = <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>; <span class="hljs-comment">// 这样访问事件对象</span><br>&#125;) <span class="hljs-comment">// 默认为冒泡</span><br></code></pre></td></tr></table></figure><h3 id="事件解绑-1"><a href="#事件解绑-1" class="headerlink" title="事件解绑"></a>事件解绑</h3><p><code>element.detachEvent(&#39;onclick&#39;, callback)</code>，必须带上<code>on</code>，并且 callback 必须与 attachEvent 的一致，否则将无法解绑</p><h3 id="阻止事件传播-1"><a href="#阻止事件传播-1" class="headerlink" title="阻止事件传播"></a>阻止事件传播</h3><p><code>event.cancelBubble = true</code></p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>事件代理：<ol><li>基于冒泡，可将列表 item 的点击事件绑定到父级上，在父级上通过<code>event.target</code>获取到触发事件的元素，然后进行对应操作。节省子元素的 item 的获取与绑定效率</li></ol></li></ol><h2 id="面试常问-3"><a href="#面试常问-3" class="headerlink" title="面试常问"></a>面试常问</h2><h3 id="区分不同的阻止"><a href="#区分不同的阻止" class="headerlink" title="区分不同的阻止"></a>区分不同的阻止</h3><p><code>event.stopPropagation()</code>&#x2F;<code>event.stopImmediatePropagation()</code>&#x2F;<code>event.preventDefault()</code></p><h3 id="手写多浏览器兼容的事件注册、解绑、阻止等"><a href="#手写多浏览器兼容的事件注册、解绑、阻止等" class="headerlink" title="手写多浏览器兼容的事件注册、解绑、阻止等"></a>手写多浏览器兼容的事件注册、解绑、阻止等</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">EventModal</span> = &#123;<br>  <span class="hljs-comment">// 事件注册</span><br>  <span class="hljs-title function_">addEventListener</span>(element, eventType, callback, useCaption) =&gt; &#123;<br>    <span class="hljs-keyword">if</span>(element.<span class="hljs-property">addEventListener</span>) &#123;<br>      <span class="hljs-comment">// 普通浏览器</span><br>      element.<span class="hljs-title function_">addEventListener</span>(eventType, callback, useCaption)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(element.<span class="hljs-property">attachEvent</span>) &#123;<br>      <span class="hljs-comment">// IE7/8</span><br>      element.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;on&#x27;</span> + eventType, callback)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      element[<span class="hljs-string">&#x27;on&#x27;</span> + eventType] = callback<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 事件解绑</span><br>  <span class="hljs-title function_">removeEventListener</span>(element, eventType, callback) =&gt; &#123;<br>    <span class="hljs-keyword">if</span>(element.<span class="hljs-property">removeEventListener</span>) &#123;<br>      <span class="hljs-comment">// 普通浏览器</span><br>      element.<span class="hljs-title function_">removeEventListener</span>(eventType, callback, useCaption)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(element.<span class="hljs-property">detachEvent</span>) &#123;<br>      <span class="hljs-comment">// IE7/8</span><br>      element.<span class="hljs-title function_">detachEvent</span>(<span class="hljs-string">&#x27;on&#x27;</span> + eventType, callback)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      element[<span class="hljs-string">&#x27;on&#x27;</span> + eventType] = <span class="hljs-literal">null</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 事件传播阻止</span><br>  <span class="hljs-title function_">stopPropagation</span>(event) =&gt; &#123;<br>    <span class="hljs-keyword">if</span>(event.<span class="hljs-property">stopPropagation</span>) &#123;<br>      <span class="hljs-comment">// 普通浏览器</span><br>      event.<span class="hljs-title function_">stopPropagation</span>()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// IE7/8</span><br>      event.<span class="hljs-property">cancalBubble</span> = <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 默认事件阻止</span><br>  <span class="hljs-title function_">preventDefault</span>(event) =&gt; &#123;<br>    <span class="hljs-keyword">if</span>(event.<span class="hljs-property">preventDefault</span>) &#123;<br>      <span class="hljs-comment">// 普通浏览器</span><br>      event.<span class="hljs-title function_">preventDefault</span>()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// IE7/8</span><br>      event.<span class="hljs-property">returnValue</span> = <span class="hljs-literal">false</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="ajax-XMLHttpRequest-对象"><a href="#ajax-XMLHttpRequest-对象" class="headerlink" title="ajax - XMLHttpRequest 对象"></a>ajax - XMLHttpRequest 对象</h2><p>Async JavaScript adn XML：通过异步方式与服务器进行数据交互</p><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1、创建对象</span><br><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br><br><span class="hljs-comment">// 2、创建链接(不会发送)：指定类型、请求地址、是否异步(默认异步)</span><br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;https://www.xxx.com/api/user1&#x27;</span>)<br><br><span class="hljs-comment">// 3、指定回调</span><br>xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>) &#123;<br>    <span class="hljs-comment">// 请求成功回调</span><br>    <span class="hljs-keyword">const</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xhr.<span class="hljs-property">responseText</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 4、发送请求</span><br>xhr.<span class="hljs-title function_">send</span>()<br></code></pre></td></tr></table></figure><h3 id="进阶设置"><a href="#进阶设置" class="headerlink" title="进阶设置"></a>进阶设置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 超时时间</span><br>xhr.<span class="hljs-property">timeout</span> = <span class="hljs-number">2000</span> <span class="hljs-comment">// 单位毫秒</span><br><span class="hljs-comment">// 超时触发事件</span><br>xhr. ontimeout = <span class="hljs-function">() =&gt;</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="详细解释"><a href="#详细解释" class="headerlink" title="详细解释"></a>详细解释</h3><p><code>xhr.readyState</code>的状态有：</p><ul><li>0：未初始化，尚未调用<code>open</code>方法</li><li>1：启动，<code>open</code>方法已调用</li><li>2：发送，<code>send</code>方法已调用</li><li>3：接收，正在接收服务器数据</li><li>4：完成，数据接收完毕，可以在浏览器用了</li></ul><p><code>xhr.status</code>HTTP 的状态码，服务器返回的</p><ul><li>1xx：提示信息</li><li>2xx：成功，200(请求成功)</li><li>3xx：重定向，301(永久重定向)，302(临时重定向)</li><li>4xx：客户端错误，400(请求语法有错)，401(请求未授权)，403(服务器拒绝服务)，404(请求资源不存在)</li><li>5xx：服务器错误，500(服务器错误)，503(服务器已不能处理请求)</li></ul><h3 id="自行封装"><a href="#自行封装" class="headerlink" title="自行封装"></a>自行封装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用方式：</span><br><span class="hljs-title function_">ajax</span>(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http:www.xxx.com/api/xx&#x27;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">userId</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">3000</span>,<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;成功：&#x27;</span>, res)<br>&#125;,<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;失败：&#x27;</span>, err)<br>&#125;)<br><br><span class="hljs-comment">// 补充完下面的函数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">ajax</span> = (<span class="hljs-params">options</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; url, method, data, timeout &#125; = options<br>    <span class="hljs-keyword">const</span> _method = method.<span class="hljs-title function_">toUpperCase</span>()<br>    <span class="hljs-keyword">let</span> _data = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">let</span> _url = url<br><br>    <span class="hljs-keyword">if</span>(_method === <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>      <span class="hljs-comment">// 参数字符串处理</span><br>      <span class="hljs-keyword">const</span> queryString = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(data||&#123;&#125;).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">encodeURLComponent</span>(key) + <span class="hljs-string">&#x27;=&#x27;</span> + <span class="hljs-title function_">encodeURLComponent</span>(data[key])<br>      &#125;).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>)<br><br>      _url += <span class="hljs-string">&#x27;?&#x27;</span> + queryString<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      _data = data || <span class="hljs-literal">null</span><br><br>      <span class="hljs-keyword">if</span>(_data) &#123;<br>        _data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(_data)<br><br>        xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;Content-type&#x27;</span>, <span class="hljs-string">&#x27;application/json;charset=UTF-8&#x27;</span>)<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 1、创建对象</span><br>    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br><br>    <span class="hljs-comment">// 2、创建连接</span><br>    xhr.<span class="hljs-title function_">open</span>(_method, _url)<br><br>    <span class="hljs-comment">// 3、成功触发事件</span><br>    xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>          <span class="hljs-keyword">const</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xhr.<span class="hljs-property">responseText</span>)<br>          resolve &amp;&amp; <span class="hljs-title function_">resolve</span>(data)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          reject &amp;&amp; <span class="hljs-title function_">reject</span>()<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 4、发送请求</span><br>    xhr.<span class="hljs-title function_">send</span>(_data)<br><br>    <span class="hljs-comment">// 5、超时时间</span><br>    xhr.<span class="hljs-property">timeout</span> = timeout<br><br>    <span class="hljs-comment">// 6、超时触发事件</span><br>    xhr.<span class="hljs-property">ontimeout</span> = <span class="hljs-function">() =&gt;</span> reject &amp;&amp; <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;超时&#x27;</span>)<br><br>    <span class="hljs-comment">// 7、失败触发事件</span><br>    xhr.<span class="hljs-property">onerror</span> = <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> reject &amp;&amp; <span class="hljs-title function_">reject</span>(err)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h2><p>访问资源时，不必重新请求。</p><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>明确告知浏览器一定时间内使用本地缓存<br><code>Cach-Control</code></p><ul><li>max-age: 定义资源被认为是新鲜的最长时间（秒）。</li><li>s-maxage: 覆盖 max-age，但仅适用于共享缓存（比如代理服务器）。</li><li>public: 允许所有内容缓存，包括代理服务器。</li><li>private: 仅允许终端用户缓存。</li></ul><p><code>Expries</code>资源过期时间，服务器返回的 HTTP 头</p><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>浏览器向服务器发请求验证缓存是否有效</p><ul><li>Last-Modified &#x2F; If-Modified-Since：<ul><li>服务器通过 Last-Modified 头告诉浏览器资源的最后修改时间。</li><li>浏览器通过 If-Modified-Since 头将最后的修改时间发送给服务器，如果时间仍然一致，服务器返回 304，表示资源未被修改，可以使用本地缓存。</li></ul></li><li>ETag &#x2F; If-None-Match：<ul><li>服务器通过 ETag 头生成一个唯一的标识符（通常是文件内容的哈希值）。</li><li>浏览器通过 If-None-Match 头将该标识符发送给服务器，如果标识符仍然一致，服务器返回 304。</li></ul></li></ul><h2 id="面试常问-4"><a href="#面试常问-4" class="headerlink" title="面试常问"></a>面试常问</h2><h3 id="RESTFUL-请求的区别-GET、POST、DELETE、PUT、OPTION"><a href="#RESTFUL-请求的区别-GET、POST、DELETE、PUT、OPTION" class="headerlink" title="RESTFUL 请求的区别 - GET、POST、DELETE、PUT、OPTION"></a>RESTFUL 请求的区别 - GET、POST、DELETE、PUT、OPTION</h3><table><thead><tr><th>GET</th><th>POST</th><th>DELETE</th><th>PUT</th><th>OPTION</th></tr></thead><tbody><tr><td>获取数据</td><td>提交数据</td><td>删除数据</td><td>更新数据</td><td>预检，询问服务器支持哪些请求类型，通常在 CORS 请求中进行预检</td></tr><tr><td>参数在 url 上，有长度限制</td><td>参数在请求体上，浏览器&#x2F;服务器有大小限制</td><td>参数在 url 上，有长度限制</td><td>参数在请求体上，浏览器&#x2F;服务器有大小限制</td><td>无参数</td></tr></tbody></table><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>同源策略：协议、域名、端口都一致<br>跨域的原因是：浏览器的同源策略导致的，非同源的不允许访问<br>解决办法：</p><ol><li>本地环境：可配置代理</li><li>生产环境：服务端设置响应头，允许跨域(CORS-Cross Origin Resource Share)</li></ol><h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="window-requestIdleCallback-callback-options"><a href="#window-requestIdleCallback-callback-options" class="headerlink" title="window.requestIdleCallback(callback,options)"></a><code>window.requestIdleCallback(callback,options)</code></h2><p>允许在浏览器空闲时执行一些任务，以避免阻塞用户界面的流畅性。通常用于拆分大型任务(任务分片)，确保不会在主线程执行太久而导致影响用户体验<br>用之前检查兼容性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestIdleCallback</span>(callback, options);<br><span class="hljs-comment">// callback 是一个在浏览器空闲时执行的函数。</span><br><span class="hljs-comment">// options 是一个配置对象，可选，包含以下属性：</span><br> <span class="hljs-comment">// timeout：一个时间，指定在执行回调前等待的最长时间。</span><br> <span class="hljs-comment">// 如果空闲时间小于 timeout，则会立即执行回调。</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myIdleCallback</span>(<span class="hljs-params">deadline</span>) &#123;<br>  <span class="hljs-comment">// deadline 是一个对象，包含有关浏览器何时认为它将再次空闲的信息</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`剩余空闲时间：<span class="hljs-subst">$&#123;deadline.timeRemaining()&#125;</span>ms`</span>);<br><br>  <span class="hljs-comment">// 执行一些任务</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>    <span class="hljs-comment">// 一些计算密集的操作</span><br>  &#125;<br><br>  <span class="hljs-comment">// 如果任务未完成，可以请求下一次空闲回调</span><br>  <span class="hljs-keyword">if</span> (deadline.<span class="hljs-title function_">timeRemaining</span>() &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestIdleCallback</span>(myIdleCallback);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 启动第一次空闲回调</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestIdleCallback</span>(myIdleCallback);<br></code></pre></td></tr></table></figure><p>实际场景举例：</p><ul><li>性能监测和分析：空闲时可以做</li><li>自动保存和同步：空闲时可以做</li><li>前端性能优化：空闲时预加载资源、图片等</li></ul><h2 id="window-requestAnimationFrame-callback"><a href="#window-requestAnimationFrame-callback" class="headerlink" title="window.requestAnimationFrame(callback)"></a><code>window.requestAnimationFrame(callback)</code></h2><p>可在浏览器下一次重绘之前执行指定的回调函数，以确保动画的平滑运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">timestamp</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(timestamp); <span class="hljs-comment">// timestamp 回调被触发的时间戳(动画开始时的时间)</span><br><br>  <span class="hljs-comment">// 在这里执行动画相关的操作</span><br>  <span class="hljs-comment">// do something.......</span><br><br>  <span class="hljs-comment">// 继续下一帧动画</span><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(animate);<br>&#125;<br><br><span class="hljs-comment">// 启动动画</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(animate);<br></code></pre></td></tr></table></figure><h2 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h2><p><code>event.preventDefault()</code>阻止浏览器的默认行为，比如：a 标签点击后会默认跳转<br><code>envnt.returnValue = false</code>IE 阻止浏览器的默认行为</p>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-4、JS 模块化详解</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/1-4%E3%80%81JS%20%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AF%A6%E8%A7%A3/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/1-4%E3%80%81JS%20%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p> JS 最开始的定位为：简单的页面设计 - 简单动画 + 基本的表格提交（1995 年网景耗时 2 周开发出来的）<br>并无模块化或命名空间的概念<br>后面前端发展越来越复杂，就对 JS 提出了“模块”的要求</p><h1 id="模块化的阶段"><a href="#模块化的阶段" class="headerlink" title="模块化的阶段"></a>模块化的阶段</h1><h2 id="幼年期：无模块化"><a href="#幼年期：无模块化" class="headerlink" title="幼年期：无模块化"></a>幼年期：无模块化</h2><p>通过多个 JS 文件来处理，写多个<code>&lt;script src=&quot;xxx&quot;/&gt;</code> 来强行分隔</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;tool.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>存在的问题：</p><ul><li>污染全局作用域<ul><li>因为都在同一个 HTML 里面引入，将污染全局作用域，存在变量名冲突等问题</li><li>不利于大型项目开发与多人团队共建</li></ul></li></ul><h2 id="成长期：雏形-IIFE"><a href="#成长期：雏形-IIFE" class="headerlink" title="成长期：雏形-IIFE"></a>成长期：雏形-IIFE</h2><p>IIFE：立即执行函数(语法侧优化)，是模块化的基石<br>优势：作用域的封装，因为是函数所以有自己的作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params">_w</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(_w) <span class="hljs-comment">// 打印出来的是：传入的 Window 对象</span><br>&#125;)(<span class="hljs-variable language_">window</span>)<br></code></pre></td></tr></table></figure><p>使用 IIFE 实现一个简单的模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable language_">module</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br><br>  <span class="hljs-comment">// 主流程功能</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params"></span>) =&gt; count++<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">reset</span> = (<span class="hljs-params"></span>) =&gt; count = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">get</span> = (<span class="hljs-params"></span>) =&gt; count<br><br>  <span class="hljs-comment">// 对外暴露接口</span><br>  <span class="hljs-keyword">const</span> returnApi = &#123;<br>    add,<br>    reset,<br>    get<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> returnApi<br>&#125;)()<br><br><span class="hljs-comment">// module 为 &#123;add: ƒ, reset: ƒ, get: ƒ&#125;</span><br></code></pre></td></tr></table></figure><h2 id="成熟期：模块化爆发"><a href="#成熟期：模块化爆发" class="headerlink" title="成熟期：模块化爆发"></a>成熟期：模块化爆发</h2><h3 id="CJS-CommonJS"><a href="#CJS-CommonJS" class="headerlink" title="CJS - CommonJS"></a>CJS - CommonJS</h3><p>来自于<strong>服务端</strong>(Nodejs)定义的模块化加载和导出规范(同步加载)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导出 exports</span><br><span class="hljs-comment">// tool.js</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">add</span> = <span class="hljs-function">(<span class="hljs-params">num</span>) =&gt;</span> num + <span class="hljs-number">1</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">reset</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment">// 加载 require</span><br><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">const</span> tool = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./tool.js&#x27;</span>)<br>tool.<span class="hljs-title function_">add</span>(<span class="hljs-number">5</span>)<br>tool.<span class="hljs-title function_">reset</span>()<br></code></pre></td></tr></table></figure><p> 其中通过<code>require</code>导入，通过<code>exports</code>或<code>module.exports</code>导出<br>其中的关系为：<br><code>require</code>引入的是<code>module.exports</code>导出的<br>正常情况下<code>exports === module.exports // true</code><br>异常情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导出 exports</span><br><span class="hljs-comment">// tool.js</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">add</span> = <span class="hljs-function">(<span class="hljs-params">num</span>) =&gt;</span> num + <span class="hljs-number">1</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">reset</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-number">0</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-title function_">log</span>(<span class="hljs-params">num</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 加载 require</span><br><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">const</span> tool = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./tool.js&#x27;</span>)<br>tool.<span class="hljs-title function_">add</span>(<span class="hljs-number">5</span>) <span class="hljs-comment">// 报错</span><br>tool.<span class="hljs-title function_">reset</span>() <span class="hljs-comment">// 报错</span><br>tool.<span class="hljs-title function_">log</span>(<span class="hljs-number">77</span>) <span class="hljs-comment">// 正常</span><br></code></pre></td></tr></table></figure><p>优点：</p><ul><li>同步加载，易于理解代码执行</li></ul><p>缺点：</p><ul><li>同步加载大量文件时，会阻塞</li><li>因为是同步加载，所以无法按需异步加载</li><li>没有语言层面的支持： CommonJS 不是 JavaScript 的语言层面的特性，而是一种规范。相比之下，ES6 模块是语言层面的特性，得到了更好的集成和支持。</li></ul><h3 id="AMD-Asynchronous-Module-Definition（异步模块定义）"><a href="#AMD-Asynchronous-Module-Definition（异步模块定义）" class="headerlink" title="AMD - Asynchronous Module Definition（异步模块定义）"></a>AMD - Asynchronous Module Definition（异步模块定义）</h3><p>针对<strong>浏览器端</strong>的模块加载规范，支持异步加载，不阻塞页面渲染<br>著名的框架为 require.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义模块</span><br><span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;moduleA&#x27;</span>,[<span class="hljs-string">&#x27;dep1&#x27;</span>, <span class="hljs-string">&#x27;dep2&#x27;</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params">dep1, dep2</span>)&#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">log</span>(<span class="hljs-params"></span>)&#123;<br>      dep1.<span class="hljs-property">a</span>++<br>      dep2.<span class="hljs-property">b</span>++<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dep1.<span class="hljs-property">a</span>)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dep2.<span class="hljs-property">b</span>)<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// 使用模块</span><br><span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;moduleA&#x27;</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params">moduleA</span>) &#123;<br>  moduleA.<span class="hljs-title function_">log</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><p>优点：</p><ul><li>异步加载</li><li>提高了模块化开发</li></ul><p>缺点：</p><ul><li>语法繁琐</li><li>需要显示声明依赖</li></ul><h3 id="UMD-Universal-Module-Definition（通用模块定义）"><a href="#UMD-Universal-Module-Definition（通用模块定义）" class="headerlink" title="UMD - Universal Module Definition（通用模块定义）"></a>UMD - Universal Module Definition（通用模块定义）</h3><p>UMD 是兼容多种模式(CJS&#x2F;AMD 等)的模块加载器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params">root, factory</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> define === <span class="hljs-string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="hljs-property">amd</span>) &#123;<br>      <span class="hljs-comment">// AMD</span><br>      <span class="hljs-title function_">define</span>([<span class="hljs-string">&#x27;dependency&#x27;</span>], factory);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">exports</span> === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>      <span class="hljs-comment">// CommonJS</span><br>      <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">factory</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;dependency&#x27;</span>));<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 浏览器全局变量</span><br>      root.<span class="hljs-property">MyModule</span> = <span class="hljs-title function_">factory</span>(root.<span class="hljs-property">Dependency</span>);<br>  &#125;<br>&#125;(<span class="hljs-variable language_">this</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">Dependency</span>) &#123;<br>  <span class="hljs-comment">// 模块的实际定义</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyModule</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// ...</span><br>  &#125;<br><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">MyModule</span>;<br>&#125;));<br></code></pre></td></tr></table></figure><h3 id="CMD-Common-Module-Definition（同步模块加载）"><a href="#CMD-Common-Module-Definition（同步模块加载）" class="headerlink" title="CMD - Common Module Definition（同步模块加载）"></a>CMD - Common Module Definition（同步模块加载）</h3><p>强调模块的加载与使用是同时的<br>著名框架 sea.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;module1&#x27;</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) =&gt;</span> &#123;<br> <span class="hljs-keyword">let</span> $ = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jquery.js&#x27;</span>) <span class="hljs-comment">// 模块加载</span><br><br>  <span class="hljs-comment">// $(&#x27;.name&#x27;).style.xxx 模块使用</span><br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getDom</span> = (<span class="hljs-params">selector</span>) =&gt; $(selector)<br><br>  <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; getDom &#125; <span class="hljs-comment">// 模块 API 的暴露</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>优点：</p><ul><li>对依赖的加载可控，能达到“按需加载”，依赖就近</li></ul><p>缺点：</p><ul><li>不支持异步加载</li></ul><h2 id="新时代：官方支持"><a href="#新时代：官方支持" class="headerlink" title="新时代：官方支持"></a>新时代：官方支持</h2><h3 id="ESM-ES6-module"><a href="#ESM-ES6-module" class="headerlink" title="ESM - ES6 module"></a>ESM - ES6 module</h3><p>ES6 提供的模块加载机制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// math.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">a, b</span>) =&gt; a + b;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">subtract</span> = (<span class="hljs-params">a, b</span>) =&gt; a - b;<br><br><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> &#123; add, subtract &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./math&#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>));      <span class="hljs-comment">// 输出 7</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">subtract</span>(<span class="hljs-number">8</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">// 输出 3</span><br></code></pre></td></tr></table></figure><ol><li>导出： 使用<code>export</code>关键字导出模块的功能。</li><li>导入： 使用<code>import</code>关键字导入其他模块的功能。</li><li>命名空间导入： 使用<code>import * as aliasName from &#39;module&#39;;</code>来导入整个模块的命名空间。</li><li>默认导出： 使用<code>export default</code>来指定一个模块的默认导出，可以使用<code>import moduleName from &#39;module&#39;;</code>进行导入。</li><li>动态导入： 使用<code>import()</code>来动态加载模块，返回一个 Promise</li></ol><p>优点：</p><ul><li>模块文件有自己的作用域，不会污染全局</li><li>默认使用严格模式</li></ul><p>缺点：</p><ul><li>兼容性，低版本浏览器不一定兼容</li></ul><h1 id="模块化的目的"><a href="#模块化的目的" class="headerlink" title="模块化的目的"></a>模块化的目的</h1><ul><li>隔离逻辑与作用域</li><li>扩展协同的方便度</li></ul><p>最终形成万物皆模块，作为前端工程化的基石</p><h1 id="Webpack-知识"><a href="#Webpack-知识" class="headerlink" title="Webpack 知识"></a>Webpack 知识</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>将应用中的各种资源(js&#x2F;css&#x2F;图片&#x2F;字体等)打包为浏览器可以直接运行静态文件。</p><h2 id="打包流程"><a href="#打包流程" class="headerlink" title="打包流程"></a>打包流程</h2><ol><li>入口文件(Entry)：从配置的入口文件为起点，进行依赖分析<ol><li>遇到不同的资源(js&#x2F;css&#x2F;图片&#x2F;字体等)，将通过不同的加载器(loader)，进行转换处理</li></ol></li><li>依赖图：根据依赖关系生成一张依赖图，确保各模块的加载顺序</li><li>代码块(Chunk)：根据依赖图生成代码块</li><li>插件(Plugin)：处理各种任务。如：代码压缩、文件拷贝等</li><li>输出(Output)：根据配置生成到对应目录，生成的目录有：js 文件夹、css 文件夹、img 文件夹、index.html、sourceMap 等</li></ol><h2 id="打包模式"><a href="#打包模式" class="headerlink" title="打包模式"></a>打包模式</h2><p>默认使用 UMD，可以配置 CJS、AMD 等</p><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><h3 id="图片资源，最终打包成的代码是如何引用的？"><a href="#图片资源，最终打包成的代码是如何引用的？" class="headerlink" title="图片资源，最终打包成的代码是如何引用的？"></a>图片资源，最终打包成的代码是如何引用的？</h3><p>举例：Vue + Webpack 的项目，模板(template)内的图片引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./assets/image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Image&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>打包处理逻辑为：1、将该图片打包到输出目录；2、将解析该相对 src 路径为输出目录的图片绝对路径</p><h1 id="Vite-知识"><a href="#Vite-知识" class="headerlink" title="Vite 知识"></a>Vite 知识</h1><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><p>基于 ES Module 的构建工具</p><h2 id="打包流程-1"><a href="#打包流程-1" class="headerlink" title="打包流程"></a>打包流程</h2><ol><li>启动开发服务器： 当你运行 vite 命令时，Vite 会启动一个开发服务器(基于 Koa)。</li><li>ES Module 编译： Vite 将项目中的源代码文件（包括 JavaScript、CSS、Vue 文件等）通过 ES Module 编译器进行处理。这个过程中，它不会将所有模块打包成一个或多个文件，而是保持模块的原始结构。</li><li>按需编译： Vite 采用按需编译的策略，只有在用户请求时才会编译和提供相应的模块。这意味着不需要预先编译整个应用，大大提高了启动速度。</li><li>服务端渲染（如果需要）： 对于 Vue 项目，Vite 可以支持服务端渲染（SSR），此时会执行服务端渲染的相关逻辑。</li><li>构建： 当需要生成生产环境的构建时，Vite 会使用 Rollup（一个 JavaScript 模块打包器）进行构建。这个构建过程会将模块打包成传统的、优化过的 JavaScript 文件，以适应生产环境的需要。</li><li>输出： 构建完成后，生成的文件将被输出到指定的目录，可以被部署到服务器上供浏览器加载</li></ol><h2 id="打包模式-1"><a href="#打包模式-1" class="headerlink" title="打包模式"></a>打包模式</h2><p>Build 出来的产物为 ES Module</p><h1 id="Webpack-与-Vite-的优缺点"><a href="#Webpack-与-Vite-的优缺点" class="headerlink" title="Webpack 与 Vite 的优缺点"></a>Webpack 与 Vite 的优缺点</h1><p>|</p><p> | Webpack | Vite |<br>| — | — | — |<br>| 冷启动 | 慢 | 快(基于 ES Module) |<br>| 热更新 | 慢 | 快(基于 ES Module) |<br>| 生态 | 完善 | 较新 |<br>| 其他 | 配置复杂 | 配置简单 |</p><h1 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h1><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>作用：使 JS 更安全，减少不确定性<br>使用：’use strict’<br>特点：</p><ol><li>禁止使用未声明的变量： 在严格模式下，如果使用未声明的变量，将抛出 ReferenceError。</li><li>this 的值为 undefined： 在严格模式下，如果函数不是作为对象的方法调用，this 的值将为 undefined。</li></ol><h2 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h2><p>使用<code>new Error().stack</code>可以获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">logCaller</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>().<span class="hljs-property">stack</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">logCaller</span>();<br>&#125;<br><br><span class="hljs-title function_">outer</span>();<br><br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// Error</span><br><span class="hljs-comment">//     at logCaller (&lt;anonymous&gt;:2:17)</span><br><span class="hljs-comment">//     at outer (&lt;anonymous&gt;:6:5)</span><br><span class="hljs-comment">//     at &lt;anonymous&gt;:9:1</span><br></code></pre></td></tr></table></figure><h2 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h2><p>一个 JS 模块打包器，产物为 ESModule。相比于 Webpack 更小巧高效</p><h2 id="组件库搭建所需"><a href="#组件库搭建所需" class="headerlink" title="组件库搭建所需"></a>组件库搭建所需</h2><p><img src="/img/images/2023/1699890848440-19c2a2e5-4ecc-4a4f-ae8d-3cca3a62852c.jpeg"></p><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="script-标签的参数：async、defer"><a href="#script-标签的参数：async、defer" class="headerlink" title="script 标签的参数：async、defer"></a>script 标签的参数：async、defer</h2><p> 都是用于控制脚本执行时机</p><ol><li>加载行为：<ul><li>async 和 defer 都不会阻塞页面渲染，允许页面继续加载。</li></ul></li><li>执行时机：<ul><li>async：脚本加载完成后立即执行，与页面加载和其他脚本执行顺序无关。</li><li>defer：按照它们在页面上出现的顺序执行，但会在文档解析完成后、DOMContentLoaded 事件触发前执行。</li></ul></li><li>依赖关系：<ul><li>async：适用于相互独立、无依赖关系的脚本。</li><li>defer：适用于有顺序依赖关系的脚本。</li></ul></li></ol><p><img src="/img/images/2023/1700049398199-5204ed0e-93c2-43be-b5e4-4961fdf807d4.jpeg"></p><h2 id="JQuery-源码-依赖处理"><a href="#JQuery-源码-依赖处理" class="headerlink" title="JQuery 源码-依赖处理"></a>JQuery 源码-依赖处理</h2><p>IFEE + 传参调配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable language_">window</span>, <span class="hljs-literal">undefined</span> </span>) &#123;<br>   <span class="hljs-comment">// 用一个函数域包起来，就是所谓的沙箱</span><br>   <span class="hljs-comment">// 在这里边var定义的变量，属于这个函数域内的局部变量，避免污染全局</span><br>   <span class="hljs-comment">// 把当前沙箱需要的外部变量通过函数参数引入进来</span><br>   <span class="hljs-comment">// 只要保证参数对内提供的接口的一致性，你还可以随意替换传进来的这个参数</span><br>  <span class="hljs-string">&quot;use strict&quot;</span>;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">jQuery</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">$</span> = jQuery;<br>&#125;)( <span class="hljs-variable language_">window</span> );<br></code></pre></td></tr></table></figure><h2 id="一行代码如何兼容-AMD、CJS？"><a href="#一行代码如何兼容-AMD、CJS？" class="headerlink" title="一行代码如何兼容 AMD、CJS？"></a>一行代码如何兼容 AMD、CJS？</h2><p>AMD 关键：define<br>CJS 关键：module.exports</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-params">factory</span> =&gt;</span> &#123;<br><br>&#125;)(<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">module</span> === <span class="hljs-string">&#x27;objetc&#x27;</span> &amp;&amp; <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> &amp;&amp; <span class="hljs-keyword">typeof</span> define === <span class="hljs-string">&#x27;undefined&#x27;</span> ?<br>cjsFactory : amdFactory)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-3、Promise知识与使用</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/1-3%E3%80%81Promise%E7%9F%A5%E8%AF%86%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/1-3%E3%80%81Promise%E7%9F%A5%E8%AF%86%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="JS-运行机制"><a href="#JS-运行机制" class="headerlink" title="JS 运行机制"></a>JS 运行机制</h2><p>JS 是单线程的，在同一时间只能做同一件事：协调事件、用户交互、脚本、UI 渲染和网络处理等行为。<br><strong>JS 为什么是单线程：因为 JS 可以操作 DOM，那如果是多个线程操作同一个 DOM，那如何判断优先级呢？所以为了避免这个问题，JS 就故意设计为单线程</strong><br>JS 的代码是一行行执行的，即同步执行<br>执行时会创建执行上下文，主要有全局、函数执行上下文<br>遇到函数被调用则创建一个新的函数执行上下文，函数的代码在里面被执行<br>那遇到异步任务时，不可能一直等待异步任务完成后再执行，因此会放入异步任务处理模块中执行，等其执行完毕后再将其回调函数放到事件队列中，然后由事件循环来处理(需要执行的就拿出来执行)<br>异步任务分为：微任务、宏任务，微任务优先级高于宏任务<br>常见的微任务包括 Promise 的 then 方法和 async&#x2F;await 中的 await(后面的代码都看作为回调函数哦)<br>宏任务包括定时器、事件处理、网络请求等<br><img src="/img/images/2023/1698307384683-0f3a5f66-99e0-436c-ba38-270697fe1322.png"><br>所以整个 JS 运行是由：[同步任务、异步任务(微任务、宏任务)] 不停的循环直到执行完毕</p><h1 id="事件循环（Event-Loop）"><a href="#事件循环（Event-Loop）" class="headerlink" title="事件循环（Event Loop）"></a>事件循环（Event Loop）</h1><ol><li>第一次进入<script>标签后，开始事件循环</li><li>遇到同步代码，立即执行</li><li>遇到异步代码放入异步任务处理模块中执行<ol><li>执行完成后，若为微任务，将其回调事件放入事件队列-微任务队列中</li><li>执行完成后，若为宏任务，将其回调事件放入事件队列-宏任务队列中</li></ol></li><li>执行本轮的所有同步代码，直到执行完毕</li><li>进入微任务队列中，执行所有的微任务，直至清空所有的微任务</li><li>按顺序拿出一个宏任务，执行该宏任务，开始下一轮事件循环（重复步骤 2）</li></ol><p><img src="/img/images/2023/1699413824794-d05c9e5b-5c9c-421b-b9de-1f5f0a011737.jpeg"></p><h1 id="进程、线程"><a href="#进程、线程" class="headerlink" title="进程、线程"></a>进程、线程</h1><ul><li><strong>进程（Process）</strong>： 进程是计算机中的一个独立执行单位。一个进程可以包括多个线程，每个线程都在进程的上下文中运行。不同的进程之间是相互独立的，它们拥有各自的内存空间和资源。</li><li><strong>线程（Thread）</strong>： 线程是进程内的执行单元，它可以看作是进程的一个子任务。一个进程可以包含多个线程，这些线程共享进程的内存和资源，因此它们之间可以更容易地通信和协作。</li></ul><p>大白话：一个餐厅就是一个进程，餐厅里面的厨师、端菜、收银等是线程</p><h1 id="浏览器原理"><a href="#浏览器原理" class="headerlink" title="浏览器原理"></a>浏览器原理</h1><h2 id="浏览器进程、线程"><a href="#浏览器进程、线程" class="headerlink" title="浏览器进程、线程"></a>浏览器进程、线程</h2><p>参考：<a href="https://juejin.cn/post/7287914116286201891?searchId=2023110913433305F7F5BB2F6B98520FC2">浏览器原理：进程与线程 - 掘金</a><br><img src="/img/images/2024/1707191612998-23fde734-38fd-4554-98d3-06e4b7f35b55.jpeg"></p><h2 id="浏览器渲染原理"><a href="#浏览器渲染原理" class="headerlink" title="浏览器渲染原理"></a>浏览器渲染原理</h2><p>浏览器的渲染进程专门来负责将 HTML、CSS、JavaScript 转为可视化的页面。<br>要讲清楚浏览器的渲染原理，那就不得不从源头讲起：浏览器地址栏输入地址到页面渲染，发生了什么？</p><h3 id="输入地址后，浏览器开始解析域名，通过-DNS-Domain-Name-System-查询到对应的-IP-Internet-Protocol"><a href="#输入地址后，浏览器开始解析域名，通过-DNS-Domain-Name-System-查询到对应的-IP-Internet-Protocol" class="headerlink" title="输入地址后，浏览器开始解析域名，通过 DNS(Domain Name System) 查询到对应的 IP(Internet Protocol)"></a>输入地址后，浏览器开始解析域名，通过 DNS(Domain Name System) 查询到对应的 IP(Internet Protocol)</h3><ol><li>那为什么是 IP？<ol><li>因为对计算机来说，IP 才是它能理解的。</li></ol></li><li>那为什么要找 IP 呢？<ol><li>因为我们的静态资源(HTML/CSS/JS/其他资源等)一定是放在某个服务器上的，而对计算机来说， 精确的找到服务器就需要 IP</li></ol></li><li>域名与 IP 是啥关系？<ol><li>域名(英语：Domain Name)，是由一串用点分隔的名字组成的互联网上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位</li><li>IP 地址：是一个 32 位的二进制数，通常被分割为 4 个“8 位二进制数”(也就是 4 个字节)。是一种在互联网上给主机编址的方式，为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。</li><li>IP 地址和域名是一一对应的，这份域名地址的信息存放在一个叫域名服务器(DNS，Domain name server)的主机内，使用者只需了解易记的域名地址，其对应转换工作就留给了域名服务器。域名服务器就是提供 IP 地址和域名之间的转换服务的服务器。</li><li>域名是 IP 的别名，一个更容易记得别名</li></ol></li><li>域名的组成？举例：<a href="http://www.example.com/path/to/file#section1">http://www.example.com/path/to/file#section1</a><ol><li>**协议(Protocol)**：表示使用的通信协议，常见 HTTP、HTTPS；例子中的协议为：http:。浏览器中为<code>location.protocol</code></li><li>**域名(Domain Name)**：是网站在互联网上的唯一标识。例子中的域名为：<a href="http://www.example.com,其中`.com`是顶级域名,`example`是主域名,`www`是子域名.浏览器中为`location.host`/">www.example.com，其中`.com`是顶级域名，`example`是主域名，`www`是子域名。浏览器中为`location.host`</a></li><li>**端口号(Port)**：访问网站的端口号，默认为 80(可省略)。例子中的端口为：无，因为例子中没有明确展示端口。浏览器中为<code>location.port</code></li><li>**路径(Path)**：表示网站上具体的文件或目录路径。例子中的路径为：path/to/file。浏览器中为<code>location.pathname</code></li><li>**参数(Query)**：表示向服务器传递的参数，用于定制请求的内容。查询参数以"?"开头，多个参数之间使用"&"分隔。例子中的参数为：空。浏览器中为<code>location.search</code></li><li>**锚点(Anchor)**：表示网页内部的定位点。锚点以"#"开头，用于跳转到网页的特定位置。例子中的锚点为：#section1。浏览器中为<code>location.hash</code></li></ol></li></ol><h3 id="找到-IP-后，采用-TCP-Transmission-Control-Protocol，传输控制协议-三次握手来确认连接"><a href="#找到-IP-后，采用-TCP-Transmission-Control-Protocol，传输控制协议-三次握手来确认连接" class="headerlink" title="找到 IP 后，采用 TCP(Transmission Control Protocol，传输控制协议)三次握手来确认连接"></a>找到 IP 后，采用 TCP(Transmission Control Protocol，传输控制协议)三次握手来确认连接</h3><ol start="5"><li>TCP 三次握手：<ol><li>第一次：浏览器向服务器发送一个 SYNC 消息，要求进行同步（同步意味着连接）</li><li>第二次：服务器将回复一个 SYNC-ACK 消息，由 SYNChronization(要求进行同步) 和 ACKnowledgement(确认消息) 组成</li><li>第三次：浏览器回复 ACK 消息</li></ol></li><li>TCP 三次握手的情景模拟<ol><li>发送方：老铁，可以听得到我说话吗，老铁。</li><li>接收方：可以听到，你听得到吗？</li><li>发送方：听到了，那我开始说正事了。</li></ol></li></ol><h3 id="针对-HTTPs-协议的，还需要-TLS-Transport-Layer-Security，传输层安全-协商握手，一种加密协议，用于确保通信的安全"><a href="#针对-HTTPs-协议的，还需要-TLS-Transport-Layer-Security，传输层安全-协商握手，一种加密协议，用于确保通信的安全" class="headerlink" title="针对 HTTPs 协议的，还需要 TLS(Transport Layer Security，传输层安全) 协商握手，一种加密协议，用于确保通信的安全"></a>针对 HTTPs 协议的，还需要 TLS(Transport Layer Security，传输层安全) 协商握手，一种加密协议，用于确保通信的安全</h3><ol start="7"><li>TLS 握手的情景解释：发送方与接收方互发消息，然后让第三方参与见证，最终互相协商出一个本次会话的暗号。首先确保互相是互相要找的那个人，其次确保本次会话安全。</li></ol><h3 id="获取资源，在建立连接后，浏览器会发起一个初始的-HTTP-GET-请求，用于获取-HTML-文件"><a href="#获取资源，在建立连接后，浏览器会发起一个初始的-HTTP-GET-请求，用于获取-HTML-文件" class="headerlink" title="获取资源，在建立连接后，浏览器会发起一个初始的 HTTP GET 请求，用于获取 HTML 文件"></a>获取资源，在建立连接后，浏览器会发起一个初始的 HTTP GET 请求，用于获取 HTML 文件</h3><ol start="8"><li>HTTP(HyperText Transfer Protocol，超文本传输协议) 请求组成<ol><li>请求：请求行、请求头、请求体<img src="/img/images/2023/1699540815859-8436b887-7758-4631-8c73-2bb5c8c06a7d.png" alt="请求报文"><ol><li>请求行包含：请求方法、请求 URL、HTTP 协议与版本<ol><li>请求方法：GET、POST、DELETE、PUT、等<ol><li>GET、POST 的区别<ol><li>参数：<ol><li>GET  的放在请求 URL 后面，不安全，并且 URL 的长度会限制参数大小，没有请求体</li><li>POST 的放在请求体，较安全，请求数据大小没限制，但浏览器、服务器会有限制</li></ol></li><li>缓存：GET 请求可以被缓存，POST 请求不会被缓存</li></ol></li><li>常见 GET 请求：地址栏直接访问、<a href="">、<img src="">等</li></ol></li></ol></li><li>请求头：通常以键值对 key:value 方式传递数据。<ol><li>常见的有：<ol><li>Authorization: xxxxx</li><li>Referer：表示这个请求是从哪个 url 跳过来的，直接访问的话就没有<ol><li><code>Referer:https://www.bing.com/</code></li></ol></li><li>Accept：告诉服务端，该请求所能支持的响应数据类型<ol><li><code>Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</code></li></ol></li><li>Cookie：给服务器用的<ol><li><code>Cookie: JSESSIONID=15982C27F7507C7FDAF0F97161F634B5</code></li></ol></li><li>User-Agent：浏览器通知服务器，客户端浏览器与操作系统相关信息<ol><li><code>User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36 Edg/119.0.0.0</code></li></ol></li></ol></li></ol></li><li>请求体：存放 POST/PUT 请求的参数</li></ol></li><li>响应：响应行、响应头、响应体<br><img src="/img/images/2023/1699542100974-506cbe5b-92ac-4b6f-a854-b1e0b5d96aa5.png" alt="响应报文"><ol><li>响应行包含：HTTP 协议与版本、状态码与描述<ol><li>状态码：是由三位数组成，定义响应状态，第一位决定响应类别<ol><li>1xx：指示信息，表示请求已接收，继续处理</li><li>2xx：成功，表示请求已被成功接受与处理<ol><li>200 OK：请求成功</li><li>204 No Content：服务器处理成功，无返回内容</li></ol></li><li>3xx：重定向<ol><li>301：永久重定向</li><li>302：临时重定向</li></ol></li><li>4xx：客户端报错<ol><li>400：客户端请求有语法错误</li><li>401：客户端请求未经授权</li><li>403：服务器收到请求，但拒绝提供服务</li><li>404：请求资源不存在</li></ol></li><li>5xx：服务端报错<ol><li>500：服务器发生错误</li><li>503：服务器当前不能处理客户端的请求</li></ol></li></ol></li></ol></li><li>响应头：通常以键值对 key:value 方式传递数据，服务器通过响应头来控制浏览器的行为，不同的头浏览器操作不同<br><img src="/img/images/2023/1699542802265-96d3b50a-e327-473f-9634-6e2640ec9ed9.png" alt="响应头"></li><li>响应体：服务器发给浏览器的数据，根据不同的 Content-Type，对应的数据类型也不一样<br><img src="/img/images/2023/1699542809932-2b7df8fa-dd7c-42b3-a657-cbc402842277.png" alt="Content-Type"></li></ol></li></ol></li></ol><h3 id="解析-HTML，生成-DOM-树"><a href="#解析-HTML，生成-DOM-树" class="headerlink" title="解析 HTML，生成 DOM 树"></a>解析 HTML，生成 DOM 树</h3><p>当浏览器接受到服务器返回的 HTML 文件后，浏览器引擎开始 HTML 解析</p><ol><li>浏览器引擎（不要与浏览器 JavaScript 引擎混淆哦）<ol><li>浏览器引擎是每个主要浏览器的核心组件，它的主要作用是结合结构 (HTML) 和样式 (CSS)，以便它可以在我们的屏幕上绘制网页。</li><li>常见浏览器引擎：<ol><li>Webkit：由 Apple 为 Safari 开发，但在 iOS 上，包括 Firefox 和 Chrome 在内的所有浏览器也由 WebKit 提供支持，使用 C++ 书写的</li><li>Gecko：由 Mozilla 为 Firefox 开发，目前仅少数浏览器(Firefox)还在使用它，使用 C++ 和 JavaScript 编写的，自 2016 年起，还用 Rust 编写。</li><li>Blink：由 Google 为 Chrome 开发，是 Webkit 的一个分支，使用 C++ 书写的</li><li>可以通过<code>navigator.userAgent</code>查看<ol><li><code>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36 Edg/119.0.0</code></li><li>其中的<code>AppleWebKit</code>代表浏览器引擎</li></ol></li></ol></li></ol></li><li>HTML 解析步骤：词法解析与树构造<ol><li>词法解析：将服务器返回的 HTML 源代码(不是的话就要解析为 HTML 源代码)，最后解析为令牌流(Token)，这个流可以被进一步用于构建抽象语法树（AST）等后续解析和处理步骤<img src="/img/images/2023/1699545133508-9e097489-40bd-4c51-8286-871041b98060.png" alt="从字节到令牌"></li><li>树构造：DOM(Document Object Model，文档对象模型)，DOM 树用于描述 HTML 文档的内容<ol><li>从根节点<code>&lt;html&gt;</code>开始构建<br><img src="/img/images/2023/1699544908152-725f942e-d307-49c2-9eb9-1398de6cca71.png"><img src="/img/images/2023/1699545316685-1e2711a2-1a52-4092-9570-c58633908c2c.png" alt="从字节到 DOM"></li></ol></li><li>解析器是从上到下逐行工作。<ol><li>当解析器遇到非阻塞资源（例如图像）时，浏览器会向服务器请求这些图像并继续解析。</li><li>另一方面，如果它遇到阻塞资源（CSS 样式表、在 HTML 的 <head> 部分添加的 Javascrpt 文件或从 CDN 添加的字体），解析器将停止执行，直到所有这些阻塞资源都被下载</li></ol></li></ol></li></ol><h3 id="解析-CSS，生成-CSSOM-树"><a href="#解析-CSS，生成-CSSOM-树" class="headerlink" title="解析 CSS，生成 CSSOM 树"></a>解析 CSS，生成 CSSOM 树</h3><ol><li>在解析 HTML 时，遇到 CSS 后，就开始解析 CSS，并生成 CSSOM 树</li><li>CSS 解析也是从 词法解析 => 生成源代码 => 生成 Tokens => 构建节点 => 生成 CSSOM 树<br><img src="/img/images/2023/1699585043956-dbfefd56-abb0-4c6d-b223-8d029c307f45.png"></li><li>CSS 规则是从右到左阅读的，这样的代码：<code>section p &#123; color: blue; &#125;</code>, 浏览器将首先查找页面上的所有 p 标签，然后它会查看这些 p 标签中是否有一个 section 标签作为父标签。</li></ol><h3 id="执行-JS，生成-AST-树"><a href="#执行-JS，生成-AST-树" class="headerlink" title="执行 JS，生成 AST 树"></a>执行 JS，生成 AST 树</h3><p>浏览器获取 Javascript 文件后，代码被解释、编译、解析和执行。</p><h4 id="JS-引擎"><a href="#JS-引擎" class="headerlink" title="JS 引擎"></a>JS 引擎</h4><p>是一种在浏览器中执行 JS 代码的软件，用来将 JS 代码翻译为计算机可以理解的东西。<br>由浏览器提供，不同浏览器供应商，有不同的 JS 引擎</p><ol><li>V8：Google 浏览器提供的 JS 引擎，由 C++ 编写</li><li>JavaScriptCore：Safari 浏览器的 Webkit 内置的 JS 引擎</li><li>Chakra：Edge 浏览器的 JS 引擎，由 C++ 编写</li><li>SpiderMonkey：FireFox 浏览器的 JS 引擎，由 C++、Javascript 和 Rust 编写</li></ol><p>额外知识：编译、解释、即时编译<br>编译：将 JS 代码一次性转换为机器代码，并创建一个目标文件，该文件可以在任何机器上运行<br><img src="/img/images/2023/1699590380563-a32ae560-e14e-4e39-8804-ee075f02c15b.png"><br>解释：逐行检查 JS 代码并立即执行。JS 是解释型语言(不需要编译)<br><img src="/img/images/2023/1699590622412-9b171886-3698-4873-8c4d-83cca0e0e7ad.png"><br>即时编译：JS 代码在执行时（在运行时）被编译，目前大多数浏览器都是用它来运行 JS 代码<br><img src="/img/images/2023/1699590668655-99aa9409-909f-4229-a212-7ad17e14eb8c.png"></p><h4 id="JS-代码是如何处理的？"><a href="#JS-代码是如何处理的？" class="headerlink" title="JS 代码是如何处理的？"></a>JS 代码是如何处理的？</h4><ol><li>JS 代码进入到 JS 引擎后，开始逐行解析并转为 AST(Abstract Syntax Tree，抽象语法树) 的数据结构<ol><li>JS 转 AST 工具：<a href="https://astexplorer.net/">AST explorer</a><img src="/img/images/2023/1699591142006-4c364047-42c7-458f-9332-9c3e007bcd00.png"></li></ol></li><li>构建 AST 后，然后使用即时编译来执行代码</li></ol><h3 id="创建可访问-无障碍-树"><a href="#创建可访问-无障碍-树" class="headerlink" title="创建可访问(无障碍)树"></a>创建可访问(无障碍)树</h3><p>可访问性指：尽可能开发处易于访问的内容，无论个人的身体和认知能力以及他们如何访问网络 (ACT-Accessibility Conformance Testing)<br>ACT：专门测试与评估是否符合无障碍标准的方法<br>可访问树：是基于 DOM 创建的，在 DOM 树基础上增加一些额外信息，确保更好的无障碍体验，并且使无障碍辅助技术(屏幕辅助阅读、放大镜等)能更好的解释页面内容，并且可访问树与 DOM 树是保持同步更新的<br>增强可访问性的方法：语义化 HTML、键盘导航、适当描述(alt)等</p><h3 id="创建渲染树，并显示到页面上"><a href="#创建渲染树，并显示到页面上" class="headerlink" title="创建渲染树，并显示到页面上"></a>创建渲染树，并显示到页面上</h3><p>渲染树是确保页面内容以正确的顺序绘制元素，由 DOM 与 CSSOM 结合而成。</p><h4 id="如何创建渲染树呢？"><a href="#如何创建渲染树呢？" class="headerlink" title="如何创建渲染树呢？"></a>如何创建渲染树呢？</h4><p>从 DOM 树根节点，遍历可见节点，并在 CSSOM 树里面找到对应规则，最终结合为渲染树(一个包含所有可见节点、内容和样式的树，但不包含节点的尺寸与位置)<br><img src="/img/images/2023/1699592538642-82195db5-126d-411c-a875-884c1b84e578.png"></p><h4 id="渲染树创建完后，进行-Layout（布局）"><a href="#渲染树创建完后，进行-Layout（布局）" class="headerlink" title="渲染树创建完后，进行 Layout（布局）"></a>渲染树创建完后，进行 Layout（布局）</h4><p>从渲染树根节点开始，基于设备视口计算每个节点的尺寸与位置。<br><img src="/img/images/2023/1699592911415-4456cd50-e6ad-4eaf-9ff6-0c49a9c9fbc9.png"><br>每次更改节点的尺寸与位置都会触发布局，也就是重排</p><h4 id="Layout-后，进行绘制"><a href="#Layout-后，进行绘制" class="headerlink" title="Layout 后，进行绘制"></a>Layout 后，进行绘制</h4><p>当 Layout 完后，就可以在屏幕上绘制节点了。<br><img src="/img/images/2023/1699593035703-e24859fe-0493-4729-a75f-2d0fcf10a1e7.png"><br>每次更改节点的样式都会触发绘制，也就是重绘</p><h2 id="浏览器-tab"><a href="#浏览器-tab" class="headerlink" title="浏览器 tab"></a>浏览器 tab</h2><p>浏览器不同 Tab 之间是属于进程，那若想进行通信，可以使用如下方式：</p><ol><li>localStorage<ol><li>基于同源+事件监听</li></ol></li><li>cookie<ol><li>基于同源+定时器</li></ol></li><li>websocket<ol><li>基于后端服务实现，提供了发送、接受事件</li></ol></li><li>sharedworker<ol><li>类似于 websocket，提供了发送、接受事件</li></ol></li></ol><h2 id="浏览器-Storage-与-Cookie"><a href="#浏览器-Storage-与-Cookie" class="headerlink" title="浏览器 Storage 与 Cookie"></a>浏览器 Storage 与 Cookie</h2><table><thead><tr><th>浏览器 Storage</th><th>localStorage</th><th>sessionStorage</th><th>cookie</th></tr></thead><tbody><tr><td>作用</td><td>在客户端存储值</td><td></td><td></td></tr><tr><td></td><td>主要用于在不同页面或会话之间进行数据的持久化和共享</td><td></td><td>主要用于在客户端和服务器之间存储状态信息，以便在不同的 HTTP 请求之间传递数据</td></tr><tr><td>存储时间</td><td>永久存储，除非手动删除或清除缓存</td><td>临时存储，会话结束数据删除</td><td>有过期时间</td></tr><tr><td>不设置过期则属于临时存储，会话结束数据删除</td><td></td><td></td><td></td></tr><tr><td>存储大小</td><td>5MB</td><td></td><td>4KB</td></tr><tr><td>跨标签页共享</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>使用场景</td><td>需要长期存储的数据，如用户首选项、主题选择等</td><td>适合用于临时保存在用户会话期间需要共享的数据，如购物车内容、会话令牌等。</td><td>主要用于在客户端和服务器之间传递数据，例如用户身份验证、会话管理和跟踪用户活动等。</td></tr><tr><td>语法代码</td><td>:::info</td><td></td><td></td></tr><tr><td>xxStorage.setItem("x", xx));</td><td></td><td></td><td></td></tr><tr><td>xxStorage.getItem("x", xx));</td><td></td><td></td><td></td></tr><tr><td>xxStorage.removeItem("xx");</td><td></td><td></td><td></td></tr><tr><td>xxStorage.clear();</td><td></td><td></td><td></td></tr><tr><td>:::</td><td></td><td></td><td></td></tr><tr><td></td><td>:::info</td><td></td><td></td></tr><tr><td>document.cookie = "xx"</td><td></td><td></td><td></td></tr><tr><td>:::</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="Promise-前世今生"><a href="#Promise-前世今生" class="headerlink" title="Promise 前世今生"></a>Promise 前世今生</h1><h2 id="什么是-Promise？"><a href="#什么是-Promise？" class="headerlink" title="什么是 Promise？"></a>什么是 Promise？</h2><p>是 JS 处理异步的一种方式，用来解决回调地域，将本应该嵌套的东西处理为链式调用</p><h3 id="那什么是异步？"><a href="#那什么是异步？" class="headerlink" title="那什么是异步？"></a>那什么是异步？</h3><p>那就要从 JS 说起，JS 是单线程的</p><h3 id="为啥-JS-是单线程呢？"><a href="#为啥-JS-是单线程呢？" class="headerlink" title="为啥 JS 是单线程呢？"></a>为啥 JS 是单线程呢？</h3><p>因为 JS 是可以操作 DOM 的，那如果 JS 是多线程，那同时对同一个 DOM 进行操作时，那如何确认优先级？<br>所以为了避免该情况，JS 就被设计为单线程，代码只能一行行执行，执行完当前代码才继续执行，如果未执行完就一直等待，就会发生阻塞，如果执行报错，则中断执行。<br>所以也就有了同步代码与异步代码</p><h3 id="那既然是单线程，那如何处理定时器、Ajax-请求等事件呢？"><a href="#那既然是单线程，那如何处理定时器、Ajax-请求等事件呢？" class="headerlink" title="那既然是单线程，那如何处理定时器、Ajax 请求等事件呢？"></a>那既然是单线程，那如何处理定时器、Ajax 请求等事件呢？</h3><p>因为定时器、ajax 请求等事件是需要等待，然后又为了避免出现一直等待，导致浏览器阻塞，并且空闲的资源被浪费，就设计了事件循环来解决这种问题。<br>这种遇到了不立马执行，而是需要等待后再执行的，就被统称为“异步事件”</p><h3 id="那啥是事件循环？"><a href="#那啥是事件循环？" class="headerlink" title="那啥是事件循环？"></a>那啥是事件循环？</h3><p>事件循环是指：JS 先执行完执行栈中代码，然后通过轮询的方式从任务队列里面拿可执行的任务，并执行。</p><h3 id="那是啥任务队列？"><a href="#那是啥任务队列？" class="headerlink" title="那是啥任务队列？"></a>那是啥任务队列？</h3><p>任务队列：里面存放的是“异步”事件执行完成后的回调函数，根据其放入的顺序，逐渐形成一个队列<br>里面又分为：微任务队列、宏任务队列<br>常见微任务：Promise.then 里面的代码、await 之后的代码等，队列由 JS 引擎线程维护<br>常见宏任务：<script>(整体代码)、setTimeout、setInterval、UI 渲染、I/O、poseMessage 等，队列由 事件触发线程维护</p><h3 id="所以-Promise-是-ES6-提供的一种处理异步的方式"><a href="#所以-Promise-是-ES6-提供的一种处理异步的方式" class="headerlink" title="所以 Promise 是 ES6 提供的一种处理异步的方式"></a>所以 Promise 是 ES6 提供的一种处理异步的方式</h3><h2 id="Promise-基础"><a href="#Promise-基础" class="headerlink" title="Promise 基础"></a>Promise 基础</h2><h3 id="基础使用语法"><a href="#基础使用语法" class="headerlink" title="基础使用语法"></a>基础使用语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span>;<br>  <span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res) <span class="hljs-comment">// true</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><h4 id="Promise-的状态有哪些？"><a href="#Promise-的状态有哪些？" class="headerlink" title="Promise 的状态有哪些？"></a>Promise 的状态有哪些？</h4><p>pending | fulfilled | rejected</p><h5 id="Promise-的默认状态？"><a href="#Promise-的默认状态？" class="headerlink" title="Promise 的默认状态？"></a>Promise 的默认状态？</h5><p>pending</p><h5 id="状态如何流转？"><a href="#状态如何流转？" class="headerlink" title="状态如何流转？"></a>状态如何流转？</h5><p>pending => fulfilled<br>pending => rejected</p><h4 id="Promise-的返回值是什么？"><a href="#Promise-的返回值是什么？" class="headerlink" title="Promise 的返回值是什么？"></a>Promise 的返回值是什么？</h4><p>一个代表异步成功或失败的对象<br>通过<code>.then</code>方法：传入 onFulfilled 和 onRejected，接受成功或失败的值</p><h4 id="Promise-的静态方法有哪些？"><a href="#Promise-的静态方法有哪些？" class="headerlink" title="Promise 的静态方法有哪些？"></a>Promise 的静态方法有哪些？</h4><ul><li>Promise.resolve()：返回一个状态为 fulfilled 的 Promise，且带有给定值</li><li>Promise.reject()：返回一个状态为 rejected 的 Promise，且带有给定值</li><li>Promise.all()：返回一个 Promise，该 Promise 在参数都被解决(resolve)时完成</li><li>Promise.race()：返回一个 Promise，该 Promise 在参数任意一个被解决(resolve)/拒绝(rejected)时完成</li></ul><h3 id="手写-Promise"><a href="#手写-Promise" class="headerlink" title="手写 Promise"></a>手写 Promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">newPromise</span>(<span class="hljs-params">executor</span>) &#123;<br>  <span class="hljs-keyword">const</span> pending = <span class="hljs-string">&quot;pending&quot;</span>;<br>  <span class="hljs-keyword">const</span> fulfilled = <span class="hljs-string">&quot;fulfilled&quot;</span>;<br>  <span class="hljs-keyword">const</span> rejected = <span class="hljs-string">&quot;rejected&quot;</span>;<br><br>  <span class="hljs-comment">// 1. 默认状态-pending</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = pending;<br><br>  <span class="hljs-comment">// 2. 内部变量</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-literal">undefined</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span> = <span class="hljs-literal">undefined</span>;<br><br>  <span class="hljs-comment">// 新增两个变量来存储成功和失败的回调函数</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">resolveCallbacks</span> = [];<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">rejectedCallbacks</span> = [];<br><br>  <span class="hljs-comment">// 3. 成功的回调</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">resolve</span> = (<span class="hljs-params">value</span>) =&gt; &#123;<br>    <span class="hljs-comment">// 状态单向流转控制</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === pending) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = fulfilled;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">resolveCallbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">cb</span>) =&gt;</span> <span class="hljs-title function_">cb</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>));<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-comment">// 4. 成功的回调</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">reject</span> = (<span class="hljs-params">reason</span>) =&gt; &#123;<br>    <span class="hljs-comment">// 状态单向流转控制</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === pending) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = rejected;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span> = reason;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">rejectedCallbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">cb</span>) =&gt;</span> <span class="hljs-title function_">cb</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>));<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-title function_">executor</span>(resolve, reject);<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">then</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">onFulfilled, onRejected</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === fulfilled) &#123;<br>      <span class="hljs-title function_">onFulfilled</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === rejected) &#123;<br>      <span class="hljs-title function_">onRejected</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === pending) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">resolveCallbacks</span>.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">onFulfilled</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>));<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">rejectedCallbacks</span>.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">onRejected</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>));<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">catch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">onRejected</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === rejected) &#123;<br>      <span class="hljs-title function_">onRejected</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>);<br>    &#125;<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title function_">newPromise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;xxx&quot;</span>);<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;);<br><br>p.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ then ] &gt;&quot;</span>, res);<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><p>通过生成器函数和迭代器提供了暂停和恢复执行的能力</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用 function* 定义 Generate 函数</span><br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generatorFunction</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 使用 yield 关键字来暂停函数的执行并返回一个值</span><br>  <span class="hljs-keyword">const</span> input = <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;Please enter a value:&#x27;</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Received input: <span class="hljs-subst">$&#123;input&#125;</span>`</span>);<br>&#125;<br><br><span class="hljs-comment">// 调用 Generator 函数不会立即执行函数体，而是返回一个 Generator 对象。</span><br><span class="hljs-keyword">const</span> generator = <span class="hljs-title function_">generatorFunction</span>();<br><br><span class="hljs-comment">// 要执行 Generator 函数，你需要通过调用 Generator 对象的 next() 方法来迭代它。</span><br><span class="hljs-comment">// 每次调用 next() 时，函数会在遇到下一个 yield 表达式时暂停，</span><br><span class="hljs-comment">// 并返回一个包含 &#123; value: any, done: boolean &#125; 的对象</span><br><span class="hljs-comment">//   value：yield 表达式后面跟随的值。</span><br><span class="hljs-comment">//   done：布尔值，表示 Generator 函数是否已经结束</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(generator.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// &#123; value: &#x27;Please enter a value:&#x27;, done: true &#125;</span><br><br><span class="hljs-comment">// 可以通过 next() 方法的参数将值发送回 Generator 函数。</span><br><span class="hljs-comment">// 这个值将被分配给 yield 表达式的右侧。</span><br>generator.<span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>); <span class="hljs-comment">// Received input: Hello</span><br></code></pre></td></tr></table></figure><h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><p>实现方式是：基于 Promise 机制 + generate ，最终将异步代码的编写变得更同步化。<br>本质上就是个“语法糖”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 自定义的 &quot;async&quot; 函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">asyncWrapper</span>(<span class="hljs-params">generatorFn</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> gen = generatorFn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args);<br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">step</span>(<span class="hljs-params">nextFn</span>) &#123;<br>        <span class="hljs-keyword">let</span> next;<br>        <span class="hljs-keyword">try</span> &#123;<br>          next = <span class="hljs-title function_">nextFn</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(error);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (next.<span class="hljs-property">done</span>) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(next.<span class="hljs-property">value</span>);<br>        &#125;<br>        <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(next.<span class="hljs-property">value</span>).<span class="hljs-title function_">then</span>(<br>          <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-title function_">step</span>(<span class="hljs-function">() =&gt;</span> gen.<span class="hljs-title function_">next</span>(value)),<br>          <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-title function_">step</span>(<span class="hljs-function">() =&gt;</span> gen.<span class="hljs-keyword">throw</span>(error))<br>        );<br>      &#125;<br>      <span class="hljs-title function_">step</span>(<span class="hljs-function">() =&gt;</span> gen.<span class="hljs-title function_">next</span>());<br>    &#125;);<br>  &#125;;<br>&#125;<br><br><br><span class="hljs-comment">// 使用自定义的 &quot;async&quot; 函数</span><br><span class="hljs-keyword">const</span> asyncFunction = <span class="hljs-title function_">asyncWrapper</span>(<span class="hljs-keyword">function</span>*() &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> data1 = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://api.example.com/data1&#x27;</span>);<br>    <span class="hljs-keyword">const</span> data2 = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://api.example.com/data2&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data1.<span class="hljs-title function_">json</span>(), data2.<span class="hljs-title function_">json</span>());<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>  &#125;<br>&#125;);<br><br><span class="hljs-comment">// 调用自定义的 &quot;async&quot; 函数</span><br><span class="hljs-title function_">asyncFunction</span>();<br><br></code></pre></td></tr></table></figure><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="同步、异步基础"><a href="#同步、异步基础" class="headerlink" title="同步、异步基础"></a>同步、异步基础</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br>&#125;,<span class="hljs-number">0</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>)<br><br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>)<br>  &#125;,<span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-title function_">fn</span>()<br><br><span class="hljs-comment">// 问题：打印结果</span><br><br><span class="hljs-comment">// 答案：</span><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 3</span><br><span class="hljs-comment">// 4</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 5</span><br><br><span class="hljs-comment">// 原因分析：</span><br><span class="hljs-comment">// 先创建了全局执行上下文，里面要执行的代码分为：同步、异步</span><br><span class="hljs-comment">// 全局执行上下文---start</span><br><span class="hljs-comment">// 然后一行行执行，所以打印 1</span><br><span class="hljs-comment">// 然后遇到了 setTimeout，是异步任务，则将其回调函数放到事件队列中</span><br><span class="hljs-comment">// 继续一行行执行，所以打印 3</span><br><span class="hljs-comment">// 然后又遇到 函数的声明，这仅仅是声明所以继续往下执行</span><br><span class="hljs-comment">// 最后遇到了函数的调用，则创建函数执行上下文，并执行函数</span><br><span class="hljs-comment">// 函数执行上下文---start</span><br><span class="hljs-comment">// 进入函数内，也是一步步执行，所以先打印 4</span><br><span class="hljs-comment">// 然后遇到了 setTimeout，是异步任务，则将其回调函数放到事件队列中</span><br><span class="hljs-comment">// 然后函数内的同步代码就执行完毕了</span><br><span class="hljs-comment">// 开始进入事件队列中，根据先进先出原则，所以先执行全局里面定义的 setTimeout</span><br><span class="hljs-comment">// 所以先打印 2</span><br><span class="hljs-comment">// 之后再执行函数里面定义的 setTimeout，所以打印 5</span><br><br></code></pre></td></tr></table></figure><h2 id="打印顺序-1"><a href="#打印顺序-1" class="headerlink" title="打印顺序 1"></a>打印顺序 1</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>));<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>  <span class="hljs-title function_">resolve</span>();<br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>))<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>))<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>))<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">6</span>))<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">7</span>))<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">8</span>);<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">9</span>))<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">10</span>))<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">11</span>))<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">12</span>))<br><br><span class="hljs-comment">// 问：以上代码打印顺序</span><br><br><span class="hljs-comment">// 答：</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 8</span><br><span class="hljs-comment">// 3</span><br><span class="hljs-comment">// 9</span><br><span class="hljs-comment">// 4</span><br><span class="hljs-comment">// 10</span><br><span class="hljs-comment">// 5</span><br><span class="hljs-comment">// 11</span><br><span class="hljs-comment">// 6</span><br><span class="hljs-comment">// 12</span><br><span class="hljs-comment">// 7</span><br><span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h2 id="打印顺序-2"><a href="#打印顺序-2" class="headerlink" title="打印顺序 2"></a>打印顺序 2</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>), <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br><br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>);<br><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>);<br><br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>);<br>      &#125;, <span class="hljs-number">0</span>);<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">6</span>));<br><br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>);<br>  &#125;, <span class="hljs-number">0</span>);<br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">7</span>))<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">8</span>))<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">9</span>);<br>    &#125;, <span class="hljs-number">0</span>);<br>  &#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">10</span>);<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">11</span>));<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">12</span>);<br><br>  <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">13</span>))<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">14</span>))<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">15</span>));<br>&#125;, <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 问：以上代码打印顺序</span><br><br><span class="hljs-comment">// 答：</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 10</span><br><span class="hljs-comment">// 11</span><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 3</span><br><span class="hljs-comment">// 4</span><br><span class="hljs-comment">// 7</span><br><span class="hljs-comment">// 8</span><br><span class="hljs-comment">// 12</span><br><span class="hljs-comment">// 13</span><br><span class="hljs-comment">// 14</span><br><span class="hljs-comment">// 15</span><br><span class="hljs-comment">// 5</span><br><span class="hljs-comment">// 6</span><br><span class="hljs-comment">// 9</span><br></code></pre></td></tr></table></figure><h2 id="打印顺序-3"><a href="#打印顺序-3" class="headerlink" title="打印顺序 3"></a>打印顺序 3</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">a</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;任务队列函数1&#x27;</span>)<br>  &#125;, <span class="hljs-number">100</span>)<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a的for循环&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>)=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a事件的Promise&#x27;</span>)<br>      <span class="hljs-title function_">resolve</span>()<br>  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a事件的Promise.then&#x27;</span>)<br>  &#125;)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a事件执行完&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">b</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;任务队列函数2&#x27;</span>)<br>  &#125;, <span class="hljs-number">20</span>)<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b的for循环&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>)=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b事件的Promise&#x27;</span>)<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b事件的Promise的setTimeout&#x27;</span>)<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">r</span>=&gt;</span><span class="hljs-title function_">r</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b事件的Promise的Promise.then&#x27;</span>))<br>          <span class="hljs-title function_">resolve</span>()<br>      &#125;,<span class="hljs-number">0</span>)<br>  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b事件的Promise.then&#x27;</span>)<br>  &#125;)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b事件执行完&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">c</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;任务队列函数3&#x27;</span>)<br>  &#125;, <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;c的for循环&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>)=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;c事件的Promise&#x27;</span>)<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;c事件的Promise的setTimeout&#x27;</span>)<br>          <span class="hljs-title function_">resolve</span>()<br>      &#125;,<span class="hljs-number">100</span>)<br>  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;c事件的Promise.then&#x27;</span>)<br>  &#125;)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;c事件执行完&#x27;</span>)<br>&#125;<br><span class="hljs-title function_">a</span>();<br><span class="hljs-title function_">b</span>();<br><span class="hljs-title function_">c</span>();<br><br><span class="hljs-comment">// 打印结果：</span><br><span class="hljs-comment">// 5000次 a的for循环</span><br><span class="hljs-comment">// a事件的Promise</span><br><span class="hljs-comment">// a事件执行完</span><br><span class="hljs-comment">// 5000次 b的for循环</span><br><span class="hljs-comment">// b事件的Promise</span><br><span class="hljs-comment">// b事件执行完</span><br><span class="hljs-comment">// 5000次 c的for循环</span><br><span class="hljs-comment">// c事件的Promise</span><br><span class="hljs-comment">// c事件执行完</span><br><span class="hljs-comment">// a事件的Promise.then</span><br><span class="hljs-comment">// b事件的Promise的setTimeout</span><br><span class="hljs-comment">// b事件的Promise的Promise.then</span><br><span class="hljs-comment">// b事件的Promise.then</span><br><span class="hljs-comment">// 任务队列函数3</span><br><span class="hljs-comment">// 任务队列函数2</span><br><span class="hljs-comment">// 任务队列函数1</span><br><span class="hljs-comment">// c事件的Promise的setTimeout</span><br><span class="hljs-comment">// c事件的Promise.then</span><br></code></pre></td></tr></table></figure><p>参考：<a href="https://juejin.cn/post/7204806134935306301?searchId=2023110913433305F7F5BB2F6B98520FC2">浏览器工作原理 - 掘金</a><br>参考：<a href="https://juejin.cn/post/7287914116286201891?searchId=2023110913433305F7F5BB2F6B98520FC2">浏览器原理：进程与线程 - 掘金</a></p>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-2、面向对象编程_原型与原型链</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/1-2%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B_%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/1-2%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B_%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="面向某某编程"><a href="#面向某某编程" class="headerlink" title="面向某某编程"></a>面向某某编程</h1><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>面向对象编程：<code>Object-Oriented Programming</code>，程序的主要组织单位是对象。<br>在 JS 中的对象定义为：无序属性的集合，其属性可以为基本值、对象或函数<br>行话：单个物体的抽象</p><h2 id="面向过程编程"><a href="#面向过程编程" class="headerlink" title="面向过程编程"></a>面向过程编程</h2><p>在面向过程编程中，程序的主要组织单位是函数。函数接收输入（参数），经过一系列处理，产生输出（返回值）。面向过程编程通常将问题分解为一系列的步骤，每个步骤由一个函数实现</p><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p>鼓励使用<strong>纯函数</strong>（Pure Functions），即<strong>对于相同的输入，始终产生相同的输出</strong>，并且没有<strong>副作用</strong>（没有<strong>改变外部状态的行为</strong>）</p><h1 id="面向对象编程-1"><a href="#面向对象编程-1" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>对象由一组属性组成，每个属性都包括一个键（字符串或 Symbol）和一个值（任意数据类型）。<br>属性的键是唯一的，不同属性之间用逗号分隔。属性的值可以是任何数据类型，包括基本数据类型和其他对象。</p><h3 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h3><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()<br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;xx&#x27;</span><br>obj.<span class="hljs-property">age</span> = <span class="hljs-string">&#x27;23&#x27;</span><br>obj.<span class="hljs-property">sayAge</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xx&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;23&#x27;</span>,<br>  <span class="hljs-title function_">sayAge</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h4><p>创建一个空对象，该对象的原型（即<code>__proto__</code>属性）指向传入的参数对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(&#123;&#125;)<br><br><span class="hljs-comment">// create 实现原理</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property">create</span> = <span class="hljs-function">(<span class="hljs-params">_obj</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> _obj !== <span class="hljs-string">&#x27;object&#x27;</span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;&#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 创建一个空函数</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  <span class="hljs-comment">// 将空函数的原型设置为传入的proto对象</span><br>  F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = _obj<br>  <span class="hljs-comment">// 返回一个新对象，该对象的原型指向传入的proto对象</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h3><p>对象的存储为：对象的内容是存储在堆中，变量在栈中存储对象的引用</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>用来创建对象的特殊函数，通常以大写字母开头。<br>使用 <strong>new</strong> 关键字调用构造函数可以创建新对象，并将构造函数内部的属性和方法添加到新对象上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span> (age)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><br><span class="hljs-keyword">const</span> my = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">29</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(my.<span class="hljs-property">age</span>) <span class="hljs-comment">// 29</span><br></code></pre></td></tr></table></figure><h3 id="new-做的事情"><a href="#new-做的事情" class="headerlink" title="new 做的事情"></a>new 做的事情</h3><ol><li>在堆里面建一个新的空对象</li><li>将这个新对象的<code>__proto__</code>指向构造函数的<code>prototype</code>，以便实例可以继承构造函数原型上的属性和方法。–可用<code>Object.setPrototypeOf(obj, prototype)</code></li><li>执行构造函数，其中 this 关键字指向新创建的空对象上，这样构造函数内部的代码可以操作这个新对象。–可用<code>call()</code></li><li>如果构造函数没有显式返回一个对象，那么会返回这个新对象的引用地址</li></ol><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>在工厂模式中，不直接调用构造函数来创建对象，而是使用一个工厂函数（或者方法）来创建对象。<br>这种模式封装了对象的创建过程（不让外部感知），使得代码更具灵活性和可维护性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span> (...args) &#123;<br>  <span class="hljs-comment">// 判断 this 是否为实例</span><br>  <span class="hljs-comment">// 是：表明不是函数了，已经 new，所以执行下面的 this.xx = args[x]</span><br>  <span class="hljs-comment">// 否：表明当前还是函数，未 new</span><br>  <span class="hljs-keyword">const</span> _isClass = <span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span><br><br>  <span class="hljs-keyword">if</span>(!_isClass) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(...args)<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = args[<span class="hljs-number">0</span>]<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = args[<span class="hljs-number">1</span>]<br>&#125;<br><span class="hljs-comment">// Person 使用</span><br><span class="hljs-keyword">const</span> myself1 = <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-number">58</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myself1) <span class="hljs-comment">// &#123; name: &#x27;zhangsan&#x27;, age: 58 &#125;</span><br><br><span class="hljs-keyword">const</span> myself2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;lisi&#x27;</span>, <span class="hljs-number">69</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myself2) <span class="hljs-comment">// &#123; name: &#x27;lisi&#x27;, age: 69 &#125;</span><br></code></pre></td></tr></table></figure><p><strong>Person</strong> 函数既可以被当作构造函数使用（通过 <strong>new</strong> 关键字调用），也可以被当作工厂函数使用（直接调用）</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>是一种设计模式，它确保一个类只有一个实例，并提供一个全局访问点以访问该实例。<br>常用于：路由、全局状态等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span> (...args) &#123;<br>  <span class="hljs-comment">// 判断是否已经存在实例</span><br> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Person</span>.<span class="hljs-property">instance</span> === <span class="hljs-string">&#x27;object&#x27;</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Person</span>.<span class="hljs-property">instance</span><br>  &#125;<br><br>  <span class="hljs-comment">// 正常的构造逻辑</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = args[<span class="hljs-number">0</span>]<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = args[<span class="hljs-number">1</span>]<br><br>  <span class="hljs-comment">// 将实例保存在静态属性中</span><br>  <span class="hljs-title class_">Person</span>.<span class="hljs-property">instance</span> = <span class="hljs-variable language_">this</span><br>&#125;<br><span class="hljs-comment">// Person 使用</span><br><span class="hljs-keyword">const</span> myself1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>, <span class="hljs-number">12</span>)<br><span class="hljs-keyword">const</span> myself2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;zzz&#x27;</span>, <span class="hljs-number">21</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myself1 === myself2) <span class="hljs-comment">// true，因为它们是同一个实例</span><br></code></pre></td></tr></table></figure><h1 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h1><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>对象的原型指的就是<code>__proto__</code>属性，但它不是标准的 JavaScript API，不建议直接使用</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>当在对象上面找不到属性时，就会通过<code>__proto__</code>属性一层层往上找，这就是原型链。<br>最终找不到就返回 undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">name</span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>(<span class="hljs-string">&#x27;张三&#x27;</span>)<br><br>obj.<span class="hljs-title function_">getName</span>() <span class="hljs-comment">// my name is 张三</span><br></code></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>通过构造函数的原型对象来实现实例的继承</p><h3 id="普通继承"><a href="#普通继承" class="headerlink" title="普通继承"></a>普通继承</h3><p>将父类实例构赋值给子造函数的原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">...args</span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">address</span> = <span class="hljs-string">&#x27;成都&#x27;</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">like</span> = [<span class="hljs-string">&#x27;钓鱼&#x27;</span>, <span class="hljs-string">&#x27;洗碗&#x27;</span>]<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">args0</span> = args[<span class="hljs-number">0</span>]<br>&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>)&#123;&#125;<br><br><span class="hljs-comment">// 重写原型对象---start</span><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>()<br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Child</span> <span class="hljs-comment">// 重写构造函数</span><br><span class="hljs-comment">// 重写原型对象---end</span><br><br><span class="hljs-keyword">const</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>()<br><span class="hljs-keyword">const</span> child2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>()<br><br>child1.<span class="hljs-title function_">sayName</span>() <span class="hljs-comment">// my name is 张三</span><br>child2.<span class="hljs-property">like</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;喝酒&#x27;</span>) <span class="hljs-comment">// 通过 child2 去改 like</span><br>child1.<span class="hljs-property">like</span>  <span class="hljs-comment">// [&#x27;钓鱼&#x27;, &#x27;洗碗&#x27;, &#x27;喝酒&#x27;]，child1 的 like 也会被改</span><br></code></pre></td></tr></table></figure><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>完成基础的继承功能：子类实例将会完全继承父类实例的属性、原型对象</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>父构造函数的调用不支持传参</li><li>子类实例的原型对象是共享的，那如果直接改原型对象的值后，影响所有的子类实例</li></ul><h3 id="构造函数继承-经典继承"><a href="#构造函数继承-经典继承" class="headerlink" title="构造函数继承(经典继承)"></a>构造函数继承(经典继承)</h3><p>在子构造函数中调用父构造函数来实现继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">...args</span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">address</span> = <span class="hljs-string">&#x27;成都&#x27;</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">like</span> = [<span class="hljs-string">&#x27;钓鱼&#x27;</span>, <span class="hljs-string">&#x27;洗碗&#x27;</span>]<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">args0</span> = args[<span class="hljs-number">0</span>]<br>&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">...args</span>)&#123;<br>  <span class="hljs-comment">// 调用父构造函数，将其属性继承到子类实例上</span><br>  <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, ...args)<br>&#125;<br><br><span class="hljs-keyword">const</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>()<br><span class="hljs-keyword">const</span> child2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>()<br><br>child2.<span class="hljs-property">like</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;喝酒&#x27;</span>)<br>child2.<span class="hljs-property">like</span>  <span class="hljs-comment">// [&#x27;钓鱼&#x27;, &#x27;洗碗&#x27;, 喝酒&#x27;]</span><br>child1.<span class="hljs-property">like</span>  <span class="hljs-comment">// [&#x27;钓鱼&#x27;, &#x27;洗碗&#x27;]</span><br><br>child1.<span class="hljs-title function_">sayName</span>() <span class="hljs-comment">// 报错：child1.sayName is not a function</span><br></code></pre></td></tr></table></figure><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>父构造函数将支持传递参数</li><li>子类实例的原型不会共享，避免了原型继承中的共享问题。</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>子类实例将无法继承父构造函数的<code>prototype</code>属性</li></ul><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>结合普通继承与经典继承，完全弥补这两个继承的缺点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">...args</span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">address</span> = <span class="hljs-string">&#x27;成都&#x27;</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">like</span> = [<span class="hljs-string">&#x27;钓鱼&#x27;</span>, <span class="hljs-string">&#x27;洗碗&#x27;</span>]<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">args0</span> = args[<span class="hljs-number">0</span>]<br>&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">...args</span>)&#123;<br>  <span class="hljs-comment">// 调用父构造函数，将其属性继承到子类实例上</span><br>  <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, ...args)<br>&#125;<br><br><span class="hljs-comment">// 重写原型对象---start</span><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>()<br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constuctor</span> = <span class="hljs-title class_">Child</span> <span class="hljs-comment">// constuctor 修正</span><br><span class="hljs-comment">// 重写原型对象---end</span><br><br><br><span class="hljs-keyword">const</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>()<br><span class="hljs-keyword">const</span> child2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>()<br><br>child2.<span class="hljs-property">like</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;喝酒&#x27;</span>)<br>child2.<span class="hljs-property">like</span>  <span class="hljs-comment">// [&#x27;钓鱼&#x27;, &#x27;洗碗&#x27;, 喝酒&#x27;]</span><br>child1.<span class="hljs-property">like</span>  <span class="hljs-comment">// [&#x27;钓鱼&#x27;, &#x27;洗碗&#x27;]</span><br><br>child1.<span class="hljs-title function_">sayName</span>() <span class="hljs-comment">// my name is 张三</span><br></code></pre></td></tr></table></figure><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul><li>子类实例将能继承父构造函数的<code>prototype</code>属性</li></ul><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul><li>会调用两次父构造函数<ul><li><code>Parent.call(...)</code></li><li><code>Child.prototype = new Parent()</code></li></ul></li><li>原型对象上多了不必要的属性<ul><li>因为<code>Child.prototype = new Parent();</code>这行代码会创建一个父类的实例，所以子类的原型对象上会多出一些不必要的属性，尽管它们在子类的构造函数中被覆盖了。</li></ul></li></ul><h3 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h3><p>基于组合继承，解决两次调用父类构造函数问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">...args</span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">address</span> = <span class="hljs-string">&#x27;成都&#x27;</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">like</span> = [<span class="hljs-string">&#x27;钓鱼&#x27;</span>, <span class="hljs-string">&#x27;洗碗&#x27;</span>]<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">args0</span> = args[<span class="hljs-number">0</span>]<br>&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">...args</span>)&#123;<br>  <span class="hljs-comment">// 调用父构造函数，将其属性继承到子类实例上</span><br>  <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, ...args)<br>&#125;<br><br><span class="hljs-comment">// 手动将子构造函数的 prototype 指向 父构造函数的 prototype</span><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constuctor</span> = <span class="hljs-title class_">Child</span> <span class="hljs-comment">// constuctor 修正</span><br><br><br><span class="hljs-keyword">const</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>()<br><span class="hljs-keyword">const</span> child2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>()<br><br>child2.<span class="hljs-property">like</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;喝酒&#x27;</span>)<br>child2.<span class="hljs-property">like</span>  <span class="hljs-comment">// [&#x27;钓鱼&#x27;, &#x27;洗碗&#x27;, 喝酒&#x27;]</span><br>child1.<span class="hljs-property">like</span>  <span class="hljs-comment">// [&#x27;钓鱼&#x27;, &#x27;洗碗&#x27;]</span><br><br>child1.<span class="hljs-title function_">sayName</span>() <span class="hljs-comment">// my name is 张三</span><br></code></pre></td></tr></table></figure><p>寄生组合继承其实就是<code>ES6</code>的 <code>class Child extends Parent</code>的<code>ES5</code>代码，对标的是<code>super()</code></p><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>指的是一个类（或对象）同时继承了多个父类（或对象），从而可以拥有多个父类的属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent1</span>(<span class="hljs-params">...args</span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">address1</span> = <span class="hljs-string">&#x27;成都&#x27;</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name1</span> = <span class="hljs-string">&#x27;张三&#x27;</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">like1</span> = [<span class="hljs-string">&#x27;钓鱼&#x27;</span>, <span class="hljs-string">&#x27;洗碗&#x27;</span>]<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">args10</span> = args[<span class="hljs-number">0</span>]<br>&#125;<br><span class="hljs-title class_">Parent1</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent2</span>(<span class="hljs-params">...args</span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">address2</span> = <span class="hljs-string">&#x27;上海&#x27;</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name2</span> = <span class="hljs-string">&#x27;李四&#x27;</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">like2</span> = [<span class="hljs-string">&#x27;游泳&#x27;</span>]<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">args20</span> = args[<span class="hljs-number">0</span>]<br>&#125;<br><span class="hljs-title class_">Parent2</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayLike</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`my like is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.like&#125;</span>`</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">...args</span>)&#123;<br>  <span class="hljs-comment">// 调用父1构造函数，将其属性继承到子类实例上</span><br>  <span class="hljs-title class_">Parent1</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, ...args)<br><br><br>  <span class="hljs-comment">// 调用父2构造函数，将其属性继承到子类实例上</span><br>  <span class="hljs-title class_">Parent2</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, ...args)<br>&#125;<br><br><span class="hljs-comment">// 手动将子构造函数的 prototype 指向 父构造函数的 prototype</span><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-title class_">Parent1</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-title class_">Parent2</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>))<br><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constuctor</span> = <span class="hljs-title class_">Child</span> <span class="hljs-comment">// constuctor 修正</span><br><br><span class="hljs-keyword">const</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>()<br><span class="hljs-keyword">const</span> child2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>()<br><br>child2.<span class="hljs-property">like</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;喝酒&#x27;</span>)<br>child2.<span class="hljs-property">like</span>  <span class="hljs-comment">// [&#x27;钓鱼&#x27;, &#x27;洗碗&#x27;, 喝酒&#x27;]</span><br>child1.<span class="hljs-property">like</span>  <span class="hljs-comment">// [&#x27;钓鱼&#x27;, &#x27;洗碗&#x27;]</span><br><br>child1.<span class="hljs-title function_">sayName</span>() <span class="hljs-comment">// my name is 张三</span><br></code></pre></td></tr></table></figure><h1 id="其他补充知识"><a href="#其他补充知识" class="headerlink" title="其他补充知识"></a>其他补充知识</h1><h2 id="in、hasOwnProperty、instanceof"><a href="#in、hasOwnProperty、instanceof" class="headerlink" title="in、hasOwnProperty、instanceof"></a>in、hasOwnProperty、instanceof</h2><ol><li>in：检查属性是否在对象上(自身以及原型链上)<ol><li>“name” in my &#x2F;&#x2F; true || false</li></ol></li><li>hasOwnProperty：检查属性是否在对象上(仅自身不涉及原型链上)<ol><li>my.hasOwnProperty(‘name’) &#x2F;&#x2F; true || false</li></ol></li><li>instanceof：检查对象是否属于某个构造函数的实例<ol><li>my instanceof Object &#x2F;&#x2F; true || false</li><li>实现原理：检查对象的原型链上是否包含构造函数的 prototype 属性，即判断<code>实例.__proto__ === 构造函数.prototype</code></li></ol></li></ol><h2 id="对象分类"><a href="#对象分类" class="headerlink" title="对象分类"></a>对象分类</h2><p>对象分为 2 类：实例对象、函数对象<br>实例对象：通过 [new 构造函数()] 生成的<br>函数对象：通过 [new Function()] 生成的</p><ol><li>每个对象(包含函数)都有<code>__proto__</code>属性，其指向等于其构造函数的<code>prototype</code>指向，<code>实例.__proto__ === 构造函数.prototype</code></li><li>每个函数都有 <code>prototype</code> 属性，指向一个普通对象，该对象具有<code>__proto__</code>、<code>constructor</code>属性<ol><li><code>__proto__</code> 指向等于其构造函数(Object)的<code>prototype</code>指向</li><li><code>constructor</code>指向函数本身</li></ol></li></ol><h2 id="图解：实例、构造函数、Function、Object、null-的关系"><a href="#图解：实例、构造函数、Function、Object、null-的关系" class="headerlink" title="图解：实例、构造函数、Function、Object、null 的关系"></a>图解：实例、构造函数、Function、Object、null 的关系</h2><p><img src="/img/images/2023/1698030687029-607649de-43c8-427e-8915-8ea8af244bef.jpeg"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">person.<span class="hljs-property">__proto__</span>===<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true === person instanceof Person(true)</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property">__proto__</span>===<span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true === Person instanceof Function(true)</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property">__proto__</span>===<span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true === Function instanceof Function(true)</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property">__proto__</span>===<span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true === Object instanceof Function(true)</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>===<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true === Object.__proto__ instanceof Object(true)</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property">__proto__</span>===<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// false !== Function instanceof Object(true)</span><br></code></pre></td></tr></table></figure><h3 id="Object-与-Function-的关系"><a href="#Object-与-Function-的关系" class="headerlink" title="Object 与 Function 的关系"></a>Object 与 Function 的关系</h3><p>Function 与 Object 的<code>__proto__</code>都指向同一个原型对象(<code>Function.prototype</code>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Object</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span> <span class="hljs-comment">// true，表明 Object 是 Function 的实例</span><br><span class="hljs-title class_">Function</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span> <span class="hljs-comment">// true，表明 Function 是 Function 的实例</span><br><span class="hljs-title class_">Function</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> <span class="hljs-comment">// true，表明 Function 是 Object 的实例</span><br><span class="hljs-title class_">Object</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> <span class="hljs-comment">// true，表明 Object 是 Object 的实例</span><br></code></pre></td></tr></table></figure><h2 id="更改对象的原型"><a href="#更改对象的原型" class="headerlink" title="更改对象的原型"></a>更改对象的原型</h2><ol><li>粗暴（不推荐）：<code>obj.__proto__===newObj;</code></li><li>优雅（推荐）：<code>Object.setPrototypeOf(obj, newObj)</code>等价于操作 1</li><li>到位：<code>const obj = Object.create(newObj)</code>等价于两步<code>const obj = &#123;&#125;; obj.__proto__=newObj;</code></li></ol><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="手写-new"><a href="#手写-new" class="headerlink" title="手写 new"></a>手写 new</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// new 做的事情</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">age</span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><span class="hljs-keyword">const</span> my = <span class="hljs-title function_">myNew</span>(<span class="hljs-title class_">Person</span>, <span class="hljs-number">29</span>)<br><br><span class="hljs-keyword">function</span> myNew = <span class="hljs-keyword">function</span> (<span class="hljs-params">context, ...args</span>) &#123;<br>  <span class="hljs-comment">// 补充相关代码</span><br>&#125;<br><br><span class="hljs-comment">// 答案如下：</span><br><br><span class="hljs-keyword">function</span> myNew = <span class="hljs-keyword">function</span> (<span class="hljs-params">context, ...args</span>) &#123;<br>  <span class="hljs-comment">// 补充相关代码</span><br><br>  <span class="hljs-comment">// 1. 创建一个空对象</span><br>  <span class="hljs-keyword">const</span> obj = &#123;&#125;;<br><br>  <span class="hljs-comment">// 2. 更改 obj 的原型</span><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(obj, context.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">// 等价于 obj.__proto__ = context.prototype;</span><br>  <span class="hljs-comment">// 1和2等价于 const obj = Object.create(context.prototype);</span><br><br>  <span class="hljs-comment">// 3. 将函数里面的 this 指向该对象 并 执行函数代码</span><br>  <span class="hljs-keyword">const</span> res = context.<span class="hljs-title function_">apply</span>(obj, args);<br><br>  <span class="hljs-comment">// 4. 返回结果：函数自身结果或新对象</span><br>  <span class="hljs-keyword">return</span> res <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> ? res : obj;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基础判断题"><a href="#基础判断题" class="headerlink" title="基础判断题"></a>基础判断题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;xh&quot;</span>, <span class="hljs-number">29</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property">constuctor</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Function</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Person</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">__proto__</span>.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Object</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Object</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-literal">null</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Function</span>.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Object</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Function</span>)<br><br><span class="hljs-comment">// 问题：以上打印结果</span><br><br><span class="hljs-comment">// 答案：</span><br><span class="hljs-comment">// true</span><br><span class="hljs-comment">// false</span><br><span class="hljs-comment">// true</span><br><span class="hljs-comment">// true</span><br><span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// false</span><br><span class="hljs-comment">// true</span><br><span class="hljs-comment">// true</span><br><span class="hljs-comment">// true</span><br><span class="hljs-comment">// false</span><br><span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-1、作用域_上下文_this_闭包</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/1-1%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F_%E4%B8%8A%E4%B8%8B%E6%96%87_this_%E9%97%AD%E5%8C%85/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/1-1%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F_%E4%B8%8A%E4%B8%8B%E6%96%87_this_%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><h2 id="作用域-1"><a href="#作用域-1" class="headerlink" title="作用域"></a>作用域</h2><p>作用域：指的是变量的可见性和生命周期，即变量在代码中的访问范围和存在时间<br>大白话：它决定了变量的可访问性和有效期。</p><h3 id="常见作用域"><a href="#常见作用域" class="headerlink" title="常见作用域"></a>常见作用域</h3><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><p>指变量在代码任何位置都可访问，即全局变量<br>浏览器端：指整个页面的范围<br>nodejs 端：指整个 Node.js 进程的范围<br>页面关闭或应用程序退出后，全局变量才失效</p><h4 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h4><p>指变量只能在局部(函数或块级作用域)可访问，无法在外部访问</p><h5 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h5><p>在函数内部声明的变量具有函数级作用域，只在函数执行期间有效，它们在函数被调用时创建，函数执行结束时销毁。</p><h5 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h5><p>在 if 语句、for 循环的 {} 内部声明的变量具有块级作用域，只在块内执行期间有效，它们在块内执行时创建，块内结束时销毁。</p><h3 id="作用域的作用"><a href="#作用域的作用" class="headerlink" title="作用域的作用"></a>作用域的作用</h3><p>有助于避免变量名冲突和维护代码的可读性</p><h3 id="常见声明"><a href="#常见声明" class="headerlink" title="常见声明"></a>常见声明</h3><table><thead><tr><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>作用域为全局、函数，无块级</td><td>作用域始终为块级</td><td></td></tr><tr><td><strong>具有变量提升</strong></td><td></td><td></td></tr><tr><td>console.log(a)</td><td></td><td></td></tr><tr><td>var a &#x3D; 1</td><td></td><td></td></tr><tr><td>（上述代码不会引发错误）</td><td></td><td></td></tr><tr><td>等价于</td><td></td><td></td></tr><tr><td>var a &#x3D; undefined</td><td></td><td></td></tr><tr><td>console.log(a)</td><td></td><td></td></tr><tr><td>a &#x3D; 1</td><td>不具有变量提升</td><td></td></tr><tr><td>console.log(a)</td><td></td><td></td></tr><tr><td>let a &#x3D; 1</td><td></td><td></td></tr><tr><td>（上述代码报错 ReferenceError: Cannot access ‘a’ before initialization）</td><td></td><td></td></tr><tr><td>可重复声明</td><td>不可重复声明，会报错 Identifier ‘x’ has already been declared</td><td></td></tr><tr><td>声明时可不赋值，后续可改值</td><td></td><td>声明时必须赋值，后续不可改值</td></tr></tbody></table><h3 id="作用域常见报错"><a href="#作用域常见报错" class="headerlink" title="作用域常见报错"></a>作用域常见报错</h3><h4 id="ReferenceError-x-is-not-defined"><a href="#ReferenceError-x-is-not-defined" class="headerlink" title="ReferenceError: x is not defined"></a>ReferenceError: x is not defined</h4><p>访问未定义的变量时报错，原因是：变量没有在当前作用域声明或在声明之前访问</p><h4 id="TypeError-Cannot-read-property-‘property’-of-null"><a href="#TypeError-Cannot-read-property-‘property’-of-null" class="headerlink" title="TypeError: Cannot read property ‘property’ of null"></a>TypeError: Cannot read property ‘property’ of null</h4><p>访问变量的属性或方法时报错，原因是：变量本身为 null 或 undefined</p><h3 id="其他补充知识"><a href="#其他补充知识" class="headerlink" title="其他补充知识"></a>其他补充知识</h3><h4 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h4><p>两步：声明变量、并为变量赋予一个初始值。未赋予初始值的变量值会默认为 <strong>undefined</strong><br>let a &#x3D; 7; &#x2F;&#x2F; 初始化了<br>var b; &#x2F;&#x2F; 未初始化，a 为 undefined</p><h4 id="null-和-undefined"><a href="#null-和-undefined" class="headerlink" title="null 和 undefined"></a>null 和 undefined</h4><ul><li><strong>undefined</strong> 表示声明了但未赋值或缺失值，通常由 JavaScript 引擎自动生成的。</li><li><strong>null</strong> 表示声明了并赋值为 <strong>null</strong></li><li>在条件测试中，<strong>null</strong> 和 <strong>undefined</strong> 都被视为假值。</li><li>当需要表示变量没有值时，通常使用 <strong>null</strong>。当变量未初始化时，通常值是 <strong>undefined</strong>。</li><li>在访问对象的属性或数组的元素时，如果不存在，返回 <strong>undefined</strong>；如果显式将属性或元素值设置为 <strong>null</strong>，则会返回 <strong>null</strong>。</li></ul><h4 id="函数提升与变量提升"><a href="#函数提升与变量提升" class="headerlink" title="函数提升与变量提升"></a>函数提升与变量提升</h4><p><strong>函数提升</strong>：当使用 function 关键字声明函数时，整个函数声明会在代码执行之前被提升到当前作用域的顶部，并且在声明前还可以直接调用<br><strong>注意：使用函数表达式声明的函数（通常是匿名函数）不会被提升，它们只能在声明之后调用。</strong><br><strong>变量提升</strong>：使用 var 关键字声明的变量，会被提升到当前作用域的顶部，但它们的值在声明前是 <strong>undefined</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x); <span class="hljs-comment">// 输出 undefined，变量声明提升，但值未初始化</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;<br><br><span class="hljs-title function_">sayHello</span>(); <span class="hljs-comment">// 输出 &quot;Hello!&quot;，函数声明提升，并且还可以调用</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello!&quot;</span>);<br>&#125;<br><br><span class="hljs-title function_">sayHello</span>(); <span class="hljs-comment">// 报错，sayHello 是 undefined</span><br><span class="hljs-keyword">var</span> sayHello = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello!&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="提升的优先级"><a href="#提升的优先级" class="headerlink" title="提升的优先级"></a>提升的优先级</h5><p>在 JavaScript 中，<strong>函数提升的优先级高于变量提升</strong>，并且函数声明优先于变量声明。<br>这是因为 JavaScript 引擎在创建执行上下文时首先处理函数声明，然后再处理变量声明，确保函数在任何位置都可以被调用<br><strong>若存在同一个函数&#x2F;变量名，谁提升在前就用谁，后面相同的提升则被忽略</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// ƒ a() &#123;&#125;</span><br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 1</span><br><br><span class="hljs-comment">// 上面代码等价于</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-keyword">var</span> a <span class="hljs-comment">// 变量名与前面的函数名相同，则被忽略了</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 打印函数本身，不是打印 undefined</span><br><br>a = <span class="hljs-number">1</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 1，a 被重新赋值了</span><br></code></pre></td></tr></table></figure><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>是 JS 中用于查找变量的一种机制，由多个嵌套的作用域组成的链式结构，每个子作用域都能访问父作用域中的变量和函数，有助于确保变量的可见性和隔离不同作用域之间的变量。<br>查找机制：从子到父，最后到全局</p><h1 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h1><p>JS 代码执行时，都会创建一个执行上下文，用于描述代码在运行时的环境和状态，它包含了当前代码执行所需的一切信息：如变量、函数、作用域链等。<br>创建执行上下文大概做的事情：</p><ul><li>初始化变量对象：它将包含该作用域中的所有变量和函数</li><li>变量提升：将该作用域内的函数或某些变量的声明提升到顶部</li><li>加入作用域链结构中</li><li>放入调用栈内，后进先出(LIFO)策略</li></ul><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><ol><li>首次运行代码时，会创建全局执行上下文</li><li>执行代码：从全局作用域的第一行代码开始执行，逐行执行代码，包括函数调用</li><li>函数执行：遇到函数调用时，会新创建一个执行上下文，函数代码在其中执行</li><li>当遇到异步任务：定时器、网络请求等，会先将其加入事件队列中，等主任务执行完毕后，再通过事件循环检查事件队列，如果有任务待执行，就将它们取出并执行。当异步操作完成时，可以指定一个回调函数，在操作完成后执行回调函数。</li></ol><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>this</strong> 是一个特殊的关键字，它指向当前执行上下文中的对象，它的值取决于代码的上下文和执行方式</p><ul><li>全局上下文：this 指向全局对象（浏览器中为 window）</li><li>函数中：<ul><li>function 声明的函数<ul><li>普通函数：this 指向全局对象（浏览器中为 window）</li><li>对象方法：this 指向该对象</li></ul></li><li>箭头函数：this 的值取决于定义函数时的上下文，而不是调用时的上下文，主要是继承包含它的父级函数或上下文的 this。</li><li>构造函数：this 指向新创建的对象实例</li><li>事件处理函数：this 指向触发事件的元素</li></ul></li></ul><h2 id="如何改变-this-的指向？"><a href="#如何改变-this-的指向？" class="headerlink" title="如何改变 this 的指向？"></a>如何改变 this 的指向？</h2><h3 id="call-和-apply"><a href="#call-和-apply" class="headerlink" title="call 和 apply"></a>call 和 apply</h3><p>call、apply 是函数的方法，可将 this 做为传入的第一个值，并直接执行函数<br>funX.call(content, arg1, arg2, ……)<br>funX.apply(content, [arg1, arg2, ……])</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">X</span>)<br>&#125;<br><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">X</span>: <span class="hljs-number">1</span>&#125;<br>a.<span class="hljs-title function_">call</span>(obj, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>a.<span class="hljs-title function_">apply</span>(obj, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>bind 是函数的方法，可将 this 做为传入的第一个值，并返回一个新的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">Y,Z</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">X</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(Y)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(Z)<br>&#125;<br><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">X</span>: <span class="hljs-number">1</span>&#125;<br>a.<span class="hljs-title function_">bind</span>(obj)(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ol><li>创建一个新的函数，支持传参</li><li>该函数在调用时将 this 绑定为传入上下文</li></ol><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>一句话：子函数使用了父函数变量，并在父函数外被使用，就形成了一个闭包<br>只要子函数存在，则其使用的父函数变量也将一直存在</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>保护&#x2F;隐藏父函数的变量<ul><li>因为父函数的变量外部无法访问</li></ul></li><li>创建父函数的私有变量</li></ul><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">email</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">const</span> content = <span class="hljs-string">&#x27;我的信的内容&#x27;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> myEmail = <span class="hljs-title function_">email</span>()<br><br><span class="hljs-title function_">myEmail</span>() <span class="hljs-comment">// 能打印出 函数内部的 content 的值</span><br><br>myEmail = <span class="hljs-literal">null</span> <span class="hljs-comment">// 这样能主动销毁闭包</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 单一职责、高阶函数之类的</span><br><span class="hljs-keyword">let</span> content<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myEmail</span>(<span class="hljs-params">fn</span>)&#123;<br>  content = <span class="hljs-string">&#x27;我是 XXX，打钱！&#x27;</span><br><br>  <span class="hljs-title function_">fn</span>()<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">email</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content)<br>&#125;<br><br><span class="hljs-title function_">myEmail</span>(email) <span class="hljs-comment">// 我是 XXX，打钱！</span><br></code></pre></td></tr></table></figure><h2 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h2><ul><li>内存泄漏<ul><li>正常函数执行时创建变量，结束后销毁变量。但由于闭包的存在，只要子函数存在，则其使用的父函数变量也将一直存在</li></ul></li><li>性能问题</li></ul><h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><p>将接受多个参数的函数，转化为嵌套的只接受单个参数的函数（使用闭包实现）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 未柯里化</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x,y,z</span>)&#123;<br>  <span class="hljs-keyword">return</span> x + y + z<br>&#125;<br><span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br><br><span class="hljs-comment">// 柯里化</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">y</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">z</span>)&#123;<br>      <span class="hljs-keyword">return</span> x + y + z<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><h3 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h3><p>每个函数都有一个特殊的属性叫做 length。这个属性返回函数定义时的形参个数（即函数期望接收的参数个数）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">exampleFunction</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>    <span class="hljs-comment">// 函数体</span><br>&#125;<br>exampleFunction.<span class="hljs-property">length</span> <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h3 id="通用柯里化函数"><a href="#通用柯里化函数" class="headerlink" title="通用柯里化函数"></a>通用柯里化函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 通用柯里化函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">curry</span>(<span class="hljs-params">fn</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">curried</span>(<span class="hljs-params">...args</span>)&#123;<br>    <span class="hljs-keyword">if</span>(args.<span class="hljs-property">length</span> &gt;= fn.<span class="hljs-property">length</span>)&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">fn</span>(...args)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">...args2</span>) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title function_">curried</span>(...args.<span class="hljs-title function_">concat</span>(args2));<br>      &#125;;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 加法函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>    <span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><br><span class="hljs-keyword">var</span> curriedAdd = <span class="hljs-title function_">curry</span>(add);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">curriedAdd</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)); <span class="hljs-comment">// 输出 6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">curriedAdd</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)); <span class="hljs-comment">// 输出 6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">curriedAdd</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">// 输出 6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">curriedAdd</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">// 输出 6</span><br></code></pre></td></tr></table></figure><h3 id="柯里化的优点（ChatGPT-答案）"><a href="#柯里化的优点（ChatGPT-答案）" class="headerlink" title="柯里化的优点（ChatGPT 答案）"></a>柯里化的优点（ChatGPT 答案）</h3><ol><li><strong>可组合性</strong>： 柯里化允许我们更容易地组合函数，创建新的函数，以满足不同的需求。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, &quot;</span> + name + <span class="hljs-string">&quot;!&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">uppercase</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-keyword">return</span> text.<span class="hljs-title function_">toUpperCase</span>();<br>&#125;<br><br><span class="hljs-keyword">var</span> greetAndUppercase = <span class="hljs-title function_">curry</span>(uppercase)(<span class="hljs-title function_">curry</span>(greet)(<span class="hljs-string">&quot;Alice&quot;</span>));<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">greetAndUppercase</span>()); <span class="hljs-comment">// 输出 &quot;HELLO, ALICE!&quot;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>参数复用</strong>： 柯里化允许我们重复使用相同的函数并提供不同的参数，这样可以减少代码重复。</li><li><strong>延迟执行</strong>： 柯里化可以延迟函数的执行，直到接受了所有参数，这在某些情况下很有用。</li><li><strong>函数的偏应用</strong>： 可以轻松实现函数的部分应用，即提供部分参数而不是所有参数，以创建新的函数。</li></ol><p>柯里化在函数式编程中广泛应用，特别是在处理数据流、函数组合和函数式管道时，它可以帮助简化代码并提高可读性。</p><h1 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h1><p>立即执行函数（Immediately Invoked Function Expression，IIFE）是一种 JavaScript 中的函数表达式，它在声明后立即执行，是模块化的基石<br>这种模式常用于创建私有作用域、避免变量污染、模块化等场景。</p><h2 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h2><p>立即执行函数的基本形式如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 这里是立即执行函数的代码块</span><br>&#125;)();<br><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params">param</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(param); <span class="hljs-comment">// 输出 &quot;Hello, World!&quot;</span><br>&#125;)(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br></code></pre></td></tr></table></figure><p>在这个形式中，函数被包裹在括号内，这样解析器会将其视为一个表达式而不是函数声明。然后紧接着的一对括号 () 调用了这个匿名函数，使其立即执行。</p><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><h3 id="创建私有作用域"><a href="#创建私有作用域" class="headerlink" title="创建私有作用域"></a>创建私有作用域</h3><p>变量在立即执行函数内部声明，不会污染全局作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> privateVariable = <span class="hljs-string">&quot;I am private&quot;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(privateVariable); <span class="hljs-comment">// 输出 &quot;I am private&quot;</span><br>&#125;)();<br><span class="hljs-comment">// console.log(privateVariable); // 这里会报错，privateVariable 不在全局作用域中</span><br></code></pre></td></tr></table></figure><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>立即执行函数结合闭包，可以实现模块化的代码结构，提供了一种将变量和函数封装在独立作用域中的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myModule = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> privateVariable = <span class="hljs-string">&quot;I am private&quot;</span>;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">privateFunction</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;This is a private function&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">publicVariable</span>: <span class="hljs-string">&quot;I am public&quot;</span>,<br>        <span class="hljs-attr">publicFunction</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;This is a public function&quot;</span>);<br>        &#125;<br>    &#125;;<br>&#125;)();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myModule.<span class="hljs-property">publicVariable</span>); <span class="hljs-comment">// 输出 &quot;I am public&quot;</span><br>myModule.<span class="hljs-title function_">publicFunction</span>(); <span class="hljs-comment">// 输出 &quot;This is a public function&quot;</span><br><span class="hljs-comment">// console.log(myModule.privateVariable); // 这里会报错，privateVariable 不可访问</span><br><span class="hljs-comment">// myModule.privateFunction(); // 这里会报错，privateFunction 不可访问</span><br></code></pre></td></tr></table></figure><h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><p>JS 中的垃圾回收是一种自动管理内存的机制，它负责检测和回收不再使用的内存，以便释放资源。</p><h2 id="触发时机"><a href="#触发时机" class="headerlink" title="触发时机"></a>触发时机</h2><ol><li>定期触发：会定期去触发垃圾回收</li><li>内存分配失败<ol><li>当内存不足以分配新的对象时，会去触发垃圾回收</li></ol></li></ol><h2 id="回收策略"><a href="#回收策略" class="headerlink" title="回收策略"></a>回收策略</h2><ol><li>标记-清除（常用）<ol><li>标记：从全局对象开始遍历查找所有变量，第一遍都打上标记，第二遍去掉正在使用的变量的标记，这样被标记的就是不再使用的变量</li><li>清除：然后就专门清除被标记的变量，释放占用的内存引用计数</li></ol></li><li>引用计数（不常用）<ol><li>每当一个对象被引用时，引用计数加一，当引用失效时，计数减一。</li><li>当计数为零时，对象被视为不再使用，可以被回收。</li><li>然而，引用计数算法无法解决循环引用的问题，即两个或多个对象相互引用，但无法被外部访问，这导致它们的计数永远不会变为零。</li></ol></li></ol><h2 id="解除引用"><a href="#解除引用" class="headerlink" title="解除引用"></a>解除引用</h2><p>给变量设置为 null，就能解除引用，使其脱离执行环境，下次就能进行回收。</p><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="作用域-上下文"><a href="#作用域-上下文" class="headerlink" title="作用域 + 上下文"></a>作用域 + 上下文</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">B</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b)<br><br>  <span class="hljs-title function_">C</span>()<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">C</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">let</span> c = <span class="hljs-number">3</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c)<br><br>    <span class="hljs-title function_">D</span>()<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">D</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-keyword">let</span> d = <span class="hljs-number">4</span><br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d)<br><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;test1&#x27;</span>, b)<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-title function_">B</span>()<br><br><span class="hljs-comment">// 问题：打印结果是什么？</span><br><br><span class="hljs-comment">// 答案：</span><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 3</span><br><span class="hljs-comment">// 4</span><br><span class="hljs-comment">// test1 2</span><br><br><span class="hljs-comment">// 解析：</span><br><span class="hljs-comment">// 1、JS 的执行顺序是从上往下</span><br></code></pre></td></tr></table></figure><h2 id="this-面试题-1"><a href="#this-面试题-1" class="headerlink" title="this 面试题 1"></a>this 面试题 1</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> foo = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> c = foo.<span class="hljs-property">b</span><br><span class="hljs-title function_">c</span>()<br><br><span class="hljs-comment">// 问题：打印结果是什么？</span><br><br><span class="hljs-comment">// 答案：</span><br><span class="hljs-comment">// undefined</span><br><span class="hljs-comment">// Window 对象</span><br></code></pre></td></tr></table></figure><h2 id="this-面试题-2"><a href="#this-面试题-2" class="headerlink" title="this 面试题 2"></a>this 面试题 2</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> o1 = &#123;<br>  <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;o1&quot;</span>,<br>  <span class="hljs-attr">fun</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ this o1 fun ] &gt;&quot;</span>, <span class="hljs-variable language_">this</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">text</span>;<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">const</span> o2 = &#123;<br>  <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;o2&quot;</span>,<br>  <span class="hljs-attr">fun</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> o1.<span class="hljs-title function_">fun</span>();<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">const</span> o3 = &#123;<br>  <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;o3&quot;</span>,<br>  <span class="hljs-attr">fun</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> fun = o1.<span class="hljs-property">fun</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">fun</span>();<br>  &#125;,<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ o1fun ] &gt;&quot;</span>, o1.<span class="hljs-title function_">fun</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ o2fun ] &gt;&quot;</span>, o2.<span class="hljs-title function_">fun</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ o3fun ] &gt;&quot;</span>, o3.<span class="hljs-title function_">fun</span>());<br><br><span class="hljs-comment">// 问题 1：打印结果是什么？</span><br><br><span class="hljs-comment">// 答案：</span><br><span class="hljs-comment">// [ this o1 fun ] &gt; &#123;text: &#x27;o1&#x27;, fun: ƒ&#125;</span><br><span class="hljs-comment">// [ o1fun ] &gt; o1</span><br><span class="hljs-comment">// [ this o1 fun ] &gt; &#123;text: &#x27;o1&#x27;, fun: ƒ&#125;</span><br><span class="hljs-comment">// [ o2fun ] &gt; o1</span><br><span class="hljs-comment">// [ this o1 fun ] &gt; Window &#123;window: Window, self: Window, …&#125;</span><br><span class="hljs-comment">// [ o3fun ] &gt; undefined</span><br><br><span class="hljs-comment">// 问题2：如何将 o2.fun() 的返回结果改为 o2？</span><br><br><span class="hljs-comment">// 答案：</span><br><span class="hljs-comment">// const o2 = &#123;</span><br><span class="hljs-comment">//   text: &quot;o2&quot;,</span><br><span class="hljs-comment">//   fun: function () &#123;</span><br><span class="hljs-comment">//     return o1.fun.call(o2);</span><br><span class="hljs-comment">//   &#125;,</span><br><span class="hljs-comment">// &#125;;</span><br></code></pre></td></tr></table></figure><h2 id="call-apply-bind-的区别"><a href="#call-apply-bind-的区别" class="headerlink" title="call&#x2F;apply&#x2F;bind 的区别"></a>call&#x2F;apply&#x2F;bind 的区别</h2><table><thead><tr><th>apply</th><th>call</th><th>bind</th></tr></thead><tbody><tr><td>立即执行</td><td></td><td>返回新函数</td></tr><tr><td>参数为数组或类数组</td><td>参数为多个</td><td></td></tr></tbody></table><h2 id="手写一个-call"><a href="#手写一个-call" class="headerlink" title="手写一个 call"></a>手写一个 call</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">MyCall</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context, ...args</span>) &#123;<br>  <span class="hljs-comment">// 补齐相关代码</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> fooX = <span class="hljs-keyword">function</span> (<span class="hljs-params">X, Y</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">fo</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(X);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(Y);<br>&#125;;<br><br>fooX.<span class="hljs-title class_">MyCall</span>(&#123; <span class="hljs-attr">fo</span>: <span class="hljs-string">&quot;fo&quot;</span> &#125;, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">// 答案如下：</span><br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">MyCall</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context, ...args</span>) &#123;<br>  <span class="hljs-comment">// 补齐相关代码</span><br><br>  context = context || <span class="hljs-variable language_">window</span>;<br><br>  context.<span class="hljs-property">fn</span> = <span class="hljs-variable language_">this</span>;<br><br>  <span class="hljs-keyword">const</span> result = context.<span class="hljs-title function_">fn</span>(...args);<br><br>  <span class="hljs-keyword">delete</span> context.<span class="hljs-property">fn</span>;<br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="基于手写的-call-再手写一个-bind"><a href="#基于手写的-call-再手写一个-bind" class="headerlink" title="基于手写的 call 再手写一个 bind"></a>基于手写的 call 再手写一个 bind</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 手写的 call</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">MyCall</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context, ...args</span>) &#123;<br>  context = context || <span class="hljs-variable language_">window</span>;<br><br>  context.<span class="hljs-property">fn</span> = <span class="hljs-variable language_">this</span>;<br><br>  <span class="hljs-keyword">const</span> result = context.<span class="hljs-title function_">fn</span>(...args);<br><br>  <span class="hljs-keyword">delete</span> context.<span class="hljs-property">fn</span>;<br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;;<br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">MyBind</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>) &#123;<br> <span class="hljs-comment">// 补齐相关代码</span><br>&#125;<br><br><span class="hljs-keyword">const</span> fooX = <span class="hljs-keyword">function</span> (<span class="hljs-params">X, Y</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">fo</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(X)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(Y)<br>&#125;<br><br>fooX.<span class="hljs-title class_">MyBind</span>(&#123; <span class="hljs-attr">fo</span>: <span class="hljs-string">&#x27;fo&#x27;</span> &#125;, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)()<br><br><span class="hljs-comment">// 答案如下：</span><br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">MyBind</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context, ...args1</span>)&#123;<br> <span class="hljs-comment">// 补齐相关代码</span><br><br>  <span class="hljs-keyword">const</span> fun = <span class="hljs-variable language_">this</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args2</span>) &#123;<br>    <span class="hljs-comment">// 基于上面手写的 call</span><br>    <span class="hljs-keyword">return</span> fun.<span class="hljs-title class_">MyCall</span>(context, args1.<span class="hljs-title function_">concat</span>(args2))<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0-2、面试的前期准备</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/0-2%E3%80%81%E9%9D%A2%E8%AF%95%E7%9A%84%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/0-2%E3%80%81%E9%9D%A2%E8%AF%95%E7%9A%84%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h2 id="各面考察度"><a href="#各面考察度" class="headerlink" title="各面考察度"></a>各面考察度</h2><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p>考察：广度，范围为：基础知识点、实际操作(代码手写)、项目结合</p><h4 id="基础知识点"><a href="#基础知识点" class="headerlink" title="基础知识点"></a>基础知识点</h4><ul><li>一面一般是业务组骨干，他关心的是你能不能胜任组里面的工作，知识点是否齐全，所以一面最难，因为要求最全。</li></ul><h4 id="实际操作指的是"><a href="#实际操作指的是" class="headerlink" title="实际操作指的是"></a>实际操作指的是</h4><ul><li>线上面试时的手写代码环节，线上更容易考察写代码的能力，所以面试题的手写一定要去加强。</li></ul><h4 id="项目结合考察的是"><a href="#项目结合考察的是" class="headerlink" title="项目结合考察的是"></a>项目结合考察的是</h4><ul><li>你掌握的知识点是否自我消化，是否融入到项目中了</li><li>这时候就要去结合第一点(基础知识)，每掌握一个知识，就反向看看自己的项目中是否使用过，有的话加强理解，没的话新建项目去使用与了解，这样知识点才能与项目串联起来</li></ul><h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><p>考察：深度，深挖基础知识</p><h3 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h3><p>考察：创新度，结合业务&#x2F;场景，使用技术解决问题的新颖度</p><h2 id="如何复习"><a href="#如何复习" class="headerlink" title="如何复习"></a>如何复习</h2><p>当学习一个新知识点时，会处于以下三个状态：</p><ul><li>吃不下<ul><li>这时候就要先补齐缺失的知识点，然后经典面试题一定要掌握</li></ul></li><li>刚刚好<ul><li>针对性补充，可以出去面试小厂了，以面代练</li></ul></li><li>不够吃<ul><li>已经准备的很充分了，那就要把知识结合到项目中，找自己的两点，这时候可以去面试大厂了</li></ul></li></ul><h2 id="如何提升"><a href="#如何提升" class="headerlink" title="如何提升"></a>如何提升</h2><p>自我提升思路：在业务之外去发现问题，并解决掉它</p><h2 id="找寻突破"><a href="#找寻突破" class="headerlink" title="找寻突破"></a>找寻突破</h2><p>突破顺序：发现问题 &#x3D;&gt; 找到问题 &#x3D;&gt; 获取痛点 &#x3D;&gt; 制定方案(调研行业方案？自研？原因？) &#x3D;&gt; 解决问题</p><h2 id="突破领域"><a href="#突破领域" class="headerlink" title="突破领域"></a>突破领域</h2><p>从最近比较火&#x2F;前沿&#x2F;流行&#x2F;新颖的领域下手<br>最近流行：</p><ol><li>整合<ol><li>技术设计和产品设计的整合<ol><li>规范化</li><li>统一化</li><li>可视化</li><li>智能化</li></ol></li></ol></li><li>效率提升</li><li>性能优化<ol><li>老的：工程化</li><li>新的：web 3.0、web 二进制</li><li>更新：整合式，同一套组件驱动页面</li></ol></li></ol><h2 id="成长路线"><a href="#成长路线" class="headerlink" title="成长路线"></a>成长路线</h2><p><img src="/img/images/2023/1697955572856-238c905d-be75-4efe-b9b2-11c1dfd4a001.jpeg" alt="成长路线"></p><h2 id="简历书写意见"><a href="#简历书写意见" class="headerlink" title="简历书写意见"></a>简历书写意见</h2><ol><li>不要把项目说的很牛逼，因为项目牛逼不代表你个人的牛逼，要强调的是：个人在项目中把多少知识转化成对项目的贡献，这才是你牛逼的点</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0-1、前端八股文</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/0-1%E3%80%81%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/0-1%E3%80%81%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h2 id="我们面试经常出现的问题"><a href="#我们面试经常出现的问题" class="headerlink" title="我们面试经常出现的问题"></a>我们面试经常出现的问题</h2><ol><li>基础知识点的遗漏</li><li>实际写代码的细节：线上面试时会更容易考察</li><li>项目结合：如何将知识点塞到项目里，考验实际经验，而不是“百度搜索师”，自己写 demo 也行</li></ol><h2 id="大厂-1-2-3-面想考查的是"><a href="#大厂-1-2-3-面想考查的是" class="headerlink" title="大厂 1&#x2F;2&#x2F;3 面想考查的是"></a>大厂 1&#x2F;2&#x2F;3 面想考查的是</h2><p>广度、深度、对技术的创新程度</p><p>大厂 1 面，主要是业务线主干，判断你能否能胜任组里的工作、知识点是否齐全，所以一面难过，因为考察的最全，覆盖最广的</p><h2 id="自我提升"><a href="#自我提升" class="headerlink" title="自我提升"></a>自我提升</h2><ul><li>找寻突破：业务之外，去发现问题&#x3D;&gt;找到问题&#x3D;&gt;获取痛点&#x3D;&gt;制定方案</li><li>突破领域：比较新的、火的</li></ul><h2 id="成长路线"><a href="#成长路线" class="headerlink" title="成长路线"></a>成长路线</h2><p>JS 基础知识(1~3 年) &#x3D;&gt; 结合业务整框架(3-5 年，可看框架源码)  &#x3D;&gt; 建立前端体系(5 年+)</p>]]></content>
    
    
    <categories>
      
      <category>前端八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端面试</tag>
      
      <tag>前端八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2、Github Actions + Github Pages 自动发布 Vue3 + Vite 项目</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E5%AE%9E%E8%B7%B5/2%E3%80%81Github%20Actions%20+%20Github%20Pages%20%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%20Vue3%20+%20Vite%20%E9%A1%B9%E7%9B%AE/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E5%AE%9E%E8%B7%B5/2%E3%80%81Github%20Actions%20+%20Github%20Pages%20%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%20Vue3%20+%20Vite%20%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>目的：提交代码，自动触发构建，并发布到 Github Pages 上<br>不详细讲为什么，只讲在怎么做</p></blockquote><h1 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h1><ol><li>先在<code>github</code>上准备一个前端项目，我使用<code>vue3</code>搭建了一个前端项目，技术栈为：<code>vue3、vite、element-plus、pinia、vue-router、headlessui、tailwindcss、typescript</code></li></ol><blockquote><p>如何搭建可看这篇：<a href="https://www.yuque.com/u53094/vd58kv/ylgafzvg8m3tgbo8?singleDoc#">《vue3 + vite + element-plus + tailwindcss + typescript 实战项目》</a></p></blockquote><ol start="2"><li>前端项目情况：只有<code>main</code>分支；项目文件如下图，代码<a href="https://github.com/MrHzq/vue3-vite-element-plus-tailwindcss-typescript">在这</a></li></ol><p><img src="/img/images/2024/1710597589857-a44b938d-7b5e-4f4c-9407-5ff7d4ba6f79.png"></p><h1 id="Github-Pages-配置"><a href="#Github-Pages-配置" class="headerlink" title="Github Pages 配置"></a>Github Pages 配置</h1><blockquote><p>可以理解为免费的线上服务器，可展示 build 后的前端项目</p></blockquote><ol><li>开启配置</li></ol><p><img src="/img/images/2024/1710597317822-1a922f53-d30f-48ea-bf6c-b1a82d1e71f9.png"><img src="/img/images/2024/1710597268706-8aaa359d-ad95-4a62-9b91-b5042b378d27.png"></p><ol start="2"><li>开启配置后，再刷新下页面（没有的话可强刷、关闭重进），可以看到访问地址</li></ol><p><img src="/img/images/2024/1710597419982-ba62aeb3-7038-4dda-bf26-e585d631a958.png"></p><ol start="3"><li>访问下地址，发现页面是空白的，打开控制台，发现有 html 结构，原因是：会默认加载了该 github 项目下根目录的 index.html 文件</li></ol><p><img src="/img/images/2024/1710597532311-514f8767-e0b5-4d7a-842f-8294f7821b63.png"></p><ol start="4"><li>现在去改一下该 github 项目根目录的 index.html 文件，加个点文字，然后提交代码</li></ol><p><img src="/img/images/2024/1710597898591-69265a8c-5274-401e-8810-68f7af5ca784.png"><br>等个 1、2 分钟，再刷新访问网址，就能看到最新的内容<br><img src="/img/images/2024/1710597795490-ac037232-0b58-4b73-8175-ba5bbb2997fd.png"></p><ol start="5"><li>至此简单的 github pages 配置完成，可以放只有一个 .html 的在线简历</li></ol><h1 id="Github-Actions-配置"><a href="#Github-Actions-配置" class="headerlink" title="Github Actions 配置"></a>Github Actions 配置</h1><blockquote><p>可以理解为 CI、CD<br>入门文档可看这篇：<a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程 - 阮一峰的网络日志</a></p></blockquote><p>可以配合上面的 Github Pages，实现提交代码，自动构建并发布的效果。</p><ol><li>更改<code>Github Pages</code>配置，改为<code>Github Actions</code>形式</li></ol><p><img src="/img/images/2024/1710598577857-8efcb19a-6547-4a61-9ba2-12d0bca0bdfd.png"></p><ol start="2"><li>创建<code>Github Actions</code>的配置</li></ol><p><img src="/img/images/2024/1710598745761-87069eb6-355b-4274-a6ab-c566c22f5c70.png"></p><ol start="3"><li>会帮我们生成了一个最基本的配置，然后我们提交到<code>mian</code>分支上</li></ol><p><img src="/img/images/2024/1710598890183-2efdcd8c-0e87-4751-ba18-ae629830d6d3.png"><br><img src="/img/images/2024/1710598933216-5bba06f9-ee6e-4d0c-a9b2-6834ed405b8e.png"></p><ol start="4"><li>提交后，我们进入<code>Actions</code>下，可看到第一个<code>workflows</code></li></ol><p><img src="/img/images/2024/1710599085621-14a9497b-7550-4886-a761-7d640c27c7ac.png"></p><ol start="5"><li>现在去改一下该 github 项目根目录的 index.html 文件，再加点文字，然后提交代码</li></ol><p><img src="/img/images/2024/1710599172288-da099efc-55c9-4134-af29-3189da241c5e.png"></p><ol start="6"><li>然后去<code>Actions</code>下，看又有了一个<code>workflow</code></li></ol><p><img src="/img/images/2024/1710599193430-999c43c8-0efc-4931-be09-211845eb0fb6.png"></p><ol start="7"><li>然后等它成功后，访问下该项目的 Github Pages，看到内容也变化了</li></ol><p><img src="/img/images/2024/1710599253666-5a5a46ee-e12f-4cd6-b051-26459ba81223.png"></p><ol start="8"><li>至此简单的 github actions 配置完成，结合 github pages 可以放只有一个 .html 的在线简历，实现提交代码自动部署功能（虽然没啥用）</li></ol><h1 id="Vue3-Vite-项目接入"><a href="#Vue3-Vite-项目接入" class="headerlink" title="Vue3 + Vite 项目接入"></a>Vue3 + Vite 项目接入</h1><p>上面的流程比较简单，真正的项目是需要：提交代码后，触发构建、生成 dist、部署 dist，最终实现页面内容的更新</p><blockquote><p>本次项目的线上代码地址：<a href="https://github.com/MrHzq/vue3-vite-element-plus-tailwindcss-typescript">在这</a></p></blockquote><ol><li>将项目拉取到本地：<code>git clone xxx</code></li><li>先在本地跑下构建命令，确定没得问题</li><li>更改<code>vite.config.ts</code>配置，将打包目录改为 github 项目目录</li></ol><p><img src="/img/images/2024/1710599844812-e04ce46a-1d36-479f-8885-b5d0910d08f1.png"></p><ol start="4"><li>更改<code>.github/workflows/static.yml</code>配置，加入打包流程：</li></ol><p><img src="/img/images/2024/1710600221946-8d544556-3643-4af7-a7de-5df28b23eb99.png"></p><ol start="5"><li>完整代码如下（pnpm 版）：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"># Simple workflow <span class="hljs-keyword">for</span> deploying <span class="hljs-type">static</span> content to GitHub Pages<br>name: Deploy <span class="hljs-type">static</span> content to Pages<br><br>on:<br>  # Runs on pushes targeting the <span class="hljs-keyword">default</span> branch<br>  push:<br>    branches: [<span class="hljs-string">&#x27;main&#x27;</span>]<br><br>  # Allows you to run this workflow manually from the Actions tab<br>  workflow_dispatch:<br><br># Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages<br>permissions:<br>  contents: read<br>  pages: write<br>  id-token: write<br><br># Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.<br># However, <span class="hljs-keyword">do</span> NOT cancel in-progress runs as we want to allow these production deployments to complete.<br>concurrency:<br>  group: <span class="hljs-string">&#x27;pages&#x27;</span><br>  cancel-in-progress: <span class="hljs-literal">false</span><br><br>jobs:<br>  # Single deploy job since we<span class="hljs-number">&#x27;</span>re just deploying<br>  deploy:<br>    environment:<br>      name: github-pages<br>      url: $&#123;&#123; steps.deployment.outputs.page_url &#125;&#125;<br>    runs-on: ubuntu-latest<br>    steps:<br>      - name: Checkout<br>        uses: actions/checkout@v4<br>      - uses: pnpm/action-setup@v2<br>        with:<br>          version: <span class="hljs-number">8</span><br>      - name: Setup Node<br>        uses: actions/setup-node@v3<br>        with:<br>          node-version: <span class="hljs-number">20</span><br>          cache: <span class="hljs-string">&#x27;pnpm&#x27;</span><br>      - name: Install dependencies<br>        run: pnpm install<br>      - name: Build<br>        run: pnpm run build<br>      - name: Setup Pages<br>        uses: actions/configure-pages@v4<br>      - name: Upload artifact<br>        uses: actions/upload-pages-artifact@v3<br>        with:<br>          # Upload entire repository<br>          path: <span class="hljs-string">&#x27;./dist&#x27;</span><br>      - name: Deploy to GitHub Pages<br>        id: deployment<br>        uses: actions/deploy-pages@v4<br></code></pre></td></tr></table></figure><ol start="6"><li>完整代码如下（npm 版）：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"># Simple workflow <span class="hljs-keyword">for</span> deploying <span class="hljs-type">static</span> content to GitHub Pages<br>name: Deploy <span class="hljs-type">static</span> content to Pages<br><br>on:<br>  # Runs on pushes targeting the <span class="hljs-keyword">default</span> branch<br>  push:<br>    branches: [<span class="hljs-string">&#x27;main&#x27;</span>]<br><br>  # Allows you to run this workflow manually from the Actions tab<br>  workflow_dispatch:<br><br># Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages<br>permissions:<br>  contents: read<br>  pages: write<br>  id-token: write<br><br># Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.<br># However, <span class="hljs-keyword">do</span> NOT cancel in-progress runs as we want to allow these production deployments to complete.<br>concurrency:<br>  group: <span class="hljs-string">&#x27;pages&#x27;</span><br>  cancel-in-progress: <span class="hljs-literal">false</span><br><br>jobs:<br>  # Single deploy job since we<span class="hljs-number">&#x27;</span>re just deploying<br>  deploy:<br>    environment:<br>      name: github-pages<br>      url: $&#123;&#123; steps.deployment.outputs.page_url &#125;&#125;<br>    runs-on: ubuntu-latest<br>    steps:<br>      - name: Checkout<br>        uses: actions/checkout@v4<br>      - name: Setup Node<br>        uses: actions/setup-node@v3<br>        with:<br>          node-version: <span class="hljs-number">20</span><br>          cache: <span class="hljs-string">&#x27;npm&#x27;</span><br>      - name: Install dependencies<br>        run: npm install<br>      - name: Build<br>        run: npm run build<br>      - name: Setup Pages<br>        uses: actions/configure-pages@v4<br>      - name: Upload artifact<br>        uses: actions/upload-pages-artifact@v3<br>        with:<br>          # Upload entire repository<br>          path: <span class="hljs-string">&#x27;./dist&#x27;</span><br>      - name: Deploy to GitHub Pages<br>        id: deployment<br>        uses: actions/deploy-pages@v4<br></code></pre></td></tr></table></figure><ol start="7"><li>提交一下代码，然后去看<code>Actions</code>状态</li></ol><p><img src="/img/images/2024/1710600447256-a1d5d90e-b492-4d34-80b0-0f2109ba624b.png"></p><ol start="8"><li>如果觉得频繁跳到 github 麻烦，可以安装 VScode 插件：<a href="https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-github-actions">GitHub Actions</a>，然后在 VScode 里面直接看，并且还可点击直接打开网页的<code>github actions</code>内</li></ol><p><img src="/img/images/2024/1710602934264-4fdec3c4-4a96-4c6e-8bb3-e0cb1897bc5b.png"></p><ol start="9"><li>actions 成功后，打开项目的 github pages 访问地址，看看是否对了，已经对了</li></ol><p><img src="/img/images/2024/1710601675566-11beb7ea-bd96-43e0-bbc4-62f16de4e7a2.png"></p><ol start="10"><li>然后点点页面，跳转下路由，都是对的</li><li>但是刷新下发现就 404 了，这不是浪费感情吗？</li></ol><p>别急，这个原因是前端项目采用了<code>history</code>的路由模式，对<code>github pages</code>来说，访问<code>https://mrhzq.github.io/vue3-vite-element-plus-tailwindcss-typescript/about</code>是访问<code>/about</code>目录下的<code>index.html</code><br>但我们哪有<code>/about</code>目录，所以就去找访问目录(我们配的<code>/dist</code>)下的<code>404.html</code>，没找到就显示官方的 404 页面</p><h1 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h1><h2 id="Github-Pages-刷新后，页面-404"><a href="#Github-Pages-刷新后，页面-404" class="headerlink" title="Github Pages 刷新后，页面 404"></a>Github Pages 刷新后，页面 404</h2><blockquote><p>原因上面一行就有写，不赘述；正确的处理方式是：配置 nginx，将其他路径的访问全部都指向 index.html。但 Github Pages 我们没法这样去处理，所以只能“取巧”</p></blockquote><p>1、前端项目采用<code>hash</code>模式，重新触发<code>actions</code>后，就完全正常了，但地址就不好看，看个人选择。只需改路由就行，然后提交代码，等<code>actions</code>成功，就可以任意刷新<br><img src="/img/images/2024/1710602432973-e2a8a88c-3baf-4be6-bd80-2af29b2d30e9.png"></p><p>2、在访问目录(我们配的<code>/dist</code>)下的创建一个<code>404.html</code>，内容跟<code>index.html</code>一模一样，这样显示<code>404.html</code>时也跟正常显示<code>index.html</code>一样</p><blockquote><p>我们可以在打包成功了，复制下<code>index.html</code>，命名为<code>404.html</code>就行</p></blockquote><p>a、<code>package.json</code>新增一个<code>404build</code>命令，用于生成<code>404.html</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">&#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-string">&quot;404build&quot;</span>: <span class="hljs-string">&quot;cp dist/index.html dist/404.html&quot;</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>b、<code>.github/workflows/static.yml</code>新增一个<code>404Build</code>步骤<br><img src="/img/images/2024/1710602840198-5225e39a-6df2-4738-a9d4-b178cd245091.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">- name: <span class="hljs-number">404B</span>uild<br>run: npm run <span class="hljs-number">404b</span>uild<br></code></pre></td></tr></table></figure><p>c、提交代码，等<code>actions</code>成功，就可以任意刷新<br><img src="/img/images/2024/1710603100510-1384e529-2ab2-48a0-9c62-d9f27a712d02.png"></p><h2 id="Github-Actions-失败处理"><a href="#Github-Actions-失败处理" class="headerlink" title="Github Actions 失败处理"></a>Github Actions 失败处理</h2><blockquote><p>失败的，github 会发邮件给你哦</p></blockquote><ol><li>找到失败的</li></ol><p><img src="/img/images/2024/1710600476696-235208a7-9e0c-4ab1-9a8e-7720e6992d4a.png"></p><ol start="2"><li>进入详情</li></ol><p><img src="/img/images/2024/1710600552403-7186eeff-912f-4197-bef1-6aeb34f625d5.png"><br><img src="/img/images/2024/1710600613320-f5e92dc3-8860-4ad8-8a7d-5564454c1fb5.png"></p><h3 id="报错：Supported-file-patterns-package-lock-json-npm-shrinkwrap-json-yarn-lock"><a href="#报错：Supported-file-patterns-package-lock-json-npm-shrinkwrap-json-yarn-lock" class="headerlink" title="报错：Supported file patterns: package-lock.json,npm-shrinkwrap.json,yarn.lock"></a>报错：Supported file patterns: package-lock.json,npm-shrinkwrap.json,yarn.lock</h3><p>因为我使用的是 pnpm，所以项目中没有 package-lock.json 文件。<br>处理方式：<code>npm i</code>，生成一个<code>package-lock.json</code>然后提交代码</p>]]></content>
    
    
    <categories>
      
      <category>前端实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端实践</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1、vue3 + vite + element-plus + tailwindcss + typescript 实战项目</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E5%AE%9E%E8%B7%B5/1%E3%80%81vue3%20+%20vite%20+%20element-plus%20+%20tailwindcss%20+%20typescript%20%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%89%8D%E7%AB%AF%E5%AE%9E%E8%B7%B5/1%E3%80%81vue3%20+%20vite%20+%20element-plus%20+%20tailwindcss%20+%20typescript%20%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>由于个人需要一个可随机生成 [a, b] 之间的正整数，用于记默写英语单词，所以自己手撸了一下，练练技术</p></blockquote><p>完整技术栈：<code>vue3 + vite + element-plus + tailwindcss + typescript + headlessui + heroicons + pinia + vue-router</code></p><h1 id="VScode-插件（可选）"><a href="#VScode-插件（可选）" class="headerlink" title="VScode 插件（可选）"></a>VScode 插件（可选）</h1><blockquote><p>工欲善其事，必先利其器~</p></blockquote><p>推荐一些我在用的插件<br><a href="https://marketplace.visualstudio.com/items?itemName=Vue.volar">Vue - Official - Visual Studio Marketplace</a>：开启分栏好用<br><a href="https://marketplace.visualstudio.com/items?itemName=sdras.vue-vscode-snippets">Vue VSCode Snippets - Visual Studio Marketplace</a>：初始化 .vue 文件很方便<br><img src="/img/images/2024/1710591050347-6a3888a5-ae79-4fcb-a278-1a07753980d9.gif" alt="SnippetDemo .gif"><br><a href="https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss">Tailwind CSS IntelliSense - Visual Studio Marketplace</a>：使用 tailwindcss 必备，写类名空格可唤起提示<br><img src="/img/images/2024/1710591172859-01f3b63b-1044-4818-9d52-e13e071e1e18.png"></p><h1 id="VScode-配置（可选）"><a href="#VScode-配置（可选）" class="headerlink" title="VScode 配置（可选）"></a>VScode 配置（可选）</h1><h2 id="开启左右分栏功能（默认是关闭的）"><a href="#开启左右分栏功能（默认是关闭的）" class="headerlink" title="开启左右分栏功能（默认是关闭的）"></a>开启左右分栏功能（默认是关闭的）</h2><p>左边展开 html、右边展开 js<br><img src="/img/images/2024/1710595381539-109bf785-3f9f-4e5d-8d80-59970a4b0788.png"></p><ol><li>先安装 VScode 插件：<a href="https://marketplace.visualstudio.com/items?itemName=Vue.volar">Vue - Official</a></li><li>打开 VScode 的设置，mac 快捷键：<code>command + ,</code></li><li>搜索关键词：<code>splitEditors</code></li><li>开启分栏功能<br><img src="/img/images/2024/1710595642832-85e6a380-96f9-450b-a5a1-3492747722c4.png"></li><li>个性化配置左右栏：默认左侧 js、右侧 html，但我就喜欢左侧 html、右侧 js<br><img src="/img/images/2024/1710595721127-b4ebef8f-0d69-443e-a704-4bfc1fe511be.png"></li><li>删除之前的，填入下面的这两个</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-string">&quot;vue.splitEditors.layout.right&quot;</span>: [<span class="hljs-string">&quot;script&quot;</span>, <span class="hljs-string">&quot;scriptSetup&quot;</span>, <span class="hljs-string">&quot;styles&quot;</span>],<br><span class="hljs-string">&quot;vue.splitEditors.layout.left&quot;</span>: [<span class="hljs-string">&quot;template&quot;</span>, <span class="hljs-string">&quot;customBlocks&quot;</span>]<br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1710595778289-cc3d7d3f-f4c1-4df1-a7e0-84a8329f09f5.png"></p><ol start="7"><li>保存一下，然后后回到任意<code>.vue</code>文件，右上角就有一个图标了<br><img src="/img/images/2024/1710595840173-bbc8fef5-c548-44e3-af3b-b07004b5f30b.png"></li></ol><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><ol><li>先在 github 上面创建项目</li></ol><p><img src="/img/images/2024/1710582566049-567d5bc2-ed13-4496-9bdd-aad1a0827acd.png"></p><ol start="2"><li>拉取项目到本地：<code>git clone xxxxx</code></li><li>先说一下我的环境</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 系统环境：Apple M1 Pro, macOS Sonoma 14.4</span><br><br>node -v <span class="hljs-comment">// v20.11.1</span><br>npm -v <span class="hljs-comment">// 10.2.4</span><br>pnpm -v <span class="hljs-comment">// 8.15.4</span><br></code></pre></td></tr></table></figure><ol start="4"><li>进入项目，按照<a href="https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application">vue 官方文档</a>初始化项目，下面三个命令任选其一</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pnpm create vue@latest <span class="hljs-comment">// 我用的 pnpm</span><br><br>npm create vue@latest<br>yarn create vue@latest<br></code></pre></td></tr></table></figure><blockquote><p>我的创建命令选项</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">✔ 请输入项目名称：/ <span class="hljs-comment">// 输入：/，表示在当前文件夹内创建</span><br>? 目标文件夹 <span class="hljs-string">&quot;/&quot;</span> 非空，是否覆盖？ › 否 / 是 <span class="hljs-comment">// 选择：是</span><br>? 请输入包名称： › - <span class="hljs-comment">// 输入：github 上创建时的名称(当前文件夹名称)</span><br>? 是否使用 TypeScript 语法？ › 否 / 是 <span class="hljs-comment">// 选择：是，看个人情况</span><br>? 是否启用 JSX 支持？ › 否 / 是 <span class="hljs-comment">// 选择：否，因为用 template 模板，可以不选 JSX</span><br>? 是否引入 Vue Router 进行单页面应用开发？ › 否 / 是 <span class="hljs-comment">// 选择：是，看个人情况</span><br>? 是否引入 Pinia 用于状态管理？ › 否 / 是 <span class="hljs-comment">// 选择：是，看个人情况</span><br>? 是否引入 Vitest 用于单元测试？ › 否 / 是 <span class="hljs-comment">// 选择：是，看个人情况</span><br>? 是否要引入一款端到端（End to End）测试工具？ › - 使用箭头切换按Enter确认。 <span class="hljs-comment">// 选择：不需要，看个人情况</span><br>❯   不需要<br>    Cypress<br>    Nightwatch<br>    Playwright<br>? 是否引入 ESLint 用于代码质量检测？ › 否 / 是 <span class="hljs-comment">// 选择：是，看个人情况</span><br>? 是否引入 Prettier 用于代码格式化？ › 否 / 是 <span class="hljs-comment">// 选择：是，看个人情况</span><br>? Add Vue DevTools extension <span class="hljs-keyword">for</span> debugging? (experimental) › 否 / 是 <span class="hljs-comment">// 选择：是，看个人情况</span><br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1710583381398-aac6f4f5-b685-4979-9d66-63b74d05733b.png"></p><ol start="4"><li>项目创建完毕后， 先将代码提交一下</li><li>然后按照提示运行一遍命令</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">pnpm install &amp;&amp; pnpm format &amp;&amp; pnpm dev<br></code></pre></td></tr></table></figure><p>前两个没啥问题，最后一个<code>pnpm dev</code>报错（因为我一直开着“魔法”的，关了就能成功）<br><img src="/img/images/2024/1710583963977-5b07c438-1618-47cd-9fb7-042fff1f124b.png"><br>但我又不想关，那需要手动处理</p><h1 id="更改-ip-配置（可选）"><a href="#更改-ip-配置（可选）" class="headerlink" title="更改 ip 配置（可选）"></a>更改 ip 配置（可选）</h1><ol start="6"><li><code>vite.config.ts</code>加上 ip 配置</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">import &#123; fileURLToPath, URL &#125; from <span class="hljs-string">&#x27;node:url&#x27;</span><br><br>import &#123; defineConfig &#125; from <span class="hljs-string">&#x27;vite&#x27;</span><br>import vue from <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br>import VueDevTools from <span class="hljs-string">&#x27;vite-plugin-vue-devtools&#x27;</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br>export <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span><span class="hljs-params">(&#123;</span><br><span class="hljs-params">  plugins: [vue(), VueDevTools()],</span><br><span class="hljs-params">  resolve: &#123;</span><br><span class="hljs-params">    alias: &#123;</span><br><span class="hljs-params">      <span class="hljs-string">&#x27;@&#x27;</span>: fileURLToPath(new URL(<span class="hljs-string">&#x27;./src&#x27;</span>, import.meta.url))</span><br><span class="hljs-params">    &#125;</span><br><span class="hljs-params">  &#125;,</span><br><span class="hljs-params"></span><br><span class="hljs-params">  server: &#123; <span class="hljs-comment">// ++++++</span></span><br><span class="hljs-params">    host: <span class="hljs-literal">true</span>, <span class="hljs-comment">// ++++++，将自动监听 ip</span></span><br><span class="hljs-params">    open: <span class="hljs-literal">true</span> <span class="hljs-comment">// ++++++</span></span><br><span class="hljs-params">  &#125;</span><br><span class="hljs-params">&#125;)</span><br><br></code></pre></td></tr></table></figure><blockquote><p>host 文档：<a href="https://vitejs.dev/config/server-options.html#server-host">https://vitejs.dev/config/server-options.html#server-host</a><br>open 文档：<a href="https://vitejs.dev/config/server-options.html#server-open">https://vitejs.dev/config/server-options.html#server-open</a></p></blockquote><ol start="7"><li>重新启动<code>pnpm dev</code>，浏览器自动打开，然后页面如下（电脑深色模式下）</li></ol><p><img src="/img/images/2024/1710590255698-da31a2d3-099c-448e-ae35-2a2aafc3a152.png"></p><h1 id="vue-devtool-试用"><a href="#vue-devtool-试用" class="headerlink" title="vue-devtool 试用"></a>vue-devtool 试用</h1><ol start="8"><li>试用下<code>vue-devtool</code>的功能，个人觉得挺好用的</li></ol><p><img src="/img/images/2024/1710590131739-d283dabb-ffa1-4e8a-b419-347a53c07d3b.png"><br><img src="/img/images/2024/1710590201991-e4e025ff-7a17-4494-bcdf-75e0332d7930.png"></p><ol start="9"><li>到此为止，使用了<code>vue3 + vite + pinia + vue-router + typescript</code></li></ol><h1 id="安装tailwindcss"><a href="#安装tailwindcss" class="headerlink" title="安装tailwindcss"></a>安装<code>tailwindcss</code></h1><p>官方文档：<a href="https://www.tailwindcss.cn/docs/installation">https://www.tailwindcss.cn/docs/installation</a><br>这是一个原子 css 库，使用后基本不用写 css 了，只写类名来完成样式“组装”<br>比如这样一段代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">&lt;main <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">&quot;flex justify-center items-center flex-col px-[20px] gap-4&quot;</span>&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">&quot;text-xl text-sky-500&quot;</span>&gt;欢迎使用 random-number-system&lt;/div&gt;<br>    &lt;p <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">&quot;text-gray-500 text-sm&quot;</span>&gt;<br>      它可以自动生成给定范围内的随机正整数，可用帮你打乱顺序记东西：比如记英语单词~<br>    &lt;/p&gt;<br>&lt;/main&gt;<br></code></pre></td></tr></table></figure><p>渲染出来的样式如下<br><img src="/img/images/2024/1710590716524-ef4308e5-da3b-483b-817e-04a25a5f8c7c.png"></p><blockquote><p>安装文档：<a href="https://tailwindcss.com/docs/guides/vite">Install Tailwind CSS with Vite - Tailwind CSS</a></p></blockquote><ol start="10"><li>安装<code>tailwindcss</code>与相关的依赖</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">pnpm add -D tailwindcss postcss autoprefixer<br></code></pre></td></tr></table></figure><ol start="11"><li>生成<code>tailwind.config.js、postcss.config.js</code>两个初始化的文件</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">npx tailwindcss init -p<br></code></pre></td></tr></table></figure><ol start="12"><li>配置<code>tailwind.config.js</code>文件：添加所有模板文件的路径</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/** @type &#123;import(&#x27;tailwindcss&#x27;).Config&#125; */</span><br>export <span class="hljs-keyword">default</span> &#123;<br>    content: [<span class="hljs-string">&#x27;./index.html&#x27;</span>, <span class="hljs-string">&#x27;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&#x27;</span>], <span class="hljs-comment">// ++++++</span><br>  theme: &#123;<br>    extend: &#123;&#125;<br>  &#125;,<br>  plugins: []<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="13"><li>创建<code>tailwind</code>的“基本配置” css 文件</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">touch src/index.css<br></code></pre></td></tr></table></figure><ol start="14"><li><code>src/index.css</code>写入相关配置</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">@tailwind base;<br>@tailwind components;<br>@tailwind utilities;<br></code></pre></td></tr></table></figure><ol start="15"><li><code>main.ts</code>最上面引入<code>src/index.css</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">import <span class="hljs-string">&#x27;./index.css&#x27;</span> <span class="hljs-comment">// ++++++</span><br>import <span class="hljs-string">&#x27;./assets/main.css&#x27;</span><br><br>import &#123; createApp &#125; from <span class="hljs-string">&#x27;vue&#x27;</span><br>import &#123; createPinia &#125; from <span class="hljs-string">&#x27;pinia&#x27;</span><br><br>import App from <span class="hljs-string">&#x27;./App.vue&#x27;</span><br>import router from <span class="hljs-string">&#x27;./router&#x27;</span><br><br><span class="hljs-type">const</span> app = createApp(App)<br><br>app.use(createPinia())<br>app.use(router)<br><br>app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><ol start="16"><li><code>App.vue</code>里面使用<code>tailwindcss</code>，看看是否生效</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// tailwindcss 的实例代码：</span><br>&lt;main <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">&quot;flex justify-center items-center flex-col px-[20px] gap-4&quot;</span>&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">&quot;text-xl text-sky-500&quot;</span>&gt;欢迎使用 random-number-system&lt;/div&gt;<br>    &lt;p <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">&quot;text-gray-500 text-sm&quot;</span>&gt;<br>      它可以自动生成给定范围内的随机正整数，可用帮你打乱顺序记东西：比如记英语单词~<br>    &lt;/p&gt;<br>&lt;/main&gt;<br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1710593254434-f4ce82af-dd0b-4199-89dd-b326f13a4e73.png"><br>可以看到生效了<br><img src="/img/images/2024/1710593291590-01fdc4d1-ae35-4681-a52f-7035838db8bc.png"></p><h1 id="安装-Headlessui（可选）"><a href="#安装-Headlessui（可选）" class="headerlink" title="安装 Headlessui（可选）"></a>安装 Headlessui（可选）</h1><p>官方文档：<a href="https://headlessui.com/">https://headlessui.com/</a>，一个基于<code>tailwindcss</code>的组件库</p><blockquote><p>它只提供组件的基本功能与交互，剩下的样式需要自己去写。写的时候可以用<code>tailwindcss</code><br>使用场景：公司的设计风格比较小众，市面上的组件库样式不支持，自己完全手写时，功能实现繁琐，所以即可以用 Headlessui，它提供基础功能，样式自己发挥</p></blockquote><ol start="17"><li>安装<code>Headlessui</code>依赖</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">pnpm add @headlessui/vue<br></code></pre></td></tr></table></figure><ol start="18"><li>新建一个组件，验证下<code>@headlessui/vue</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">touch src/components/CusSwitch.vue<br></code></pre></td></tr></table></figure><ol start="19"><li>输入<code>v3tss</code>，回车生成模板代码</li></ol><p><img src="/img/images/2024/1710593820773-1503bbf6-b3ee-46f3-93f3-995b997d5c43.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">&lt;template&gt;<br>  &lt;div&gt;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;&lt;/script&gt;<br><br>&lt;style scoped&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure><ol start="20"><li>使用<code>headlessui 的 Switch</code>写个组件，代码如下（来自<a href="https://headlessui.com/vue/switch">官网示例</a>）：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">&quot;py-16&quot;</span>&gt;<br>    &lt;Switch<br>      v-model=<span class="hljs-string">&quot;enabled&quot;</span><br>      :class=<span class="hljs-string">&quot;enabled ? &#x27;bg-teal-900&#x27; : &#x27;bg-teal-700&#x27;&quot;</span><br>      class=<span class="hljs-string">&quot;relative inline-flex h-[38px] w-[74px] shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus-visible:ring-2 focus-visible:ring-white/75&quot;</span><br>    &gt;<br>      &lt;span class=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;Use setting&lt;/span&gt;<br>      &lt;span<br>        aria-hidden=<span class="hljs-string">&quot;true&quot;</span><br>        :class=<span class="hljs-string">&quot;enabled ? &#x27;translate-x-9&#x27; : &#x27;translate-x-0&#x27;&quot;</span><br>        class=<span class="hljs-string">&quot;pointer-events-none inline-block h-[34px] w-[34px] transform rounded-full bg-white shadow-lg ring-0 transition duration-200 ease-in-out&quot;</span><br>      /&gt;<br>    &lt;/Switch&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br>import &#123; ref &#125; from <span class="hljs-string">&#x27;vue&#x27;</span><br>import &#123; Switch &#125; from <span class="hljs-string">&#x27;@headlessui/vue&#x27;</span><br><br><span class="hljs-type">const</span> enabled = ref(<span class="hljs-literal">false</span>)<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure><ol start="21"><li><code>App.vue</code>引入组件</li></ol><p><img src="/img/images/2024/1710594335002-c0903a42-4c53-46fe-ad37-01858c851184.png"></p><ol start="22"><li>页面效果如下：</li></ol><p><img src="/img/images/2024/1710594288202-c3778990-9ba8-4c6d-9fb9-a8c443914d7a.png"></p><h1 id="安装-Heroicons（可选）"><a href="#安装-Heroicons（可选）" class="headerlink" title="安装 Heroicons（可选）"></a>安装 Heroicons（可选）</h1><p>官方文档：<a href="https://heroicons.com/">https://heroicons.com/</a>，一个基于<code>tailwindcss</code>的图标库</p><blockquote><p>支持 SVG、引入方式使用</p></blockquote><ol start="23"><li>安装<code>Heroicons</code>依赖</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">pnpm add @headlessui/vue<br></code></pre></td></tr></table></figure><ol start="24"><li><code>App.vue</code>引入图片图标证下<code>@heroicons/vue</code></li></ol><p><img src="/img/images/2024/1710594722359-4c5487a4-92d1-4d5d-89f3-a89adcde05e4.png"><br>更改的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">&lt;script setup lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br><span class="hljs-comment">// ... 不变的 ...</span><br><br>import &#123; ArrowDownCircleIcon &#125; from <span class="hljs-string">&#x27;@heroicons/vue/16/solid&#x27;</span><br>import &#123; ChatBubbleBottomCenterIcon &#125; from <span class="hljs-string">&#x27;@heroicons/vue/24/outline&#x27;</span><br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;svg<br>    xmlns=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span><br>    fill=<span class="hljs-string">&quot;none&quot;</span><br>    viewBox=<span class="hljs-string">&quot;0 0 24 24&quot;</span><br>    stroke-width=<span class="hljs-string">&quot;1.5&quot;</span><br>    stroke=<span class="hljs-string">&quot;currentColor&quot;</span><br>    class=<span class="hljs-string">&quot;w-6 h-6&quot;</span><br>  &gt;<br>    &lt;path<br>      stroke-linecap=<span class="hljs-string">&quot;round&quot;</span><br>      stroke-linejoin=<span class="hljs-string">&quot;round&quot;</span><br>      d=<span class="hljs-string">&quot;M4.26 10.147a60.438 60.438 0 0 0-.491 6.347A48.62 48.62 0 0 1 12 20.904a48.62 48.62 0 0 1 8.232-4.41 60.46 60.46 0 0 0-.491-6.347m-15.482 0a50.636 50.636 0 0 0-2.658-.813A59.906 59.906 0 0 1 12 3.493a59.903 59.903 0 0 1 10.399 5.84c-.896.248-1.783.52-2.658.814m-15.482 0A50.717 50.717 0 0 1 12 13.489a50.702 50.702 0 0 1 7.74-3.342M6.75 15a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm0 0v-3.675A55.378 55.378 0 0 1 12 8.443m-7.007 11.55A5.981 5.981 0 0 0 6.75 15.75v-1.5&quot;</span><br>    /&gt;<br>  &lt;/svg&gt;<br><br>  &lt;ArrowDownCircleIcon class=<span class="hljs-string">&quot;w-6 h-6&quot;</span> /&gt;<br><br>  &lt;ChatBubbleBottomCenterIcon class=<span class="hljs-string">&quot;w-6 h-6&quot;</span> /&gt;<br><br> <span class="hljs-comment">// ... 不变的 ...</span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>图标效果这样：<br><img src="/img/images/2024/1710594820855-cb42d011-0644-4f6a-bb68-24d74f9467d5.png"></p><h1 id="安装-Element-Plus"><a href="#安装-Element-Plus" class="headerlink" title="安装 Element-Plus"></a>安装 Element-Plus</h1><p>官方文档：<a href="https://element-plus.org/zh-CN/guide/installation.html#%E4%BD%BF%E7%94%A8%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8">安装 | Element Plus</a></p><blockquote><p>不多说，还是习惯这种写好一大堆组件的方式，虽然会有覆盖样式的痛苦时刻，但大多时候真香</p></blockquote><ol start="25"><li>安装<code>Element-Plus</code>依赖</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"># 选择一个你喜欢的包管理器<br><br># NPM<br>npm install element-plus --save<br><br># Yarn<br>yarn add element-plus<br><br><span class="hljs-meta"># pnpm</span><br>pnpm add element-plus<br></code></pre></td></tr></table></figure><ol start="26"><li><code>mian.ts</code><a href="https://element-plus.org/zh-CN/guide/quickstart.html#%E7%94%A8%E6%B3%95">全局引入</a></li></ol><p><img src="/img/images/2024/1710596124192-d79d1738-48dd-4f18-b6c5-c0c8cc4ca1b4.png"></p><ol start="27"><li><code>App.vue</code>内使用，验证下<code>Elemen-Plus</code></li></ol><p><img src="/img/images/2024/1710596218913-667b0aca-0ae8-41a6-8d89-d8e4ebc31a86.png"><br><img src="/img/images/2024/1710596207079-a75c5336-b29e-4ec4-9d50-a40df35c5b9e.png"><br>发现按钮的功能、交互、样式都是正常的</p><blockquote><p>PS：若改为<a href="https://element-plus.org/zh-CN/guide/quickstart.html#%E6%8C%89%E9%9C%80%E5%AF%BC%E5%85%A5">按需引入</a>，会出现跟<code>tailwindcss</code>的配置冲突，网上处理方式<a href="https://juejin.cn/post/7222096611635658811#heading-6">很多</a>，但最直接的就是用全局引入</p></blockquote><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>至此，我们的所有的基本依赖已安装验证完毕，剩下的就是写代码了。</p><p>1、对应的 demo 代码地址：<a href="https://github.com/MrHzq/vue3-vite-element-plus-tailwindcss-typescript">vue3-vite-element-plus-tailwindcss-typescript</a>，里面有所有的 mr</p><p>2、随机生成正整数代码地址：<a href="https://github.com/MrHzq/random-number-system">random-number-system</a>，使用了上面技术进行了实战，验证了技术<br>使用 Github Actions + Github Pages 自动发布生成的线上网址：<a href="https://mrhzq.github.io/random-number-system/">https://mrhzq.github.io/random-number-system/</a></p><p>推荐阅读：<a href="https://juejin.cn/spost/7346524071185006611">《Github Actions + Github Pages 自动发布 Vue3 + Vite 项目》</a></p>]]></content>
    
    
    <categories>
      
      <category>前端实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>前端实践</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>27、堆</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/27%E3%80%81%E5%A0%86/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/27%E3%80%81%E5%A0%86/</url>
    
    <content type="html"><![CDATA[<p>思考：在实际的软件开发中，快速排序的性能要比堆排序好，这是为什么呢？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><h2 id="什么是堆"><a href="#什么是堆" class="headerlink" title="什么是堆"></a>什么是堆</h2><p>堆是一种特殊的树，满足以下两点的就是堆：<br>1、完全二叉树（叶子节点都在<strong>最底下两层</strong>，<strong>最底层节点靠左排列</strong>，其他层节点数达最大）<br>2、父节点的值必须大于等于(或小于等于)其左右节点的值<br><img src="/img/images/2024/1709732512486-ac9168c9-cb16-4e58-92a7-c63154c6b739.png"><br>1、2、3 是堆，4 不是堆</p><h2 id="如何实现一个堆？"><a href="#如何实现一个堆？" class="headerlink" title="如何实现一个堆？"></a>如何实现一个堆？</h2><p>堆是完全二叉树，则非常适合数组来存储，并且还是顺序入值<br><img src="/img/images/2024/1709732641405-5968b64c-a934-49c8-9bc6-cc655f5d68cd.png"><br>数组中下标为 i 的节点，它的左子节点为 2 <em>i，右子节点为 2</em> i + 1，父节点为 i &#x2F; 2</p><h2 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h2><p>插入元素后，还必须满足堆的两个特性。若不满足则进行调整(堆化)<br>堆化：顺着节点所在的路径，向上或者向下，对比然后交换。分为从下到上、从上到下<br>大顶堆：根元素最大，然后从大到小<br>小顶堆：根元素最小，然后从小到大</p><h3 id="从下到上堆化"><a href="#从下到上堆化" class="headerlink" title="从下到上堆化"></a>从下到上堆化</h3><p>举例：大顶堆，插入 22<br><img src="/img/images/2024/1709732945336-4bd59257-fa37-4237-8e52-fa13cb9433bc.png"><br>1、22 只能插入到 9 的左节点，满足【特性 1：完全二叉树】<br>2、开始堆化，先与父节点对比，若父节点大于插入值，是则完成堆化，否则互换<br>3、继续【步骤 2】，直至满足【特性 2：父节点的值必须大于等于其左右节点的值】<br><img src="/img/images/2024/1709733084083-6f1e87cc-37bf-4ddc-8226-8b87b46ba54c.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">arr, insertValue</span>) &#123;<br>  arr.<span class="hljs-title function_">push</span>(insertValue) <span class="hljs-comment">// 插入值，直接往数组最后入值</span><br><br>  <span class="hljs-keyword">let</span> i = arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span> <span class="hljs-comment">// 当前插入值的节点下标</span><br><br>  <span class="hljs-comment">// 自下而上堆化</span><br>  <span class="hljs-keyword">while</span>(i / <span class="hljs-number">2</span> &gt; <span class="hljs-number">0</span> &amp;&amp; arr[i/<span class="hljs-number">2</span>] &lt; arr[i]) &#123;<br>    <span class="hljs-comment">// 父节点存在 &amp;&amp; 父节点小于当前节点，则进行交换</span><br><br>    [arr[i/<span class="hljs-number">2</span>], arr[i]] = arr[i], arr[i/<span class="hljs-number">2</span>]]<br><br>    i = i / <span class="hljs-number">2</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除堆顶元素"><a href="#删除堆顶元素" class="headerlink" title="删除堆顶元素"></a>删除堆顶元素</h2><p>当删除堆顶元素后，需要去找第二大或第二小的值作为新堆顶，为了满足【特性 2：父节点的值必须大于等于&#x2F;小于等于其左右节点的值】<br>所以删除堆顶元素后，需要递归去处理。那就可以借用从上到下的堆化。<br>从上到下的堆化：删除堆顶元素后(数组第一个)，将最后的元素变为堆顶，然后从上到下进行判断，</p><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><h1 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h1><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>26、递归树</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/26%E3%80%81%E9%80%92%E5%BD%92%E6%A0%91/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/26%E3%80%81%E9%80%92%E5%BD%92%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>思考：</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><h1 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h1><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>25、红黑树（下）</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/25%E3%80%81%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/25%E3%80%81%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>思考：为什么红黑树的叶子节点都是黑色的空节点呢？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>实现红黑树的基本思想：类似于复原魔方，遇到具体的节点排布就对应去调整。<br>合格红黑树要求：<br>1、根节点为黑色<br>2、叶子节点为黑色的空节点<br>3、任何相邻(上下)的节点不能同时为红色<br>4、从任意节点到其可达到的叶子节点所有路径上，包含相同数目的黑色节点</p><p>左旋：围绕某个节点的左旋<br>右旋：围绕某个节点的右旋<br>图中的 a，b，r 表示子树，可以为空，下图来理解这两个操作<br><img src="/img/images/2024/1709725061715-284fd1e9-b5b8-447b-911f-973f51d6bce6.png"><br>解读：<br>1、围绕 X 节点的左旋，就是将 X 放到它右子节点(Y)的左节点上（X 是小于它右节点），然后 Y 原本的左节点(b) 作为 X 节点的右节点(b 是大于 X 节点的)<br>2、围绕 X 节点的右旋，就是将 X 放到它左子节点(Y)的右节点上（X 是大于它左节点），然后 Y 原本的右节点(b) 作为 X 节点的左节点(b 是小于 X 节点的)<br>核心原理是：旋转过去要保证左节点比它父节点小</p><h2 id="插入的平衡调整"><a href="#插入的平衡调整" class="headerlink" title="插入的平衡调整"></a>插入的平衡调整</h2><p>插入的节点必须是红色且必须放在叶子节点上</p><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><h1 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h1><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>25、红黑树（上）</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/25%E3%80%81%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/25%E3%80%81%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>思考：为什么工程中都用红黑树这种二叉树？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>平衡二叉查找树：任意节点的左右子树高度相差不能大于 1<br><img src="/img/images/2024/1709716904162-7fb577a4-593d-4475-a205-88f707e48bd4.png"><br>平衡二叉查找树最开始的初衷是为了避免二叉查找树在频繁插入、删除后，退化成链表，导致时间复杂度增加。<br>所以平衡二叉查找树的重点是“平衡”，让左右子树相差不要那么大。所以“数字 1”并不是固定的</p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>平衡二叉查找树的实际运用，是个“明星树”。<br>红黑树：Red-Black Tree，简称 R-B Tree。<br>定义：该树中的节点，一类被标记为黑色，一类被标记为红色<br>额外要求：<br>1、根节点是黑色<br>2、叶子节点是黑色的空节点，不能存储数据<br>3、任何相邻(父子)节点不能同时为红色<br>4、每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点；<br><img src="/img/images/2024/1709719169361-8a6af1e9-23f5-451e-a53c-06020e7eab94.png"></p><p>所以红黑树是“近似平衡”，为了不让左右子树偏差太大，性能上退化不严重。</p><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>思考：为什么工程中都用红黑树这种二叉树？</p><p>解答：它只是“近似平衡”，而非严格平衡，所以维护平衡成本低，并且性能还稳定</p><h1 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h1><p>红黑树是为了避免普通二叉查找树的操作中带来的时间复杂度退化问题，所以诞生了它。<br>它的高度近似 log2n，时间复杂度为 O(logn)，并且性能比较稳定，所以工程中喜欢用它。</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><h2 id="动态数据结构支持动态的数据插入、删除、查找操作，除了红黑树，我们前面还学习过哪些呢？能对比一下各自的优势、劣势，以及应用场景吗？"><a href="#动态数据结构支持动态的数据插入、删除、查找操作，除了红黑树，我们前面还学习过哪些呢？能对比一下各自的优势、劣势，以及应用场景吗？" class="headerlink" title="动态数据结构支持动态的数据插入、删除、查找操作，除了红黑树，我们前面还学习过哪些呢？能对比一下各自的优势、劣势，以及应用场景吗？"></a>动态数据结构支持动态的数据插入、删除、查找操作，除了红黑树，我们前面还学习过哪些呢？能对比一下各自的优势、劣势，以及应用场景吗？</h2>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>24、二叉树基础（下）</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/24%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/24%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>思考：既然有了高效的散列表，那使用二叉树的地方是不是都可以替换成散列表呢？有没有哪些地方是散列表做不了，必须要用二叉树来做的呢？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><h2 id="二叉查找-搜索-树"><a href="#二叉查找-搜索-树" class="headerlink" title="二叉查找(搜索)树"></a>二叉查找(搜索)树</h2><p>定义：树中的任意节点，其左子树每个节点的值要<strong>小于</strong>该节点，而右子树每个节点的值要<strong>大于</strong>该节点<br><img src="/img/images/2024/1709708626541-c4beaf38-2d64-479b-952e-21034f6a5b01.png"><br>特性：支持动态数据的快速查找、插入、删除操作</p><h3 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h3><p>查找逻辑：查找值与根节点，若等于则返回，若小于则在左子树中递归找，否则在右子树中递归找<br><img src="/img/images/2024/1709708761696-81609e77-8dc0-4920-a4cd-995b45e94cfd.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">searchTree</span>(<span class="hljs-params">root, targetValue</span>) &#123;<br>  <span class="hljs-keyword">let</span> p = root<br><br>  <span class="hljs-keyword">while</span>(p) &#123;<br>    <span class="hljs-keyword">if</span>(targetValue &gt; p.<span class="hljs-property">value</span>) p = p.<span class="hljs-property">right</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(targetValue &lt; p.<span class="hljs-property">value</span>) p = p.<span class="hljs-property">left</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> p<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度：最好 O(1)，最坏 O(n)，平均 O(logn)</p><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>新插入的数据一般都是在叶子节点上，所以从根节点开始比较，找到插入位置。<br>如果插入数据比节点<strong>大</strong>，若节点的<strong>右子树为空</strong>则插入，否则再递归遍历右子树，继续找：【如果插入数据比节点大，若节点的右子树为空则插入】<br>如果插入数据比节点<strong>小</strong>，若节点的<strong>左子树为空</strong>则插入，否则再递归遍历左子树，继续找：【如果插入数据比节点小，若节点的左子树为空则插入，否则再递归遍历左子树】<br><img src="/img/images/2024/1709709437987-64b3ecc4-4148-42c6-9b87-658efa8ca354.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">insertTree</span>(<span class="hljs-params">root, targetValue</span>) &#123;<br>  <span class="hljs-keyword">let</span> p = root<br><br>  <span class="hljs-keyword">while</span>(p) &#123;<br>    <span class="hljs-keyword">if</span>(targetValue &gt; p.<span class="hljs-property">value</span>) &#123;<br>      <span class="hljs-keyword">if</span>(p.<span class="hljs-property">right</span> === <span class="hljs-literal">null</span>) &#123;<br>        p.<span class="hljs-property">right</span> = targetValue<br>        <span class="hljs-keyword">return</span><br>      &#125;<br>      p = p.<span class="hljs-property">right</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(targetValue &lt; p.<span class="hljs-property">value</span>)&#123;<br>      <span class="hljs-keyword">if</span>(p.<span class="hljs-property">left</span> === <span class="hljs-literal">null</span>) &#123;<br>        p.<span class="hljs-property">left</span> = targetValue<br>        <span class="hljs-keyword">return</span><br>      &#125;<br>      p = p.<span class="hljs-property">left</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度：最好 O(1)，最坏 O(n)，平均 O(logn)</p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>三种情况：<br>1、若删除的节点，无子节点，则直接将父节点的指针改为 null，完成删除；比如下图删除 55<br>2、若删除的节点，有一个子节点(左或右)，则直接将父节点的指针指向子节点，完成删除；比如下图删除 13<br>3、若删除的节点，有两个子节点，则先在右子树中找到最小的值，然后和该节点互换，之后再按照【1、2】情况删除该节点；比如下图删除 18<br><img src="/img/images/2024/1709710288140-1909f74e-7c94-4663-b2f4-3162dd39b030.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteTree</span>(<span class="hljs-params">root, tragetValue</span>) &#123;<br>  <span class="hljs-keyword">let</span> p = root <span class="hljs-comment">// 当前节点</span><br>  <span class="hljs-keyword">let</span> pp = <span class="hljs-literal">null</span> <span class="hljs-comment">// 父节点</span><br><br>  <span class="hljs-keyword">while</span>(p) &#123;<br>    <span class="hljs-keyword">if</span>(targetValue === p.<span class="hljs-property">value</span>) &#123;<br>      <span class="hljs-comment">// 相等，结束循环</span><br>      <span class="hljs-keyword">return</span> p<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 不相等</span><br>      pp = p<br>      <span class="hljs-keyword">if</span>(targetValue &gt; p.<span class="hljs-property">value</span>) p = p.<span class="hljs-property">right</span><br>      <span class="hljs-keyword">else</span> p = p.<span class="hljs-property">left</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 有两个节点时，删除前的处理</span><br>  <span class="hljs-keyword">if</span>(p.<span class="hljs-property">right</span> &amp;&amp; p.<span class="hljs-property">left</span>) &#123;<br>    <span class="hljs-keyword">let</span> minp = p.<span class="hljs-property">right</span> <span class="hljs-comment">// 右子树最小节点</span><br>    <span class="hljs-keyword">let</span> minpp = <span class="hljs-literal">null</span> <span class="hljs-comment">// 右子树最小节点的父节点</span><br>    <span class="hljs-keyword">while</span>(minp.<span class="hljs-property">left</span>) &#123;<br>      minpp = minp<br>      minp = minp.<span class="hljs-property">left</span><br>    &#125;<br><br>    p.<span class="hljs-property">data</span> = minp.<span class="hljs-property">data</span> <span class="hljs-comment">// 数据替换</span><br>    p = minp<br>    pp = minpp<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> child<br><br>  <span class="hljs-keyword">if</span>(p.<span class="hljs-property">right</span>) child = p.<span class="hljs-property">right</span> <span class="hljs-comment">// 仅有右节点</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p.<span class="hljs-property">left</span>) child = p.<span class="hljs-property">left</span> <span class="hljs-comment">// 仅有左节点</span><br>  <span class="hljs-keyword">else</span> child = <span class="hljs-literal">null</span> <span class="hljs-comment">// 无子节点</span><br><br>  <span class="hljs-comment">// 删除节点操作</span><br>  <span class="hljs-keyword">if</span>(pp === <span class="hljs-literal">null</span>) p = child <span class="hljs-comment">// 删除根节点</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pp.<span class="hljs-property">left</span> === p) pp.<span class="hljs-property">left</span> = child <span class="hljs-comment">// 当前 p 属于左节点，则其父级(pp) 的左节点指向 p 的子节点</span><br>  <span class="hljs-keyword">else</span> pp.<span class="hljs-property">right</span> = child <span class="hljs-comment">// 当前 p 属于右节点，则其父级(pp) 的右节点指向 p 的子节点</span><br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度：最好 O(1)，最坏 O(n)，平均 O(logn)</p><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>思考：既然有了高效的散列表，那使用二叉树的地方是不是都可以替换成散列表呢？有没有哪些地方是散列表做不了，必须要用二叉树来做的呢？<br><img src="/img/images/2024/1709714160239-196db2f0-a3d2-43c4-a855-095773d9d688.png"></p><h1 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h1><p>二叉查找树：结构为 左子节点 &lt; 节点 &lt; 右子节点<br>其操作的时间复杂度跟树高度成正比，最坏为 O(n)，平均为 O(logn)</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><h2 id="求一棵给定二叉树的高度？"><a href="#求一棵给定二叉树的高度？" class="headerlink" title="求一棵给定二叉树的高度？"></a>求一棵给定二叉树的高度？</h2><p>根节点高度 &#x3D; 根节点到叶子节点的最大边数<br><img src="/img/images/2024/1709714464945-a53606dd-4c9c-41c7-ad2c-ba3d2b7b2827.png"> 高度为：4</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 深度优先遍历：求高度</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">heightOfBinaryTree</span>(<span class="hljs-params">root, type = <span class="hljs-string">&quot;tree&quot;</span></span>) &#123;<br>  <span class="hljs-keyword">if</span> (root === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 空树的高度为0</span><br><br>  <span class="hljs-comment">// 递归计算左子树和右子树的高度</span><br>  <span class="hljs-keyword">let</span> leftHeight = <span class="hljs-title function_">heightOfBinaryTree</span>(root.<span class="hljs-property">left</span>, <span class="hljs-string">&quot;left&quot;</span>);<br>  <span class="hljs-keyword">let</span> rightHeight = <span class="hljs-title function_">heightOfBinaryTree</span>(root.<span class="hljs-property">right</span>, <span class="hljs-string">&quot;right&quot;</span>);<br><br>  <span class="hljs-comment">// 返回当前子树（以root为根节点的子树）的最大高度 + 1</span><br>  <span class="hljs-keyword">const</span> height = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(leftHeight, rightHeight) + <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">return</span> height;<br>&#125;<br><br><span class="hljs-comment">// 定义一个二叉树节点结构</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">TreeNode</span>(<span class="hljs-params">val, left = <span class="hljs-literal">null</span>, right = <span class="hljs-literal">null</span></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">val</span> = val === <span class="hljs-literal">undefined</span> ? <span class="hljs-number">0</span> : val;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">left</span> = left === <span class="hljs-literal">undefined</span> ? <span class="hljs-literal">null</span> : left;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">right</span> = right === <span class="hljs-literal">undefined</span> ? <span class="hljs-literal">null</span> : right;<br>&#125;<br><span class="hljs-comment">// 示例用法：</span><br><span class="hljs-keyword">const</span> tree = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">4</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">5</span>)),<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">3</span>)<br>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">heightOfBinaryTree</span>(tree)); <span class="hljs-comment">// 输出：3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>23、二叉树基础（上）</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/23%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/23%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>思考：二叉树有哪几种存储方式？什么样的二叉树适合用数组来存储？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>树：一种非线性表结构</p><h2 id="树定义"><a href="#树定义" class="headerlink" title="树定义"></a>树定义</h2><p>以图说树<br><img src="/img/images/2024/1709281472278-eaa0b447-7ce6-4edb-a654-2e718b769b2c.png"></p><p>树中的每个元素称为<strong>节点</strong>，通过<strong>父级节点</strong>来连接相邻节点。<br><img src="/img/images/2024/1709281636504-075573cb-c8ec-49e7-b456-f19be8338401.png"><br>没有父节点的 E 称为<strong>根节点</strong><br>A 是 E 的<strong>子节点</strong>，E 是 A、F 的<strong>父节点</strong><br>A、F 有相同父节点的称为<strong>兄弟节点</strong><br>没有子节点的 K、L、 G、H、I、 J 都称为<strong>叶子节点&#x2F;叶节点</strong></p><p>节点的高度 &#x3D; 这个节点到叶子节点的最长路径(边数)<br>节点的深度 &#x3D; 根节点到这个节点所经历的边的个数<br>节点的层数 &#x3D; 节点的深度 + 1<br>树的高度 &#x3D; 根节点的高度<br><img src="/img/images/2024/1709281987031-c15d5d34-47aa-469a-b32c-ba58162c5dac.png"></p><p>诀窍：高度是从下往上开始算；深度是从上往下开始算；层 &#x3D; 深度 + 1</p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>定义：每个节点最多两个“叉”，即两个子节点，分为<strong>左、右子节点</strong><br><img src="/img/images/2024/1709282363605-a6027d9a-bb6a-4c70-9076-03bf2dfe05ee.png"><br>①：普通二叉树<br>②：满二叉树，叶子节点都在<strong>底层</strong>，并且每个节点<strong>都有两个子节点</strong><br>③：完全二叉树，叶子节点都在<strong>最底下两层</strong>，<strong>最底层节点靠左排列</strong>，其他层节点数达最大<img src="/img/images/2024/1709282603554-3345574c-1435-4cee-950c-5f03cd9528de.png"></p><h2 id="如何表示（或者存储）一棵二叉树？"><a href="#如何表示（或者存储）一棵二叉树？" class="headerlink" title="如何表示（或者存储）一棵二叉树？"></a>如何表示（或者存储）一棵二叉树？</h2><p>一种是二叉<strong>链表</strong>（常用的），结构如下：使用 left、right 指针<br><img src="/img/images/2024/1709282701944-564a133d-6461-4232-9a16-95a5a2308b06.png"></p><p>一种是<strong>数组</strong>顺序存储，结构如下：i 为父(根)节点下标，则左节点存在<code>2 * i</code>上，右节点存在<code>2 * i + 1</code>上<br><img src="/img/images/2024/1709282758155-da77d1b9-d751-4bee-9581-344a28c35e60.png"><br><strong>总结为：节点 X 存储下标为 i；其左结点存储在 2 * i 上；右节点存储在 2 * i + 1 上；其父节点存储在 i &#x2F; 2 上。</strong></p><p>所以数组存储时，知道了根节点位置就能找到整棵树节点位置。</p><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><p>三种方式遍历：就是节点本身与左右子树的顺序</p><ul><li>前序遍历：先打印节点本身，再打印左子树，最后打印右子树</li><li>中序遍历：先打印左子树，再打印节点本身，最后打印右子树</li><li>后序遍历：先打印左子树，再打印右子树，最后打印节点本身</li></ul><p><img src="/img/images/2024/1709384223195-5b117117-3de7-49e1-b91d-3b59ef5a5738.png"><br>上述就是一个递归过程。<br>对应的递推公式为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">前序遍历：<span class="hljs-title function_">perOrder</span>(r) = print r -&gt; <span class="hljs-title function_">perOrder</span>(r-&gt;left)-&gt; <span class="hljs-title function_">perOrder</span>(r-&gt;right)<br>中序遍历：<span class="hljs-title function_">inOrder</span>(r) = <span class="hljs-title function_">inOrder</span>(r-&gt;left) -&gt; print r -&gt; <span class="hljs-title function_">inOrder</span>(r-&gt;right)<br>后序遍历：<span class="hljs-title function_">postOrder</span>(r) = <span class="hljs-title function_">postOrder</span>(r-&gt;left) -&gt; <span class="hljs-title function_">postOrder</span>(r-&gt;right) -&gt; print r<br></code></pre></td></tr></table></figure><p>对应的递归代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">perOrder</span>(<span class="hljs-params">root</span>) &#123;<br>  <span class="hljs-keyword">if</span>(root === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span><br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(root)<br><br>  <span class="hljs-title function_">perOrder</span>(root.<span class="hljs-property">left</span>)<br>  <span class="hljs-title function_">perOrder</span>(root.<span class="hljs-property">right</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">inOrder</span>(<span class="hljs-params">root</span>) &#123;<br>  <span class="hljs-keyword">if</span>(root === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span><br><br>  <span class="hljs-title function_">inOrder</span>(root.<span class="hljs-property">left</span>)<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(root)<br><br>  <span class="hljs-title function_">inOrder</span>(root.<span class="hljs-property">right</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">postOrder</span>(<span class="hljs-params">root</span>) &#123;<br>  <span class="hljs-keyword">if</span>(root === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span><br><br>  <span class="hljs-title function_">postOrder</span>(root.<span class="hljs-property">left</span>)<br><br>  <span class="hljs-title function_">postOrder</span>(root.<span class="hljs-property">right</span>)<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(root)<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度为：O(n)</p><h1 id="解答思考-内容总结"><a href="#解答思考-内容总结" class="headerlink" title="解答思考 &amp; 内容总结"></a>解答思考 &amp; 内容总结</h1><p>思考：二叉树有哪几种存储方式？什么样的二叉树适合用数组来存储？</p><p>解答：可以使用 数组、链表 存储<br>完全二叉树与满二叉树适合用数组存储，因为空闲元素更少。</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><h1 id="给定一组数据，比如-1，3，5，6，9，10，11，可以构建出多少种不同的完全二叉树？"><a href="#给定一组数据，比如-1，3，5，6，9，10，11，可以构建出多少种不同的完全二叉树？" class="headerlink" title="给定一组数据，比如 1，3，5，6，9，10，11，可以构建出多少种不同的完全二叉树？"></a>给定一组数据，比如 1，3，5，6，9，10，11，可以构建出多少种不同的完全二叉树？</h1><h1 id="我们讲了三种二叉树的遍历方式，前、中、后序。实际上，还有另外一种遍历方式，也就是按层遍历，你知道如何实现吗？"><a href="#我们讲了三种二叉树的遍历方式，前、中、后序。实际上，还有另外一种遍历方式，也就是按层遍历，你知道如何实现吗？" class="headerlink" title="我们讲了三种二叉树的遍历方式，前、中、后序。实际上，还有另外一种遍历方式，也就是按层遍历，你知道如何实现吗？"></a>我们讲了三种二叉树的遍历方式，前、中、后序。实际上，还有另外一种遍历方式，也就是按层遍历，你知道如何实现吗？</h1>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20、散列表（下）</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/20%E3%80%81%E6%95%A3%E5%88%97%E8%A1%A8%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/20%E3%80%81%E6%95%A3%E5%88%97%E8%A1%A8%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>思考：为什么散列表和链表经常会一起使用？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>可以发现散列表与链表经常一起出现。</p><h2 id="LRU-缓存淘汰算法"><a href="#LRU-缓存淘汰算法" class="headerlink" title="LRU 缓存淘汰算法"></a>LRU 缓存淘汰算法</h2><p>前面[这节](<a href="https://www.yuque.com/u53094/vd58kv/twuqfxon23bi1473?singleDoc#">https://www.yuque.com/u53094/vd58kv/twuqfxon23bi1473?singleDoc#</a> 《06 | 链表（上）》)讲了 LRU 缓存淘汰算法的实现：采用链表，最晚访问的放到链表尾部，当插入时，若是新访问的放到尾部，若位置不够则删除头部的，若是访问已有的则找到它然后放到尾部去。<br>整体时间复杂度为 O(n)，删除、插入的是 O(1)，但查找需要用 O(n)</p><p>但如果使用链表结合散列表时，可以为 O(1)，结构如下：<br><img src="/img/images/2024/1709274581130-f9200bf4-5b3a-44af-b997-5c9beef02517.png"><br>使用双向链表和散列表<br>prev、next 用来形成双向链表<br>hnext 用来形成单链表(用来解决散列冲突的链表)</p><h2 id="Redis-有序集合"><a href="#Redis-有序集合" class="headerlink" title="Redis 有序集合"></a>Redis 有序集合</h2><p>前面[这节](<a href="https://www.yuque.com/u53094/vd58kv/kfz92fee6k217wes?singleDoc#">https://www.yuque.com/u53094/vd58kv/kfz92fee6k217wes?singleDoc#</a> 《17 | 跳表》)讲了 Redis 有序集合的实现是通过跳表，但删除、查询就很慢。<br>所以又以键值构建一个散列表，这样按照 key 来删除、查找一个成员对象的时间复杂度就变成了 O(1)。<br>实现原理跟第一个一样。</p><h2 id="Java-LinkedHashMap"><a href="#Java-LinkedHashMap" class="headerlink" title="Java LinkedHashMap"></a>Java LinkedHashMap</h2><p>它是通过散列表和链表组合在一起实现的。还支持 LRU 算法，实现原理跟第一个一样。</p><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>思考：为什么散列表和链表经常会一起使用？</p><p>解答：因为可以互相弥补，使得效率更高效。散列表虽然支持高效的增删查，但它本身存储的数据是经过散列函数打散的，不支持顺序查找，除非拷贝到新数组然后排序查找。但结合链表后，就可以弥补无法顺序查找的问题了。</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><p>假设猎聘网有 10 万名猎头，每个猎头都可以通过做任务（比如发布职位）来积累积分，然后通过积分来下载简历。假设你是猎聘网的一名工程师，如何在内存中存储这 10 万个猎头 ID 和积分信息，让它能够支持这样几个操作：</p><ol><li>根据猎头的 ID 快速查找、删除、更新这个猎头的积分信息；</li><li>查找积分在某个区间的猎头 ID 列表，比如[200, 500]</li><li>查找按照积分从小到大排名在第 x 位到第 y 位之间的猎头 ID 列表。</li></ol><p>解答：<br>关键信息：id、score(积分)<br>以 score 构建跳表，实现[操作 2]<br>以 id 为 key 构建散列表，存储 score，实现[操作 1]</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19、散列表（中）</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/19%E3%80%81%E6%95%A3%E5%88%97%E8%A1%A8%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/19%E3%80%81%E6%95%A3%E5%88%97%E8%A1%A8%EF%BC%88%E4%B8%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>思考：如何设计一个可以应对各种异常情况的工业级散列表，来避免在散列冲突的情况下，散列表性能的急剧下降，并且能抵抗散列碰撞攻击？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>散列表的时间复杂度受散列函数、装载因子、散列冲突影响。<br>好的情况是 O(1)，坏的情况是 O(n)<br>比如有 10W 数据，好的时候查询是 0.1 s，坏的时候查询是 1W s。这样查询会占用系统资源，导致无法响应其他请求，可以达到拒绝服务攻击(Dos)的目的。这也是散列表碰撞攻击的基本原理。</p><h2 id="如何设计散列函数？"><a href="#如何设计散列函数？" class="headerlink" title="如何设计散列函数？"></a>如何设计散列函数？</h2><p>考虑点：<br>1、不能太负责。越复杂计算越耗费时间<br>2、生成的散列值尽可能的随机与平均。避免或最小化降低冲突<br>3、其他：散列值的长度、大小等等</p><p>所以好的散列函数能极大降低散列冲突。</p><p>常用的设计方法：数据分析法、平方取中数、随机数法等等</p><h2 id="装载因子过大时？"><a href="#装载因子过大时？" class="headerlink" title="装载因子过大时？"></a>装载因子过大时？</h2><p>装载因子 &#x3D; 已填入的数量 &#x2F; 散列表长度<br>过大，表明空位少，则散列冲突概率更大。</p><p>则可以考虑动态扩容，即申请 2 倍大小的散列表，更新散列函数的计算(跟散列长度挂钩)，然后将旧散列表中的值通过新散列函数生成的散列值迁移到新散列表中<br>如果不更新散列函数的计算或不散跟列长度挂钩，则扩容后的空间永远也用不上，失去扩容意义。<br><img src="/img/images/2024/1709272114164-bb73b6f4-f0cc-4171-9d00-d2cf36af9d69.png"></p><p>是否扩容跟我们设计的装载因子阈值有关，太大则容易冲突，太小则会浪费内存去扩容</p><h3 id="如何避免低效的扩容？"><a href="#如何避免低效的扩容？" class="headerlink" title="如何避免低效的扩容？"></a>如何避免低效的扩容？</h3><p>什么是低效的扩容：当旧散列表数据很大，装载因子刚达到阈值时，若扩容时一次性搬运所有数据，则很耗时。<br>可以采用分批搬运，即扩容时不触发搬运。等有新的插入操作时，先将该值插入新散列表，然后从旧散列表搬运一个到新散列表。这样随着插入次数变多，搬运就一步步完成了<br><img src="/img/images/2024/1709272572031-0fef92d2-a762-4036-9e0c-4e1c8f76a0ef.png"></p><p>查找时：先找新散列表，没找到再找就散列表</p><h2 id="如何选择冲突解决方案"><a href="#如何选择冲突解决方案" class="headerlink" title="如何选择冲突解决方案"></a>如何选择冲突解决方案</h2><p>解决散列冲突的方案有：开放寻址法、链表法<br>那它们的优缺点与场景是什么呢？</p><h3 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h3><p>优点：数据还是保存在数组中的，则还能吃数组的红利<br>缺点：随着数组填充，散列冲突的概率还是很高<br>适用场景：<strong>数据量小、装载因子上限小</strong>的。因为装载因子太大，则冲突严重，插入时找空闲的时间会更长</p><h3 id="链表法"><a href="#链表法" class="headerlink" title="链表法"></a>链表法</h3><p>对装载因子容忍度更高。<br>因为冲突的地方已变成链表结构了，所以装载因子为 10 都无所谓。只是链表查找时稍微麻烦，但我们可以将链表结构改为更高效的：[跳表](<a href="https://www.yuque.com/u53094/vd58kv/kfz92fee6k217wes?singleDoc#">https://www.yuque.com/u53094/vd58kv/kfz92fee6k217wes?singleDoc#</a> 《17 | 跳表》)，这样查找效率也可以更快。<br><img src="/img/images/2024/1709273184056-7c3b360b-33b8-4ea1-b07a-1a1c49f5ce45.png"></p><p>所以基于链表的散列冲突处理方法比较适合存储<strong>大对象、大数据量</strong>的散列表，而且，比起开放寻址法，它更加灵活，支持更多的优化策略，比如用跳表、红黑树代替链表。</p><h2 id="工业级散列表举例"><a href="#工业级散列表举例" class="headerlink" title="工业级散列表举例"></a>工业级散列表举例</h2><p>以 Java 中的 HashMap 举例<br>它的初始大小为默认为：<strong>16</strong>，算比较小的了，但支持动态扩容的哈<br>它的最大装载因子默认为 <strong>0.75</strong>，每次扩容 <strong>2</strong> 倍大小<br>它的散列冲突解决方法是<strong>链表</strong>，之后若节点个数大于 8 转为红黑树，小于 8 又转为链表<br>它的散列函数很简单高效、平均分布</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">int <span class="hljs-title function_">hash</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> key</span>) &#123;<br>  int h = key.<span class="hljs-title function_">hashCode</span>()；<br>  <span class="hljs-keyword">return</span> (h ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>)) &amp; (capicity -<span class="hljs-number">1</span>); <span class="hljs-comment">//capicity表示散列表的大小</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>思考：如何设计一个可以应对各种异常情况的工业级散列表，来避免在散列冲突的情况下，散列表性能的急剧下降，并且能抵抗散列碰撞攻击？</p><p>解答：<br>工业级的散列表要求：</p><ol><li>支持快速地查询、插入、删除操作；</li><li>内存占用合理，不能浪费过多的内存空间；</li><li>性能稳定，极端情况下，散列表的性能也不会退化到无法接受的情况。</li></ol><p>设计考虑点：简单高效与平均分布的散列函数、合理的装载因子阈值与高效扩容方式、合理的散列冲突解决方式与灵活的数据结构变化</p><h1 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h1><p>散列表的核心考虑点是：散列函数、装载因子、扩容策略、散列冲突解决方案</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><h2 id="在你熟悉的编程语言中，哪些数据类型底层是基于散列表实现的？散列函数是如何设计的？散列冲突是通过哪种方法解决的？是否支持动态扩容呢？"><a href="#在你熟悉的编程语言中，哪些数据类型底层是基于散列表实现的？散列函数是如何设计的？散列冲突是通过哪种方法解决的？是否支持动态扩容呢？" class="headerlink" title="在你熟悉的编程语言中，哪些数据类型底层是基于散列表实现的？散列函数是如何设计的？散列冲突是通过哪种方法解决的？是否支持动态扩容呢？"></a>在你熟悉的编程语言中，哪些数据类型底层是基于散列表实现的？散列函数是如何设计的？散列冲突是通过哪种方法解决的？是否支持动态扩容呢？</h2><p>来自通义千问：</p><blockquote><p>在 JavaScript 中，虽然没有直接提供名为“散列表”或“哈希表”的内置数据类型，但 JavaScript 的对象（Object）类型在底层可以看作是一个散列表的实现。</p><p>JavaScript 的对象允许你通过键（key）来存储和检索值（value），这些键通常是字符串类型，但也可能包括 Symbols。当你使用点记法或方括号记法给对象添加属性时，JavaScript 引擎实际上是在执行一个散列查找过程，将属性名转换成一个散列码（即哈希值），然后使用这个散列码来决定值在对象内部的存储位置。这意味着你可以近乎 O(1)的时间复杂度来插入、更新和查找对象的属性，这正是散列表数据结构的核心特性之一。</p><p>let obj &#x3D; {};<br>obj[‘name’] &#x3D; ‘Alice’; &#x2F;&#x2F; 这里，’name’ 就是一个键，’Alice’ 是对应的值</p><p>在这个例子中，<code>obj</code> 类似于一个散列表，其中 <code>&#39;name&#39;</code> 被散列并映射到其对应的值 <code>&#39;Alice&#39;</code>。由于这种键值对的存储方式以及对键进行快速访问的能力，JavaScript 的对象可以被视作是散列表的应用实例。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>18、散列表（上）</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/18%E3%80%81%E6%95%A3%E5%88%97%E8%A1%A8%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/18%E3%80%81%E6%95%A3%E5%88%97%E8%A1%A8%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>思考：Word 文档中的单词拼写检查功能是如何实现的？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>散列表的英文叫“Hash Table”，我们平时也叫它“哈希表”或者“Hash 表”。<br>散列表是基于数组的随机访问特性，本质是数组的一种扩展。<br>举例说明：</p><blockquote><p>假设有 100 人参加运动会，参赛编号为：年级+班级+号码(1 到 100)，比如 05(5 年级)03(3 班)06(号码)，那如何实现通过参赛编号快速找到选手信息？</p></blockquote><p>可以用数组存选手信息，参赛编号截取出后两位的【号码】，就【号码】为 1 的放入数组下标为 1 中，那参赛编号中【号码】为 k 的放入数组下标为 k 中。<br>这样就直接通过参赛编号的【号码】，对应取数组下标得到选手信息，并且时间复杂度为 O(1)，很高效。</p><p>上述的关键信息有：【号码】我们叫做<strong>键(key)<strong>，将【号码】转为数组下标的过程称为</strong>散列函数(hash 函数)<strong>，将散列函数计算出的值叫做</strong>散列值(hash 值)</strong><br><img src="/img/images/2024/1709265622599-67791443-466c-4617-b102-8312066a1b54.png"></p><p>总结：散列表就是将某个值通过散列函数转为数组下标，然后再将数据存储到数组对应下标中。这样取值时，就可通过散列函数将某个值转为数组下标，直接去数组[下标]对应数据</p><h2 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h2><p>作用就是将传入的值转为数组下标<br>上述运动会例子中的散列函数如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hash</span>(<span class="hljs-params">key</span>) &#123;<br>  <span class="hljs-comment">// 截取后两位</span><br>  <span class="hljs-keyword">const</span> number =  key.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">2</span>)<br><br>  <span class="hljs-comment">// 转为数字类型</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Number</span>(number)<br>&#125;<br></code></pre></td></tr></table></figure><p>设计散列函数的要点：</p><ol><li>返回值要为非负整数</li><li>相同 key，返回值必相同，即：key1 &#x3D; key2，hash(key1) &#x3D; hash(key2)</li><li>不同 key，返回值必不同，即：key1 ≠ key2，hash(key1) ≠ hash(key2)</li></ol><p>第 1、2 两点很好理解<br>第 3 点，看起来很合理，但实际中很难避免，很可能出现不同 key，返回相同的值，即<strong>散列冲突</strong><br>比如正常的 hash 生成，都可能出现不同 key 生成相同的 hash 值，这也就是 hash 冲突。<br>基于抽屉原理：当输入空间大小远大于输出空间时，不同的输入产生相同输出的情况不可避免。</p><h2 id="那如何解决散列冲突呢？"><a href="#那如何解决散列冲突呢？" class="headerlink" title="那如何解决散列冲突呢？"></a>那如何解决散列冲突呢？</h2><h3 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h3><p>核心思想：如果出现了散列冲突，我们就重新探测一个空闲位置，将其插入。那如何重新探测新的位置呢？</p><h4 id="探测法之线性探测"><a href="#探测法之线性探测" class="headerlink" title="探测法之线性探测"></a>探测法之线性探测</h4><p>核心思想：生成的散列值，对应的数组内有值后，则往后找空的然后存入，若找到尾部都没空，则从头开始找，找到空的存入，否则存入失败。<br><img src="/img/images/2024/1709266888327-fd75f27a-851f-474f-8a7e-81e5e10b8639.png"><br>橙色代表有值，黄色代表无值<br>数据为 x，生成的散列值为 7，但发现数组[7]有值了，则往后找，发现都有值，则从头找，找到了数组[2]无值，则存入 x。</p><p>取值时，生成的散列值为 7，取数组[7]的值跟 x 对比下，一致则返回，不一致则往后找分别取值与 x 对比，到尾部了还未找到，则从头找，找到了数组[2]的值等于 x，最终返回 x，如果遍历到空值了还未找到，则说明不在数组<br><img src="/img/images/2024/1709267205235-3e8e32bb-21b5-4f31-9394-e0077dfb8d7b.png"><br>缺点：数据越多，探测耗时越长，最坏为 O(n)</p><h4 id="探测法之二次探测"><a href="#探测法之二次探测" class="headerlink" title="探测法之二次探测"></a>探测法之二次探测</h4><p>类似于线性探测，只是探测颗粒度改为二次方：hash(key)+0、hash(key)+1^2、、hash(key)+2^2……</p><h4 id="探测法之双重散列"><a href="#探测法之双重散列" class="headerlink" title="探测法之双重散列"></a>探测法之双重散列</h4><p>使用一组散列函数：hash1(key)、hash2(key)、hash3(key)……<br>当 hash1(key) 出现冲突后，再使用 hash2(key)，依次直到找到不冲突的散列值</p><p>散列表的空位，一般用<strong>装载因子</strong>表示，计算方式为：已填入数据 &#x2F; 散列表长度<br><strong>装载因子</strong>越大，则空位越少，散列冲突就会越多</p><h3 id="链表法"><a href="#链表法" class="headerlink" title="链表法"></a>链表法</h3><p>更常用的方法。<br>将产生冲突的散列表值更改为链表形式(桶或槽)，然后依次存入散列值相同的元素值<br><img src="/img/images/2024/1709267860066-b04d74bf-20f0-4724-9a0d-337915f11ee7.png"></p><p>取值时，则遍历链表找到对应的值</p><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>思考：Word 文档中的单词拼写检查功能是如何实现的？</p><p>解答：将所有单词经过散列函数存入散列表中，然后用户输入的单词也经过散列函数生成散列值，去散列表[散列值]取值，如果没取到则单词可能有误，否则单词正确。<br>这种算法，取值时间复杂度为 O(1)，十分高效。</p><h1 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h1><p>散列表白话：基于数组结构，将要存入的值经过转换生成唯一的非负整数，把非负整数作为数组下标，然后将数据存入到数组中。<br>散列表官方：基于数组结构，将 key 经过散列函数转为散列值，把散列值作为数组下标，然后将数据存入到数组中。</p><p>核心思想：生成一个与数组下标一一对应的值</p><p>散列冲突：不同 key 生成的散列值一样了，导致冲突<br>解决散列冲突：开放寻址法：找有空的然后存入、链表法：将冲突的转为链表然后存入</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><h2 id="假设我们有-10-万条-URL-访问日志，如何按照访问次数给-URL-排序？"><a href="#假设我们有-10-万条-URL-访问日志，如何按照访问次数给-URL-排序？" class="headerlink" title="假设我们有 10 万条 URL 访问日志，如何按照访问次数给 URL 排序？"></a>假设我们有 10 万条 URL 访问日志，如何按照访问次数给 URL 排序？</h2><p>1、先遍历十万条 URL，通过散列函数将 URL 转为散列值，将访问次数存入数组[散列值]中，本次操作时间复杂度为 O(n)<br>2、若最大访问次数较小，则再使用桶排序来排序该散列表；若访问次数很大(&gt;10W)，则使用快速排序来排序该散列表</p><h2 id="有两个字符串数组，每个数组大约有-10-万条字符串，如何快速找出两个数组中相同的字符串？"><a href="#有两个字符串数组，每个数组大约有-10-万条字符串，如何快速找出两个数组中相同的字符串？" class="headerlink" title="有两个字符串数组，每个数组大约有 10 万条字符串，如何快速找出两个数组中相同的字符串？"></a>有两个字符串数组，每个数组大约有 10 万条字符串，如何快速找出两个数组中相同的字符串？</h2><p>1、遍历第一个字符串数组，将字符串作为 key，value 为任意值，形成散列表 A<br>2、遍历第二个字符串数组，将字符串作为 key，去散列表 A 中查找，找到了则表明是相同的，用新数组 R 存起来，直到遍历完毕后，数组 R 内就是这两个字符串数组相同的字符串</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>17、跳表</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/17%E3%80%81%E8%B7%B3%E8%A1%A8/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/17%E3%80%81%E8%B7%B3%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>思考：为什么 Redis 一定要用跳表来实现有序集合？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>跳表：为了实现“二分查找”而改造的链表结构称为“跳表”，给链表加上多级索引<br>普通链表，即使是顺序存储了数据，但是查找的话还是只能从头到尾，时间为 O(n)</p><h2 id="如何加上多级索引呢？"><a href="#如何加上多级索引呢？" class="headerlink" title="如何加上多级索引呢？"></a>如何加上多级索引呢？</h2><p>比如原始的链表如下：如果要找值为 16 的，则需要依次遍历，第 <strong>10</strong> 次时找到了。共遍历了 10 个节点<br><img src="/img/images/2024/1709262663546-fc13a23c-17d6-44f4-80d7-9756a30d3a35.png"></p><p>如果加上一级索引：基于原始链表，每间隔两个将其值作为索引，索引如下：<br><img src="/img/images/2024/1709262765166-e2b859dc-7c4c-48ed-b2ed-b1ff873c9356.png"><br>再次找 16，则先在一级索引遍历，遍历到值 13 后，发现后面值为 17，则通过 13 的 down 指针去原始链表找，发现 13 后面就是 16，则找到了。共遍历了 <strong>7</strong> 个节点</p><p>如果再加上一级索引：基于一级索引链表，每间隔两个将其值作为索引，索引如下：<br><img src="/img/images/2024/1709262984052-6a5c8324-397d-4339-a390-3f3f1f14794d.png"><br>再次找 16，则先在二级索引遍历，遍历到值 13 后，发现后面没了，则通过 13 的 down 指针去一级索引链表找，发现 13 后面就是 17，则再通过 13 的 down 指针去原始链表找，，发现 13 后面就是 16，则找到了。共遍历了 <strong>6</strong> 个节点</p><p>总结：可以发现增加索引后，查找效率更高了，若数据量更大，效率提升更明显。</p><p>比如：64 个结点的链表，找值为 62 的<br><img src="/img/images/2024/1709263132448-bfba19d2-e187-4867-8857-36fc641bb863.png"><br>原始链表找，需要遍历 <strong>62</strong> 个节点，加了 5 层索引后，只需要遍历 <strong>11</strong> 个节点。</p><p><strong>跳表：是链表加多级索引的结构</strong></p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>跳表的时间复杂度为 O(logn)，跟二分查找的一样，所以变相的实现了链表的二分查找~<br>但代价是消耗额外的内存空间存储索引，空间换时间~</p><p>所需的空间复杂度为 O(n+n&#x2F;2+n&#x2F;4+…+2&#x3D;n-2)，去掉常量则为 O(n)<br>但可以更改索引创建策略，比如改成每隔 3 个建索引，则变为 O(n&#x2F;3+n&#x2F;9+n&#x2F;27+…+9+3+1&#x3D;n&#x2F;2)，去掉常量还是为 O(n)，但比每隔 2 个的，减少了一半的索引存储空间。</p><h2 id="跳表支持动态插入与删除"><a href="#跳表支持动态插入与删除" class="headerlink" title="跳表支持动态插入与删除"></a>跳表支持动态插入与删除</h2><p>跳表的插入与删除时间复杂度为 O(logn)，原因如下：</p><blockquote><p>链表的插入只更改指针指向，所以插入的时间复杂度为 O(1)<br>但普通链表麻烦的是找到插入点，时间复杂度为 O(n)，最终整体时间复杂度为 O(n)</p><p>而跳表找到插入点的时间复杂度为 O(logn)，最终整体时间复杂度为 O(logn)，比普通链表高效多了(查找带来的高效)</p><p>删除也同样如此</p></blockquote><h2 id="动态更新索引"><a href="#动态更新索引" class="headerlink" title="动态更新索引"></a>动态更新索引</h2><p>当往链表不停插入节点时，需要及时更新索引，否则就会出现两个索引间的节点过多的情况，退化为单链表了<br><img src="/img/images/2024/1709264070292-638af717-ba99-4a35-9939-01e106b48051.png"></p><p>所以跳表通过随机函数来维护索引与原始链表大小的“平衡性”<br>比如，我插入了一个结点 6，随机函数生成了 2，则将这个节点 6 插入到 [1, 2] 级索引<br><img src="/img/images/2024/1709264324451-b2ac39e2-7132-4b9e-ad27-dc4299f91bac.png"><br>通用整理下：插入节点时，随机函数生成 K，则将该节点插入 [1, K] 级索引中<br>所以随机函数很重要，它那个一定程度上维持“平衡性”</p><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>思考：为什么 Redis 一定要用跳表来实现有序集合？</p><p>解答：跳表实现更简单；索引策略更灵活；</p><h1 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h1><p>跳表：以空间换时间的思想，通过构建多层索引来提高效率，时间复杂度为 O(logn)，类似于“二分查找”理念，支持动态插入、删除、查找等操作</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><h2 id="如果每三个或者五个结点提取一个结点作为上级索引，对应的在跳表中查询数据的时间复杂度是多少呢？"><a href="#如果每三个或者五个结点提取一个结点作为上级索引，对应的在跳表中查询数据的时间复杂度是多少呢？" class="headerlink" title="如果每三个或者五个结点提取一个结点作为上级索引，对应的在跳表中查询数据的时间复杂度是多少呢？"></a>如果每三个或者五个结点提取一个结点作为上级索引，对应的在跳表中查询数据的时间复杂度是多少呢？</h2><p> 还是 O(logn)<br>推导过程自己百度吧</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>09、队列</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/09%E3%80%81%E9%98%9F%E5%88%97/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/09%E3%80%81%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>思考：队列在线程池等有限资源池中的应用，比如线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理？各种处理策略又是如何实现的呢？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>队列定义：一种“操作受限”的线性表，支持队头出队，队尾入队，符合“先进先出、后进后出”的特性。</p><h2 id="用数组实现“队列”"><a href="#用数组实现“队列”" class="headerlink" title="用数组实现“队列”"></a>用数组实现“队列”</h2><p>缺点：有长度限制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">len</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(len)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">len</span> = len<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = <span class="hljs-number">0</span> <span class="hljs-comment">// 队头下标</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span> = <span class="hljs-number">0</span> <span class="hljs-comment">// 队尾下标</span><br>  &#125;<br><br>  <span class="hljs-comment">// 入队(队尾)</span><br>  <span class="hljs-title function_">push</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">len</span>) &#123;<br>      <span class="hljs-comment">// 队伍已满</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span>] = value<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span>++<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><br>  &#125;<br><br>  <span class="hljs-comment">// 出队(队头)</span><br>   <span class="hljs-title function_">pop</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 队伍已空</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    <span class="hljs-keyword">const</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>]<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>++<br><br>    <span class="hljs-keyword">return</span> value<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="用链表实现“队列”"><a href="#用链表实现“队列”" class="headerlink" title="用链表实现“队列”"></a>用链表实现“队列”</h2><p>优点：无限长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">next</span> = <span class="hljs-literal">null</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">head</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = <span class="hljs-literal">null</span> <span class="hljs-comment">// 队头指针</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span> = <span class="hljs-literal">null</span> <span class="hljs-comment">// 队尾指针</span><br>  &#125;<br><br>  <span class="hljs-comment">// 入队(队尾)</span><br>  <span class="hljs-title function_">enqueue</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">const</span> newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value);<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span>.<span class="hljs-property">next</span> = newNode<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tail</span> = newNode<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><br>  &#125;<br><br>  <span class="hljs-comment">// 出队(队头)</span><br>  <span class="hljs-title function_">dequeue</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> === <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 队伍已空</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    <span class="hljs-keyword">const</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">value</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">next</span><br><br>    <span class="hljs-keyword">return</span> value<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h2><p>正常队列是线性的，有头有尾。<br>循环队列指的是：当尾结束后，它下一个指向队头。<br><img src="/img/images/2024/1709030534778-8b3271f4-8c8b-4f50-8192-0b0483ab14b3.png"><img src="/img/images/2024/1709030538824-9c11ce34-00fc-4cee-94df-b73726da77e2.png"><br>队空判断：head &#x3D;&#x3D;&#x3D; tail<br>队满判断：(tail + 1) % len &#x3D; head</p><h2 id="队列应用"><a href="#队列应用" class="headerlink" title="队列应用"></a>队列应用</h2><h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><p>当队伍空时，出队阻塞，直到队伍有数据。当队伍满时，入队阻塞，直到队伍又空闲。</p><h3 id="并发队列"><a href="#并发队列" class="headerlink" title="并发队列"></a>并发队列</h3><p>在多个操作对队伍进行操作时，可以给入队、出队加锁，让同一时刻只允许入或出队操作</p><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>思考：队列在线程池等有限资源池中的应用，比如线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理？各种处理策略又是如何实现的呢？<br>一种非阻塞，直接拒绝请求；<br>一种阻塞，现将请求排队，等到空闲线程产生，取出给排队的请求使用。<br>使用大小有限的队列，并考虑请求队伍的阻塞</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><h2 id="还有哪些设计或实现是采用队列的？"><a href="#还有哪些设计或实现是采用队列的？" class="headerlink" title="还有哪些设计或实现是采用队列的？"></a>还有哪些设计或实现是采用队列的？</h2><p>JS 中的任务队列</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>08、栈</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/08%E3%80%81%E6%A0%88/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/08%E3%80%81%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<p>思考：如何实现浏览器的前进后退操作？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>栈定义：“操作受限”的线性表，只支持在一端(末尾)进行增加、删除操作，满足先进后出，后进先出的特性。<br>用数组实现“栈”，一个固定大小的“栈”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">len</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(len) <span class="hljs-comment">// 创建对应长度的数组</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">len</span> = len<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> = <span class="hljs-number">0</span> <span class="hljs-comment">// 当前数组的元素数量</span><br>  &#125;<br><br>  <span class="hljs-comment">// 入栈</span><br>  <span class="hljs-title function_">push</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">len</span>) &#123;<br>      <span class="hljs-comment">// 满了，入栈失败</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>] = value<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br><br>  <span class="hljs-comment">// 出栈</span><br>  <span class="hljs-title function_">pop</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 栈已空，出栈失败</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">array</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> - <span class="hljs-number">1</span>]<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>--<br><br>    <span class="hljs-keyword">return</span> value<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度为 O(1)<br>空间复杂度为 O(1)，虽然存储了大小为 n 的数组，但这是必须的，而空间复杂度指的是算法运行中额外需要的存储空间</p><h2 id="栈在函数调用中的应用"><a href="#栈在函数调用中的应用" class="headerlink" title="栈在函数调用中的应用"></a>栈在函数调用中的应用</h2><p>操作系统会给每个线程分配内存空间，这块内存被组织为“栈”结构，用来存储函数调用时的临时变量。<br>进入函数，将临时变量入栈，执行完毕，将临时变量出栈。<br>举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">let</span> ret = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span><br>  ret = <span class="hljs-title function_">add</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>  res = a + ret<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span><br>  sum = x + y<br>  <span class="hljs-keyword">return</span> sum<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的栈结构如下：<br><img src="/img/images/2024/1709026069405-8b69ccba-a093-4d6d-9719-c392b578ec4a.jpeg"></p><h2 id="栈在表达式求职中的应用"><a href="#栈在表达式求职中的应用" class="headerlink" title="栈在表达式求职中的应用"></a>栈在表达式求职中的应用</h2><p>对于<code>3+5*8-6</code>表达式，人脑很快就能算出来，但编辑器是如何实现的呢？<br>首先这中表达式它能够理解到就已经是比较难的事了，那又该如何实现计算的呢？<br>采用两个栈，一个用于存储数据(A)、一个用于存储运算符(B)<br>当遇到数字，入栈 A；当遇到运算符，先与上一个运算符比较，如果当前的优先级高则入栈 B，否则先取出运算符，然后从 A 取出 2 个数据，进行计算，把结果入栈 A，然后又再比较。<br><img src="/img/images/2024/1709027713393-6b2c38e4-754f-43ea-bc7c-da49933bc3d3.jpeg"></p><h2 id="栈在括号匹配中的应用"><a href="#栈在括号匹配中的应用" class="headerlink" title="栈在括号匹配中的应用"></a>栈在括号匹配中的应用</h2><p>比如，{[] ()[{}]}或[{()}([])]等都为合法格式，而{[}()]或[({)]为不合法的格式。<br>那给你一个包含三种括号的表达式字符串，如何检查它是否合法呢？<br>思路：使用栈来存储左括号。<br>从左到右扫描字符串，若为左括号则入栈<br>若为右括号则取出顶层左括号，若未匹配则格式非法，若匹配则继续扫描<br>最后若栈为空则格式合法，否则格式非法。</p><h2 id="解答开篇"><a href="#解答开篇" class="headerlink" title="解答开篇"></a>解答开篇</h2><p>如何实现浏览器的前进后退操作？<br>使用两个栈 X、Y，当首次浏览了页面时，入栈 X。<br>当点后退时，出栈 X，并将其入栈 Y。<br>当点前进时，出栈 Y，并将其入栈 X。</p><p>举例：一开始浏览了 a、b、c<br>则 X 为：[a, b, c]，Y 为[]<br>点击后退到 a 时，X 为[a]，Y 为[c, b]<br>此时再点一次前进，则进入 b 页面，其中 X 为[a, b]，Y 为[c]<br>若此时跳转到了 d 页面，则 X [a, b, d]，Y 清空变为[]，也就无法前进&#x2F;后退到 c 页面了</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><h2 id="为什么函数调用要用“栈”来保存临时变量呢？用其他数据结构不行吗？"><a href="#为什么函数调用要用“栈”来保存临时变量呢？用其他数据结构不行吗？" class="headerlink" title="为什么函数调用要用“栈”来保存临时变量呢？用其他数据结构不行吗？"></a>为什么函数调用要用“栈”来保存临时变量呢？用其他数据结构不行吗？</h2><p><strong>以下答案来自通义千问</strong><br>函数调用时使用栈来保存临时变量主要是因为栈具有以下几个优点：</p><ol><li>快速访问：栈是一种线性数据结构，它的主要特点是后进先出（LIFO），这意味着最先进入的数据最后被取出。由于栈的操作只在栈顶进行，所以访问速度非常快。</li><li>简单高效：栈的插入和删除操作（push 和 pop）只需要 O(1)的时间复杂度，效率非常高。这对于频繁进行函数调用的程序来说是非常重要的。</li><li>自动管理：栈是由操作系统自动管理的内存区域，它会自动为函数调用分配和释放内存，无需程序员手动管理。这大大简化了编程工作。</li><li>有限的空间：栈的大小是有限制的，通常由操作系统或编译器设定。如果使用其他数据结构，如链表或数组，可能会导致内存浪费或者溢出的问题。</li><li>递归调用：栈非常适合处理递归调用的情况。每次函数调用都会在栈上创建一个新的栈帧，这样就可以保证每个函数调用都有自己的局部变量空间，不会互相干扰。</li></ol><p>虽然栈有一些限制，比如大小固定、不能动态扩展等，但是对于大多数函数调用场景来说，栈仍然是最优的选择。</p><h2 id="JS-中有“堆栈”的概念。跟上面说的“栈”是不是一回事呢？如果不是，那它为什么又叫作“栈”呢？"><a href="#JS-中有“堆栈”的概念。跟上面说的“栈”是不是一回事呢？如果不是，那它为什么又叫作“栈”呢？" class="headerlink" title="JS 中有“堆栈”的概念。跟上面说的“栈”是不是一回事呢？如果不是，那它为什么又叫作“栈”呢？"></a>JS 中有“堆栈”的概念。跟上面说的“栈”是不是一回事呢？如果不是，那它为什么又叫作“栈”呢？</h2><p>JS 中：栈内存用来存储变量，堆内存用来存储对象地址。<br><strong>不是一回事</strong><br>内存中的“堆栈”是真实存在的物理区，而数据结构“堆栈”只是逻辑上的抽象。<br>在 JS 中内存可分为两种：代码区、动态数据区<br>代码区：存储编译后的字节码或可执行的指令<br>动态数据区：又分为栈、堆。栈存储基本类型的变量以及复杂类型的地址；堆存储复杂类型数据。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>07、链表（下）</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/07%E3%80%81%E9%93%BE%E8%A1%A8%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/07%E3%80%81%E9%93%BE%E8%A1%A8%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>如何轻松写出正确的链表代码？比如链表反转、有序链表合并等操作代码</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><h2 id="理解指针"><a href="#理解指针" class="headerlink" title="理解指针"></a>理解指针</h2><p>指针：存储所指对象的内存地址<br>举例：<code>p -&gt; next = q</code><br>意思：p 结点的 next 指针存储了 q 结点的内存地址</p><h2 id="指针丢失"><a href="#指针丢失" class="headerlink" title="指针丢失"></a>指针丢失</h2><p>什么是指针丢失？指着指着指针的值就不正确了，导致链表结构断裂<br>举例链表插入操作：在 a、b 之间插入 x，p 指向 a</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">p.<span class="hljs-property">next</span> = x<br>x.<span class="hljs-property">next</span> = p.<span class="hljs-property">next</span> <span class="hljs-comment">// 这行代码导致 x.next 指向了自己，链表断裂，“指针丢失”</span><br></code></pre></td></tr></table></figure><h2 id="边界问题"><a href="#边界问题" class="headerlink" title="边界问题"></a>边界问题</h2><p>经常要考虑的边界问题有：</p><ol><li>链表为空，代码是否正常运行？</li><li>链表只有一个结点，代码是否正常运行？</li><li>链表只有两个结点，代码是否正常运行？</li><li>链表在处理头和尾巴时，代码是否正常运行？</li></ol><h2 id="举例与画图"><a href="#举例与画图" class="headerlink" title="举例与画图"></a>举例与画图</h2><p>针对复杂的链表操作，可以通过据实际列子与画图来理清楚思路<br><img src="/img/images/2024/1709005500510-51c427e5-c057-4323-bc6e-aaf16706c633.png"></p><h2 id="多写多练"><a href="#多写多练" class="headerlink" title="多写多练"></a>多写多练</h2><p><strong>写链表代码是最考验逻辑思维能力的</strong>。<br>因为，链表代码到处都是指针的操作、边界条件的处理，稍有不慎就容易产生 Bug。<br>链表代码写得好坏，可以看出一个人写代码是否够细心，考虑问题是否全面，思维是否缜密。<br>所以，这也是很多面试官喜欢让人手写链表代码的原因。</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><h2 id="单链表反转"><a href="#单链表反转" class="headerlink" title="单链表反转"></a>单链表反转</h2><p>举例：<br>正序<code>head-&gt;[a|next]-&gt;[b|next]-&gt;[c|next]-&gt;[d|next]-&gt;null</code><br>反转<code>head-&gt;[d|next]-&gt;[c|next]-&gt;[b|next]-&gt;[a|next]-&gt;null</code></p><p>实现思路：</p><ul><li>链表只能从头到尾的查找，所以从 head 循环找到每一个</li><li>链表之间的关联是靠<code>next</code>，所以每次要暂存下<code>next</code>，免得中断了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reserve</span>(<span class="hljs-params">ListNode</span>) &#123;<br>  <span class="hljs-keyword">if</span>(!<span class="hljs-title class_">ListNode</span> || !<span class="hljs-title class_">ListNode</span>.<span class="hljs-property">head</span>) &#123;<br>    <span class="hljs-comment">// 空链表</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">ListNode</span><br>  &#125;<br><br>  <span class="hljs-keyword">if</span>(<span class="hljs-title class_">ListNode</span>.<span class="hljs-property">head</span>.<span class="hljs-property">next</span> === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 只有一个结点的链表</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">ListNode</span><br>  &#125;<br><br>  <span class="hljs-keyword">let</span> prev = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">let</span> curr = <span class="hljs-title class_">ListNode</span>.<span class="hljs-property">head</span><br>  <span class="hljs-keyword">let</span> next = curr.<span class="hljs-property">next</span><br><br>  <span class="hljs-keyword">while</span>(curr) &#123;<br>    curr.<span class="hljs-property">next</span> = prev<br>    prev = curr<br>    curr = next<br>    next = curr?.<span class="hljs-property">next</span><br>  &#125;<br><br>  <span class="hljs-title class_">ListNode</span>.<span class="hljs-property">head</span> = prve<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链表中环的检测"><a href="#链表中环的检测" class="headerlink" title="链表中环的检测"></a>链表中环的检测</h2><p>检测：链表中是否存在某个节点的下一个节点是链表中前面某个节点的情况。<br>举例：<br>有环<code>head-&gt;[a|next]-&gt;[b|next]-&gt;[c|next]-&gt;[d|next]-&gt;[a|next]</code><br>思路：</p><ul><li>快慢指针法：慢走一格，快走两格，有环则快会追上慢，无环则快指为 null</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isCricle</span>(<span class="hljs-params">head</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!head || !head.<span class="hljs-property">next</span>) &#123;<br>    <span class="hljs-comment">// 链表为空或只有一个节点时，不可能存在环</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> slow = head <span class="hljs-comment">// 第一个</span><br>  <span class="hljs-keyword">let</span> fast = head.<span class="hljs-property">next</span> <span class="hljs-comment">// 第二个</span><br><br>  <span class="hljs-keyword">while</span>(fast !== <span class="hljs-literal">null</span> &amp;&amp; fast.<span class="hljs-property">next</span> !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span>(slow === fast) &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    fast = fast.<span class="hljs-property">next</span>.<span class="hljs-property">next</span><br>    slow = slow.<span class="hljs-property">next</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="两个有序的链表合并"><a href="#两个有序的链表合并" class="headerlink" title="两个有序的链表合并"></a>两个有序的链表合并</h2><p>举例：<br>链 表1: 1 -&gt; 3 -&gt; 5 -&gt; null<br> 链表2: 2 -&gt; 4 -&gt; 6 -&gt; 7 -&gt; null<br>合并后的新链表为：1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hebing</span>(<span class="hljs-params">head1, head2</span>) &#123;<br>  <span class="hljs-keyword">let</span> curr1 = head1<br>  <span class="hljs-keyword">let</span> curr2 = head2<br><br>  <span class="hljs-keyword">let</span> curr3 = newListNode.<span class="hljs-property">head</span><br><br>  <span class="hljs-keyword">while</span>(curr1 &amp;&amp; curr2) &#123;<br>    <span class="hljs-keyword">if</span>(curr1.<span class="hljs-property">value</span> &lt;= curr2.<span class="hljs-property">value</span>) &#123;<br>      curr3.<span class="hljs-property">next</span> = curr1<br>      curr1 = curr1.<span class="hljs-property">next</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      curr3.<span class="hljs-property">next</span> = curr2<br>      curr2 = curr2.<span class="hljs-property">next</span><br>    &#125;<br>    curr3 = curr3.<span class="hljs-property">next</span>; <span class="hljs-comment">// 移动curr3到下一个节点位置</span><br>  &#125;<br><br>  <span class="hljs-keyword">if</span>(curr1) curr3.<span class="hljs-property">next</span> = curr1.<span class="hljs-property">next</span><br>  <span class="hljs-keyword">else</span> curr3.<span class="hljs-property">next</span> = curr2.<span class="hljs-property">next</span><br><br>  <span class="hljs-keyword">return</span> curr3.<span class="hljs-property">head</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除链表倒数第-n-个结点"><a href="#删除链表倒数第-n-个结点" class="headerlink" title="删除链表倒数第 n 个结点"></a>删除链表倒数第 n 个结点</h2><p>举例：<br>链表: 1 -&gt; 3 -&gt; 5 -&gt; 7 -&gt; null，删除倒数第 2 个后变为 1 -&gt; 3 -&gt; 7 -&gt; null<br>思路：找到倒数 n + 1，改变它的 next 指向 n - 1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取链表的总长度</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getLen</span>(<span class="hljs-params">head</span>) &#123;<br>  <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span><br><br>  <span class="hljs-keyword">if</span>(!head) <span class="hljs-keyword">return</span> i<br><br>  <span class="hljs-keyword">let</span> next = head.<span class="hljs-property">next</span><br>  <span class="hljs-keyword">while</span>(next) &#123;<br>    i++<br>    next = next.<span class="hljs-property">next</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> i<br>&#125;<br><br><span class="hljs-comment">// 删除正数第 n 个</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteByNum</span>(<span class="hljs-params">head, num</span>) &#123;<br>  <span class="hljs-keyword">let</span> prev = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">let</span> curr = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">let</span> next = <span class="hljs-literal">null</span><br><br>  <span class="hljs-comment">// 找到正数第 n 个</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>    prev = curr<br>    curr = head.<span class="hljs-property">next</span><br>    next = curr.<span class="hljs-property">next</span><br>  &#125;<br><br>  prev.<span class="hljs-property">next</span> = next<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">head, num</span>)&#123;<br>  <span class="hljs-keyword">const</span> len = <span class="hljs-title function_">getLen</span>(len)<br>  <span class="hljs-keyword">if</span>(len) <span class="hljs-title function_">deleteByNum</span>(head, len - num)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="求链表的中间结点"><a href="#求链表的中间结点" class="headerlink" title="求链表的中间结点"></a>求链表的中间结点</h2><p>通过快慢两个指针，慢每次跳一个，快每次跳两个，当快走完时，慢刚好就在中间<br>若链表长度为偶数，则有两个中心点，慢刚好指向[中心点 2]<br>若链表长度为奇数，则有一个中心点，慢刚好指向[中心点]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getCenter</span>(<span class="hljs-params">head</span>) &#123;<br>  <span class="hljs-keyword">if</span>(!head &amp;&amp; !head.<span class="hljs-property">next</span>) <span class="hljs-keyword">return</span> head<br><br>  <span class="hljs-keyword">let</span> fast = head<br>  <span class="hljs-keyword">let</span> slow = head<br>  <span class="hljs-keyword">let</span> prev = <span class="hljs-literal">null</span><br><br>  <span class="hljs-keyword">while</span>(fast &amp;&amp; fast.<span class="hljs-property">next</span>)&#123;<br>    fast = fast.<span class="hljs-property">next</span>.<span class="hljs-property">next</span><br>    prev = slow<br>    slow = slow.<span class="hljs-property">next</span><br>  &#125;<br><br>  <span class="hljs-keyword">if</span>(fast === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 表明 链表长度为偶数，则中心点有两个</span><br>    <span class="hljs-keyword">return</span> [prev, slow]<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> slow<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>06、链表（上）</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06%E3%80%81%E9%93%BE%E8%A1%A8%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/06%E3%80%81%E9%93%BE%E8%A1%A8%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>思考：使用链表如何实现 LRU 缓存淘汰算法?</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>缓存：一种提高数据读取性能的技术，各领域广泛运用：浏览器缓存、CPU 缓存、数据库缓存。</p><p>当缓存空间不够时，会采用缓存淘汰策略来清除一些数据。常用的缓存淘汰策略为：<br>先进先出策略 FIFO(First In First Out)、最少使用策略 LFU(Last Frequently Used)、最近最少使用策略 LRU(Last Recently Used)</p><p>链表可通过“指针”将零散的内存块串起来。<br>链表的插入、删除操作为 O(1)；查询操作为 O(n)</p><p>常见的链表结构如下：<br><img src="/img/images/2024/1708958627797-3648591e-6312-42a6-b8fe-d3feb660e6cd.png"><br><img src="/img/images/2024/1708958785195-359a976f-b62a-4b18-9d50-8cf5b51a92e6.png"><br><img src="/img/images/2024/1708958748908-a7998eaa-3fcb-4752-ac30-ae07b308e7d0.png"><br><img src="/img/images/2024/1708959476446-068cdeab-4b8a-456b-91e0-17ac0f5bd9d4.png"></p><p>空间换时间：当内存空间充足时，则可以使用空间复杂度高、时间复杂度底的算法或数据结构来提升代码的执行速度；反之亦然。</p><p>而缓存就是“空间换时间”的运用，正常情况下数据存储在硬盘中占用空间小，但每次查找都要访问一次硬盘，比较耗时；所以就将数据存储在内存中，虽然占用了内存空间，但每次数据查询速度就很快。</p><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>思考：使用链表如何实现 LRU(最近最少使用策略) 缓存淘汰算法?</p><p>思路：</p><ul><li>维护一个有序的单链表结构，越后面是越早访问的数据。</li><li>插入一个新数据时，有以下情况：<ul><li>若已在链表中，则找到它原来的位置删除掉，然后再最前面添加它</li><li>若不在链表中，则又分为两种情况：<ul><li>缓存已满：删除最末尾的，再将其添加到最前面</li><li>缓存未满：直接将其添加到最前面</li></ul></li></ul></li></ul><p>由于链表的查找始终都需要遍历一遍的，所以缓存访问的时间复杂度为 O(n)</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><h2 id="如何利用数组实现-LRU-缓存淘汰策略呢？"><a href="#如何利用数组实现-LRU-缓存淘汰策略呢？" class="headerlink" title="如何利用数组实现 LRU 缓存淘汰策略呢？"></a>如何利用数组实现 LRU 缓存淘汰策略呢？</h2><p>思路还是类似的：</p><ul><li>维护一个数组，越后面是越早访问的数据。</li><li>插入一个新数据时，有以下情况：<ul><li>若已在数组中，则找到它原来的位置删除掉(后面的往前移一位)，然后再最前面添加它</li><li>若不在数组中，则又分为两种情况：<ul><li>缓存已满：删除最末尾的，再将其添加到最前面</li><li>缓存未满：直接将其添加到最前面</li></ul></li></ul></li></ul><h2 id="如何判断一个字符串是否是回文字符串？"><a href="#如何判断一个字符串是否是回文字符串？" class="headerlink" title="如何判断一个字符串是否是回文字符串？"></a>如何判断一个字符串是否是回文字符串？</h2><p>回文字符串：从左往右和从右往左读都是一样的，比如 “level”、“racecar”和“12321”<br>核心思路：找到中心位置 n，n-1 与 n+1  位置上的字符串始终相等</p><p>如果字符串是采用单链表结构，那又该如何判断呢？<br>思路： 采用快慢两个指针，快指针每次跳两个，慢指针每次跳一个，找到中心点，在找的过程中将前半段反序。<br>当找到中心点后，慢指针指向的是[单数字符串的中心点]（单数只有一个中心点）或[双数字符串的中心点 2]（双数有两个中心点）<br>然后再分别向后对比[前半段反序字符串]与[后半段正序字符串]中的每一个是否相等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 伪代码演示</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">ListNode</span>) &#123;<br>  <span class="hljs-keyword">let</span> fast = <span class="hljs-title class_">ListNode</span>.<span class="hljs-property">head</span><br>  <span class="hljs-keyword">let</span> slow = <span class="hljs-title class_">ListNode</span>.<span class="hljs-property">head</span><br>  <span class="hljs-keyword">let</span> prev = <span class="hljs-literal">null</span><br><br>  <span class="hljs-comment">// 找中心点+前半段反序</span><br>  <span class="hljs-keyword">while</span>(fast &amp;&amp; fast.<span class="hljs-property">next</span>) &#123;<br>    fast = fast.<span class="hljs-property">next</span>.<span class="hljs-property">next</span> <span class="hljs-comment">// 快指针跳两个</span><br>    <span class="hljs-keyword">const</span> next = slow.<span class="hljs-property">next</span> <span class="hljs-comment">// 慢指针下一个指向的，暂存下</span><br><br>    <span class="hljs-comment">// 反序操作</span><br>    <span class="hljs-comment">// 第一次时，head 的 next 指向 null 了</span><br>    <span class="hljs-comment">// 第二次时，第二个字符串的 next 指向第一个</span><br>    <span class="hljs-comment">// .....以此类推实现反序</span><br>    slow.<span class="hljs-property">next</span> = prev<br>    prev = slow <span class="hljs-comment">// 暂存反序的下一个</span><br><br>    slow = next <span class="hljs-comment">// 慢指针跳一个</span><br>  &#125;<br><br>  <span class="hljs-comment">// 当上述 while 指向完毕时，prev 指向反序字符串的 head</span><br>  <span class="hljs-comment">// slow、fast 可能的情况如下：</span><br>  <span class="hljs-comment">// str1: goog, fast -&gt; null, slow -&gt; o(中心点2), prev -&gt; o(中心点1)</span><br>  <span class="hljs-comment">// str2: adbhfhbda, fast -&gt; a(最后一个), slow -&gt; f(中心点), prev -&gt; h(中心点前一个)</span><br>  <span class="hljs-comment">// 可以发现字符串的奇偶决定了 slow 的位置</span><br><br>  <span class="hljs-comment">// 现在构建了一个前半段反序的字符串链表，prev 指向该字符串的 head</span><br>  <span class="hljs-comment">// 然后还有个后半段正序的字符串链表，slow 指向该字符串的 head 或 head 前一个</span><br><br>  <span class="hljs-keyword">if</span>(fast) &#123;<br>    <span class="hljs-comment">// 当 fast 还有值(字符串为奇数时)</span><br>    <span class="hljs-comment">// 则主动将 slow 后移一位用于指向[后半段正序]的 head</span><br>    slow = slow.<span class="hljs-property">netx</span><br>  &#125;<br><br>  <span class="hljs-comment">// [前半段反序字符串]与[后半段正序字符串]中的每一个是否相等</span><br>  <span class="hljs-keyword">while</span>(slow) &#123;<br>    <span class="hljs-keyword">if</span>(slow.<span class="hljs-property">value</span> !== prev.<span class="hljs-property">value</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br><br>    slow = slow.<span class="hljs-property">next</span> <span class="hljs-comment">// [后半段正序字符串]后移一位</span><br>    prev = prev.<span class="hljs-property">next</span> <span class="hljs-comment">// [前半段反序字符串]后移一位</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05、数组</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05%E3%80%81%E6%95%B0%E7%BB%84/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/05%E3%80%81%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p>思考：为什么很多编程语言中数组都是从 0 开始编号？</p><h1 id="什么是数组？"><a href="#什么是数组？" class="headerlink" title="什么是数组？"></a>什么是数组？</h1><p>一种线性表数据结构，用一组连续的内存空间存储一组相同类型的数据。<br><strong>线性表？</strong><br>线性表：数据排成像一条线一样的结构。数据只有前、向两个方向。<br>常见的有：数组、链表、队列、栈等<br><img src="/img/images/2024/1708954411769-952f209a-4132-4c38-8467-0711822485d4.png"><br><strong>非线性表？</strong><br>数据关系不是简单的前后了。<br>常见的有：图、二叉树等<br><img src="/img/images/2024/1708954461453-98097bb7-4560-4279-84ae-f8ac882b9a6d.png"><br><strong>连续内存空间和相同类型？</strong><br>存储的必须是空间是紧挨着的，并且每个元素的类型一样。<br>如果申请 10M 大小的数组，如果内存中没有连续的则申请失败，就算剩余空间大于 10 M<br>这也是数组能通过任意下标直接访问数组元素的原因。但同样也限制了数组的增删改查，使其操作更低效。</p><p>举例：下标随机访问的逻辑<br><img src="/img/images/2024/1708954987903-425958cc-8655-455b-90e2-e780874edfe8.png"><br>寻址公式：a[i]_address &#x3D; base_address + i * data_type_size</p><p><strong>插入操作为什么低效？</strong><br>举例，数组长度为 n，若要在 k 插入一个数据，则为了保持连续性，则需要将 k~n 都往后移动一位。<br>若 k 为 1，则插入时间复杂度为 O(n )，若 k 为末尾，则不需要移动插入时间复杂度为 O(1)，平均时间复杂度为 O(n)&#x3D;(1+2+3…+n)&#x2F;n</p><p><strong>那如何高效的插入？</strong><br>若被插入的数据挪到末尾，空出位置，则插入的时间复杂度为 O(1)<br>比如：arr &#x3D; [a, d, c, d, e]，在 3 插入 f，则 arr[5] &#x3D; a[3]，a[3] &#x3D; f</p><p>同理删除操作也是如此，删除后为了连续性，需要后面的往前移动一位.</p><p>解答：<br>从寻址公式可以看出来：a[i]_address &#x3D; base_address + i * data_type_size<br>若开始下标为 0，a[0] 可以直接代表“偏移量”为 0<br>若开始下标为 1，a[0] 则代表“偏移量”为 1 - 1 的，寻址公式改为<code>**a[i]_address = base_address + (i-1) * data_type_size**</code><br>对比来说：会多一层计算，所以从 0 开始可以减少不必要的计算</p><p>从编程发展来说，C 语言用的是 0，其他语言效仿，慢慢大家变成从零开始</p><h1 id="数组与链表的区别"><a href="#数组与链表的区别" class="headerlink" title="数组与链表的区别"></a>数组与链表的区别</h1><p>数组要求的是连续的内存空间，而链表不要求。<br>数组适合随机下标访问，时间复杂度为 O(1)；而链表适合插入、删除，时间复杂度为 O(1)</p><h1 id="课后问题"><a href="#课后问题" class="headerlink" title="课后问题"></a>课后问题</h1><h2 id="二维数组的内存寻址公式是怎样的呢？"><a href="#二维数组的内存寻址公式是怎样的呢？" class="headerlink" title="二维数组的内存寻址公式是怎样的呢？"></a>二维数组的内存寻址公式是怎样的呢？</h2><p>对应 m <em>n 的二维数组<br>a[i][j]_address &#x3D; base_address + (i</em> n + j) * data_type_size</p><h1 id="额外补充"><a href="#额外补充" class="headerlink" title="额外补充"></a>额外补充</h1><h2 id="JS-的基础类型所占用内存大小"><a href="#JS-的基础类型所占用内存大小" class="headerlink" title="JS 的基础类型所占用内存大小"></a>JS 的基础类型所占用内存大小</h2><p>undefined：不占用内存<br>null：不占用内存<br>boolean：占 1 字节<br>string：一个字符占 2 字节<br>number：8 字节</p><p>JS 里面的数组特点：</p><ol><li>不需要限制相同类型；</li><li>可以动态扩容</li><li>越界不会报错，是返回 undefined</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>22、哈希算法（下）</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/22%E3%80%81%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/22%E3%80%81%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>思考：哈希算法在分布式系统中有哪些应用？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>继续哈希算法的应用场景</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>如何才能实现一个会话粘滞（session sticky）的负载均衡算法呢？<br>会话粘滞：同一个客户端上，在一次会话中的所有请求都路由到同一个服务器上。</p><p>简单粗暴的话，可以维护一个客户端 id 与 服务器编号的映射表，但维护需要成本并且还有考虑客户端上、下线的变动。</p><p>所以可以采用哈希算法，不需要去维护表，直接用哈希算法去计算，先求客户端 id 的哈希值，然后与服务器列表的大小取模运算，得到服务器编号。</p><h2 id="数据分片"><a href="#数据分片" class="headerlink" title="数据分片"></a>数据分片</h2><p>举案例说明：</p><h3 id="如何统计“搜索关键词”出现的次数？"><a href="#如何统计“搜索关键词”出现的次数？" class="headerlink" title="如何统计“搜索关键词”出现的次数？"></a>如何统计“搜索关键词”出现的次数？</h3><blockquote><p>假如有 1T 的日志文件，这里面记录了用户的搜索关键词，我们想要快速统计出每个关键词被搜索的次数，该怎么做呢？</p></blockquote><p>这个问题有两个难点，第一个是搜索日志很大，没办法放到一台机器的内存中。第二个难点是，如果只用一台机器来处理这么巨大的数据，处理时间会很长。</p><p>处理方向：先对数据进行分片，然后采用多台机器处理的方法，来提高处理速度。</p><p>详细思路：用 n 台机器并行处理提高处理速度。从搜索记录的日志文件中，依次读出每个搜索关键词，并且通过<strong>哈希函数计算哈希值</strong>，然后再跟 n 取模，最终得到的值，就是应该被分配到的机器编号。这样，哈希值相同的搜索关键词就被分配到了<strong>同一个机器</strong>上。<br>也就是说，同一个搜索关键词会被分配到同一个机器上。每个机器会分别计算关键词出现的次数，最后合并起来就是最终的结果。</p><h3 id="如何快速判断图片是否在图库中？"><a href="#如何快速判断图片是否在图库中？" class="headerlink" title="如何快速判断图片是否在图库中？"></a>如何快速判断图片是否在图库中？</h3><p>基于散列表：key 为图片信息的哈希值，vaule 为图片路径<br>然后对图片数据分片，准备 n 个机器。对每一个图片求哈希，再与 n 求余取模得到机器编号，然后将图片给该机器构建散列表。</p><p>判断时，同样获得图片哈希值，找到机器编号，然后再其中的散列表中查找。</p><p>给这 1 亿张图片构建散列表大约需要多少台机器？</p><blockquote><p>MD 5 求哈希值，长度为 128 比特，即 16 字节<br>图片路径最长为 256 字节，假设平均为 128 字节<br>用链表解决散列冲突，则散列表每个数据为 16(哈希) + 128(图片路径) + 8(指针) &#x3D; 152 字节</p><p>假设一台机器内存为 2GB，装载因子为 0.75，则可分配的空间为 2GB*0.75&#x3D;1.5GB<br>那可以存 1.5GB &#x2F; 1 52字节 约等于 1000W 张图片<br>那 1 亿张图片需要 10 台左右的机器</p></blockquote><h2 id="分布式存储"><a href="#分布式存储" class="headerlink" title="分布式存储"></a>分布式存储</h2><p>针对缓存机器，也可以通过先求数据的哈希值，然后求余取模获取缓存机器编号，最后存入数据。<br>当为了使用机器的增加，就要求**哈希算法保持一致性(一致性哈希算法)**。<br><a href="https://www.zsythink.net/archives/1182">白话解析：一致性哈希算法 consistent hashing</a></p><h1 id="解答思考-内容总结"><a href="#解答思考-内容总结" class="headerlink" title="解答思考 &amp;&amp; 内容总结"></a>解答思考 &amp;&amp; 内容总结</h1><p>在负载均衡应用中，利用哈希算法替代映射表，可以实现一个会话粘滞的负载均衡策略。<br>在数据分片应用中，通过哈希算法对处理的海量数据进行分片，多机分布式处理，可以突破单机资源的限制。<br>在分布式存储应用中，利用一致性哈希算法，可以解决缓存等分布式系统的扩容、缩容导致数据大量搬移的难题。</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><p>哈希算法还有很多其他的应用，比如网络协议中的 CRC 校验、Git commit id 等等。除了这些，你还能想到其他用到哈希算法的地方吗？</p>]]></content>
    
    
    <categories>
      
      <category>基本算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>基本算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>21、哈希算法（上）</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/21%E3%80%81%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/21%E3%80%81%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>思考：如何防止数据库中的用户信息被脱库？<br>还记得 2011 年 CSDN 的“脱库”事件吗？当时，CSDN 网站被黑客攻击，超过 600 万用户的注册邮箱和密码明文被泄露，很多网友对 CSDN 明文保存用户密码行为产生了不满。如果你是 CSDN 的一名工程师，你会如何存储用户密码这么重要的数据吗？仅仅 MD5 加密一下存储就够了吗？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>主要内容：讲述在实际的开发中，该如何用哈希算法解决问题。</p><h2 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h2><p>定义：将任意长度的二进制串映射为固定长度的二进制串的算法，称为哈希算法<br>哈希算法的要求：</p><ul><li>高效</li><li>不能通过哈希值退出原始值</li><li>哈希冲突小，不同原始值产生相同哈希值的概率要小</li><li>输入敏感，即使改了一个字符，生成的哈希值也要大不同</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">MD5</span>(<span class="hljs-string">&quot;今天我来讲哈希算法&quot;</span>) = bb4767201ad42c74e650c1b6c03d78fa<br><span class="hljs-title class_">MD5</span>(<span class="hljs-string">&quot;jiajia&quot;</span>) = cd611a31ea969b908932d44d126d195b<br><span class="hljs-title class_">MD5</span>(<span class="hljs-string">&quot;我今天讲哈希算法！&quot;</span>) = 425f0d5a917188d2c3c3dc85b5e4f2cb<br></code></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="安全加密"><a href="#安全加密" class="headerlink" title="安全加密"></a>安全加密</h3><p>最常用在加密。因为无法通过哈希值反推原始值，所以能做到加密效果。</p><h3 id="唯一标识"><a href="#唯一标识" class="headerlink" title="唯一标识"></a>唯一标识</h3><p>因为生成的哈希值，很难有重复的(冲突小)，所以可以作为唯一值使用</p><h3 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h3><p>对于大文件的分批下载，为了确保下载的东西是我们想要的并且未更改的，可以用哈希函数给每批文件求得哈希值，然后下载完毕后再对每批文件求哈希值，然后对比一下，一致则是安全的。<br>利用的是哈希 [输入敏感，即使改了一个字符，生成的哈希值也要大不同] 的特性</p><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>思考：如何防止数据库中的用户信息被脱库？<br>解答：</p><ol><li>先选择更安全的哈希算法，比如 SHA 等</li><li>再引入“盐(salt)”，跟用户密码组合，增加密码负责度</li><li>最后用哈希函数加密组合后的密码</li></ol><h1 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h1><p>讲了哈希的使用场景，安全加密、唯一标识、数据校验，其实就利用的哈希算法的特性</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><h2 id="最近很火的区块链，底层运用了哈希算法，那你能讲一讲区块链使用的是哪种哈希算法吗？是为了解决什么问题而使用的呢？"><a href="#最近很火的区块链，底层运用了哈希算法，那你能讲一讲区块链使用的是哪种哈希算法吗？是为了解决什么问题而使用的呢？" class="headerlink" title="最近很火的区块链，底层运用了哈希算法，那你能讲一讲区块链使用的是哪种哈希算法吗？是为了解决什么问题而使用的呢？"></a>最近很火的区块链，底层运用了哈希算法，那你能讲一讲区块链使用的是哪种哈希算法吗？是为了解决什么问题而使用的呢？</h2><p>区块链是一块块区块组成的，每个区块分为两部分：区块头和区块体。<br>区块头保存着 自己区块体 和 上一个区块头 的哈希值。<br> 因为这种链式关系和哈希值的唯一性，只要区块链上任意一个区块被修改过，后面所有区块保存的哈希值就不对了。 区块链使用的是 SHA256 哈希算法，计算哈希值非常耗时，如果要篡改一个区块，就必须重新计算该区块后面所有的区块的哈希值，短时间内几乎不可能做到。</p>]]></content>
    
    
    <categories>
      
      <category>基本算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>基本算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>16、二分查找（下）</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/16%E3%80%81%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/16%E3%80%81%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>思考：如何快速定位 IP 对应的省份地址？<br>举例：查询 202.102.133.13 这个 IP 地址的归属地时，在地址库中发现这个 IP 地址落在[202.102.133.0, 202.102.133.255]这个地址范围内，就可以将这个 IP 地址范围对应的归属地显示给用户了。</p><p>现在我的问题是，在庞大的地址库中逐一比对 IP 地址所在的区间，是非常耗时的。假设我们有 12 万条这样的 IP 区间与归属地的对应关系，如何快速定位出一个 IP 地址的归属地呢？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>主要将二分的<strong>变形</strong>查找<br><img src="/img/images/2024/1709196888961-08c94005-0028-49c8-9494-0a240e4e5fed.png"><br>都以数据从小到大排序为前提。</p><h2 id="变体一：查找第一个值等于给定值的元素"><a href="#变体一：查找第一个值等于给定值的元素" class="headerlink" title="变体一：查找第一个值等于给定值的元素"></a>变体一：查找第一个值等于给定值的元素</h2><p>当数据中存在重复的值时，如何找到呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bsearch</span>(<span class="hljs-params">list, targetValue</span>) &#123;<br>  <span class="hljs-keyword">const</span> len = list.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br>  <span class="hljs-keyword">let</span> low = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">let</span> high = len<br><br>  <span class="hljs-keyword">while</span>(low &lt;= high) &#123;<br>    <span class="hljs-keyword">const</span> mid = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((low + high) / <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">const</span> midValue = list[mid]<br><br>    <span class="hljs-keyword">if</span>(midValue &gt; targetValue) &#123; <span class="hljs-comment">// 逻辑未变</span><br>      high = mid - <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(midValue &lt; targetValue) &#123; <span class="hljs-comment">// 逻辑未变</span><br>      low = mid + <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 逻辑有变化，以前是直接 return mid</span><br><br>      <span class="hljs-comment">// 当 mid 为 0，则肯定是第一个 或 前一个不等于 targetValue，则没有重复值也就是第一个</span><br>      <span class="hljs-keyword">if</span>(mid === <span class="hljs-number">0</span> || list[mid - <span class="hljs-number">1</span>] !== targetValue) <span class="hljs-keyword">return</span> mid<br>      <span class="hljs-keyword">else</span> high = mid - <span class="hljs-number">1</span> <span class="hljs-comment">// 否则前一个等于 targetValue，则要从[low, mid - 1]内再找</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="变体二：查找最后一个值等于给定值的元素"><a href="#变体二：查找最后一个值等于给定值的元素" class="headerlink" title="变体二：查找最后一个值等于给定值的元素"></a>变体二：查找最后一个值等于给定值的元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bsearch</span>(<span class="hljs-params">list, targetValue</span>) &#123;<br>  <span class="hljs-keyword">const</span> len = list.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br>  <span class="hljs-keyword">let</span> low = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">let</span> high = len<br><br>  <span class="hljs-keyword">while</span>(low &lt;= high) &#123;<br>    <span class="hljs-keyword">const</span> mid = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((low + high) / <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">const</span> midValue = list[mid]<br><br>    <span class="hljs-keyword">if</span>(midValue &gt; targetValue) &#123; <span class="hljs-comment">// 逻辑未变</span><br>      high = mid - <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(midValue &lt; targetValue) &#123; <span class="hljs-comment">// 逻辑未变</span><br>      low = mid + <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 逻辑有变化，以前是直接 return mid</span><br><br>      <span class="hljs-comment">// 当 mid 为 len，则肯定是最后一个 或 后一个不等于 targetValue，则没有重复值也就是最后一个</span><br>      <span class="hljs-keyword">if</span>(mid === len || list[mid + <span class="hljs-number">1</span>] !== targetValue) <span class="hljs-keyword">return</span> mid<br>      <span class="hljs-keyword">else</span> low = mid + <span class="hljs-number">1</span> <span class="hljs-comment">// 否则后一个等于 targetValue，则要从[mid + 1, high]内再找</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="变体三：查找第一个大于等于给定值的元素"><a href="#变体三：查找第一个大于等于给定值的元素" class="headerlink" title="变体三：查找第一个大于等于给定值的元素"></a>变体三：查找第一个大于等于给定值的元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bsearch</span>(<span class="hljs-params">list, targetValue</span>) &#123;<br>  <span class="hljs-keyword">const</span> len = list.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br>  <span class="hljs-keyword">let</span> low = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">let</span> high = len<br><br>  <span class="hljs-keyword">while</span>(low &lt;= high) &#123;<br>    <span class="hljs-keyword">const</span> mid = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((low + high) / <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">const</span> midValue = list[mid]<br><br>    <span class="hljs-keyword">if</span>(midValue &lt; targetValue) &#123; <span class="hljs-comment">// 逻辑未变</span><br>      low = mid + <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 大于等于的情况</span><br><br>      <span class="hljs-comment">// 当 mid 为 0，则肯定是第一个 或 前一个不大于等于 targetValue，也就是第一个</span><br>      <span class="hljs-keyword">if</span>(mid === <span class="hljs-number">0</span> || list[mid - <span class="hljs-number">1</span>] &lt; targetValue) <span class="hljs-keyword">return</span> mid<br>      <span class="hljs-keyword">else</span> high = mid - <span class="hljs-number">1</span> <span class="hljs-comment">// 否则前一个大于等于 targetValue，则要从[low, mid - 1]内再找</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="变体四：查找最后一个小于等于给定值的元素"><a href="#变体四：查找最后一个小于等于给定值的元素" class="headerlink" title="变体四：查找最后一个小于等于给定值的元素"></a>变体四：查找最后一个小于等于给定值的元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bsearch</span>(<span class="hljs-params">list, targetValue</span>) &#123;<br>  <span class="hljs-keyword">const</span> len = list.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br>  <span class="hljs-keyword">let</span> low = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">let</span> high = len<br><br>  <span class="hljs-keyword">while</span>(low &lt;= high) &#123;<br>    <span class="hljs-keyword">const</span> mid = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((low + high) / <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">const</span> midValue = list[mid]<br><br>    <span class="hljs-keyword">if</span>(midValue &gt; targetValue) &#123; <span class="hljs-comment">// 逻辑未变</span><br>      high = mid - <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 小于等于的情况</span><br><br>      <span class="hljs-comment">// 当 mid 为 len，则肯定是最后一个 或 后一个不小于等于 targetValue，也就是最后一个</span><br>      <span class="hljs-keyword">if</span>(mid === len || list[mid + <span class="hljs-number">1</span>] &gt; targetValue) <span class="hljs-keyword">return</span> mid<br>      <span class="hljs-keyword">else</span> low = mid + <span class="hljs-number">1</span> <span class="hljs-comment">// 否则后一个小于等于 targetValue，则要从[mid + 1, high]内再找</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>思考：如何快速定位 IP 对应的省份地址？<br>举例：查询 202.102.133.13 这个 IP 地址的归属地时，在地址库中发现这个 IP 地址落在[202.102.133.0, 202.102.133.255]这个地址范围内，就可以将这个 IP 地址范围对应的归属地显示给用户了。</p><p>现在我的问题是，在庞大的地址库中逐一比对 IP 地址所在的区间，是非常耗时的。假设我们有 12 万条这样的 IP 区间与归属地的对应关系，如何快速定位出一个 IP 地址的归属地呢？</p><p>解答：现将区间从小到大排序，可将 IP 转为 32 位整数进行排序。然后用【变体四】找到最后一个起始 IP 小于等于该 IP 的 IP 区间数据。然后检查 IP 是否在该区间内，在的话返回归属地，不在就返回未找到。</p><h1 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h1><p>变体的二分查找比较常用，运用的场景也多。<br>所以要掌握手写代码的能力</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><h2 id="如果有序数组是一个循环有序数组，比如-4，5，6，1，2，3。针对这种情况，如何实现一个求“值等于给定值”的二分查找算法呢？"><a href="#如果有序数组是一个循环有序数组，比如-4，5，6，1，2，3。针对这种情况，如何实现一个求“值等于给定值”的二分查找算法呢？" class="headerlink" title="如果有序数组是一个循环有序数组，比如 4，5，6，1，2，3。针对这种情况，如何实现一个求“值等于给定值”的二分查找算法呢？"></a>如果有序数组是一个循环有序数组，比如 4，5，6，1，2，3。针对这种情况，如何实现一个求“值等于给定值”的二分查找算法呢？</h2><p>循环有序数组简单理解为环形数组，结构为 ……3,4,5,6,1,2,3,4,5……</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">circularBinarySearch</span>(<span class="hljs-params">list, tValue</span>) &#123;<br>  <span class="hljs-keyword">const</span> len = list.<span class="hljs-property">length</span><br><br>  <span class="hljs-keyword">if</span>(!len) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br>  <span class="hljs-keyword">let</span> start = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">let</span> end = len - <span class="hljs-number">1</span><br><br>  <span class="hljs-keyword">while</span>(start &lt;= end) &#123;<br>    <span class="hljs-keyword">const</span> mid = (start + end) % len <span class="hljs-comment">// 考虑循环特性，求余来计算中间索引</span><br><br>    <span class="hljs-keyword">const</span> midValue = list[mid]<br><br>    <span class="hljs-keyword">if</span>(midValue &gt; tValue) &#123;<br>      end = mid - <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(midValue &lt; tValue) &#123;<br>      start = mid + <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> mid<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(start &gt; end) &#123; <span class="hljs-comment">// 循环特性，会存在该情况</span><br>      start = start % len <span class="hljs-comment">// 求余重置 start</span><br><br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = start; i &lt; start + end + <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span>(list[i % len] === tValue) <span class="hljs-keyword">return</span> i % len<br>      &#125;<br><br>      reutrn -<span class="hljs-number">1</span> <span class="hljs-comment">// 如果整个数组遍历完都没有找到，返回 -1</span><br>    &#125;<br><br>    reutrn -<span class="hljs-number">1</span> <span class="hljs-comment">// 如果正常循环结束还没有找到，返回 -1</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>基本算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>基本算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15、二分查找（上）</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/15%E3%80%81%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/15%E3%80%81%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>思考：如何用最省内存的方式实现快速查找功能？<br>假设我们有 1000 万个整数数据，每个数据占 8 个字节，如何设计数据结构和算法，快速判断某个整数是否出现在这 1000 万数据中？ 我们希望这个功能不要占用太多的内存空间，最多不要超过 100MB，你会怎么做呢？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>核心：主要是针对<strong>有序的数据</strong>，每次用中间值来对比，将查找区间缩小一半，直到找到元素，或区间被缩小为 0。<br>时间复杂度推导：n、n&#x2F;2、n&#x2F;4、……、n&#x2F;2^k，可得为 O(logn)</p><h2 id="简单的二分查找代码"><a href="#简单的二分查找代码" class="headerlink" title="简单的二分查找代码"></a>简单的二分查找代码</h2><p>假设数据中无重复值时，简单二分查找代码如下：</p><h3 id="循环版"><a href="#循环版" class="headerlink" title="循环版"></a>循环版</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">baseSearch</span>(<span class="hljs-params">list</span>) &#123;<br>  <span class="hljs-keyword">let</span> low = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">let</span> high = list.<span class="hljs-property">length</span> - <span class="hljs-number">1</span><br><br>  <span class="hljs-keyword">while</span>(low &lt;= high) &#123;<br>    <span class="hljs-keyword">const</span> mid = (low + high) / <span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span>(list[mid]) === value) <span class="hljs-keyword">return</span> mid<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(list[mid] &gt; value) &#123;<br>      high = mid - <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      low = mid + <span class="hljs-number">1</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归版"><a href="#递归版" class="headerlink" title="递归版"></a>递归版</h3><p>递推公式：<code>find(list, s, e, value) = list[m] === value or find(list, s, m-1, value) or find(list, m+1, e, value)</code><br>终止条件：<code>list[m] == value or s &gt; e</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">baseSearch</span>(<span class="hljs-params">list, value, s = <span class="hljs-number">0</span>, e = list.length - <span class="hljs-number">1</span></span>) &#123;<br>  <span class="hljs-keyword">if</span>(s &gt; e) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br>  <span class="hljs-keyword">const</span> mid = (s + e) / <span class="hljs-number">2</span><br><br>  <span class="hljs-keyword">if</span>(list[mid] === value) <span class="hljs-keyword">return</span> mid<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(list[mid] &gt; value) <span class="hljs-keyword">return</span> <span class="hljs-title function_">baseSearch</span>(list, value, s, mid - <span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-title function_">baseSearch</span>(list, value, mid + <span class="hljs-number">1</span>, e)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><ul><li>数据必须存储在顺序表(即数组)</li><li>数据必须是有序的</li><li>不适合数据规模太小，这可以直接遍历去查找</li><li>不适合数据规模太大，因为要求数组存储，则需要连续的存储空间，若数据量大则很难申请到数组存储空间</li></ul><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>思考：如何用最省内存的方式实现快速查找功能？<br>假设我们有 1000 万个整数数据，每个数据占 8 个字节，如何设计数据结构和算法，快速判断某个整数是否出现在这 1000 万数据中？ 我们希望这个功能不要占用太多的内存空间，最多不要超过 100MB，你会怎么做呢？</p><p>解答：使用二分查找，将数据存入数组中，1000 万 * 8 字节约等于 80 MB，然后先排序再用二分查找。<br>排序后可以多次使用二分查找想要的数据</p><h1 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h1><p>二分查找采用“二分”的逻辑，适合已排序的顺序表结构，时间复杂度为 O(logn)，即 2^32 的数据量(43 亿)也只需要 32 次就能找到</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><h2 id="如何编程实现“求一个数的平方根”？要求精确到小数点后-6-位"><a href="#如何编程实现“求一个数的平方根”？要求精确到小数点后-6-位" class="headerlink" title="如何编程实现“求一个数的平方根”？要求精确到小数点后 6 位"></a>如何编程实现“求一个数的平方根”？要求精确到小数点后 6 位</h2><p>比如求 5 的平方根，x^2 &#x3D; 5，求出 x<br>平方根计算可以使用二分查找，先设区间为(0, number)，再求中点 mid &#x3D; (0+number) &#x2F; 2，比较 mid<em>mid 与 number<br>若 number 小，则更改区间为：(0，mid)；若 number 大，则更改区间为：(mid, number)<br>再求中点 mid &#x3D; (0+mid) &#x2F; 2，继续比较 mid</em>mid 与 number</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">binarySearchSqrt</span>(<span class="hljs-params">num, precision = <span class="hljs-number">1e-6</span></span>) &#123;<br>  <span class="hljs-keyword">let</span> low = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> high = num;<br><br>  <span class="hljs-comment">// 确保初始区间包含num的平方根</span><br>  <span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">1</span>) &#123;<br>    high = <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">while</span> (high - low &gt; precision) &#123;<br>    <span class="hljs-keyword">let</span> mid = (low + high) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">let</span> square = mid * mid;<br><br>    <span class="hljs-keyword">if</span> (square === num) &#123;<br>        <span class="hljs-keyword">return</span> mid.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">6</span>);  <span class="hljs-comment">// 如果找到精确的平方根，返回结果并精确到小数点后6位</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (square &lt; num) &#123;<br>        low = mid;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        high = mid;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (low + high) / <span class="hljs-number">2</span>;  <span class="hljs-comment">// 返回区间内的中间值作为近似解，并隐式地进行了四舍五入到小数点后6位</span><br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">binarySearchSqrt</span>(<span class="hljs-number">9</span>));  <span class="hljs-comment">// 输出：&quot;3.000000&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">binarySearchSqrt</span>(<span class="hljs-number">16</span>));  <span class="hljs-comment">// 输出：&quot;4.000000&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">binarySearchSqrt</span>(<span class="hljs-number">2</span>));  <span class="hljs-comment">// 输出：&quot;1.414214&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>基本算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>基本算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14、排序优化</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/14%E3%80%81%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/14%E3%80%81%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>思考：如何实现一个通用的、高性能的排序函数？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><h2 id="如何选择合适的排序算法？"><a href="#如何选择合适的排序算法？" class="headerlink" title="如何选择合适的排序算法？"></a>如何选择合适的排序算法？</h2><p><img src="/img/images/2024/1709190014317-89b765f1-e51f-4cd9-9d61-9e1bc7a05ff2.png"><br>首先不考虑线性排序，虽然 O(n) 很诱人，但它们的适用场景太少了，所以放弃。<br>其次对小规模数据，可以使用 O(n2) 的；但对大规模数据就要考虑高效的 O(nlogn) 算法。<br>归并算法需要额外的内存，针对小数据时可以使用；而快排则不需要，常针对大数据使用</p><h2 id="快速排序优化"><a href="#快速排序优化" class="headerlink" title="快速排序优化"></a>快速排序优化</h2><p>快排的数据若已排序，那每次选择最后一个分区，则恶化为 O(n^2)<br>所以我们要合理选择分区点：尽量将数据平均分配在左右分区内</p><h3 id="N-位数取中值法"><a href="#N-位数取中值法" class="headerlink" title="N 位数取中值法"></a>N 位数取中值法</h3><p>比如：三位数取中值，从首、中间、尾取三个数，求中值最为分区点<br>若数据量大，则可以为“五位数、十位数”取中值</p><h3 id="随机法"><a href="#随机法" class="headerlink" title="随机法"></a>随机法</h3><p>每次随机取分区点。随机比固定更容易出现好分区点</p><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>各语言提供的排序函数，会存在根据数据量进行不同排序算法的处理。<br>比如：当数据量小时，会使用插入排序；当数据量大但内存少时，会使用归并排序，并且在递归到排序长度很小时，就停止递归采用插入排序；当数据量大内存也大，则使用快速排序</p><h1 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h1><p>不同的算法，有对应的场景。<br>所以各语言提供的排序函数，不会仅仅采用一种方式去实现，一定是竭尽所能的榨干性能</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><h2 id="JS-的数组-sort-函数使用的算法？"><a href="#JS-的数组-sort-函数使用的算法？" class="headerlink" title="JS 的数组 sort 函数使用的算法？"></a>JS 的数组 sort 函数使用的算法？</h2><p>采用了插入、快排、归并这几种算法，会根据数据大小选择合适的或混用来实现排序</p>]]></content>
    
    
    <categories>
      
      <category>基本算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>基本算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13、线性排序</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/13%E3%80%81%E7%BA%BF%E6%80%A7%E6%8E%92%E5%BA%8F/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/13%E3%80%81%E7%BA%BF%E6%80%A7%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>思考：如何根据年龄给 100 万用户数据排序？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>今天讲解的是时间复杂度为 O(n) 的，所以也称为线性排序算法</p><h2 id="桶排序（Bucket-sort）"><a href="#桶排序（Bucket-sort）" class="headerlink" title="桶排序（Bucket sort）"></a>桶排序（Bucket sort）</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>核心思想：将数据分到几个桶内，先在桶内进行快速排序，之后再顺序取出桶内的数据，组成的数据就是有序的了<br><img src="/img/images/2024/1709178569400-a474bcba-4ba9-41a3-ae27-7bd6246a9a5a.png"><br>时间复杂度推导：将 n 个数据，分到 m 个桶内，则每个桶内数量为 k &#x3D; n&#x2F;m，然后每个桶进行快排，其时间复杂度为 O(k <em>logk)，那 m 个桶则为 O(m</em> k <em>logk)，将 k &#x3D; n&#x2F;m 带入可得 O(n</em> log(n&#x2F;m))<br>当桶的数量 m 接近 n 时，log(n&#x2F;m) 是一个非常小的常数，所以时间复杂度就接近 O(n)</p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>对数据要求很高，首先要能很容易的划分出 m 个桶，并且桶之间要求有顺序，这样桶内排序后，直接可组合，无需桶与桶的数据再排序<br>其次要求各桶内数据均匀，若不均匀(都在一个桶内)则可能退化为 O(n * log(n&#x2F;m)) &#x3D; O(nlogn)</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>适合用于数据存储在外部磁盘中并且量大，然后运行内存有限，无法加载所有数据的情况。</p><blockquote><p>比如：有 10GB 的订单数据，我们希望按订单金额（假设金额都是正整数）进行排序，但是我们的内存有限，只有几百 MB，没办法一次性把 10GB 的数据都加载到内存中。这个时候该怎么办呢？</p></blockquote><p>先扫描订单数据，获得金额最小、最大值，然后根据这两个值创建 10 个桶，存入对应的金额订单，若某个桶数据太多了，则在这个桶内继续分桶，直到运行内存能读取每一个桶内的数据。分桶完毕后就依次读取桶内数据，进行桶内快排，最后再组合写入到一个文件中即可。</p><h2 id="计数排序（Counting-sort）"><a href="#计数排序（Counting-sort）" class="headerlink" title="计数排序（Counting sort）"></a>计数排序（Counting sort）</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>本质是桶排序的特殊情况，桶大小的颗粒度更小。<br>核心思想：若数据的范围不大，最大的为 k 时，则将数据分到 k 个桶内，每个桶内的数据值是相等的，省掉了桶内排序的时间。</p><blockquote><p>举例：省内有 50 万考生，如何在分数查询时显示排名</p></blockquote><p>高考成绩的范围为[0，900]，则可以分为 901 个桶，对应 0 到 900 分，这样每个桶内都是一样的分数，所以桶内不需要排序。然后依次遍历每个桶，将数据依次放入一个总排名的数组中。<br>时间复杂度推导：将 n 个数据，分到 m 个桶内，则每个桶内数量为 k &#x3D; n&#x2F;m，但桶内不需要排序了。然后又依次遍历 m 个桶，将桶内的 k 个数据拿出来，所以只涉及到拿数据，拿的数据量为 m <em>k，所以为 O(m</em> k)，代入 k &#x3D; n&#x2F;m，则最终为 O(n)</p><p>核心逻辑为：原始数组 A 中找到最大值 k，创建长度为 k+1 的中间数组 C，C 内先存储 A 中每个值的数量。然后再存储累加的数量。最后基于 A.length 创建结果数组 R，然后倒序遍历 A，将 A[i] 作为 C 的下标，取出 C[A[i]] 的值 CValue，然后作为 R 的下标存储对应的 A[i]，即 R[CValue - 1] &#x3D; A[i]，然后对 CValue 减一</p><h4 id="使用-计数排序-实现-2，5，3，0，2，3，0，3-升序操作"><a href="#使用-计数排序-实现-2，5，3，0，2，3，0，3-升序操作" class="headerlink" title="使用 计数排序 实现 2，5，3，0，2，3，0，3 升序操作"></a>使用 计数排序 实现 2，5，3，0，2，3，0，3 升序操作</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">countingSort</span>(<span class="hljs-params">list</span>) &#123;<br>  <span class="hljs-keyword">const</span> len = list.<span class="hljs-property">length</span>;<br><br>  <span class="hljs-keyword">if</span> (len &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> list;<br><br>  <span class="hljs-keyword">let</span> max = list[<span class="hljs-number">0</span>];<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-keyword">if</span> (list[i] &gt; max) max = list[i]; <span class="hljs-comment">// 找到最大值</span><br>  &#125;<br><br>  <span class="hljs-keyword">const</span> cArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(max + <span class="hljs-number">1</span>); <span class="hljs-comment">// 基于[最大值+1]创建数组 cArray</span><br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;= max; i++) cArray[i] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 给 cArray 赋初值 0</span><br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123; <span class="hljs-comment">// 循环原始数组</span><br>    cArray[list[i]]++; <span class="hljs-comment">// 将原始数据的每个值的数量放入 cArray 中</span><br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= max; i++) &#123; <span class="hljs-comment">// 循环 cArray</span><br>    cArray[i] = cArray[i - <span class="hljs-number">1</span>] + cArray[i]; <span class="hljs-comment">// 累加</span><br>  &#125;<br><br>  <span class="hljs-keyword">const</span> rArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(len); <span class="hljs-comment">// 基于 list 的长度创建数组 rArray</span><br><br>  <span class="hljs-comment">// ⭐️ 计算排序的关键步骤，有点难理解</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = len - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123; <span class="hljs-comment">// 倒序循环原始数组</span><br>    <span class="hljs-keyword">const</span> cValue = cArray[list[i]];<br>    rArray[cValue - <span class="hljs-number">1</span>] = list[i];<br>    cArray[list[i]] = cValue - <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> rArray;<br>&#125;<br><br><span class="hljs-keyword">const</span> sortArray = <span class="hljs-title function_">countingSort</span>([<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[ sortArray ] &gt;&quot;</span>, sortArray); <span class="hljs-comment">// [0, 0, 2, 2, 3, 3, 3, 5]</span><br><br></code></pre></td></tr></table></figure><h3 id="限制-1"><a href="#限制-1" class="headerlink" title="限制"></a>限制</h3><p>不适合最大值 K 大于 数据量 n 很多的，并且只适合非负整数排序</p><h2 id="基数排序（Radix-sort）"><a href="#基数排序（Radix-sort）" class="headerlink" title="基数排序（Radix sort）"></a>基数排序（Radix sort）</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>核心思想：将要排序的数据，按照低位到高位一位位的进行排序，要符合“稳定”</p><h3 id="限制-2"><a href="#限制-2" class="headerlink" title="限制"></a>限制</h3><p>首先数据可以分割出“位”并且“位”数不能太大，其次“位”之间有递进关系，最后每一位的范围也不能太大，可以用线性排序(桶排序、计数排序)<br>要求：每个数据的长度要一致<br>这样的时间复杂度为 O(n)</p><h3 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h3><p>比如：10 万个手机号排序<br>手机号总共可以分为 11 位，每一位范围为[0~9]，其次最前面的位等级越高，比如前几位为 138 的就已经比 134 的高了</p><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>思考：如何根据年龄给 100 万用户数据排序？<br>年龄为[1<del>3]位数，每位数范围为[0</del>9]，所以可以用基数排序<br>年龄最大值为 1**，远小于数量 n，也可以用计数排序</p><h1 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h1><p>桶、计数、基数排序对数据有要求，实际使用少，但有场景时可使用，毕竟时间复杂度低，为 O(n)</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><p>假设我们现在需要对 D，a，F，B，c，A，z 这个字符串进行排序，要求将其中所有小写字母都排在大写字母的前面，但小写字母内部和大写字母内部不要求有序。比如经过排序之后为 a，c，z，D，F，B，A，这个如何来实现呢？如果字符串中存储的不仅有大小写字母，还有数字。要将小写字母的放到前面，大写字母放在最后，数字放在中间，不用排序算法，又该怎么解决呢？<br>仅排序大小写字符时：<br>使用 a、b 两个指针，a 从前往后，b 从后往前，a 遇到大写字母停下，b 遇到小写字母停下，都停下后就交换 a、b，然后继续指针 a、b 相交。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sortChars</span>(<span class="hljs-params">str</span>) &#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> b = str.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">while</span> (a &lt; b) &#123;<br>    <span class="hljs-keyword">while</span> (a &lt; b &amp;&amp; <span class="hljs-regexp">/[a-z]/</span>.<span class="hljs-title function_">test</span>(str[a])) &#123;<br>      a++; <span class="hljs-comment">// 移动指针a，直到找到大写字母或者到达字符串尾部</span><br>    &#125;<br>    <span class="hljs-keyword">while</span> (a &lt; b &amp;&amp; <span class="hljs-regexp">/[A-Z]/</span>.<span class="hljs-title function_">test</span>(str[b])) &#123;<br>      b--; <span class="hljs-comment">// 移动指针b，直到找到小写字母或者到达字符串头部</span><br>    &#125;<br><br>    <span class="hljs-comment">// 当 a 和 b 都停下来时，交换它们指向的字符</span><br>    <span class="hljs-keyword">if</span> (a &lt; b) &#123;<br>      [str[a], str[b]] = [str[b], str[a]]; <span class="hljs-comment">// 使用解构赋值进行交换</span><br>      a++;<br>      b--;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>排序大小写字符、数字时：<br>现将数据分为两类：小写字母与非小写字母，还是使用 a、b 两个指针，进行交换。完成后又将非小写字母的数据分为两类：大写字母与数字，然后重新使用 a、b 两个指针，进行交换</p>]]></content>
    
    
    <categories>
      
      <category>基本算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>基本算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12、排序（下）</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/12%E3%80%81%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/12%E3%80%81%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>思考：如何在 O(n) 的时间复杂度内查找一个无序数组中的第 K 大元素？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>原理：先将数据不停的平均分成两份，各自排序，最后组合，就成了一个排好序的数组了<br><img src="/img/images/2024/1709107708093-b2e97154-20a1-4752-ab5b-f2b0b6edc29b.png"></p><p>采用的是：分治思想，分而治之，将大问题化为小问题解决，小的解决后大的也就解决了<br>发现跟递归的思想很像，分治是处理问题的“思想”，递归是实现思想的“编程技巧”。</p><h3 id="如何用递归实现归并排序？"><a href="#如何用递归实现归并排序？" class="headerlink" title="如何用递归实现归并排序？"></a>如何用递归实现归并排序？</h3><p>递推公式：merge_sort(p……r) &#x3D; merge(merge_sort(p……q), merge_sort(q+1……r))<br>终止条件：p &gt;&#x3D; r 不用再继续分解</p><p>使用 归并排序 手写实现 4，5，6，3，2，1 的升序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge_sort</span>(<span class="hljs-params">A</span>) &#123;<br>  <span class="hljs-keyword">const</span> n = A.<span class="hljs-property">length</span>;<br>  <span class="hljs-title function_">merge_sort_c</span>(A, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge_sort_c</span>(<span class="hljs-params">A, p, r</span>) &#123;<br>  <span class="hljs-comment">// 递归终止条件</span><br>  <span class="hljs-keyword">if</span> (p &gt;= r) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 取p到r之间的中间位置q</span><br>  <span class="hljs-keyword">const</span> q = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((p + r) / <span class="hljs-number">2</span>);<br><br>  <span class="hljs-comment">// 分治递归</span><br>  <span class="hljs-title function_">merge_sort_c</span>(A, p, q);<br>  <span class="hljs-title function_">merge_sort_c</span>(A, q + <span class="hljs-number">1</span>, r);<br><br>  <span class="hljs-comment">// 将A[p...q]和A[q+1...r]合并为A[p...r]</span><br>  <span class="hljs-title function_">merge</span>(A, p, q, r);<br>&#125;<br><br><span class="hljs-comment">// 合并两个有序子数组</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">A, p, q, r</span>) &#123;<br>  <span class="hljs-comment">// 初始化变量i, j, k</span><br>  <span class="hljs-keyword">let</span> i = p, j = q + <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">// 创建一个大小与A[p...r]相等的临时数组</span><br>  <span class="hljs-keyword">const</span> tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(r - p + <span class="hljs-number">1</span>);<br><br>  <span class="hljs-comment">// 合并两个有序子数组</span><br>  <span class="hljs-keyword">while</span> (i &lt;= q &amp;&amp; j &lt;= r) &#123;<br>    <span class="hljs-keyword">if</span> (A[i] &lt;= A[j]) &#123;<br>      tmp[k++] = A[i++];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      tmp[k++] = A[j++];<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 判断哪个子数组中有剩余数据</span><br>  <span class="hljs-keyword">let</span> start = i, end = q;<br>  <span class="hljs-keyword">if</span> (j &lt;= r) &#123;<br>    start = j;<br>    end = r;<br>  &#125;<br><br>  <span class="hljs-comment">// 将剩余的数据拷贝到临时数组tmp</span><br>  <span class="hljs-keyword">while</span> (start &lt;= end) &#123;<br>    tmp[k++] = A[start++];<br>  &#125;<br><br>  <span class="hljs-comment">// 将tmp中的数组拷贝回A[p...r]</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;= r - p; i++) &#123;<br>    A[p + i] = tmp[i];<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 示例</span><br><span class="hljs-keyword">const</span> array = [<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>];<br><span class="hljs-title function_">merge_sort</span>(array);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array); <span class="hljs-comment">// 输出：[1, 2, 3, 5, 6, 8, 9]</span><br></code></pre></td></tr></table></figure><ol><li>归并排序是原地排序吗？<ol><li>不是，因为它需要额外的存储空间，用来存储 tmp 数组，所以空间复杂度为 O(n)</li></ol></li><li>归并排序是稳定的排序算法吗？<ol><li>是，遇到相同的元素，可以先把 left 中的元素放入，这样就能保证稳定</li></ol></li><li>归并排序的时间复杂度是多少？<ol><li>由于使用了递归，所以先写出递归的时间复杂度推导公式：<code>T(a) = T(b) + T(c) + K</code><ol><li>T(a) 代表解决总问题的时间</li><li>T(b)、T(c) 代表解决子问题 b、c 的时间</li><li>K 代表组合子问题 b、c 结果的时间</li></ol></li><li>归并排序中：对于 n 个数据，组合的平均时间为 O(n)，因为组合最好时间为 n&#x2F;2，最坏时间为 n - 1，所以平均时间为 O((n&#x2F;2+n-1)2) 去掉常量就为 O(n)</li><li>所以 T(n) &#x3D; T(n&#x2F;2) + T(n&#x2F;2) + n</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 展开后如下：</span><br><span class="hljs-title function_">T</span>(n) = <span class="hljs-number">2</span>*<span class="hljs-title function_">T</span>(n/<span class="hljs-number">2</span>) + n<br>     = <span class="hljs-number">2</span>*(<span class="hljs-number">2</span>*<span class="hljs-title function_">T</span>(n/<span class="hljs-number">4</span>) + n/<span class="hljs-number">2</span>) + n = <span class="hljs-number">4</span>*<span class="hljs-title function_">T</span>(n/<span class="hljs-number">4</span>) + <span class="hljs-number">2</span>*n<br>     = <span class="hljs-number">4</span>*(<span class="hljs-number">2</span>*<span class="hljs-title function_">T</span>(n/<span class="hljs-number">8</span>) + n/<span class="hljs-number">4</span>) + <span class="hljs-number">2</span>*n = <span class="hljs-number">8</span>*<span class="hljs-title function_">T</span>(n/<span class="hljs-number">8</span>) + <span class="hljs-number">3</span>*n<br>     = <span class="hljs-number">8</span>*(<span class="hljs-number">2</span>*<span class="hljs-title function_">T</span>(n/<span class="hljs-number">16</span>) + n/<span class="hljs-number">8</span>) + <span class="hljs-number">3</span>*n = <span class="hljs-number">16</span>*<span class="hljs-title function_">T</span>(n/<span class="hljs-number">16</span>) + <span class="hljs-number">4</span>*n<br>     ......<br>     = <span class="hljs-number">2</span>^k * <span class="hljs-title function_">T</span>(n/<span class="hljs-number">2</span>^k) + k * n<br>     ......<br></code></pre></td></tr></table></figure><ol start="4"><li>最终得到 T(n) &#x3D; Cn + nlog2n，去掉常量最终为 O(nlogn)</li><li>并且归并排序与原始数据是否排序无关，所以它的时间复杂度很稳定</li></ol><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>原理：还是采用分治思想，是以任意元素为分治点，然后将小于该元素的放在左边，大于该元素的放在右边，该元素放在中间。然后再递归排序左右两边，最后再组合一下就行。<br><img src="/img/images/2024/1709111696419-33abb056-36f4-4a28-98c3-3137d3fb517f.png"><br>递推公式：quick_sort(p……r) &#x3D; quick_sort(p……q-1) + quick_sort(q+1…… r)<br>终止条件：p &gt;&#x3D; r</p><p>使用 快速排序 手写实现 4，5，6，3，2，1 的升序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">quickSort</span>(<span class="hljs-params">A, p = <span class="hljs-number">0</span>, r = A.length - <span class="hljs-number">1</span></span>) &#123;<br>  <span class="hljs-keyword">if</span> (p &lt; r) &#123;<br>    <span class="hljs-keyword">const</span> q = <span class="hljs-title function_">partition</span>(A, p, r); <span class="hljs-comment">// 获取分区后的分割点</span><br>    <span class="hljs-title function_">quickSort</span>(A, p, q - <span class="hljs-number">1</span>); <span class="hljs-comment">// 递归对左子数组进行排序</span><br>    <span class="hljs-title function_">quickSort</span>(A, q + <span class="hljs-number">1</span>, r); <span class="hljs-comment">// 递归对右子数组进行排序</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> A;<br>&#125;<br><br><span class="hljs-comment">// partition函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">partition</span>(<span class="hljs-params">A, p, r</span>) &#123;<br>  <span class="hljs-keyword">const</span> pivot = A[r];<br>  <span class="hljs-keyword">let</span> i = p;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = p; j &lt; r; j++) &#123;<br>    <span class="hljs-keyword">if</span> (A[j] &lt; pivot) &#123;<br>      [A[i], A[j]] = [A[j], A[i]]; <span class="hljs-comment">// 使用解构赋值进行交换</span><br>      i++;<br>    &#125;<br>  &#125;<br><br>  [A[i], A[r]] = [A[r], A[i]]; <span class="hljs-comment">// 将基准元素放在正确的位置</span><br>  <span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-comment">// 示例</span><br><span class="hljs-keyword">const</span> unsortedArray = [<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">quickSort</span>(unsortedArray)); <span class="hljs-comment">// 输出：[1, 2, 3, 5, 6, 7, 8, 9]</span><br></code></pre></td></tr></table></figure><p>以下是分区的过程：<br><img src="/img/images/2024/1709112954252-de8f9ac1-ebba-4521-9457-a8e140e9cad6.png"></p><ol><li>快速排序是原地排序吗？<ol><li>是，因为不需要额外的存储空间，所以空间复杂度为 O(1)</li></ol></li><li>快速排序是稳定的排序算法吗？<ol><li>不是</li></ol></li><li>快速排序的时间复杂度是多少？<ol><li>由于使用了递归，所以先写出递归的时间复杂度推导公式：<code>T(a) = T(b) + T(c) + K</code><ol><li>T(a) 代表解决总问题的时间</li><li>T(b)、T(c) 代表解决子问题 b、c 的时间</li><li>K 代表组合子问题 b、c 结果的时间</li></ol></li><li>T(n) &#x3D; T(a) + T(c) + O(1)</li><li>所以 T(n) &#x3D; T(n&#x2F;2) + T(n&#x2F;2) + n</li><li>求解并去掉常量后为 O(nlogn)</li><li>但若数据已排序，那每次选择最后一个分区，则恶化为 O(n^2)</li></ol></li></ol><h2 id="归并与快排的区别"><a href="#归并与快排的区别" class="headerlink" title="归并与快排的区别"></a>归并与快排的区别</h2><p><img src="/img/images/2024/1709113340665-8fab4725-da41-46fe-bf6b-b9a00d3ea2ef.png"><br>归并：自底向上，它在最底部才处理排序，然后向上再合并处理已排序的子数据<br>快排：自顶向下，它在分区的时候就开始再处理排序了，然后向上合并时不做任何处理</p><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>思考：如何在 O(n) 的时间复杂度内查找一个无序数组中的第 K 大元素？<br>使用分治思想，将数据以最后一个元素分区，大于它的在左侧，小于它的在右侧，最终分为 List[0…p-1], List[p], List[p+1……len]<br>若 p+1 &#x3D; K，则 List[p] 就是第 K 大的元素<br>若 p+1 &gt; K，则在左侧 List[0…p-1] 里面重新以最后一个元素分区再找，直到找到<br>若 p+1 &lt; K，则在右侧 List[p+1…len] 里面重新以最后一个元素分区再找，直到找到<br>最终时间复杂度为：O(n)<br>因为第一次分区遍历 n 次，第二次分区遍历 n&#x2F;2 次，第三次分区遍历 n&#x2F;4……<br>最终和为 2n-1，去掉常量就为 O(n)<br>递推公式：getK(p…r) &#x3D; getK(0…p-1)+getK(p+1…r)，k &#x3D; p+1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getKValue</span>(<span class="hljs-params">List, k, p = <span class="hljs-number">0</span>, r = List.length</span>) &#123;<br>  <span class="hljs-keyword">const</span> q = <span class="hljs-title function_">partition</span>(<span class="hljs-title class_">List</span>, p, r); <span class="hljs-comment">// 获取分区后的分割点下标</span><br><br>  <span class="hljs-keyword">if</span>(q+<span class="hljs-number">1</span> === k) <span class="hljs-keyword">return</span> q<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(q + <span class="hljs-number">1</span> &gt; k)&#123;<br>    <span class="hljs-title function_">getKValue</span>(<span class="hljs-title class_">List</span>, k, p, q - <span class="hljs-number">1</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">getKValue</span>(<span class="hljs-title class_">List</span>, k, q + <span class="hljs-number">1</span>, r)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">partition</span>(<span class="hljs-params">List, p, r</span>) &#123;<br>  <span class="hljs-keyword">const</span> point = <span class="hljs-title class_">List</span>[r - <span class="hljs-number">1</span>]<br>  <span class="hljs-keyword">let</span> i = p<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j = p; j &lt; r; j++) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">List</span>[j] &gt; point) &#123;<br>      [<span class="hljs-title class_">List</span>[i], <span class="hljs-title class_">List</span>[j]] = [<span class="hljs-title class_">List</span>[j], <span class="hljs-title class_">List</span>[i]]; <span class="hljs-comment">// 使用解构赋值进行交换</span><br>      i++;<br>    &#125;<br>  &#125;<br><br>  [<span class="hljs-title class_">List</span>[i], <span class="hljs-title class_">List</span>[r]] = [<span class="hljs-title class_">List</span>[r], <span class="hljs-title class_">List</span>[i]]; <span class="hljs-comment">// 将基准元素放在正确的位置</span><br>  <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h1><p>归并排序关键：<code>merge_sort(p...r) = merge(merge_sort(p...q), merge_sort(q+1...r)), p &gt;= r 终止</code>，其中的 merge 函数是关键</p><p>快速排序关键：<code>quick_sort(p...r) = quick_sort(p...q-1) + quick_sort(q+1...r), p &gt;= r 终止</code>，其中的 partition 函数式关键</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><p>现在你有 10 个接口访问日志文件，每个日志文件大小约 300MB，每个文件里的日志都是按照时间戳从小到大排序的。你希望将这 10 个较小的日志文件，合并为 1 个日志文件，合并之后的日志仍然按照时间戳从小到大排列。如果处理上述排序任务的机器内存只有 1GB，你有什么好的解决思路，能“快速”地将这 10 个日志文件合并吗？</p>]]></content>
    
    
    <categories>
      
      <category>基本算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>基本算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11、排序（上）</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/11%E3%80%81%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/11%E3%80%81%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>思考：为什么插入排序比冒泡排序更受欢迎？<br>插入排序和冒泡排序的时间复杂度相同，都是 O(n^2)，在实际的软件开发里，为什么我们更倾向于使用插入排序算法而不是冒泡排序算法呢？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><h2 id="如何分析一个“排序算法”？"><a href="#如何分析一个“排序算法”？" class="headerlink" title="如何分析一个“排序算法”？"></a>如何分析一个“排序算法”？</h2><h3 id="执行效率分析"><a href="#执行效率分析" class="headerlink" title="执行效率分析"></a>执行效率分析</h3><p>从以下几个方面进行分析：</p><ol><li>最好、最坏、平均时间复杂度</li><li>时间复杂度的系数、常数、低阶<ol><li>针对排序算法，需要去考虑这些</li></ol></li><li>比较次数和交换(移动)次数</li></ol><h3 id="内存消耗分析"><a href="#内存消耗分析" class="headerlink" title="内存消耗分析"></a>内存消耗分析</h3><p>可以使用空间复杂度来衡量<br>在排序算法中有个<strong>“原地排序”</strong>算法，特指空间复杂度为 O(1) 的排序算法</p><h3 id="稳定性分析"><a href="#稳定性分析" class="headerlink" title="稳定性分析"></a>稳定性分析</h3><p>针对序列中的相同值的元素，若排序后，这些值的先后顺序不变，则算为稳定。<br>举例：2，3，4，6，8，3，9；升序算法后为 2，3，3，4，6，8，9<br>其中的 3，3，如果它俩的前后顺序未变，则是稳定的排序算法。</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>定义：只会操作相邻的两个数，对这两数进行比较，不满足要求则互换。一次冒泡至少会让一个数据移动到它所在的位置，重复 n 次则完成 n 个数据的排序。<br>比如：4，5，6，3，2，1 进行升序操作<br>第一次冒泡后数据为：4，5，3，2，1，6，其中 6 已经到达正确位置<br>一次冒泡的详细比较为：n[0]&gt;n[1] ? 互换 : 不变；n[1]&gt;n[2] ? 互换 : 不变；……；n[4]&gt;n[5] ? 互换 : 不变；</p><p>使用 冒泡排序 手写实现 4，5，6，3，2，1 的升序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sort</span>(<span class="hljs-params">list</span>) &#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123; <span class="hljs-comment">// 冒泡次数</span><br>    <span class="hljs-keyword">let</span> isChange = <span class="hljs-literal">false</span> <span class="hljs-comment">// 是否有数据交换</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; list.<span class="hljs-property">length</span> - i - <span class="hljs-number">1</span>; j++) &#123; <span class="hljs-comment">// 数据对比次数</span><br>      <span class="hljs-keyword">if</span>(list[j] &gt; list[j + <span class="hljs-number">1</span>]) &#123;<br>        <span class="hljs-comment">// 交换</span><br>        <span class="hljs-keyword">const</span> tmp = list[j]<br>        list[j] = list[j + <span class="hljs-number">1</span>]<br>        list[j + <span class="hljs-number">1</span>] = tmp<br><br>        isChange = <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!isChange) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 无数据交换，提前退出</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>问题：</p><ol><li>冒泡排序是原地排序吗？<ol><li>是，因为它只涉及到相邻两数的交换，多了个常量级的临时存储空间，所以空间复杂度为 O(1)</li></ol></li><li>冒泡排序是稳定的排序算法吗？<ol><li>是，当元素大小相同时，可以不做交换</li></ol></li><li>冒泡排序的时间复杂度是多少？<ol><li>最好情况：已排好的数据，只需要一次冒泡操作(因为需要冒泡一下看看是否需要排序)，所以为 O(n)</li><li>最怀情况：反序的数据，则需要 n 次冒泡，则为 O(n^2)</li><li>平均情况：一般为最坏情况，为 O(n^2)</li></ol></li></ol><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>核心思想是取未排序区间中的元素，在已排序区间中找到合适的插入位置将其插入，并保证已排序区间数据一直有序。初始已排序只有一个元素(数组第一个)<br>核心操作：对比与移动。<br>当需要插入 a 时，需要将 a 依次与已排序的元素对比大小(倒着对比)，找到插入点。找到插入点后先将插入到后面的元素后移一位，然后再插入。<br>使用 插入排序 手写实现 4，5，6，3，2，1 的升序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sort</span>(<span class="hljs-params">list</span>) &#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> value = list[i]<br><br>    <span class="hljs-keyword">let</span> j = i - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span>(; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>      <span class="hljs-keyword">if</span>(list[j] &gt; value) &#123;<br>        list[j + <span class="hljs-number">1</span>] = list[j] <span class="hljs-comment">// 数据移动</span><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span><br>    &#125;<br><br>    list[j + <span class="hljs-number">1</span>] = value <span class="hljs-comment">// 数据插入</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> list<br>&#125;<br></code></pre></td></tr></table></figure><p>问题：</p><ol><li>插入排序是原地排序吗？<ol><li>是，因为它不需要额外的存储空间，所以空间复杂度为 O(1)</li></ol></li><li>插入排序是稳定的排序算法吗？<ol><li>可以处理为稳定排序</li></ol></li><li>插入排序的时间复杂度是多少？<ol><li>最好情况：已排好的数据，不需要移动数据，如果从尾到头查找插入点，则为 O(n)</li><li>最怀情况：反序的数据，则需要 n 次查找，则为 O(n^2)</li><li>平均情况：一般为最坏情况，为 O(n^2)</li></ol></li></ol><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>类似于插入排序，分为两个区，只是每次从未排序区里面取出最小值放入已排序区的末尾。<br><img src="/img/images/2024/1709104116839-05c80ab3-ded0-413f-bcc4-d930c16b0db3.png"><br>使用 选择排序 手写实现 4，5，6，3，2，1 的升序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sort</span>(<span class="hljs-params">list</span>) &#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">let</span> minIndex = i<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j = minIndex + <span class="hljs-number">1</span>; j &lt; list.<span class="hljs-property">length</span>; j++) &#123; <span class="hljs-comment">// 寻找剩余部分的最小元素</span><br>      <span class="hljs-keyword">if</span>(list[minIndex] &gt; list[j]) &#123;<br>        minIndex = j <span class="hljs-comment">// 更新最小值的索引</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(minIndex !== i) &#123;<br>      <span class="hljs-comment">// 将找到的最小元素与当前位置的元素交换</span><br>      <span class="hljs-keyword">const</span> tmp = list[minIndex]<br>      list[minIndex] = list[i]<br>      list[i] = tmp<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> list<br>&#125;<br></code></pre></td></tr></table></figure><p>问题：</p><ol><li>插入排序是原地排序吗？<ol><li>是，因为它不需要额外的存储空间，所以空间复杂度为 O(1)</li></ol></li><li>插入排序是稳定的排序算法吗？<ol><li><strong>不稳定，因为每次选择最小值时拿的是最后的那位(相同数值)，然后先插入，这破坏了稳定性。也有可能是和最小值互换，也被破坏了顺序</strong></li><li>举例：<ol><li>5，4，3’，6，3’’；第一次最小值为 3’’，与 5 互换再插入；第二次最小值为 3’，与 4 互换再插入</li><li>6’，7，3，6’’，8；第一次最小值为 3，与 6’ 互换再插入；第二次最小值为 6’’，与 7 互换再插入</li></ol></li></ol></li><li>插入排序的时间复杂度是多少？<ol><li>最好情况：已排好的数据，不需要交换数据，但都每次需要找最小，所以为 O(n^2)</li><li>最怀情况：反序的数据，则需要 n 次对比，则为 O(n^2)</li><li>平均情况：一般为最坏情况，为 O(n^2)</li></ol></li></ol><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>思考：为什么插入排序比冒泡排序更受欢迎？<br>插入排序和冒泡排序的时间复杂度相同，都是 O(n^2)，在实际的软件开发里，为什么我们更倾向于使用插入排序算法而不是冒泡排序算法呢？<br>因为它们两个的移动&#x2F;交换代码复杂度不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 冒泡排序-交换逻辑</span><br><span class="hljs-keyword">if</span>(a[i] &gt; a[j]) &#123;<br>  <span class="hljs-keyword">const</span> tmp = a[i]<br>  a[i] = a[j]<br>  a[j] = tmp<br>&#125;<br><br><span class="hljs-comment">// 插入排序-移动逻辑</span><br><span class="hljs-keyword">if</span>(a[i] &gt; a[j]) &#123;<br>  a[j + <span class="hljs-number">1</span>] = a[j]<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>假设每行代码执行时间相同，为 T。<br>那冒泡交换逻辑为 3 <em>T，插入移动逻辑为 1</em> T<br>那面临大规模数据时，之间的差异将更大<br>所以为了追求性能，尽管它们的时间复杂度都为 O(n^2)，但还是优先选择插入排序</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>冒泡：核心是相邻两数对比与交换<br>插入：核心是未排序元素依次与已排序元素(倒着)对比找到插入点然后插入，会涉及一些元素的移动<br>选择：核心是找到未排序元素最值(小或大)，插入已排序元素最末尾<br><img src="/img/images/2024/1709106194951-f83c575c-d16e-4193-b0d4-c1ef34136686.png"><br>这三个的时间复杂度太高，只适合小规模数据，在实际开发中应用并不多，学习它们也只是为了开拓思维。</p><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><h2 id="如果这三个的数据是存储在链表中，这三种排序算法还能工作吗？如果能，那相应的时间、空间复杂度又是多少呢？"><a href="#如果这三个的数据是存储在链表中，这三种排序算法还能工作吗？如果能，那相应的时间、空间复杂度又是多少呢？" class="headerlink" title="如果这三个的数据是存储在链表中，这三种排序算法还能工作吗？如果能，那相应的时间、空间复杂度又是多少呢？"></a>如果这三个的数据是存储在链表中，这三种排序算法还能工作吗？如果能，那相应的时间、空间复杂度又是多少呢？</h2><p>冒泡：可以，交换时改变指向，代码写的更复杂<br>插入：可以，插入时直接改变指针<br>选择：可以，交换时要改变指向，代码写的更复杂，插入时也要处理好指向<br>然后时间、空间复杂度都未发生变化。</p>]]></content>
    
    
    <categories>
      
      <category>基本算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>基本算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10、递归</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/10%E3%80%81%E9%80%92%E5%BD%92/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9E%81%E5%AE%A2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/10%E3%80%81%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<p>思考：如何用三行代码找到“最终推荐人”？<br>比如：用户 A 推荐用户 B 来注册，用户 B 又推荐了用户 C 来注册。则用户 C 的“最终推荐人”为用户 A，用户 B 的“最终推荐人”也为用户 A，而用户 A 没有“最终推荐人”。<br>一般，会通过数据库来记录这种推荐关系。在数据库表中，其中 actor_id 表示用户 id，referrer_id 表示推荐人 id。<br><img src="/img/images/2024/1709088259366-f180cc09-31fa-4006-8bf7-78d56f509aac.png"><br>问题：若给定一个用户 ID，如何查找这个用户的“最终推荐人”？</p><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>递归：函数或方法通过调用自己来解决问题<br>递：函数调用的过程，归：值返回的过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 自然数的递归函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">if</span>(n === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">f</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span><br>&#125;<br><br>递归公式：<span class="hljs-title function_">f</span>(n) = <span class="hljs-title function_">f</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>; 其中终止条件 <span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>) = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>使用递归的三个条件：</p><ol><li>【原问题】可以分解为多个【子问题】<ol><li>【子问题】指：数据规模更小的问题</li></ol></li><li>要求【子问题】跟【原问题】除数据规模不同，求解思路要一致</li><li>必须有终止条件</li></ol><h2 id="写递归的关键"><a href="#写递归的关键" class="headerlink" title="写递归的关键"></a>写递归的关键</h2><p>先<strong>写递推公式，找到终止条件</strong></p><blockquote><p>案例：假如这里有 n 个台阶，每次你可以跨 1 个台阶或者 2 个台阶，请问走完这 n 个台阶有多少种走法？<br>如果有 7 个台阶，你可以 2，2，2，1 这样子上去，也可以 1，2，1，1，2 这样子上去，总之走法有很多，那如何用编程求得总共有多少种走法呢？</p></blockquote><p>递推公式推导思路：由于限制了每次走的台阶为 1 或 2，则可以分为两类：第一步走了 1 个台阶，求后续 n - 1 的走法；第一步走了 2 个台阶，求后续 n - 2 的走法；<br>所以递推公式：f(n) &#x3D; f(n - 1) + f(n - 2)<br>终止条件推导思路：走 1 个台阶走法为 1，所以终止条件 1 为 f(1) &#x3D; 1，那 f(2) &#x3D; f(1) + f(0) 就发现 f(0) 无值，所以 f(0) &#x3D; 1？发现这不合理，走 0 个台阶有 1 个走法？所以将 f(2) 等于 2，作为终止条件 2。<br>再测试下 f(3) &#x3D; f(2) + f(1) &#x3D; 3， f(4) &#x3D; f(3) + f(2) &#x3D; f(2) + f(1) + f(2) &#x3D; 2+1+2 &#x3D; 5<br>所以终止条件：f(1) &#x3D; 1，f(2) &#x3D; 2<br>所以汇总递推公式下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>) = <span class="hljs-number">1</span><br><span class="hljs-title function_">f</span>(<span class="hljs-number">2</span>) = <span class="hljs-number">2</span><br><span class="hljs-title function_">f</span>(n) = <span class="hljs-title function_">f</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-title function_">f</span>(n - <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>对应的递归代码为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">if</span>(n === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">if</span>(n === <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">f</span>(n -<span class="hljs-number">1</span>) + <span class="hljs-title function_">f</span>(n -<span class="hljs-number">2</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：写递归代码的关键就是找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后再推敲终止条件，最后将递推公式和终止条件翻译成代码。</strong></p><h2 id="警惕堆栈溢出"><a href="#警惕堆栈溢出" class="headerlink" title="警惕堆栈溢出"></a>警惕堆栈溢出</h2><h3 id="为什么会溢出呢？"><a href="#为什么会溢出呢？" class="headerlink" title="为什么会溢出呢？"></a>为什么会溢出呢？</h3><p>因为函数调用时会将临时变量入栈，但系统分配的栈的大小一般有限，所以在递归大规模数据时容易一直入栈，就有溢出风险。<br>比如上面求走台阶法的，如果在 JS 中执行<code>f(9999)</code>，就会报错：<code>Uncaught RangeError: Maximum call stack size exceeded</code>，在执行<code>f(999)</code>时就会卡死了</p><h3 id="那如何避免呢？"><a href="#那如何避免呢？" class="headerlink" title="那如何避免呢？"></a>那如何避免呢？</h3><p>简单操作：可以设置最大调用深度，当超过后就直接报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> maxDeep = <span class="hljs-number">1000</span><br><span class="hljs-keyword">let</span> deep = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">n</span>) &#123;<br>  ++deep<br><br>  <span class="hljs-keyword">if</span>(deep &gt;= maxDeep) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;超出最大调用次数&#x27;</span>)<br><br>  <span class="hljs-keyword">if</span>(n === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">if</span>(n === <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">f</span>(n -<span class="hljs-number">1</span>) + <span class="hljs-title function_">f</span>(n -<span class="hljs-number">2</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="警惕重复计算"><a href="#警惕重复计算" class="headerlink" title="警惕重复计算"></a>警惕重复计算</h2><h3 id="什么是重复计算？"><a href="#什么是重复计算？" class="headerlink" title="什么是重复计算？"></a>什么是重复计算？</h3><p>还是上面那个求走台阶法，以下是求 f(6) 的步骤<br><img src="/img/images/2024/1709090436179-9b67da31-d5c6-4142-8337-2e69a5f8d0c3.png"><br>可以发现 f(4)、f(3) 都出现了多次，这就是重复计算</p><h3 id="那如何避免呢？-1"><a href="#那如何避免呢？-1" class="headerlink" title="那如何避免呢？"></a>那如何避免呢？</h3><p>可以使用另一个数据，来存储已经计算过的值，每次使用前判断是否存在，有的话直接取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">if</span>(n === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">if</span>(n === <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><br>  <span class="hljs-keyword">if</span>(fMap.<span class="hljs-title function_">get</span>(n)) &#123;<br>    <span class="hljs-keyword">return</span> fMap.<span class="hljs-title function_">get</span>(n)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> tmp = <span class="hljs-title function_">f</span>(n -<span class="hljs-number">1</span>) + <span class="hljs-title function_">f</span>(n -<span class="hljs-number">2</span>)<br><br>  fMap.<span class="hljs-title function_">set</span>(n, tmp)<br><br>  <span class="hljs-keyword">return</span> tmp<br>&#125;<br><br><span class="hljs-comment">// 执行 f(6) 后</span><br><span class="hljs-comment">// fMap 为 Map(4) &#123;3 =&gt; 3, 4 =&gt; 5, 5 =&gt; 8, 6 =&gt; 13&#125;</span><br></code></pre></td></tr></table></figure><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>由于递归调用函数，所以当数据规模大时，递归的时间复杂度就不可预测，对应空间复杂度也要考虑每次调用函数时的入栈所占用的开销</p><h2 id="如何将递归改为非递归"><a href="#如何将递归改为非递归" class="headerlink" title="如何将递归改为非递归"></a>如何将递归改为非递归</h2><p>由于递归的堆栈溢出、重复计算、不可控的时间&#x2F;空间复杂度等问题，所以实际开发中视情况使用递归。<br>将上述的求台阶走法改为非递归</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">if</span>(n === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">if</span>(n === <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><br>  <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">let</span> pre = <span class="hljs-number">2</span> <span class="hljs-comment">// 对应 f(2)</span><br>  <span class="hljs-keyword">let</span> prepre = <span class="hljs-number">1</span> <span class="hljs-comment">// 对应 f(1)</span><br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">3</span>;i &lt;= n; i++) &#123;<br>    res = pre + prepre<br>    prepre = pre<br>    pre = res<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>思考：如何用三行代码找到“最终推荐人”？<br>递推公式：f(id) &#x3D; f(r_id)<br>终止条件：f(1) &#x3D; null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getReferrerId</span>(<span class="hljs-params">actorId</span>) &#123;<br>  <span class="hljs-comment">// 接口获取该用户 id 的推荐人 id</span><br>  <span class="hljs-keyword">const</span> referrerId = axios.<span class="hljs-title function_">getReferrerId</span>(&#123; actorId &#125;)<br>  <span class="hljs-keyword">if</span>(referrerId === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> referrerId<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">getReferrerId</span>(referrerId)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="新的思考"><a href="#新的思考" class="headerlink" title="新的思考"></a>新的思考</h1><h2 id="平时调试代码会使用-IDE-的单步跟踪功能，像规模比较大、递归层次很深的递归代码，几乎无法使用这种调试方式。对于递归代码，有什么好的调试方法呢？"><a href="#平时调试代码会使用-IDE-的单步跟踪功能，像规模比较大、递归层次很深的递归代码，几乎无法使用这种调试方式。对于递归代码，有什么好的调试方法呢？" class="headerlink" title="平时调试代码会使用 IDE 的单步跟踪功能，像规模比较大、递归层次很深的递归代码，几乎无法使用这种调试方式。对于递归代码，有什么好的调试方法呢？"></a>平时调试代码会使用 IDE 的单步跟踪功能，像规模比较大、递归层次很深的递归代码，几乎无法使用这种调试方式。对于递归代码，有什么好的调试方法呢？</h2><p>1.打印日志发现，递归值。<br>2.结合条件断点进行调试。</p>]]></content>
    
    
    <categories>
      
      <category>基本算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>极客-数据结构与算法之美</tag>
      
      <tag>基本算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>x、xxx</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/x%E3%80%81xxx/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/x%E3%80%81xxx/</url>
    
    <content type="html"><![CDATA[<p><strong>原题</strong>：<a href="https://leetcode.cn/problems/merge-strings-alternately/description/?envType=study-plan-v2&envId=leetcode-75">力扣《交替合并字符串》</a><br><strong>难度</strong>：<strong>简单</strong></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h2><p>关键：硬解的？xxx?</p><ol><li>思路 xxxx</li><li>思路 xxxx</li></ol><p>执行用时，消耗内存<br>x ms，x MB</p><p><strong>耗时</strong>：x min</p><h2 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h2><p>关键：双指针？递归？xx?<br>思路 1：xxxx<br>执行用时，消耗内存<br>x ms，x MB</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>xxxx</p>]]></content>
    
    
    <categories>
      
      <category>每日算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>每日算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8、递增的三元子序列</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/8%E3%80%81%E9%80%92%E5%A2%9E%E7%9A%84%E4%B8%89%E5%85%83%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/8%E3%80%81%E9%80%92%E5%A2%9E%E7%9A%84%E4%B8%89%E5%85%83%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p><strong>原题</strong>：<a href="https://leetcode.cn/problems/increasing-triplet-subsequence/?envType=study-plan-v2&envId=leetcode-75">力扣《递增的三元子序列》</a><br><strong>难度</strong>：<strong>中等</strong></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个整数数组 nums ，判断这个数组中是否存在长度为 3 的递增子序列。<br>如果存在这样的三元组下标 (i, j, k) 且满足 i &lt; j &lt; k ，使得 nums[i] &lt; nums[j] &lt; nums[k] ，返回 true ；否则，返回 false 。</p><p>示例 1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：nums = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>输出：<span class="hljs-literal">true</span><br>解释：任何 i &lt; j &lt; k 的三元组都满足题意<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：nums = [<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-literal">false</span><br>解释：不存在满足题意的三元组<br></code></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：nums = [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>]<br>输出：<span class="hljs-literal">true</span><br>解释：三元组 (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>) 满足题意，<br>因为 nums[<span class="hljs-number">3</span>] == <span class="hljs-number">0</span> &lt; nums[<span class="hljs-number">4</span>] == <span class="hljs-number">4</span> &lt; nums[<span class="hljs-number">5</span>] == <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>提示：</p><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 5 * 10^5</li><li>-231 &lt;&#x3D; nums[i] &lt;&#x3D; 231 - 1</li></ul><p>进阶：你能实现时间复杂度为 O(n) ，空间复杂度为 O(1) 的解决方案吗？</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h2><p>关键：硬解的</p><ol><li>条件：i &lt; j &lt; k ，使得 nums[i] &lt; nums[j] &lt; nums[k] ，返回 true</li><li>嵌套循环，先找 i</li><li>再循环找 j，j 找到后再循环找 k</li><li>三层嵌套循环</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> increasingTriplet = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) &#123;<br>  <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> = j = k = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">const</span> len = nums.<span class="hljs-property">length</span>;<br><br>  <span class="hljs-keyword">for</span> (; i &lt; len; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = i + <span class="hljs-number">1</span>; index &lt; len; index++) &#123;<br>      <span class="hljs-keyword">if</span> (nums[index] &gt; nums[i]) &#123;<br>        j = index;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = j + <span class="hljs-number">1</span>; index &lt; len; index++) &#123;<br>          <span class="hljs-keyword">if</span> (nums[index] &gt; nums[j]) &#123;<br>            k = index;<br>            <span class="hljs-keyword">break</span>;<br>          &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (k) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (j === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; k &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Boolean</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; k &gt; <span class="hljs-number">0</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>Case 通过，但提交后超长数据运行报错</strong></p><p><strong>耗时</strong>：40 min</p><h2 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h2><p>关键 1：双循环<br>思路 1：1&lt;&#x3D; i &lt;&#x3D; len - 1，存在 n[左侧最小] &lt; n[i] &lt; n[右侧最大]<br>将数据分为两块，LMin 存放下标 i 时，左侧最小的、RMax 存放下标 i 时，右侧最大的<br>最后判断是否满足 LMin[i] &lt; n[i] &lt; RMax[i]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> increasingTriplet = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) &#123;<br>  <span class="hljs-keyword">const</span> len = nums.<span class="hljs-property">length</span>;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title class_">LMin</span> = [];<br>  <span class="hljs-keyword">const</span> <span class="hljs-title class_">RMax</span> = [];<br><br>  <span class="hljs-title class_">LMin</span>[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">1</span>; index &lt; nums.<span class="hljs-property">length</span>; index++) &#123;<br>    <span class="hljs-keyword">const</span> element = nums[index];<br>    <span class="hljs-title class_">LMin</span>[index] = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<span class="hljs-title class_">LMin</span>[index - <span class="hljs-number">1</span>], element);<br>  &#125;<br><br>  <span class="hljs-title class_">RMax</span>[len - <span class="hljs-number">1</span>] = nums[len - <span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = len - <span class="hljs-number">2</span>; index &gt;= <span class="hljs-number">0</span>; index--) &#123;<br>    <span class="hljs-keyword">const</span> element = nums[index];<br>    <span class="hljs-title class_">RMax</span>[index] = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(<span class="hljs-title class_">RMax</span>[index + <span class="hljs-number">1</span>], element);<br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; nums.<span class="hljs-property">length</span>; index++) &#123;<br>    <span class="hljs-keyword">const</span> element = nums[index];<br>    <span class="hljs-keyword">if</span> (element &gt; <span class="hljs-title class_">LMin</span>[index] &amp;&amp; element &lt; <span class="hljs-title class_">RMax</span>[index]) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1708663117460-cdce23bc-97a1-4f65-b0c4-0146bc55a250.png"></p><p>关键 2：贪心<br>思路 2：初始设置 first &#x3D; nums[0]；second &#x3D; 无穷大；现在循环找 third</p><ol><li>若 third &gt; second，则找到了，返回 true</li><li>若 third &lt; second 但 third &gt; first，则 second &#x3D; third，继续循环找 third</li><li>若 third &lt; first，则 first &#x3D; third，继续循环找 third（虽然 first 在 second 之后了，但在 second 之前，存在过老的 first 并小于 second）</li></ol><p>举例：[3, 2, 4, 1, 7, 6, 9]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">第 <span class="hljs-number">1</span> 次时：<br>  first = nums[<span class="hljs-number">0</span>] = <span class="hljs-number">3</span>; second = <span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_VALUE</span>; third = nums[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span><br>判断 third，满足 third &lt; first，则 first = third = <span class="hljs-number">2</span><br><br>第 <span class="hljs-number">2</span> 次时：<br>  first = <span class="hljs-number">2</span>; second = <span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_VALUE</span>; third = nums[<span class="hljs-number">2</span>] = <span class="hljs-number">4</span><br>判断 third，满足 second &gt; third &gt; first，则 second = third = <span class="hljs-number">4</span><br><br>第 <span class="hljs-number">3</span> 次时：<br>  first = <span class="hljs-number">2</span>; second = <span class="hljs-number">4</span>; third = nums[<span class="hljs-number">3</span>] = <span class="hljs-number">1</span><br>判断 third，满足 third &lt; first，则 first = third = <span class="hljs-number">1</span><br><br>第 <span class="hljs-number">4</span> 次时：<br>  first = <span class="hljs-number">1</span>; second = <span class="hljs-number">4</span>; third = nums[<span class="hljs-number">4</span>] = <span class="hljs-number">7</span><br>判断 third，满足 third &gt; second，则找到了，终止循环，并返回 <span class="hljs-literal">true</span><br><br>此时找到的三元下标为：x,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>，对应值为 num[x],<span class="hljs-number">4</span>,<span class="hljs-number">7</span><br>其中的 x 为下标 <span class="hljs-number">2</span> 之前的任意一个，即老 first 用过的下标 <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br><span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span> 对应值为 <span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span><br><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span> 对应值为 <span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> increasingTriplet = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) &#123;<br>  <span class="hljs-keyword">let</span> first = nums[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">let</span> second = <span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_VALUE</span>;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; nums.<span class="hljs-property">length</span>; index++) &#123;<br>    <span class="hljs-keyword">const</span> third = nums[index];<br><br>    <span class="hljs-keyword">if</span> (third &gt; second) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (third &gt; first) second = third;<br>    <span class="hljs-keyword">else</span> first = third;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1708664924154-86e5784e-a240-4b42-a3fc-022b8c16c48c.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上一道题目才做双循环的，就给忘了，让后又变成硬解了。<br>以后遇到数组的，先考虑双指针、再考虑能否生成两个数组，最后再硬解</p>]]></content>
    
    
    <categories>
      
      <category>每日算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>每日算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7、除自身以外数组的乘积</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/7%E3%80%81%E9%99%A4%E8%87%AA%E8%BA%AB%E4%BB%A5%E5%A4%96%E6%95%B0%E7%BB%84%E7%9A%84%E4%B9%98%E7%A7%AF/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/7%E3%80%81%E9%99%A4%E8%87%AA%E8%BA%AB%E4%BB%A5%E5%A4%96%E6%95%B0%E7%BB%84%E7%9A%84%E4%B9%98%E7%A7%AF/</url>
    
    <content type="html"><![CDATA[<p><strong>原题</strong>：<a href="https://leetcode.cn/problems/product-of-array-except-self/description/?envType=study-plan-v2&envId=leetcode-75">力扣《除自身以外数组的乘积》</a><br><strong>难度</strong>：<strong>中等</strong></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个整数数组 nums，返回 数组 answer ，其中 answer[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积 。<br>题目数据 保证 数组 nums 之中任意元素的全部前缀元素和后缀的乘积都在  32 位 整数范围内。<br>请 不要使用除法，且在 O(n) 时间复杂度内完成此题。</p><p>示例 1:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入: nums = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>输出: [<span class="hljs-number">24</span>,<span class="hljs-number">12</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入: nums = [-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">3</span>,<span class="hljs-number">3</span>]<br>输出: [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>提示：</p><ul><li>2 &lt;&#x3D; nums.length &lt;&#x3D; 10^5</li><li>-30 &lt;&#x3D; nums[i] &lt;&#x3D; 30</li><li>保证 数组 nums 之中任意元素的全部前缀元素和后缀的乘积都在  32 位 整数范围内</li></ul><p>进阶：你可以在 O(1) 的额外空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组 不被视为 额外空间。）</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h2><p>关键：硬解</p><ol><li>O(n) 时间复杂度表明不能嵌套循环了，嵌套循环会为 O(n^2)</li><li>不要使用除法，那就不允许先所有相乘，再单独除</li><li>第一次循环 n，用于生成 a</li><li>a[i] &#x3D; n[0] <em>n[1]</em> n[i-1] <em>1(n[i])</em> n[i+1] * n[n]</li><li>可以将 n[i] 当做 1，这样就可以全部相乘了</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">cheng</span> = (<span class="hljs-params">nums</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> nums.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a * b);<br>&#125;;<br><br><span class="hljs-keyword">var</span> productExceptSelf = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) &#123;<br>  <span class="hljs-keyword">const</span> len = nums.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">const</span> answer = [];<br>  <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">while</span> (i &lt; len) &#123;<br>    <span class="hljs-keyword">const</span> temp = nums[i];<br>    nums[i] = <span class="hljs-number">1</span>;<br>    answer[i] = <span class="hljs-title function_">cheng</span>(nums);<br>    nums[i] = temp;<br>    i++;<br>  &#125;<br>  <span class="hljs-keyword">return</span> answer;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>提交后运行超时，并且时间复杂度 O(n^2)</strong></p><p><strong>耗时</strong>：20 min</p><h2 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h2><p>关键：左右乘积列表<br>思路：</p><ol><li>给定 i，左侧相乘 * 右侧相乘</li><li>创建两个空数组 L、R，L[i] &#x3D; i 左侧乘积，R[i] &#x3D; i 右侧乘积</li><li>L[0] &#x3D; 1，因为 0 左侧无值；R[len - 1] &#x3D; 1，因为 len 右侧无值</li><li>L[i] &#x3D; L[i - 1] * nums[i - 1]，下面简单推断下<ol><li>L[1] &#x3D; L[0] * nums[0]；</li><li>L[2] &#x3D; L[1] <em>nums[1] &#x3D; L[0]</em> nums[0] * nums[1]</li><li>L[3] &#x3D; L[2] <em>nums[2] &#x3D; L[0]</em> nums[0] <em>nums[1]</em> nums[2]</li><li>L[i] &#x3D; L[0] <em>nums[0]</em> nums[1] <em>nums[2]</em> … * nums[i - 1]</li></ol></li><li>同理 R[i] &#x3D; R[i + 1] * nums[i + 1]</li><li>所以需要分别求出 L、R，然后再求乘积</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> productExceptSelf = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) &#123;<br>  <span class="hljs-keyword">const</span> len = nums.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">const</span> L = [];<br>  <span class="hljs-keyword">const</span> R = [];<br><br>  <span class="hljs-keyword">const</span> answer = [];<br><br>  L[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; len; i++) &#123;<br>    L[i] = L[i - <span class="hljs-number">1</span>] * nums[i - <span class="hljs-number">1</span>];<br>  &#125;<br><br>  R[len - <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = len - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    R[i] = R[i + <span class="hljs-number">1</span>] * nums[i + <span class="hljs-number">1</span>];<br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    answer[i] = L[i] * R[i];<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> answer;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1708655933116-6ca53f56-a395-4654-a374-b07e0bd44974.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学会了时间复杂度的计算。<br>如果一个数组长度为 n，循环一次就为 O(n)<br>嵌套循环 2 次，为 O(n * n)<br>单独循环 2 次，为 O(n + n) &#x3D; O(2n)，可简化为 O(n)<br>O(1) 代表运行时间始终为常量，与数组长度无关</p>]]></content>
    
    
    <categories>
      
      <category>每日算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>每日算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6、反转字符串中的单词</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/6%E3%80%81%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/6%E3%80%81%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<p><strong>原题</strong>：<a href="https://leetcode.cn/problems/reverse-words-in-a-string/description/?envType=study-plan-v2&envId=leetcode-75">力扣《反转字符串中的单词》</a><br><strong>难度</strong>：<strong>中等</strong></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个字符串 s ，请你反转字符串中<strong>单词</strong>的顺序。<br>单词：是由非空格字符组成的字符串。<br>s 中使用至少一个空格将字符串中的<strong>单词</strong>分隔开。<br>返回<strong>单词</strong>顺序颠倒且<strong>单词</strong>之间用单个空格连接的结果字符串。<br>注意：输入字符串 s 中可能会存在前导空格、尾随空格或者单词间的多个空格。<br>返回的结果字符串中，<strong>单词</strong>间应当仅用单个空格分隔，且不包含任何额外的空格。</p><p>示例 1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：s = <span class="hljs-string">&quot;the sky is blue&quot;</span><br>输出：<span class="hljs-string">&quot;blue is sky the&quot;</span><br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：s = <span class="hljs-string">&quot;  hello world  &quot;</span><br>输出：<span class="hljs-string">&quot;world hello&quot;</span><br>解释：反转后的字符串中不能存在前导空格和尾随空格。<br></code></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：s = <span class="hljs-string">&quot;a good   example&quot;</span><br>输出：<span class="hljs-string">&quot;example good a&quot;</span><br>解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。<br></code></pre></td></tr></table></figure><p>提示：</p><ul><li>1 &lt;&#x3D; s.length &lt;&#x3D; 104</li><li>s 包含英文大小写字母、数字和空格 ‘ ‘</li><li>s 中 至少存在一个 单词</li></ul><p>进阶：如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的<strong>原地</strong>解法。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h2><p>关键：双指针</p><ol><li>遇到反转的，都可以先用双指针试试</li><li>单词定义：无空格连接的字符串</li><li>单词分隔：&gt;&#x3D; 1 个空格</li><li>反转：左边第 n 个单词与右边第 n 个单词进行互换</li><li>输出：单词间一个空格分开，无多余空格的字符串</li><li>核心：直接想办法用双指针的完成互换即可</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reverseWords = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!s) <span class="hljs-keyword">return</span> s;<br><br>  <span class="hljs-comment">// 转为数组</span><br>  <span class="hljs-keyword">const</span> sArr = s<br>    .<span class="hljs-title function_">trim</span>()<br>    .<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>)<br>    .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-title function_">trim</span>())<br>    .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item);<br><br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> right = sArr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br><br>  <span class="hljs-comment">// 双指针互换</span><br>  <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-keyword">const</span> temp = sArr[left];<br>    sArr[left] = sArr[right];<br>    sArr[right] = temp;<br><br>    ++left;<br>    --right;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> sArr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/img/images/2024/1708590733651-22bc6618-9c2a-4f4d-b6a9-a37acb224a25.png"></p><p><strong>耗时</strong>：17 min</p><h2 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h2><p>关键：使用语言特性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reverseWords = <span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) &#123;<br>    <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/\s+/</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h2><p>关键：双指针<br>思路：</p><ol><li>i、j 共同指向最后一位</li><li>i– 找到第一个空格，则 s[i - 1, j] 为一个单词，存放到 res 内；</li><li>i– 继续找到第一个非空格，然后将 j &#x3D; i，j 与 i 同位</li><li>重复 2</li><li>直到 i &lt; 0，结束循环</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>双指针吃天下~</p>]]></content>
    
    
    <categories>
      
      <category>每日算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>每日算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5、反转字符串中的元音字母</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/5%E3%80%81%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/5%E3%80%81%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D/</url>
    
    <content type="html"><![CDATA[<p><strong>原题</strong>：<a href="https://leetcode.cn/problems/reverse-vowels-of-a-string/description/?envType=study-plan-v2&envId=leetcode-75">力扣《反转字符串中的元音字母》</a><br><strong>难度</strong>：<strong>简单</strong></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个字符串 s ，仅反转字符串中的所有元音字母，并返回结果字符串。<br>元音字母包括 ‘a’、’e’、’i’、’o’、’u’，且可能以大小写两种形式出现不止一次。</p><p>示例 1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：s = <span class="hljs-string">&quot;hello&quot;</span><br>输出：<span class="hljs-string">&quot;holle&quot;</span><br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：s = <span class="hljs-string">&quot;leetcode&quot;</span><br>输出：<span class="hljs-string">&quot;leotcede&quot;</span><br></code></pre></td></tr></table></figure><p>提示：</p><ul><li>1 &lt;&#x3D; s.length &lt;&#x3D; 3 * 105</li><li>s 由 可打印的 ASCII 字符组成</li></ul><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h2><p>关键：双指针</p><ol><li>元音字母为 ‘a’、’e’、’i’、’o’、’u’</li><li>反转元音字母，指的是在字符串内，从左往右的第一个元音与从右往左的第一个元音进行互换</li><li>所以需要两个指针，分别左右开始循环，某一个遇到了元音，则等另一个遇到元音，都遇到后就互换，然后分别继续循环</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> isYuanYin = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">const</span> yuanyin = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;u&quot;</span>];<br>  <span class="hljs-keyword">return</span> yuanyin.<span class="hljs-title function_">includes</span>(s.<span class="hljs-title function_">toLowerCase</span>());<br>&#125;;<br><span class="hljs-keyword">var</span> reverseVowels = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> right = s.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br><br>  s = s.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 转为数组，方便位置调换</span><br><br>  <span class="hljs-comment">// 当左侧小于右侧时，说明还未循环完</span><br>  <span class="hljs-comment">// 当左侧大于右侧时，说明已经循环完</span><br>  <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-comment">// 左侧的是否为元音</span><br>    <span class="hljs-keyword">const</span> leftYY = <span class="hljs-title function_">isYuanYin</span>(s[left]);<br><br>    <span class="hljs-comment">// 右侧的是否为元音</span><br>    <span class="hljs-keyword">const</span> rightYY = <span class="hljs-title function_">isYuanYin</span>(s[right]);<br><br>    <span class="hljs-keyword">if</span> (leftYY &amp;&amp; rightYY) &#123;<br>      <span class="hljs-comment">// 当左右都是元音时，进行互换</span><br>      <span class="hljs-keyword">const</span> temp = s[left];<br>      s[left] = s[right];<br>      s[right] = temp;<br><br>      <span class="hljs-comment">// 互换完成后，进行位移</span><br>      left++;<br>      right--;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 左侧不为元音时，向右位移一位</span><br>      <span class="hljs-keyword">if</span> (!leftYY) left++;<br><br>      <span class="hljs-comment">// 右侧不为元音时，向左位移一位</span><br>      <span class="hljs-keyword">if</span> (!rightYY) right--;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时，消耗内存<br>76 ms，56.68 MB</p><p><strong>耗时</strong>：20 min</p><h2 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h2><p>关键：双指针<br>思路：跟我的一样，不赘述</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第一次是知道了解决算法的名称，在知道了“双指针”后，细节也就慢慢写出来了</p>]]></content>
    
    
    <categories>
      
      <category>每日算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>每日算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4、种花问题</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/4%E3%80%81%E7%A7%8D%E8%8A%B1%E9%97%AE%E9%A2%98/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/4%E3%80%81%E7%A7%8D%E8%8A%B1%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><strong>原题</strong>：<a href="https://leetcode.cn/problems/can-place-flowers/description/?envType=study-plan-v2&envId=leetcode-75">力扣《种花问题》</a><br><strong>难度</strong>：<strong>简单</strong></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。<br>给你一个整数数组 flowerbed 表示花坛，由若干 0 和 1 组成，其中 0 表示没种植花，1 表示种植了花。另有一个数 n ，能否在不打破种植规则的情况下种入 n 朵花？能则返回 true ，不能则返回 false 。</p><p>示例 1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：flowerbed = [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], n = <span class="hljs-number">1</span><br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：flowerbed = [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], n = <span class="hljs-number">2</span><br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>提示：</p><ul><li>1 &lt;&#x3D; flowerbed.length &lt;&#x3D; 2 * 104</li><li>flowerbed[i] 为 0 或 1</li><li>flowerbed 中不存在相邻的两朵花</li><li>0 &lt;&#x3D; n &lt;&#x3D; flowerbed.length</li></ul><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h2><p>关键：小算法 + 硬解的</p><ol><li>规则：花不能相邻，则两个花之间 0 的数量 &gt;&#x3D; 1</li><li>要求：能否再种 n 朵花，那就是将现有的 0，按规则转为 1 后，看 n 是否还剩有，有剩的则不能种，否则能种</li><li>现有的 0 能否转为 1 呢？将它转为 1 后，判断前后是否都为 0，是则可转</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">flowerbed</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">n</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> canPlaceFlowers = <span class="hljs-keyword">function</span> (<span class="hljs-params">flowerbed, n</span>) &#123;<br>  <span class="hljs-keyword">if</span> (flowerbed.<span class="hljs-property">length</span> &lt; <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">if</span> (flowerbed.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 处理 []</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flowerbed[<span class="hljs-number">0</span>] === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 处理 [0]</span><br>  &#125;<br><br>  <span class="hljs-comment">// 种下一朵花</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">placeFlower</span> = (<span class="hljs-params">index</span>) =&gt; &#123;<br>    flowerbed[index] = <span class="hljs-number">1</span>;<br>    n--;<br>  &#125;;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>, len = flowerbed.<span class="hljs-property">length</span>; index &lt; len; index++) &#123;<br>    <span class="hljs-keyword">const</span> element = flowerbed[index];<br><br>    <span class="hljs-keyword">if</span> (element === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// element === 0 表明当前位置为空</span><br><br>      <span class="hljs-keyword">if</span> (index === <span class="hljs-number">0</span> &amp;&amp; flowerbed[index + <span class="hljs-number">1</span>] === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 处理第一列，只需判断右边是否为 0，即可以种下一朵花</span><br>        <span class="hljs-title function_">placeFlower</span>(index);<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (flowerbed[index - <span class="hljs-number">1</span>] === <span class="hljs-number">0</span> &amp;&amp; flowerbed[index + <span class="hljs-number">1</span>] === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 则可以转为 1，即能种下一朵花</span><br>        <span class="hljs-title function_">placeFlower</span>(index);<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (index === len - <span class="hljs-number">1</span> &amp;&amp; flowerbed[index - <span class="hljs-number">1</span>] === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 处理最后列，只需判断左边是否为 0，即可以种下一朵花</span><br>        <span class="hljs-title function_">placeFlower</span>(index);<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> n &lt;= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时，消耗内存<br>61 ms，51.21 MB</p><p><strong>耗时</strong>：23 min</p><h2 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h2><p>关键：贪心<br>思路：非常复杂，我看不懂</p><h2 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h2><p>关键：跳格子<br>思路：</p><ol><li>当 f[index] 为 1 时，则表明当前已种花，那 index+1 必为 0，且不能种花，因此跳两格 index+2 重新判断</li><li>当 f[index] 为 0 时，则表明当前未种花，由于第一步遇 1 跳两格，则 index-1 必为 0，那只需要判断 index+1 是否为 1，若不为 1 则能种花并跳两格 index+2，若为 1 则不能种并跳三格 index+3 重新判断</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> canPlaceFlowers = <span class="hljs-keyword">function</span> (<span class="hljs-params">flowerbed, n</span>) &#123;<br>  <span class="hljs-keyword">if</span> (flowerbed.<span class="hljs-property">length</span> &lt; <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">if</span> (flowerbed.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 处理 []</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flowerbed[<span class="hljs-number">0</span>] === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> n &lt;= <span class="hljs-number">1</span>; <span class="hljs-comment">// 处理 [0]</span><br>  &#125;<br>  <span class="hljs-keyword">let</span> start = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">while</span> (start &lt; flowerbed.<span class="hljs-property">length</span> &amp;&amp; n &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">if</span> (flowerbed[start] === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 当前没种花</span><br>      <span class="hljs-keyword">if</span> (flowerbed[start + <span class="hljs-number">1</span>] === <span class="hljs-number">0</span> || start == flowerbed.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 当前位置为空，且右边也为空，可以种花</span><br>        n--;<br>        start += <span class="hljs-number">2</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 当前位置为空，且右边不为空，不可以种花</span><br>        start += <span class="hljs-number">3</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 当前已种花</span><br>      start += <span class="hljs-number">2</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> n &lt;= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时，消耗内存<br>67 ms，51.28 MB</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次没具体的算法名称，所以靠自己找规律。</p>]]></content>
    
    
    <categories>
      
      <category>每日算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>每日算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3、拥有最多糖果的孩子</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/3%E3%80%81%E6%8B%A5%E6%9C%89%E6%9C%80%E5%A4%9A%E7%B3%96%E6%9E%9C%E7%9A%84%E5%AD%A9%E5%AD%90/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/3%E3%80%81%E6%8B%A5%E6%9C%89%E6%9C%80%E5%A4%9A%E7%B3%96%E6%9E%9C%E7%9A%84%E5%AD%A9%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<p><strong>原题</strong>：<a href="https://leetcode.cn/problems/kids-with-the-greatest-number-of-candies/description/?envType=study-plan-v2&envId=leetcode-75">力扣《拥有最多糖果的孩子》</a><br><strong>难度</strong>：<strong>简单</strong></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个数组<code>candies</code>和一个整数<code>extraCandies</code> ，其中<code>candies[i]</code>代表第<code>i</code>个孩子拥有的糖果数目。<br>对每一个孩子，检查是否存在一种方案，将额外的 extraCandies 个糖果分配给孩子们之后，此孩子有<strong>最多</strong>的糖果。注意，允许有多个孩子同时拥有<strong>最多</strong>的糖果数目。</p><p>示例 1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：candies = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>], extraCandies = <span class="hljs-number">3</span><br>输出：[<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">true</span>]<br>解释：<br>孩子 <span class="hljs-number">1</span> 有 <span class="hljs-number">2</span> 个糖果，如果他得到所有额外的糖果（<span class="hljs-number">3</span>个），那么他总共有 <span class="hljs-number">5</span> 个糖果，他将成为拥有最多糖果的孩子。<br>孩子 <span class="hljs-number">2</span> 有 <span class="hljs-number">3</span> 个糖果，如果他得到至少 <span class="hljs-number">2</span> 个额外糖果，那么他将成为拥有最多糖果的孩子。<br>孩子 <span class="hljs-number">3</span> 有 <span class="hljs-number">5</span> 个糖果，他已经是拥有最多糖果的孩子。<br>孩子 <span class="hljs-number">4</span> 有 <span class="hljs-number">1</span> 个糖果，即使他得到所有额外的糖果，他也只有 <span class="hljs-number">4</span> 个糖果，无法成为拥有糖果最多的孩子。<br>孩子 <span class="hljs-number">5</span> 有 <span class="hljs-number">3</span> 个糖果，如果他得到至少 <span class="hljs-number">2</span> 个额外糖果，那么他将成为拥有最多糖果的孩子。<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：candies = [<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], extraCandies = <span class="hljs-number">1</span><br>输出：[<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>]<br>解释：只有 <span class="hljs-number">1</span> 个额外糖果，所以不管额外糖果给谁，只有孩子 <span class="hljs-number">1</span> 可以成为拥有糖果最多的孩子。<br></code></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：candies = [<span class="hljs-number">12</span>,<span class="hljs-number">1</span>,<span class="hljs-number">12</span>], extraCandies = <span class="hljs-number">10</span><br>输出：[<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">true</span>]<br></code></pre></td></tr></table></figure><p>提示：</p><ul><li>2 &lt;&#x3D; candies.length &lt;&#x3D; 100</li><li>1 &lt;&#x3D; candies[i] &lt;&#x3D; 100</li><li>1 &lt;&#x3D; extraCandies &lt;&#x3D; 50</li></ul><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h2><p>关键：硬解的</p><ol><li>满足的条件是：<code>candies[i] + extraCandies</code> &gt;&#x3D;<code>candies</code>里面最大的(max)</li><li>所以先找到最大的值 max，然后循环 candies，判断<code>candies[i] + extraCandies</code> &gt;&#x3D; <code>max</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">findMax</span> = (<span class="hljs-params">arr</span>) =&gt; &#123;<br>    <span class="hljs-comment">// 从大到小排序，第一个就为最大的</span><br>    <span class="hljs-keyword">const</span> sortArr = [].<span class="hljs-title function_">concat</span>(arr).<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b - a);<br>    <span class="hljs-keyword">return</span> sortArr[<span class="hljs-number">0</span>];<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">candies</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">extraCandies</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">boolean[]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> kidsWithCandies = <span class="hljs-keyword">function</span> (<span class="hljs-params">candies, extraCandies</span>) &#123;<br>    <span class="hljs-keyword">const</span> max = <span class="hljs-title function_">findMax</span>(candies);<br>    <span class="hljs-keyword">return</span> candies.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> c + extraCandies &gt;= max);<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时，消耗内存<br>58 ms，50.2 MB</p><p><strong>耗时</strong>：53 min，耗时点：思路是正确的，但细节出问题了，sort 后原数组被打乱了，一直没找到问题。</p><h2 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h2><p>关键：解法和我的一致</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一定先要思考下，用“算法”的逻辑理一下，然后再使用代码去实现“算法”<br>不要一进来就拿技术方法去硬解</p>]]></content>
    
    
    <categories>
      
      <category>每日算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>每日算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2、字符串的最大公因子</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/2%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E5%AD%90/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/2%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<p><strong>原题</strong>：<a href="https://leetcode.cn/problems/greatest-common-divisor-of-strings/description/?envType=study-plan-v2&envId=leetcode-75">力扣《字符串的最大公因子》</a><br><strong>难度</strong>：简单<br><strong>题目</strong>：对于字符串 s 和 t，只有在 s &#x3D; t + t + t + … + t + t（t 自身连接 1 次或多次）时，我们才认定 “t 能除尽 s”。<br>给定两个字符串 str1 和 str2，返回 最长字符串 x，要求满足 x 能除尽 str1 且 x 能除尽 str2 。</p><p>示例 1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：str1 = <span class="hljs-string">&quot;ABCABC&quot;</span>, str2 = <span class="hljs-string">&quot;ABC&quot;</span><br>输出：<span class="hljs-string">&quot;ABC&quot;</span><br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：str1 = <span class="hljs-string">&quot;ABABAB&quot;</span>, str2 = <span class="hljs-string">&quot;ABAB&quot;</span><br>输出：<span class="hljs-string">&quot;AB&quot;</span><br></code></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：str1 = <span class="hljs-string">&quot;LEET&quot;</span>, str2 = <span class="hljs-string">&quot;CODE&quot;</span><br>输出：<span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>提示：</p><ul><li>1 &lt;&#x3D; str1.length, str2.length &lt;&#x3D; 1000</li><li>str1 和 str2 由大写英文字母组成</li></ul><p><strong>解题</strong>：JS<br><strong>个人</strong>：硬解</p><ol><li>除尽指的是 str &#x3D; n * x &#x3D;&gt; str &#x2F; x &#x3D; n(整数)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">str1</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">str2</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> gcdOfStrings = <span class="hljs-keyword">function</span> (<span class="hljs-params">str1, str2</span>) &#123;<br>    <span class="hljs-keyword">let</span> base = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (i &lt; str1.<span class="hljs-property">length</span> || i &lt; str2.<span class="hljs-property">length</span>) &#123;<br>        base += str1.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, i)<br>        <span class="hljs-keyword">if</span> (str1.<span class="hljs-title function_">split</span>(base).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>) || str2.<span class="hljs-title function_">split</span>(base).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)) &#123;<br>            i++<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> base<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>没解出来</strong><br><strong>解题耗时</strong>：16 min</p><p><strong>官方</strong>：最大公约数、辗轧相除法<br>约数：相除后余数为零，就可以称为约数，4 % 2 &#x3D; 0，则 2 是 4 的约数<br>思路 1：</p><ol><li>这个思路是没问题的：除尽指的是 str &#x3D; n * x &#x3D;&gt; str &#x2F; x &#x3D; n(整数)，那表明存在某个字符串 x</li><li>那一定存在这个逻辑：str1.length % x.length &#x3D;&#x3D;&#x3D; str2.length % x.length &#x3D;&#x3D;&#x3D; 0</li><li>并且为了取得最大公约数，就需要从最长的开始循环往下找</li><li>题目简化为：求 4、6 的最大公约数，x 从 6 开始递减，若 4、6 都除尽 x，则找到 x 了</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 判断字符串 str 是否除尽字符串 x</span><br><span class="hljs-keyword">var</span> checkString = <span class="hljs-keyword">function</span> (<span class="hljs-params">x, str</span>) &#123;<br>    <span class="hljs-comment">// 通过 JS 的 replaceAll 来判断</span><br>    <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">replaceAll</span>(x, <span class="hljs-string">&quot;&quot;</span>) === <span class="hljs-string">&quot;&quot;</span>;<br>&#125;;<br><br><span class="hljs-keyword">var</span> gcdOfStrings = <span class="hljs-keyword">function</span> (<span class="hljs-params">str1, str2</span>) &#123;<br>    <span class="hljs-keyword">const</span> len1 = str1.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">const</span> len2 = str2.<span class="hljs-property">length</span>;<br><br>    <span class="hljs-keyword">let</span> x = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">let</span> maxstr = len1 &gt; len2 ? str1 : str2;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> maxlen = maxstr.<span class="hljs-property">length</span>; maxlen &gt; <span class="hljs-number">0</span>; maxlen--) &#123;<br>        <span class="hljs-comment">// 判断长度是否除尽</span><br>        <span class="hljs-keyword">if</span> (len1 % maxlen === <span class="hljs-number">0</span> &amp;&amp; len2 % maxlen === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">const</span> _x = maxstr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, maxlen);<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_">checkString</span>(_x, str1) &amp;&amp; <span class="hljs-title function_">checkString</span>(_x, str2)) &#123;<br>                x = _x;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> x;<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时，消耗内存<br>64 ms，49.32 MB</p><p>思路 2：<code>str1 = n * x;str2 = m * x</code>可推导出<code>str1 + str2 = (n+m) * x = m * x + n * x = str2 + str1</code><br>所以重点来了，若存在最大公约数，那 str1 + str2 一定等于 str2 + str1<br>那最大公约数的字符串为<code>gcd(str1.length, str2.length)</code>的字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// gcd 求公约数的函数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">gcd</span> = (<span class="hljs-params">a, b</span>) =&gt; (b === <span class="hljs-number">0</span> ? a : <span class="hljs-title function_">gcd</span>(b, a % b))<br><br><span class="hljs-keyword">var</span> gcdOfStrings = <span class="hljs-keyword">function</span> (<span class="hljs-params">str1, str2</span>) &#123;<br>  <span class="hljs-keyword">if</span>(str1 + str2 !== str2 + str1) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">return</span> str1.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_">gcd</span>(str1.<span class="hljs-property">length</span>, str2.<span class="hljs-property">length</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时，消耗内存<br>50 ms，49.38 MB</p><p><strong>总结</strong>：还是那句话，做算法一定要去找到对应的解题名称，而不是从语言层面去硬解。刚开始看到公约数了，但没有公约数的算法知识，所以第一次硬解没做出来</p>]]></content>
    
    
    <categories>
      
      <category>每日算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>每日算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1、交替合并字符串</title>
    <link href="/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/1%E3%80%81%E4%BA%A4%E6%9B%BF%E5%90%88%E5%B9%B6%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/%E8%81%8C%E4%B8%9A%E4%B8%8A%E4%B8%80%E4%BA%8C%E4%BA%8B/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95/1%E3%80%81%E4%BA%A4%E6%9B%BF%E5%90%88%E5%B9%B6%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<p><strong>原题</strong>：<a href="https://leetcode.cn/problems/merge-strings-alternately/description/?envType=study-plan-v2&envId=leetcode-75">力扣《交替合并字符串》</a><br><strong>难度</strong>：简单<br><strong>题目</strong>：给你两个字符串 word1 和 word2 。请你从 word1 开始，通过交替添加字母来合并字符串。如果一个字符串比另一个字符串长，就将多出来的字母追加到合并后字符串的末尾。</p><p>返回 合并后的字符串 。</p><p>示例 1：</p><blockquote><p>输入：word1 &#x3D; “abc”, word2 &#x3D; “pqr”<br>输出：”apbqcr”<br>解释：字符串合并情况如下所示：<br>word1：  a   b   c<br>word2：    p   q   r<br>合并后：  a p b q c r</p></blockquote><p>示例 2：</p><blockquote><p>输入：word1 &#x3D; “ab”, word2 &#x3D; “pqrs”<br>输出：”apbqrs”<br>解释：注意，word2 比 word1 长，”rs” 需要追加到合并后字符串的末尾。<br>word1：  a   b<br>word2：    p   q   r   s<br>合并后：  a p b q   r   s</p></blockquote><p>示例 3：</p><blockquote><p>输入：word1 &#x3D; “abcd”, word2 &#x3D; “pq”<br>输出：”apbqcd”<br>解释：注意，word1 比 word2 长，”cd” 需要追加到合并后字符串的末尾。<br>word1：  a   b   c   d<br>word2：    p   q<br>合并后：  a p b q c   d</p></blockquote><p>提示：</p><ul><li>1 &lt;&#x3D; word1.length, word2.length &lt;&#x3D; 100</li><li>word1 和 word2 由小写英文字母组成</li></ul><p><strong>解题</strong>：JS<br><strong>个人</strong>：硬解</p><ol><li>先判断这两个字符串的长度，使用长度短的来循环</li><li>根据每次循环，先拿 word1 的单次值，再拿 word2 的单次值，组合一起</li><li>当循环结束后，将长度长的剩余字符串加到组合字符串最后面</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">word1</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">word2</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> mergeAlternately = <span class="hljs-keyword">function</span> (<span class="hljs-params">word1, word2</span>) &#123;<br>    <span class="hljs-keyword">const</span> len1 = word1.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">const</span> len2 = word2.<span class="hljs-property">length</span>;<br><br>    <span class="hljs-keyword">let</span> len = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(len1, len2);<br><br>    <span class="hljs-keyword">let</span> newWord = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        newWord += word1[i] + word2[i];<br>    &#125;<br><br>    newWord += word1.<span class="hljs-title function_">slice</span>(len) + word2.<span class="hljs-title function_">slice</span>(len);<br><br>    <span class="hljs-keyword">return</span> newWord;<br>&#125;;<br><br>执行用时，消耗内存<br><span class="hljs-number">66</span> ms，<span class="hljs-number">49.3</span> <span class="hljs-variable constant_">MB</span><br></code></pre></td></tr></table></figure><p><strong>耗时</strong>：12 min</p><p><strong>官方</strong>：双指针<br>使用两个指针，分别指向 word1、word2，当指针小于长度时，则进行字符串添加，直到都大于长度</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">word1</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">word2</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> mergeAlternately = <span class="hljs-keyword">function</span> (<span class="hljs-params">word1, word2</span>) &#123;<br>    <span class="hljs-keyword">const</span> len1 = word1.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">const</span> len2 = word2.<span class="hljs-property">length</span>;<br><br>    <span class="hljs-keyword">let</span> w1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> w2 = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">let</span> newWord = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">while</span>(w1 &lt; len1 || w2 &lt; len2) &#123;<br>        <span class="hljs-keyword">if</span>(w1 &lt; len1) &#123;<br>            newWord += word1[w1]<br>            w1++<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(w2 &lt; len2) &#123;<br>            newWord += word2[w2]<br>            w2++<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> newWord;<br>&#125;;<br><br>执行用时，消耗内存<br><span class="hljs-number">59</span> ms，<span class="hljs-number">49.4</span> <span class="hljs-variable constant_">MB</span><br></code></pre></td></tr></table></figure><p><strong>总结</strong>：做算法题，一定能找到对应的解法名称，如果只是硬解则只能变成死记硬背</p>]]></content>
    
    
    <categories>
      
      <category>每日算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职业上一二事</tag>
      
      <tag>算法学习</tag>
      
      <tag>每日算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
